/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accesscontrol/addUsersToAccessControlGroup": {
    /** Adds specified users to an access control group */
    post: operations["addUsersToAccessControlGroup"];
  };
  "/accesscontrol/assignAccessControlCredential": {
    /** Assign a currently unassigned credential to a user */
    post: operations["assignAccessControlCredential"];
  };
  "/accesscontrol/badgeTemplate/createBadgeTemplate": {
    /** Create a badge template */
    post: operations["createBadgeTemplate"];
  };
  "/accesscontrol/badgeTemplate/deleteBadgeTemplate": {
    /** Delete a badge template */
    post: operations["deleteBadgeTemplate"];
  };
  "/accesscontrol/badgeTemplate/deleteBadgeTemplateImage": {
    /** Deletes the stored image and metadata document. Prevented if any badge template refers to the image. */
    post: operations["deleteBadgeTemplateImage"];
  };
  "/accesscontrol/badgeTemplate/findBadgeTemplateImages": {
    /** Finds metadata for all images uploaded for use with badge template configuration */
    post: operations["findBadgeTemplateImages"];
  };
  "/accesscontrol/badgeTemplate/findBadgeTemplates": {
    /** Find badge templates in the org */
    post: operations["findBadgeTemplates"];
  };
  "/accesscontrol/badgeTemplate/getBadgeTemplate": {
    /** Retrieve a badge template */
    post: operations["getBadgeTemplate"];
  };
  "/accesscontrol/badgeTemplate/getBadgeTemplateImage": {
    /** Get the metadata for a specific badge template image */
    post: operations["getBadgeTemplateImage"];
  };
  "/accesscontrol/badgeTemplate/updateBadgeTemplate": {
    /** Update a badge template */
    post: operations["updateBadgeTemplate"];
  };
  "/accesscontrol/badgeTemplate/updateBadgeTemplateImage": {
    /** Update the metadata for a badge template image */
    post: operations["updateBadgeTemplateImage"];
  };
  "/accesscontrol/createAccessControlCredentialByHexValueAndType": {
    /** Create a credential based on a hex value and credential type. Useful if you see an unauthorized badge event, know its type and want to import it */
    post: operations["createAccessControlCredentialByHexValueAndType"];
  };
  "/accesscontrol/createAccessControlGroup": {
    /** Creates an access control group */
    post: operations["createAccessControlGroup"];
  };
  "/accesscontrol/createAccessGrant": {
    /** Create a location access grant */
    post: operations["createAccessGrant"];
  };
  "/accesscontrol/createAccessRevocation": {
    /** Create a location access revocation */
    post: operations["createAccessRevocation"];
  };
  "/accesscontrol/createAppleWalletPass": {
    /** Get credentials to generate Apple Wallet pass for user */
    post: operations["createAppleWalletPass"];
  };
  "/accesscontrol/createRhombusSecureCsnCredential": {
    /** Create a rhombus secure csn credential (Rhombus Badge) */
    post: operations["createRhombusSecureCsnCredential"];
  };
  "/accesscontrol/createStandardCsnCredential": {
    /** Create a standard csn credential (Third Party Badge) */
    post: operations["createStandardCsnCredential"];
  };
  "/accesscontrol/createWiegand64BitRawCredential": {
    /** Create a 64bit raw wiegand credential. Used when an explicit endpoint for the wiegand format is not otherwise defined. */
    post: operations["createWiegand64BitRawCredential"];
  };
  "/accesscontrol/createWiegandCredential": {
    /** Create a wiegand credential */
    post: operations["createWiegandCredential"];
  };
  "/accesscontrol/createWiegandD10202Credential": {
    /** Create a D10202 wiegand credential */
    post: operations["createWiegandD10202Credential"];
  };
  "/accesscontrol/createWiegandH10301Credential": {
    /** Create a H10301 wiegand credential */
    post: operations["createWiegandH10301Credential"];
  };
  "/accesscontrol/createWiegandH10304Credential": {
    /** Create a H10304 wiegand credential */
    post: operations["createWiegandH10304Credential"];
  };
  "/accesscontrol/deleteAccessControlCredential": {
    /** Delete an access control credential. It is recommended to revoke a credential rather than delete it to preserve credential history */
    post: operations["deleteAccessControlCredential"];
  };
  "/accesscontrol/deleteAccessControlGroup": {
    /** Delete an access control group */
    post: operations["deleteAccessControlGroup"];
  };
  "/accesscontrol/deleteLocationAccessGrant": {
    /** Deletes a location access grant */
    post: operations["deleteLocationAccessGrant"];
  };
  "/accesscontrol/deleteLocationAccessRevocation": {
    /** Deletes a location access revocation */
    post: operations["deleteLocationAccessRevocation"];
  };
  "/accesscontrol/deleteUnassignedAccessControlCredential": {
    /** Delete an unassigned access control credential. The credential must be unassigned (revoked) before this method can be called. History of the credential is maintained but it will no longer be returned as an unassigned credential. */
    post: operations["deleteUnassignedAccessControlCredential"];
  };
  "/accesscontrol/doorScheduleException/createExceptionV2": {
    /** Create a door schedule exception */
    post: operations["createExceptionV2"];
  };
  "/accesscontrol/doorScheduleException/deleteExceptionV2": {
    /** Delete door schedule exception */
    post: operations["deleteExceptionV2"];
  };
  "/accesscontrol/doorScheduleException/findExceptionsForDoor": {
    /** Find door schedule exceptions for a specific door */
    post: operations["findExceptionsForDoor"];
  };
  "/accesscontrol/doorScheduleException/findExceptionsForLocationV2": {
    /** Find door schedule exceptions for a specific location */
    post: operations["findExceptionsForLocationV2"];
  };
  "/accesscontrol/doorScheduleException/findExceptionsV2": {
    /** Find door schedule exceptions */
    post: operations["findExceptionsV2"];
  };
  "/accesscontrol/doorScheduleException/getExceptionV2": {
    /** Get a door schedule exception */
    post: operations["getExceptionV2"];
  };
  "/accesscontrol/doorScheduleException/updateExceptionV2": {
    /** Update door schedule exception */
    post: operations["updateExceptionV2"];
  };
  "/accesscontrol/findAccessControlCredentialByOrg": {
    /** Find all access control credentials in the org */
    post: operations["findAccessControlCredentialByOrg"];
  };
  "/accesscontrol/findAccessControlCredentialByUser": {
    /** Find all access control credentials for the specified user */
    post: operations["findAccessControlCredentialByUser"];
  };
  "/accesscontrol/findAccessControlCredentialByUsers": {
    /** Find all access control credentials for the specified users */
    post: operations["findAccessControlCredentialByUsers"];
  };
  "/accesscontrol/findAccessControlGroupByExactName": {
    /** Retrieve the access control group with the specified name */
    post: operations["findAccessControlGroupByExactName"];
  };
  "/accesscontrol/findAccessControlGroupMembershipsByUser": {
    /** Find all access control group memberships by user */
    post: operations["findAccessControlGroupMembershipsByUser"];
  };
  "/accesscontrol/findAccessControlGroupMembershipsForCurrentUser": {
    /** Find all access control group memberships for the current Rhombus Key user */
    post: operations["findAccessControlGroupMembershipsForCurrentUser"];
  };
  "/accesscontrol/findAccessControlGroupsByNamePrefix": {
    /** Retrieve all access control groups with a name starting with the specified prefix */
    post: operations["findAccessControlGroupsByNamePrefix"];
  };
  "/accesscontrol/findAccessControlGroupsByOrg": {
    /** Retrieve all access control groups defined in the org */
    post: operations["findAccessControlGroupsByOrg"];
  };
  "/accesscontrol/findAccessControlGroupsByUserMembership": {
    /** Find all access control groups a user belongs to */
    post: operations["findAccessControlGroupsByUserMembership"];
  };
  "/accesscontrol/findAllUsersForAccessControlGroup": {
    /** Find all users belonging to an access control group */
    post: operations["findAllUsersForAccessControlGroup"];
  };
  "/accesscontrol/findCredentialHistory": {
    /** Retrieves all credential history belonging to an org */
    post: operations["findCredentialHistory"];
  };
  "/accesscontrol/findCredentialHistoryByCredentialHexValue": {
    /** Retrieves all credentials that have owned the credential hex value. Expect at most 1 valid/active credential and the rest are revoked */
    post: operations["findCredentialHistoryByCredentialHexValue"];
  };
  "/accesscontrol/findCredentialHistoryByCredentialValue": {
    /** Retrieves all credentials that have owned the credential value. */
    post: operations["findCredentialHistoryByCredentialValue"];
  };
  "/accesscontrol/findCredentialHistoryByUser": {
    /** Retrieves all credentials both current and revoked that were at some point assigned to the specified user */
    post: operations["findCredentialHistoryByUser"];
  };
  "/accesscontrol/findLocationAccessGrantsByAccessControlledDoor": {
    /** Finds location access grants by the specified access controlled door */
    post: operations["findLocationAccessGrantsByAccessControlledDoor"];
  };
  "/accesscontrol/findLocationAccessGrantsByDoorLabel": {
    /** Finds location access grants by the specified door label */
    post: operations["findLocationAccessGrantsByDoorLabel"];
  };
  "/accesscontrol/findLocationAccessGrantsByGroup": {
    /** Finds location access grants by the specified group */
    post: operations["findLocationAccessGrantsByGroup"];
  };
  "/accesscontrol/findLocationAccessGrantsByLocation": {
    /** Finds location access grants by the specified location */
    post: operations["findLocationAccessGrantsByLocation"];
  };
  "/accesscontrol/findLocationAccessGrantsByLocationAndUser": {
    /** Finds location access grants by the specified location and user */
    post: operations["findLocationAccessGrantsByLocationAndUser"];
  };
  "/accesscontrol/findLocationAccessGrantsByOrg": {
    /** Finds all location access grants in the org */
    post: operations["findLocationAccessGrantsByOrg"];
  };
  "/accesscontrol/findLocationAccessGrantsByUser": {
    /** Finds location access grants by the specified user */
    post: operations["findLocationAccessGrantsByUser"];
  };
  "/accesscontrol/findLocationAccessRevocationsByAccessControlledDoor": {
    /** Finds location access revocations by the specified access controlled door */
    post: operations["findLocationAccessRevocationsByAccessControlledDoor"];
  };
  "/accesscontrol/findLocationAccessRevocationsByDoorLabel": {
    /** Finds location access revocation by the specified door label */
    post: operations["findLocationAccessRevocationsByDoorLabel"];
  };
  "/accesscontrol/findLocationAccessRevocationsByGroup": {
    /** Finds location access revocations by the specified group */
    post: operations["findLocationAccessRevocationsByGroup"];
  };
  "/accesscontrol/findLocationAccessRevocationsByOrg": {
    /** Finds all location access revocations in the org */
    post: operations["findLocationAccessRevocationsByOrg"];
  };
  "/accesscontrol/findLocationAccessRevocationsByUser": {
    /** Finds location access revocations by the specified user */
    post: operations["findLocationAccessRevocationsByUser"];
  };
  "/accesscontrol/findRhombusSecureMobileCredentialsForCurrentUser": {
    /** Find all rhombus secure mobile credentials for the current user */
    post: operations["findRhombusSecureMobileCredentialsForCurrentUser"];
  };
  "/accesscontrol/findUnlockableAccessControlledDoorsByDevice": {
    /** Retrieve basic details of unlockable access controlled doors for a device */
    post: operations["findUnlockableAccessControlledDoorsByDevice"];
  };
  "/accesscontrol/firstIn/applyDoorAuthFirstInGroupState": {
    /** Attempts to apply the specified first-in state to all doors belonging to the specified first-in settings */
    post: operations["applyDoorAuthFirstInGroupState"];
  };
  "/accesscontrol/firstIn/applyDoorAuthFirstInState": {
    /** Attempts to apply the specified first-in state to the specified door */
    post: operations["applyDoorAuthFirstInState"];
  };
  "/accesscontrol/firstIn/applyDoorScheduleFirstInGroupState": {
    /** Attempts to apply the specified first-in state to all doors belonging to the specified first-in settings */
    post: operations["applyDoorScheduleFirstInGroupState"];
  };
  "/accesscontrol/firstIn/applyDoorScheduleFirstInState": {
    /** Attempts to apply the specified first-in state to the specified door */
    post: operations["applyDoorScheduleFirstInState"];
  };
  "/accesscontrol/firstIn/createLocationFirstInSettings": {
    /** Create settings for first-in that can be shared across the specified doors within a location */
    post: operations["createLocationFirstInSettings"];
  };
  "/accesscontrol/firstIn/deleteLocationFirstInSettings": {
    /** Delete the specified first-in settings. Effectively removes first-in configuration from all doors that belong to the settings */
    post: operations["deleteLocationFirstInSettings"];
  };
  "/accesscontrol/firstIn/findLocationFirstInSettingsByLocation": {
    /** Paginated retrieval of all first-in settings in a location */
    post: operations["findLocationFirstInSettingsByLocation"];
  };
  "/accesscontrol/firstIn/findLocationFirstInSettingsByOrg": {
    /** Paginated retrieval of all first-in settings in an org */
    post: operations["findLocationFirstInSettingsByOrg"];
  };
  "/accesscontrol/firstIn/getLocationFirstInSettings": {
    /** Retrieve the specified first-in settings by its unique RUUID */
    post: operations["getLocationFirstInSettings"];
  };
  "/accesscontrol/firstIn/getLocationFirstInSettingsForDoor": {
    /** Retrieve the first-in settings that a door belongs to, if any */
    post: operations["getLocationFirstInSettingsForDoor"];
  };
  "/accesscontrol/firstIn/removeDoorLocationFirstInSettings": {
    /** Removes the specified door from the first-in settings if currently assigned to one. Also possible via the updateLocationFirstInSettings method but this method will leave other doorsbelonging assigned settings as-is rather than require the entire list. */
    post: operations["removeDoorLocationFirstInSettings"];
  };
  "/accesscontrol/firstIn/updateLocationFirstInSettings": {
    /** Update settings for first-in that can be shared across the specified doors within a location */
    post: operations["updateLocationFirstInSettings"];
  };
  "/accesscontrol/forceRefreshAccessControlUnitConfig": {
    /** Send a command to the access control unit so it refreshes its complete configuration */
    post: operations["forceRefreshAccessControlUnitConfig"];
  };
  "/accesscontrol/getLocationAccessGrant": {
    /** Retrieve a location access grant by id */
    post: operations["getLocationAccessGrant"];
  };
  "/accesscontrol/getLocationAccessRevocation": {
    /** Retrieve a location access revocation by id */
    post: operations["getLocationAccessRevocation"];
  };
  "/accesscontrol/getLocationsByAccessGrantForCurrentUser": {
    /** Get locations for which the current user is associated with 1 or more access grants */
    post: operations["getLocationsByAccessGrantForCurrentUser"];
  };
  "/accesscontrol/getMinimalAccessControlledDoorsByLocationForCurrentUser": {
    /** Get access controlled doors for the specified location for which the current user is associated with 1 or more access grants */
    post: operations["getMinimalAccessControlledDoorsByLocationForCurrentUser"];
  };
  "/accesscontrol/getRhombusKeyLocationLockdownDetailsForCurrentUser": {
    /** Get the current state of a location lockdown and messages that should be displayed */
    post: operations["getRhombusKeyLocationLockdownDetailsForCurrentUser"];
  };
  "/accesscontrol/getRhombusSecureCsnCredentialDetails": {
    /** Retrieves a rhombus secure csn credential including sensitive details */
    post: operations["getRhombusSecureCsnCredentialDetails"];
  };
  "/accesscontrol/getRhombusSecureMobileAppStateStatsForOrg": {
    /** Retrieves stats of Rhombus Key app usage for active credentials that describe whether settings are optimal for the best user experience */
    post: operations["getRhombusSecureMobileAppStateStatsForOrg"];
  };
  "/accesscontrol/getStandardCsnCredentialDetails": {
    /** Retrieves a standard csn credential including sensitive details */
    post: operations["getStandardCsnCredentialDetails"];
  };
  "/accesscontrol/lockdownPlan/activateLockdownForLocation": {
    /** Activate lockdown for the specified location */
    post: operations["activateLockdownForLocation"];
  };
  "/accesscontrol/lockdownPlan/activateLockdownForLocationViaRhombusKey": {
    /** Activate lockdown for the specified location from Rhombus Key */
    post: operations["activateLockdownForLocationViaRhombusKey"];
  };
  "/accesscontrol/lockdownPlan/createLocationLockdownPlan": {
    /** Create location lockdown plan */
    post: operations["createLocationLockdownPlan"];
  };
  "/accesscontrol/lockdownPlan/createLockdownRuleForLocation": {
    /** Create (or update if ruleUuid is provided) a lockdown rule for the specified location */
    post: operations["createLockdownRuleForLocation"];
  };
  "/accesscontrol/lockdownPlan/deactivateLockdownForLocation": {
    /** Deactivate lockdown for the specified location */
    post: operations["deactivateLockdownForLocation"];
  };
  "/accesscontrol/lockdownPlan/deactivateLockdownForLocationViaRhombusKey": {
    /** Deactivate lockdown for the specified location from Rhombus Key */
    post: operations["deactivateLockdownForLocationViaRhombusKey"];
  };
  "/accesscontrol/lockdownPlan/deleteLocationLockdownState": {
    /** Disables tracking lockdown state for the specified location */
    post: operations["deleteLocationLockdownState"];
  };
  "/accesscontrol/lockdownPlan/deleteLockdownPlan": {
    /** Delete lockdown plan */
    post: operations["deleteLockdownPlan"];
  };
  "/accesscontrol/lockdownPlan/deleteLockdownRuleForLocation": {
    /** Delete a lockdown rule for the specified location */
    post: operations["deleteLockdownRuleForLocation"];
  };
  "/accesscontrol/lockdownPlan/disableLockdownTestModeForLocation": {
    /** Disable test mode of lockdown for the specified location */
    post: operations["disableLockdownTestModeForLocation"];
  };
  "/accesscontrol/lockdownPlan/enableLockdownTestModeForLocation": {
    /** Enable test mode of lockdown for the specified location */
    post: operations["enableLockdownTestModeForLocation"];
  };
  "/accesscontrol/lockdownPlan/findLocationLockdownEvents": {
    /** Retrieve a list of lockdown events for the specified location */
    post: operations["findLocationLockdownEvents"];
  };
  "/accesscontrol/lockdownPlan/findLocationLockdownStates": {
    /** Finds the state of all lockdowns for the org */
    post: operations["findLocationLockdownStates"];
  };
  "/accesscontrol/lockdownPlan/findLockdownPlans": {
    /** Find lockdown plans in the org */
    post: operations["findLockdownPlans"];
  };
  "/accesscontrol/lockdownPlan/findLockdownPlansByLocation": {
    /** Find lockdown plans for the specified location */
    post: operations["findLockdownPlansByLocation"];
  };
  "/accesscontrol/lockdownPlan/getLockdownPlan": {
    /** Get lockdown plan */
    post: operations["getLockdownPlan"];
  };
  "/accesscontrol/lockdownPlan/getLockdownRulesForLocation": {
    /** Get lockdown activation / deactivation rules for a location */
    post: operations["getLockdownRulesForLocation"];
  };
  "/accesscontrol/lockdownPlan/getOrCreateLocationLockdownState": {
    /** Retrieves an existing lockdown state or creates one for the specified location */
    post: operations["getOrCreateLocationLockdownState"];
  };
  "/accesscontrol/lockdownPlan/updateLocationLockdownPlan": {
    /** Update location lockdown plan */
    post: operations["updateLocationLockdownPlan"];
  };
  "/accesscontrol/pin/bulkProvisionPinCredentials": {
    /** Bulk provision PIN credentials for multiple users. Creates PIN credentials for all specified users and returns the created credentials. */
    post: operations["bulkProvisionPinCredentials"];
  };
  "/accesscontrol/pin/bulkRotatePinCredentials": {
    /** Rotate multiple PIN credentials with new generated values. Generates new PIN codes for all specified credentials and returns the updated credentials. */
    post: operations["bulkRotatePinCredentials"];
  };
  "/accesscontrol/pin/createPinCredential": {
    /** Create a PIN credential for a user and returns the created credential with its details. */
    post: operations["createPinCredential"];
  };
  "/accesscontrol/pin/deletePinCredential": {
    /** Delete a PIN credential permanently from the system. */
    post: operations["deletePinCredential"];
  };
  "/accesscontrol/pin/findPinCredentialsByOrg": {
    /** Retrieves all PIN credentials in the organization, optionally filtered by the provided criteria. */
    post: operations["findPinCredentialsByOrg"];
  };
  "/accesscontrol/pin/getAvailablePinCode": {
    /** Get an unclaimed PIN code to create a PIN credential with. The PIN code will be generated with the specified length. */
    post: operations["getAccessControlAvailablePinCode"];
  };
  "/accesscontrol/pin/getPinCredentialDetails": {
    /** Retrieves a PIN credential including sensitive details such as the PIN code value. */
    post: operations["getPinCredentialDetails"];
  };
  "/accesscontrol/pin/revokePinCredential": {
    /** Revoke a PIN credential, making it inactive and unusable for access control. */
    post: operations["revokePinCredential"];
  };
  "/accesscontrol/pin/rotatePinCredential": {
    /** Rotate a PIN credential with a new value. Generates a new PIN code for the specified credential and returns the updated credential. */
    post: operations["rotatePinCredential"];
  };
  "/accesscontrol/pin/updatePinCredential": {
    /** Update a PIN credential with new start and end dates. Modifies the validity period of the specified PIN credential. */
    post: operations["updatePinCredential"];
  };
  "/accesscontrol/provisionMobileAccessControlCredentialForCurrentUser": {
    /** Creates a mobile access control credential. Store the private key securely, there is no other way to retrieve it other then generating a new cred. */
    post: operations["provisionMobileAccessControlCredentialForCurrentUser"];
  };
  "/accesscontrol/qr/generateQRAccessCode": {
    /** Generate a QR code to unlock a door remotely when viewed by a camera */
    post: operations["generateQRAccessCode"];
  };
  "/accesscontrol/qr/getQRAccessCodes": {
    /** Generate a QR code to unlock a door remotely when viewed by a camera */
    post: operations["getQRAccessCodes"];
  };
  "/accesscontrol/removeUsersFromAccessControlGroup": {
    /** Removes specified users from an access control group */
    post: operations["removeUsersFromAccessControlGroup"];
  };
  "/accesscontrol/revokeAccessControlCredential": {
    /** Revokes an access control credential. Unlike suspension this will give up its claim on the credential value allowing another cred to claim it as its identifier */
    post: operations["revokeAccessControlCredential"];
  };
  "/accesscontrol/revokeRhombusSecureMobileCredentialForCurrentUser": {
    /** Revoke user's rhombus secure mobile credential */
    post: operations["revokeRhombusSecureMobileCredentialForCurrentUser"];
  };
  "/accesscontrol/sendUserPresenceForCurrentUser": {
    /** Send user presence information for the current user */
    post: operations["sendUserPresenceForCurrentUser"];
  };
  "/accesscontrol/suspendAccessControlCredential": {
    /** Mark an access control credential as suspended */
    post: operations["suspendAccessControlCredential"];
  };
  "/accesscontrol/unlockAccessControlledDoor": {
    /** Unlock an access controlled door */
    post: operations["unlockAccessControlledDoor"];
  };
  "/accesscontrol/unlockAccessControlledDoorForCurrentUser": {
    /** Unlock an access controlled door using authorization of supplied user token */
    post: operations["unlockAccessControlledDoorForCurrentUser"];
  };
  "/accesscontrol/unsuspendAccessControlCredential": {
    /** Mark an access control credential as no longer suspended */
    post: operations["unsuspendAccessControlCredential"];
  };
  "/accesscontrol/updateAccessControlCredentialNote": {
    /** Update the note field of an Access Control Credential */
    post: operations["updateAccessControlCredentialNote"];
  };
  "/accesscontrol/updateAccessControlGroup": {
    /** Updates an access control group's meta information like name and description */
    post: operations["updateAccessControlGroup"];
  };
  "/accesscontrol/updateAccessGrant": {
    /** Updates a location access grant */
    post: operations["updateAccessGrant"];
  };
  "/accesscontrol/updateAccessRevocation": {
    /** Updates a location access revocation */
    post: operations["updateAccessRevocation"];
  };
  "/accesscontrol/updateRhombusKeyMobileAppStateForCurrentUser": {
    /** Rhombus Key can update the detected app state which includes settings that can effect certain features. */
    post: operations["updateRhombusKeyMobileAppStateForCurrentUser"];
  };
  "/accesscontrol/updateRhombusSecureCsnCredential": {
    /** Update a rhombus secure csn credential (Rhombus Badge) */
    post: operations["updateRhombusSecureCsnCredential"];
  };
  "/accesscontrol/updateRhombusSecureMobileCredential": {
    /** Update a rhombus secure mobile credential (RhombusKey App w/ BLE or NFC) */
    post: operations["updateRhombusSecureMobileCredential"];
  };
  "/accesscontrol/updateStandardCsnCredential": {
    /** Update a standard csn credential (Third Party Badge) */
    post: operations["updateStandardCsnCredential"];
  };
  "/accesscontrol/updateWiegandCredential": {
    /** Update a wiegand credential (Third Party Badge) */
    post: operations["updateWiegandCredential"];
  };
  "/alertmonitoring/acceptAlertMonitoringTermsOfService": {
    /** Accept the terms of service for alert monitoring. */
    post: operations["acceptAlertMonitoringTermsOfService"];
  };
  "/alertmonitoring/acceptAlertMonitoringTermsOfServiceForLocation": {
    /** Accept the terms of service for alert monitoring at a specific location. */
    post: operations["acceptAlertMonitoringTermsOfServiceForLocation"];
  };
  "/alertmonitoring/addPromptThreatQualification": {
    /** Create a new prompt threat qualification for the org. */
    post: operations["addPromptThreatQualification"];
  };
  "/alertmonitoring/cancelThreatCase": {
    /** Cancel a threat case in alert monitoring. */
    post: operations["cancelThreatCase"];
  };
  "/alertmonitoring/createAlertMonitoringSettings": {
    /** Create alert monitoring settings for a location. */
    post: operations["createAlertMonitoringSettings"];
  };
  "/alertmonitoring/createCustomPinForLocation": {
    /** Create a custom PIN for alert monitoring at a specific location. */
    post: operations["createCustomPinForLocation"];
  };
  "/alertmonitoring/createPinForLocation": {
    /** Create a PIN for alert monitoring at a specific location. */
    post: operations["createPinForLocation"];
  };
  "/alertmonitoring/deleteAlertMonitoringSettings": {
    /** Delete alert monitoring settings for a location. */
    post: operations["deleteAlertMonitoringSettings"];
  };
  "/alertmonitoring/deletePinForLocation": {
    /** Delete a PIN for alert monitoring at a specific location. */
    post: operations["deletePinForLocation"];
  };
  "/alertmonitoring/deletePromptThreatQualificationByTitle": {
    /** Delete a prompt threat qualification by title for the org. */
    post: operations["deletePromptThreatQualificationByTitle"];
  };
  "/alertmonitoring/disableMonitoringForLocation": {
    /** Disable alert monitoring for a specific location. */
    post: operations["disableMonitoringForLocation"];
  };
  "/alertmonitoring/dismissThreatCase": {
    /** Dismiss a threat case in alert monitoring. */
    post: operations["dismissThreatCase"];
  };
  "/alertmonitoring/enableMonitoringForLocation": {
    /** Enable alert monitoring for a specific location. */
    post: operations["enableMonitoringForLocation"];
  };
  "/alertmonitoring/escalateThreatCaseToAlarm": {
    /** Escalate a threat case to an alarm for alert monitoring. */
    post: operations["escalateThreatCaseToAlarm"];
  };
  "/alertmonitoring/generateMonthlyVerificationsForYearReportForLocation": {
    /** Generate monthly verifications for year report for alert monitoring at a specific location. */
    post: operations["generateMonthlyVerificationsForYearReportForLocation"];
  };
  "/alertmonitoring/generateReportDataForLocation": {
    /** Generate report data for alert monitoring at a specific location. */
    post: operations["generateReportDataForLocation"];
  };
  "/alertmonitoring/generateReportDataForLocationV2": {
    /** Generate report data for alert monitoring at a specific location. */
    post: operations["generateReportDataForLocationV2"];
  };
  "/alertmonitoring/getAlertMonitoringSettings": {
    /** Retrieve alert monitoring settings. */
    post: operations["getAlertMonitoringSettings"];
  };
  "/alertmonitoring/getAlertMonitoringSettingsForLocation": {
    /** Retrieve alert monitoring settings by location. */
    post: operations["getAlertMonitoringSettingsForLocation"];
  };
  "/alertmonitoring/getMonitoredDoorSensorsForLocation": {
    /** Retrieve monitored door sensors by location based on the current active monitoring mode. */
    post: operations["getMonitoredDoorSensorsForLocation"];
  };
  "/alertmonitoring/getPromptThreatQualifications": {
    /** Retrieve the prompt threat qualification list for a the org. */
    post: operations["getPromptThreatQualifications"];
  };
  "/alertmonitoring/getTripwireGroupCount": {
    /** Get the count of tripwire groups for alert monitoring. */
    post: operations["getAlertMonitoringTripwireGroupCount"];
  };
  "/alertmonitoring/locationStatus": {
    /** Retrieve summary of the alarm monitoring status for the specified location */
    post: operations["locationStatus"];
  };
  "/alertmonitoring/orgStatus": {
    /** Retrieve summary of the alarm monitoring status for all locations */
    post: operations["orgStatus"];
  };
  "/alertmonitoring/pin/bulkProvisionPins": {
    /** Bulk provision alert monitoring PINs for multiple users. */
    post: operations["bulkProvisionPins"];
  };
  "/alertmonitoring/pin/bulkRotatePins": {
    /** Rotate multiple alert monitoring PINs. */
    post: operations["bulkRotatePins"];
  };
  "/alertmonitoring/pin/createPin": {
    /** Create a PIN for alert monitoring. */
    post: operations["createPin"];
  };
  "/alertmonitoring/pin/deletePin": {
    /** Delete an alert monitoring PIN. */
    post: operations["deletePin"];
  };
  "/alertmonitoring/pin/findPinsByLocationAndUser": {
    /** Retrieve alert monitoring PINs by location and/or user. */
    post: operations["findPinsByLocationAndUser"];
  };
  "/alertmonitoring/pin/findPinsByOrg": {
    /** Retrieve alert monitoring PINs by org. */
    post: operations["findPinsByOrg"];
  };
  "/alertmonitoring/pin/getAvailablePinCode": {
    /** Get an unclaimed PIN code to create an alert monitoring PIN with. */
    post: operations["getAlertMonitoringAvailablePinCode"];
  };
  "/alertmonitoring/pin/getPin": {
    /** Retrieve an alert monitoring PIN. */
    post: operations["getPin"];
  };
  "/alertmonitoring/pin/rotatePin": {
    /** Rotate an alert monitoring PIN. */
    post: operations["rotatePin"];
  };
  "/alertmonitoring/pin/updatePin": {
    /** Update an alert monitoring PIN. */
    post: operations["updatePin"];
  };
  "/alertmonitoring/resetTripwireGroupCount": {
    /** Reset the count of tripwire groups for alert monitoring. */
    post: operations["resetAlertMonitoringTripwireGroupCount"];
  };
  "/alertmonitoring/updateAlertMonitoringSettings": {
    /** Update alert monitoring settings for a location. */
    post: operations["updateAlertMonitoringSettings"];
  };
  "/audiogateway/delete": {
    /** Remove an audio gateway from organization */
    post: operations["deleteAudioGateway"];
  };
  "/audiogateway/getAudioSeekpoints": {
    /** Get audio seek points */
    post: operations["getAudioSeekpoints"];
  };
  "/audiogateway/getConfig": {
    /** Get an audio gateway config */
    post: operations["getAudioGatewayConfig"];
  };
  "/audiogateway/getFullAudioGatewayState": {
    /** Get detailed information about state of specified audio gateway */
    post: operations["getFullAudioGatewayState"];
  };
  "/audiogateway/getMediaUris": {
    /** Get media uris for audio gateway to retrieve footage */
    post: operations["getAudioGatewayMediaUris"];
  };
  "/audiogateway/getMinimalAudioGatewayStateList": {
    /** Get basic state information for all audio gateways */
    post: operations["getMinimalAudioGatewayStateList"];
  };
  "/audiogateway/getOfflineLanStreamingInfo": {
    /** Get required information for offline lan streaming on all audio gateways */
    post: operations["getAudioGatewayOfflineLanStreamingInfo"];
  };
  "/audiogateway/getPresenceWindows": {
    /** Get stored video information for an audio gateway */
    post: operations["getAudioGatewayPresenceWindows"];
  };
  "/audiogateway/getUptimeWindows": {
    /** Get uptime information for an audio gateway */
    post: operations["getAudioGatewayUptimeWindows"];
  };
  "/audiogateway/reboot": {
    /** Reboot the specified audio gateway */
    post: operations["rebootAudioGateway"];
  };
  "/audiogateway/updateConfig": {
    /** Update config for audio gateway */
    post: operations["updateAudioGatewayConfig"];
  };
  "/audiogateway/updateDetails": {
    /** Update details for audio gateway. Note: uuid is a required field */
    post: operations["updateAudioGatewayDetails"];
  };
  "/audioplayback/cancelLoopingAudioPlayback": {
    /** Cancel any currently playing looping audio for an audio device */
    post: operations["cancelLoopingAudioPlayback"];
  };
  "/audioplayback/deleteAudioUploadMetadata": {
    /** Delete an uploaded audio clip metadata */
    post: operations["deleteAudioUploadMetadata"];
  };
  "/audioplayback/getAudioUploadMetadataForOrg": {
    /** Get list of uploaded audio clip metadata */
    post: operations["getAudioUploadMetadataForOrg"];
  };
  "/audioplayback/playAudioUpload": {
    /** Play an uploaded audio clip through an audio device */
    post: operations["playAudioUpload"];
  };
  "/audioplayback/updateAudioUploadMetadata": {
    /** Update an uploaded audio clip metadata */
    post: operations["updateAudioUploadMetadata"];
  };
  "/audioplayback/uploadAudioPcm/{audioClipName}": {
    /** Upload PCM audio clip */
    post: operations["uploadAudioPcm"];
  };
  "/audioplayback/uploadAudioText": {
    /** Upload text to synthesize audio */
    post: operations["uploadAudioText"];
  };
  "/badgereader/delete": {
    /** Remove the badge reader from the organization */
    post: operations["deleteBadgeReader"];
  };
  "/badgereader/getConfig": {
    /** Get a badge reader's config */
    post: operations["getBadgeReaderConfig"];
  };
  "/badgereader/getFullState": {
    /** Get detailed information about state of specified badge reader */
    post: operations["getBadgeReaderFullState"];
  };
  "/badgereader/getMinimalStateList": {
    /** Get basic state information about all badge readers in organization */
    post: operations["getBadgeReaderMinimalStateList"];
  };
  "/badgereader/reboot": {
    /** Reboot the specified badge reader */
    post: operations["rebootBadgeReader"];
  };
  "/badgereader/updateConfig": {
    /** Update a badge reader's config */
    post: operations["updateBadgeReaderConfig"];
  };
  "/badgereader/updateDetails": {
    /** Update hardware details of badge reader. */
    post: operations["updateBadgeReaderDetails"];
  };
  "/ble/getBaseStations": {
    /** Retrieve list of available base stations for BLE sensors */
    post: operations["getBaseStations"];
  };
  "/ble/getSecureSecretForRegistered": {
    /** Get secure secret for registered sensor */
    post: operations["getSecureSecretForRegistered"];
  };
  "/ble/getSecureSecretForUnregistered": {
    /** Get secure secret to register an unregistered sensor */
    post: operations["getSecureSecretForUnregistered"];
  };
  "/ble/getSecureSecretOfRegisteredDeviceForRhombusKey": {
    /** Equivalent to getSecureSecretForRegistered but for RhombusKey mobile app */
    post: operations["getSecureSecretOfRegisteredDeviceForRhombusKey"];
  };
  "/ble/getSensorHardwareFirmwareUpdateDetails": {
    /** Get latest firmware update details for all sensor */
    post: operations["getSensorHardwareFirmwareUpdateDetails"];
  };
  "/ble/registerSensor": {
    /** Register a sensor to an organization */
    post: operations["registerSensor"];
  };
  "/ble/unregisterSensor": {
    /** Unregister a sensor from account */
    post: operations["unregisterSensor"];
  };
  "/button/createRuleForButton": {
    /** Create rule for a button sensor. */
    post: operations["createRuleForButton"];
  };
  "/button/deleteRuleForButton": {
    /** Delete rule for a button sensor. */
    post: operations["deleteRuleForButton"];
  };
  "/button/getButtonPressEventsForSensor": {
    /** Get list of button press events for button sensor */
    post: operations["getButtonPressEventsForSensor"];
  };
  "/button/getButtonRulesForOrg": {
    /** Get rules for all buttons in an org. */
    post: operations["getButtonRulesForOrg"];
  };
  "/button/getMinimalButtonStateList": {
    /** Get basic state information for all button sensors */
    post: operations["getMinimalButtonStateList"];
  };
  "/button/getRulesForButton": {
    /** Get all rules for a button sensor. */
    post: operations["getRulesForButton"];
  };
  "/button/updateConfig": {
    /** Update config for a button sensor. */
    post: operations["updateButtonConfig"];
  };
  "/button/updateDetails": {
    /** Update details for a button sensor. */
    post: operations["updateButtonDetails"];
  };
  "/camera/calibrateFloorplanProjection": {
    /** Generate the homography to project detections onto a floorplan. */
    post: operations["cameraCalibrateFloorplanProjection"];
  };
  "/camera/createCustomFootageSeekpoints": {
    /** Create custom activity seekpoints for a specified camera */
    post: operations["createCustomFootageSeekpoints"];
  };
  "/camera/createFootageBoundingBoxes": {
    /** Create an activity bounding box for specified camera */
    post: operations["createFootageBoundingBoxes"];
  };
  "/camera/createProtectedSharedLiveVideoStream": {
    /** Share a password protected live video stream for a camera */
    post: operations["createProtectedSharedLiveVideoStream"];
  };
  "/camera/createProtectedSharedVideoWall": {
    /** Share a password protected video wall */
    post: operations["createProtectedSharedVideoWall"];
  };
  "/camera/createRawHttpStream": {
    /** Create a raw HTTP stream for a camera */
    post: operations["createCameraRawHttpStream"];
  };
  "/camera/createSharedLiveVideoStream": {
    /** Share an unprotected live video stream for a camera */
    post: operations["createCameraSharedLiveVideoStream"];
  };
  "/camera/createSharedVideoWall": {
    /** Share an unprotected video wall */
    post: operations["createSharedVideoWall"];
  };
  "/camera/createVideoWall": {
    /** Create a video wall for user */
    post: operations["createVideoWall"];
  };
  "/camera/delete": {
    /** Remove a camera from organization */
    post: operations["deleteCamera"];
  };
  "/camera/deleteCustomFootageSeekpoints": {
    /** Delete custom seekpoints for specified cameras */
    post: operations["deleteCustomFootageSeekpoints"];
  };
  "/camera/deleteRawHttpStream": {
    /** Delete a raw HTTP stream for a camera */
    post: operations["deleteCameraRawHttpStream"];
  };
  "/camera/deleteSharedLiveVideoStream": {
    /** Remove a shared live stream from camera */
    post: operations["deleteSharedLiveVideoStream"];
  };
  "/camera/deleteSharedVideoWall": {
    /** Remove a shared video wall */
    post: operations["deleteSharedVideoWall"];
  };
  "/camera/deleteVideoWall": {
    /** Delete a video wall */
    post: operations["deleteVideoWall"];
  };
  "/camera/erase": {
    /** Wipes the SD card on a camera */
    post: operations["eraseCamera"];
  };
  "/camera/findAllRawHttpStreams": {
    /** Get a list of all cameras raw HTTP streams */
    post: operations["findAllCameraRawHttpStreams"];
  };
  "/camera/findAllSharedLiveVideoStreams": {
    /** Get list of all shared live streams */
    post: operations["findAllSharedLiveVideoStreams"];
  };
  "/camera/findSharedLiveVideoStreams": {
    /** Get list of all shared live streams for camera */
    post: operations["findCameraSharedLiveVideoStreams"];
  };
  "/camera/findSharedVideoWalls": {
    /** Get list of all shares for a video wall */
    post: operations["findSharedVideoWalls"];
  };
  "/camera/generateBatchRegistrationInfo": {
    /** Create camera registration information for QR code generation */
    post: operations["generateBatchRegistrationInfo"];
  };
  "/camera/generateWifiChangeAuthorizationToken": {
    /** Create a change wifi request for QR code generation */
    post: operations["generateWifiChangeAuthorizationToken"];
  };
  "/camera/getBatchRegistrationUsage": {
    /** Get detailed usage information for a registration token */
    post: operations["getBatchRegistrationUsage"];
  };
  "/camera/getCameraAIThresholds": {
    /** Get AI normalized confidence thresholds for a camera */
    post: operations["getCameraAIThresholds"];
  };
  "/camera/getCloudArchivedMediaInfo": {
    /** Get information on archived video for specified camera */
    post: operations["getCloudArchivedMediaInfo"];
  };
  "/camera/getCloudArchivingConfig": {
    /** Get the cloud archiving scheduling config applicable to a camera */
    post: operations["getCloudArchivingConfig"];
  };
  "/camera/getConfig": {
    /** Get a camera's config */
    post: operations["getCameraConfig"];
  };
  "/camera/getCurrentState": {
    /** Use /getFullCameraState instead */
    post: operations["getCurrentCameraState"];
  };
  "/camera/getCustomFootageSeekpointsV2": {
    /** Get activity seekpoints for specified camera */
    post: operations["getCustomFootageSeekpointsV2"];
  };
  "/camera/getDetails": {
    /** Get hardware details of multiple cameras */
    post: operations["getCameraDetails"];
  };
  "/camera/getFacetedConfig": {
    /** Get a camera's config */
    post: operations["getCameraFacetedConfig"];
  };
  "/camera/getFootageBoundingBoxes": {
    /** Get object bounding boxes for a specified camera. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
    post: operations["getCameraFootageBoundingBoxes"];
  };
  "/camera/getFootageBoundingBoxesForMultiple": {
    /** Get object bounding boxes for multiple cameras. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
    post: operations["getFootageBoundingBoxesForMultiple"];
  };
  "/camera/getFootageSeekpoints": {
    /** Use /getFootageSeekpointsV2 instead */
    post: operations["getCameraFootageSeekpoints"];
  };
  "/camera/getFootageSeekpointsForMultiple": {
    /** Get activity seekpoints for multiple cameras */
    post: operations["getFootageSeekpointsForMultiple"];
  };
  "/camera/getFootageSeekpointsV2": {
    /** Get activity seekpoints for specified camera */
    post: operations["getCameraFootageSeekpointsV2"];
  };
  "/camera/getFullCameraState": {
    /** Get detailed information about state of specified camera */
    post: operations["getFullCameraState"];
  };
  "/camera/getLineCrossingEnabledCamerasForLocation": {
    /** Gets all the cameras that have line-crossing feature enabled at a location */
    post: operations["getLineCrossingEnabledCamerasForLocation"];
  };
  "/camera/getMediaUris": {
    /** Get media uris for camera to retrieve footage */
    post: operations["getCameraMediaUris"];
  };
  "/camera/getMinimalCameraLocationMap": {
    /** Get basic information about all cameras and their locations in organization */
    post: operations["getMinimalCameraLocationMap"];
  };
  "/camera/getMinimalCameraStateList": {
    /** Get basic state information about all cameras in organization */
    post: operations["getMinimalCameraStateList"];
  };
  "/camera/getMinimalList": {
    /** Use /getMinimalCameraStateList instead */
    post: operations["getCameraMinimalList"];
  };
  "/camera/getOccupancyEnabledCameras": {
    /** Gets all the cameras that have a occupancy polygon defined */
    post: operations["getOccupancyEnabledCameras"];
  };
  "/camera/getOfflineLanStreamingInfo": {
    /** Get required information for offline lan streaming on all cameras */
    post: operations["getCameraOfflineLanStreamingInfo"];
  };
  "/camera/getPresenceWindows": {
    /** Get stored video information for camera */
    post: operations["getCameraPresenceWindows"];
  };
  "/camera/getRawHttpStreams": {
    /** Get info for all raw HTTP streams from a camera */
    post: operations["getCameraRawHttpStreams"];
  };
  "/camera/getStorageRecoveryFile": {
    /** Get a file that contains information required to recover the media from the SD card of a damaged camera */
    post: operations["getStorageRecoveryFile"];
  };
  "/camera/getUptimeWindows": {
    /** Get uptime information for camera */
    post: operations["getUptimeWindows"];
  };
  "/camera/getVideoWalls": {
    /** Get list of video walls available for client */
    post: operations["getVideoWalls"];
  };
  "/camera/reboot": {
    /** Send reboot command to camera */
    post: operations["rebootCamera"];
  };
  "/camera/revertToDefaults": {
    post: operations["revertToDefaults"];
  };
  "/camera/updateCameraAIThresholds": {
    /** Update AI confidence thresholds for a camera */
    post: operations["updateCameraAIThresholds"];
  };
  "/camera/updateCameraHumanLoiteringConfig": {
    /** Updates the human loitering feature for a camera. */
    post: operations["updateCameraHumanLoiteringConfig"];
  };
  "/camera/updateCameraLineCrossingThresholds": {
    /** Updates the line-crossing feature for a camera. Accepts two points which define a line that determines the threshold for which INGRESS and EGRESS events will be generated. Consider the top-left corner of a camera's image to be the origin (0,0). */
    post: operations["updateCameraLineCrossingThresholds"];
  };
  "/camera/updateConfig": {
    /** Update a camera's config */
    post: operations["updateCameraConfig"];
  };
  "/camera/updateDetails": {
    /** Update hardware details of camera */
    post: operations["updateCameraDetails"];
  };
  "/camera/updateDetailsBulkV2": {
    /** Update hardware details of multiple cameras in bulk */
    post: operations["updateDetailsBulkV2"];
  };
  "/camera/updateDetailsV2": {
    /** Update hardware details of camera. */
    post: operations["updateCameraDetailsV2"];
  };
  "/camera/updateFacetedConfig": {
    /** Update a camera's config */
    post: operations["updateCameraFacetedConfig"];
  };
  "/camera/updateFirmware": {
    /** Send command to update firmware to camera */
    post: operations["updateFirmware"];
  };
  "/camera/updateVideoWalls": {
    /** Update a video wall */
    post: operations["updateVideoWalls"];
  };
  "/camera/updateWifi": {
    /** Send a command to update wifi on specified connected cameras */
    post: operations["updateCameraWifi"];
  };
  "/chatbot/automation/createAutomatedPrompt": {
    /**
     * Creates settings for managing an automated job with Rhombus MIND. Only users with access to the
     * associated role can update these settings.
     */
    post: operations["createAutomatedPrompt"];
  };
  "/chatbot/automation/deleteAutomatedPrompt": {
    /**
     * Deletes the settings for an automated job by its UUID. This also deletes all responses generated
     * by the job. Only users with access to the associated role can delete these settings.
     */
    post: operations["deleteAutomatedPrompt"];
  };
  "/chatbot/automation/getAutomatedPrompt": {
    /** Retrieves settings for an automated job by its UUID. */
    post: operations["getAutomatedPrompt"];
  };
  "/chatbot/automation/getAutomatedPromptChatHistory": {
    /**
     * Retrieves all responses generated by an automated job. Each response is stored for 90 days before
     * being erased. Only users with access to the job’s associated role, or those who were explicitly
     * granted permission when the response was generated, may view these responses.
     */
    post: operations["getAutomatedPromptChatHistory"];
  };
  "/chatbot/automation/getAutomatedPromptsForOrg": {
    /** Retrieves settings for all automated jobs for the current org. */
    post: operations["getAutomatedPromptsForOrg"];
  };
  "/chatbot/automation/submitTestPrompt": {
    /**
     * Sends a prompt to Rhombus MIND. This is only used for testing a prompt. No additional
     * context is used when processing this prompt. The response generated by Rhombus MIND expires
     * after an hour.
     */
    post: operations["submitTestPrompt"];
  };
  "/chatbot/automation/updateAutomatedPrompt": {
    /**
     * Updates the settings for an automated job. Only users with access to the associated role can
     * update these settings. If updating the associated role, the user must have access to both the
     * current role and the new role.
     */
    post: operations["updateAutomatedPrompt"];
  };
  "/chatbot/automation/verifyJobScheduled": {
    /**
     * Verifies whether an automated job is scheduled to trigger. If no scheduled event is found, a new
     * one is created. Returns information about when the next scheduled event will trigger.
     */
    post: operations["verifyJobScheduled"];
  };
  "/chatbot/deleteChatRecord": {
    /** Deletes a chat record. */
    post: operations["deleteChatRecord"];
  };
  "/chatbot/deleteChatbotConversation": {
    /** Deletes a conversation and its entire chat history. */
    post: operations["deleteChatbotConversation"];
  };
  "/chatbot/getChatHistory": {
    /**
     * Retrieves a user's full chat history across all of their conversations. Chat records can be filtered
     * by parameters such as timestamp and response type.
     */
    post: operations["getChatHistory"];
  };
  "/chatbot/getChatHistoryByContextId": {
    /**
     * Retrieves chat history by context ID. A context ID can be retrieved from a conversation and refers
     * to a unique set of chat history that is seeded to Rhombus MIND before it answers a new query.
     */
    post: operations["getChatHistoryByContextId"];
  };
  "/chatbot/getChatRecord": {
    /** Retrieves a chat record. */
    post: operations["getChatRecord"];
  };
  "/chatbot/getChatbotConversations": {
    /**
     * Retrieves the list of conversations the user has initiated with Rhombus MIND. Conversations are
     * stored for 90 days then it and its specific chat history are erased. A conversation is a unique
     * set of chat history with Rhombus MIND. When submitting a new chat for a conversation its entire
     * chat history is used to initialize the LLM before answer the new query.
     */
    post: operations["getChatbotConversations"];
  };
  "/chatbot/getSharedChatRecords": {
    /**
     * Retrieves all chat records shared with the current user. Chat records can be filtered by parameters
     * such as timestamp and response type.
     */
    post: operations["getSharedChatRecords"];
  };
  "/chatbot/submitChat": {
    /**
     * Submits a query to Rhombus MIND. When submitting a query the context ID plays an important role in
     * helping seed Rhombus MIND with the previous chat history to answer the query in the context of the
     * perceived conversation. You do not need to create a conversation, submitting a new context ID will
     * cause a new conversation to be created.
     */
    post: operations["submitChat"];
  };
  "/chatbot/updateChatRecord": {
    /** Selectively updates a chat record. */
    post: operations["updateChatRecord"];
  };
  "/chatbot/updateChatbotConversation": {
    /**
     * Updates fields of a conversation by presence. Meaning if the field is omitted it will not be updated.
     * Currently the only field that can be updated is the conversation name. The contextId field is required.
     */
    post: operations["updateChatbotConversation"];
  };
  "/climate/deleteEnvironmentalGateway": {
    /** Remove an environmental gateway from the org */
    post: operations["deleteEnvironmentalGateway"];
  };
  "/climate/getClimateEventsForSensor": {
    /** Get list of climate events for environmental sensor */
    post: operations["getClimateEventsForSensor"];
  };
  "/climate/getClimateEventsForTags": {
    /** Get list of climate events for environmental sensor */
    post: operations["getClimateEventsForTags"];
  };
  "/climate/getClimatePresenceWindows": {
    /** Get stored video information for sensor */
    post: operations["getClimatePresenceWindows"];
  };
  "/climate/getConfig": {
    /** Get the config for a climate sensor */
    post: operations["getConfig"];
  };
  "/climate/getEnvironmentalGatewayShadows": {
    /** Get list of shadows of all environmental gateways of an org */
    post: operations["getEnvironmentalGatewayShadows"];
  };
  "/climate/getEventsForEnvironmentalGateway": {
    /** Get list of events for environmental gateway */
    post: operations["getEventsForEnvironmentalGateway"];
  };
  "/climate/getMinimalClimateStateList": {
    /** Get basic state information of all environmental sensors */
    post: operations["getMinimalClimateStateList"];
  };
  "/climate/getMinimalEnvironmentalGatewayStates": {
    /** Get list of basic states of all environmental gateways of an org */
    post: operations["getMinimalEnvironmentalGatewayStates"];
  };
  "/climate/getMinimalStateEventsForEnvironmentalGateway": {
    /** Get list of events for environmental gateways in minimal state */
    post: operations["getMinimalStateEventsForEnvironmentalGateway"];
  };
  "/climate/reboot": {
    /** Send reboot command to environmental gateway */
    post: operations["rebootEnvironmentalGateway"];
  };
  "/climate/updateDetails": {
    /** Update details for environmental sensor. Note: uuid is a required field */
    post: operations["updateClimateSensorDetails"];
  };
  "/climate/updateEnvironmentalGatewayDetails": {
    /** Update details for environmental gateway. Note: uuid is a required field */
    post: operations["updateEnvironmentalGatewayDetails"];
  };
  "/component/addAccessControlledDoorLabel": {
    /** Create a label that can be assigned to an access controlled door and referenced by an access grant or access revocation */
    post: operations["addAccessControlledDoorLabel"];
  };
  "/component/applyAccessControlledDoorStateOverride": {
    /** Attempts to apply a door state override to an access controlled door that ignores the regular door schedule and door schedule exceptions. */
    post: operations["applyAccessControlledDoorStateOverride"];
  };
  "/component/cancelAccessControlledDoorStateOverride": {
    /** Attempts to cancel the door state override, if one has been applied, to an access controlled door. */
    post: operations["cancelAccessControlledDoorStateOverride"];
  };
  "/component/createAccessControlledDoor": {
    /** Create an access controlled door */
    post: operations["createAccessControlledDoor"];
  };
  "/component/createAccessControlledDoorSeekpoints": {
    /** Create custom activity seekpoints for a specified access controlled door */
    post: operations["createAccessControlledDoorSeekpoints"];
  };
  "/component/createIntegratedDoorPositionIndicator": {
    /** Create a door position indicator component */
    post: operations["createIntegratedDoorPositionIndicator"];
  };
  "/component/createIntegratedDoorRelay": {
    /** Create a door relay component */
    post: operations["createIntegratedDoorRelay"];
  };
  "/component/createIntegratedGenericButton": {
    /** Create a generic button component */
    post: operations["createIntegratedGenericButton"];
  };
  "/component/createIntegratedGenericInput": {
    /** Create a generic input component */
    post: operations["createIntegratedGenericInput"];
  };
  "/component/createIntegratedGenericRelay": {
    /** Create a generic relay component */
    post: operations["createIntegratedGenericRelay"];
  };
  "/component/createIntegratedRequestToExit": {
    /** Create a request to exit component */
    post: operations["createIntegratedRequestToExit"];
  };
  "/component/createOsdpDoorReader": {
    /** Create a third party OSDP Reader component */
    post: operations["createOsdpDoorReader"];
  };
  "/component/createRhombusOsdpDoorReader": {
    /** Create a Rhombus OSDP Reader component */
    post: operations["createRhombusOsdpDoorReader"];
  };
  "/component/createWiegandReader": {
    /** Create a third party Wiegand Reader component */
    post: operations["createWiegandReader"];
  };
  "/component/deleteAccessControlledDoor": {
    /** Delete the specified access controlled door */
    post: operations["deleteAccessControlledDoor"];
  };
  "/component/deleteComponent": {
    /** Delete a component */
    post: operations["deleteComponent"];
  };
  "/component/deleteComponentsByOwnerDevice": {
    /** Delete all components owned by the specified device */
    post: operations["deleteComponentsByOwnerDevice"];
  };
  "/component/findAccessControlledDoorShadows": {
    /** Find access controlled door shadows within the org */
    post: operations["findAccessControlledDoorShadows"];
  };
  "/component/findAccessControlledDoorShadowsByLocation": {
    /** Find access controlled door shadows within the specified location */
    post: operations["findAccessControlledDoorShadowsByLocation"];
  };
  "/component/findAccessControlledDoors": {
    /** Find access controlled doors within the org */
    post: operations["findAccessControlledDoors"];
  };
  "/component/findAccessControlledDoorsByLocation": {
    /** Find access controlled doors within the specified location */
    post: operations["findAccessControlledDoorsByLocation"];
  };
  "/component/findAccessControlledDoorsByOwnerDevice": {
    /** Find access controlled doors for the specified owner device */
    post: operations["findAccessControlledDoorsByOwnerDevice"];
  };
  "/component/findAllComponentShadows": {
    /** Retrieve all component shadows for the specified component uuids */
    post: operations["findAllComponentShadows"];
  };
  "/component/findComponentEventsByAccessControlledDoor": {
    /** Retrieve all component events relevant to the specified AccessControlledDoor */
    post: operations["findComponentEventsByAccessControlledDoor"];
  };
  "/component/findComponentEventsByApiToken": {
    /** Retrieve all component events relevant to the specified api token */
    post: operations["findComponentEventsByApiToken"];
  };
  "/component/findComponentEventsByComponent": {
    /** Retrieve all component events relevant to the specified component */
    post: operations["findComponentEventsByComponent"];
  };
  "/component/findComponentEventsByCorrelation": {
    /** Retrieve all component events relevant to the specified correlation id */
    post: operations["findComponentEventsByCorrelation"];
  };
  "/component/findComponentEventsByCredentialHexValue": {
    /** Retrieve all component events relevant to the specified credential hex value */
    post: operations["findComponentEventsByCredentialHexValue"];
  };
  "/component/findComponentEventsByCredentialUuid": {
    /** Retrieve all component events relevant to the specified credential uuid */
    post: operations["findComponentEventsByCredentialUuid"];
  };
  "/component/findComponentEventsByCredentialValue": {
    /** Retrieve all component events relevant to the specified credential value */
    post: operations["findComponentEventsByCredentialValue"];
  };
  "/component/findComponentEventsByLocation": {
    /** Retrieve all component events relevant to the specified location */
    post: operations["findComponentEventsByLocation"];
  };
  "/component/findComponentEventsByOwnerDevice": {
    /** Retrieve all component events relevant to the specified owner device (i.e. DC20's device uuid) */
    post: operations["findComponentEventsByOwnerDevice"];
  };
  "/component/findComponentEventsBySupportAuthority": {
    /** Retrieve all component events relevant to the specified api token */
    post: operations["findComponentEventsBySupportAuthority"];
  };
  "/component/findComponentEventsByUser": {
    /** Retrieve all component events relevant to the specified User */
    post: operations["findComponentEventsByUser"];
  };
  "/component/findComponentEventsForCurrentUser": {
    /** Retrieve all component events relevant to the rhombus key user */
    post: operations["findComponentEventsForCurrentUser"];
  };
  "/component/findComponentEventsForOrgDashboard": {
    /** Retrieve component events across the entire org for the Dashboard. */
    post: operations["findComponentEventsForOrgDashboard"];
  };
  "/component/findComponentEventsForVideoIntercom": {
    /** Retrieve all component events relevant to the specified Video Intercom and optional AccessControlledDoor */
    post: operations["findComponentEventsForVideoIntercom"];
  };
  "/component/findComponentSeekPointsByAccessControlledDoor": {
    /** Find component seekpoints by access controlled door */
    post: operations["findComponentSeekPointsByAccessControlledDoor"];
  };
  "/component/findComponentSeekPointsByAccessControlledDoors": {
    /** Find component seekpoints by access controlled doors */
    post: operations["findComponentSeekPointsByAccessControlledDoors"];
  };
  "/component/findComponentSeekPointsByComponent": {
    /** Find component seekpoints by component */
    post: operations["findComponentSeekPointsByComponent"];
  };
  "/component/findComponentSeekPointsByLocation": {
    /** Find component seekpoints by location */
    post: operations["findComponentSeekPointsByLocation"];
  };
  "/component/findComponentSeekPointsByOwnerDevice": {
    /** Find component seekpoints by owner device */
    post: operations["findComponentSeekPointsByOwnerDevice"];
  };
  "/component/findComponentSeekPointsByUser": {
    /** Find component seekpoints by user */
    post: operations["findComponentSeekPointsByUser"];
  };
  "/component/findComponentShadowsByOwnerDevice": {
    /** Retrieve component shadows by the specified owner device uuid */
    post: operations["findComponentShadowsByOwnerDevice"];
  };
  "/component/findComponentsByOwnerDevice": {
    /** Retrieve a list of components owned by a Rhombus device (i.e. DC20's device uuid) */
    post: operations["findComponentsByOwnerDevice"];
  };
  "/component/findDistinctByOriginatorCredentialReceivedEventsByAccessControlledDoor": {
    /** Retrieve a list of credential received events by access controlled door with distinct originators. Can be used for a list of distinct users that have entered a door within the queried timeframe */
    post: operations["findDistinctByOriginatorCredentialReceivedEventsByAccessControlledDoor"];
  };
  "/component/findDistinctByOriginatorCredentialReceivedEventsByLocation": {
    /** Retrieve a list of credential received events by location with distinct originators. Can be used for a list of distinct users that have entered a location within the queried timeframe */
    post: operations["findDistinctByOriginatorCredentialReceivedEventsByLocation"];
  };
  "/component/findMinimalStateAccessControlledDoors": {
    /** Find minimal state access controlled doors within the org */
    post: operations["findMinimalStateAccessControlledDoors"];
  };
  "/component/findMinimalStateAccessControlledDoorsByLocation": {
    /** Find minimal state access controlled doors within the specified location */
    post: operations["findMinimalStateAccessControlledDoorsByLocation"];
  };
  "/component/getAccessControlledDoorLabelsForOrg": {
    /** Get all access controlled door labels for the organization */
    post: operations["getAccessControlledDoorLabelsForOrg"];
  };
  "/component/getCurrentExpectedAccessControlledDoorState": {
    /** Attempts to determine what the current door state is expected to be based on the current door configuration and current time. */
    post: operations["getCurrentExpectedAccessControlledDoorState"];
  };
  "/component/getFullAccessControlledDoorShadow": {
    /** Retrieve the door shadow and all of its component shadows */
    post: operations["getFullAccessControlledDoorShadow"];
  };
  "/component/getOrCreateDevicePhysicalPortConfig": {
    /** Gets a physical port layout for the specified device, components owned by that device and details about the port configuration validity. Map is instantiated if it doesn't currently exist as part of the call. */
    post: operations["getOrCreateDevicePhysicalPortConfig"];
  };
  "/component/removeAccessControlledDoorLabel": {
    /** Remove a label to an access controlled door */
    post: operations["removeAccessControlledDoorLabel"];
  };
  "/component/updateAccessControlledDoor": {
    /** Updates an access controlled door */
    post: operations["updateAccessControlledDoor"];
  };
  "/component/updateIntegratedDoorPositionIndicator": {
    /** Update a door position indicator component */
    post: operations["updateIntegratedDoorPositionIndicator"];
  };
  "/component/updateIntegratedDoorRelay": {
    /** Update a door relay component */
    post: operations["updateIntegratedDoorRelay"];
  };
  "/component/updateIntegratedGenericButton": {
    /** Update a generic button component */
    post: operations["updateIntegratedGenericButton"];
  };
  "/component/updateIntegratedGenericInput": {
    /** Update a generic input component */
    post: operations["updateIntegratedGenericInput"];
  };
  "/component/updateIntegratedGenericRelay": {
    /** Update a generic relay component */
    post: operations["updateIntegratedGenericRelay"];
  };
  "/component/updateIntegratedGenericRelaySteadyState": {
    /** Update a generic relay component's steady state */
    post: operations["updateIntegratedGenericRelaySteadyState"];
  };
  "/component/updateIntegratedGenericRelayTransientState": {
    /** Activate a generic relay for a brief period */
    post: operations["updateIntegratedGenericRelayTransientState"];
  };
  "/component/updateIntegratedRequestToExit": {
    /** Update a request to exit component */
    post: operations["updateIntegratedRequestToExit"];
  };
  "/component/updateOsdpDoorReader": {
    /** Update a third party OSDP Reader component */
    post: operations["updateOsdpDoorReader"];
  };
  "/component/updateRhombusOsdpDoorReader": {
    /** Update a Rhombus OSDP Reader component */
    post: operations["updateRhombusOsdpDoorReader"];
  };
  "/component/updateWiegandDoorReader": {
    /** Update a third party Wiegand Reader component */
    post: operations["updateWiegandDoorReader"];
  };
  "/customer/acceptUsagePolicy": {
    /** Accepts the usage policy for the current user. */
    post: operations["acceptUsagePolicy"];
  };
  "/customer/deleteAllNotificationSnoozeSettings": {
    /** Delete a policy pause setting for a device */
    post: operations["deleteAllNotificationSnoozeSettings"];
  };
  "/customer/deleteNotificationSnoozeSettingForComponentComposite": {
    /** Delete a policy pause setting for a component composite */
    post: operations["deleteNotificationSnoozeSettingForComponentComposite"];
  };
  "/customer/deleteNotificationSnoozeSettingForDevice": {
    /** Delete a policy pause setting for a device */
    post: operations["deleteNotificationSnoozeSettingForDevice"];
  };
  "/customer/deleteNotificationSnoozeSettingForLocation": {
    /** Delete a policy pause setting for a location */
    post: operations["deleteNotificationSnoozeSettingForLocation"];
  };
  "/customer/getCurrentPartnerUser": {
    /** Retrieves detailed information about the current authenticated partner user. */
    post: operations["getCurrentPartnerUser"];
  };
  "/customer/getCurrentRhombusKeyUser": {
    /** Retrieve the RhombusKey User config, user details and org summary details for the current rhombus key user. */
    post: operations["getCurrentRhombusKeyUser"];
  };
  "/customer/getCurrentUser": {
    /** Retrieves detailed information about the current authenticated user. */
    post: operations["getCurrentUser"];
  };
  "/customer/getCurrentUserConsoleOrgsForContextSwitch": {
    /** Retrieves the list of organizations that the current user can context switch into for the Console application. */
    post: operations["getCurrentUserConsoleOrgsForContextSwitch"];
  };
  "/customer/getCurrentUserRhombusKeyOrgsForContextSwitch": {
    /** Retrieves the list of organizations that the current user can context switch into for the Rhombus Key application. */
    post: operations["getCurrentUserRhombusKeyOrgsForContextSwitch"];
  };
  "/customer/getCurrentUserSessions": {
    /** Retrieves the list of active sessions for the current user. */
    post: operations["getCurrentUserSessions"];
  };
  "/customer/getDashboardStatus": {
    /** Retrieves dashboard status and information for the current user. */
    post: operations["getDashboardStatus"];
  };
  "/customer/getRhombusKeyConfigForCurrentUser": {
    /** Retrieve the RhombusKey mobile app config for a user. If it does not exist a default one is created and returned. */
    post: operations["getRhombusKeyConfigForCurrentUser"];
  };
  "/customer/getUserSnoozedNotificationSettings": {
    /** Get the current and planned user notification snooze details */
    post: operations["getUserSnoozedNotificationSettings"];
  };
  "/customer/logoutAllOtherCurrentUserSessions": {
    /** Logs out all other active sessions for the current user, keeping only the current session active. */
    post: operations["logoutAllOtherCurrentUserSessions"];
  };
  "/customer/setFlag": {
    /** Stores a flag or setting for the current user. */
    post: operations["setCustomerFlag"];
  };
  "/customer/snoozeAllNotifications": {
    /** Snoozes all user notifications for the current user. */
    post: operations["snoozeAllUserNotifications"];
  };
  "/customer/snoozeComponentCompositeNotifications": {
    /** Snoozes user notifications for a specific component composite. */
    post: operations["snoozeUserNotificationsForComponentComposite"];
  };
  "/customer/snoozeDeviceNotifications": {
    /** Snoozes user notifications for a specific device. */
    post: operations["snoozeUserNotificationsForDevice"];
  };
  "/customer/snoozeLocationNotifications": {
    /** Snoozes user notifications for a specific location. */
    post: operations["snoozeUserNotificationsForLocation"];
  };
  "/customer/updateCurrentPartnerUser": {
    /** Updates the details and information for the current authenticated partner user. */
    post: operations["updateCurrentPartnerUser"];
  };
  "/customer/updateCurrentUser": {
    /** Updates the details and information for the current authenticated user. */
    post: operations["updateCurrentUser"];
  };
  "/customer/updateCurrentUserNotificationSettings": {
    /** Update notification settings for user */
    post: operations["updateCurrentUserNotificationSettings"];
  };
  "/customer/updateDashboardCustomizations": {
    /** Updates the dashboard customization settings for the current user. */
    post: operations["updateDashboardCustomizations"];
  };
  "/customer/updateFrontendCustomizations": {
    /** Updates the frontend customization settings for the current user. */
    post: operations["updateFrontendCustomizations"];
  };
  "/customer/updateRhombusKeyPreferencesForCurrentUser": {
    /** Update the RhombusKey mobile app preferences for the current user */
    post: operations["updateRhombusKeyPreferencesForCurrentUser"];
  };
  "/developer/createEventListener": {
    /** Create an event listener */
    post: operations["createEventListener"];
  };
  "/developer/deleteEventListener": {
    /** Delete an event listener */
    post: operations["deleteEventListener"];
  };
  "/developer/getAllEventListeners": {
    /** Get a list of all event listeners */
    post: operations["getAllEventListeners"];
  };
  "/developer/getEventListenersForDevice": {
    /** Get a list of event listeners for a device */
    post: operations["getEventListenersForDevice"];
  };
  "/deviceconfig/getFacetedConfig": {
    /** Get a device's config */
    post: operations["getFacetedConfig"];
  };
  "/deviceconfig/updateFacetedConfig": {
    /** Update a device's config */
    post: operations["updateFacetedConfig"];
  };
  "/door/getDoorEventsForSensor": {
    /** Get list of door open/close events for door sensor */
    post: operations["getDoorEventsForSensor"];
  };
  "/door/getDoorEventsForTags": {
    /** Get list of door open/close events for door sensor */
    post: operations["getDoorEventsForTags"];
  };
  "/door/getDoorPresenceWindows": {
    /** Get stored video information for sensor */
    post: operations["getDoorPresenceWindows"];
  };
  "/door/getMinimalDoorStateList": {
    /** Get basic state information for all door sensors */
    post: operations["getMinimalDoorStateList"];
  };
  "/door/updateDetails": {
    /** Update details for door sensor. Note: uuid is a required field */
    post: operations["updateDoorSensorDetails"];
  };
  "/doorbellcamera/calibrateFloorplanProjection": {
    /** Generate the homography to project detections onto a floorplan. */
    post: operations["doorbellCameraCalibrateFloorplanProjection"];
  };
  "/doorbellcamera/createRawHttpStream": {
    /** Create a raw HTTP stream for a doorbell camera. */
    post: operations["createDoorbellCameraRawHttpStream"];
  };
  "/doorbellcamera/createRuleForDoorbellCamera": {
    /** Create rule for a doorbell camera. */
    post: operations["createRuleForDoorbellCamera"];
  };
  "/doorbellcamera/createSharedLiveVideoStream": {
    /** Share an live video stream for a doorbell camera */
    post: operations["createDoorbellCameraSharedLiveVideoStream"];
  };
  "/doorbellcamera/delete": {
    /** Remove the doorbell camera from the organization */
    post: operations["deleteDoorbellCamera"];
  };
  "/doorbellcamera/deleteRawHttpStream": {
    /** Delete a raw HTTP stream for a doorbell camera. */
    post: operations["deleteDoorbellCameraRawHttpStream"];
  };
  "/doorbellcamera/deleteRuleForDoorbellCamera": {
    /** Delete rule for a doorbell camera. */
    post: operations["deleteRuleForDoorbellCamera"];
  };
  "/doorbellcamera/findAllRawHttpStreams": {
    /** Get a list of all doorbell cameras raw HTTP streams. */
    post: operations["findAllDoorbellCameraRawHttpStreams"];
  };
  "/doorbellcamera/findComponentEventsForDoorbellCamera": {
    /** Retrieve all component events relevant to the specified Doorbell Camera */
    post: operations["findComponentEventsForDoorbellCamera"];
  };
  "/doorbellcamera/findComponentSeekPointsForDoorbellCamera": {
    /** Retrieve all component seekpoints relevant to the specified Doorbell Camera */
    post: operations["findComponentSeekPointsForDoorbellCamera"];
  };
  "/doorbellcamera/findSharedLiveVideoStreams": {
    /** Get list of all shared live streams for doorbell camera */
    post: operations["findDoorbellCameraSharedLiveVideoStreams"];
  };
  "/doorbellcamera/getBoundingBoxes": {
    /** Get object bounding boxes for a specified doorbell camera. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
    post: operations["getDoorbellCameraBoundingBoxes"];
  };
  "/doorbellcamera/getConfig": {
    /** Get a doorbell camera's config */
    post: operations["getDoorbellCameraConfig"];
  };
  "/doorbellcamera/getDoorbellCameraRulesForOrg": {
    /** Get rules for all doorbell cameras in an org. */
    post: operations["getDoorbellCameraRulesForOrg"];
  };
  "/doorbellcamera/getFullState": {
    /** Get detailed information about state of specified doorbell camera */
    post: operations["getDoorbellCameraFullState"];
  };
  "/doorbellcamera/getMediaUris": {
    /** Get media uris for doorbell camera to retrieve footage and audio */
    post: operations["getDoorbellCameraMediaUris"];
  };
  "/doorbellcamera/getMinimalStateList": {
    /** Get basic state information about all doorbell cameras in organization */
    post: operations["getDoorbellCameraMinimalStateList"];
  };
  "/doorbellcamera/getOfflineLanStreamingInfo": {
    /** Get required information for offline lan streaming on all video intercoms */
    post: operations["getDoorbellCameraOfflineLanStreamingInfo"];
  };
  "/doorbellcamera/getPresenceWindows": {
    /** Get stored video information for a doorbell camera */
    post: operations["getDoorbellCameraPresenceWindows"];
  };
  "/doorbellcamera/getRawHttpStreams": {
    /** Get info for all raw HTTP streams from a doorbell camera. */
    post: operations["getDoorbellCameraRawHttpStreams"];
  };
  "/doorbellcamera/getRulesForDoorbellCamera": {
    /** Get all rules for a doorbell camera. */
    post: operations["getRulesForDoorbellCamera"];
  };
  "/doorbellcamera/getSeekpoints": {
    /** Get activity seekpoints for specified doorbell camera */
    post: operations["getDoorbellCameraSeekPoints"];
  };
  "/doorbellcamera/getUptimeWindows": {
    /** Get uptime information for a doorbell camera */
    post: operations["getDoorbellCameraUptimeWindows"];
  };
  "/doorbellcamera/reboot": {
    /** Reboot the specified doorbell camera */
    post: operations["rebootDoorbellCamera"];
  };
  "/doorbellcamera/updateConfig": {
    /** Update a doorbell camera's config */
    post: operations["updateDoorbellCameraConfig"];
  };
  "/doorbellcamera/updateDetails": {
    /** Update hardware details of doorbell camera. */
    post: operations["updateDoorbellCameraDetails"];
  };
  "/doorcontroller/createDoorControllerRule": {
    /** Create a rule owned by a specific door controller. */
    post: operations["createDoorControllerRule"];
  };
  "/doorcontroller/delete": {
    /** Remove the door controller from the organization as long as it has no doors */
    post: operations["deleteDoorController"];
  };
  "/doorcontroller/deleteDoorControllerRule": {
    /** Delete a rule owned by a specific door controller. */
    post: operations["deleteDoorControllerRule"];
  };
  "/doorcontroller/getConfig": {
    /** Get a door controller's config */
    post: operations["getDoorControllerConfig"];
  };
  "/doorcontroller/getDoorControllerRule": {
    /** Get a specific rule owned by the door controller. */
    post: operations["getDoorControllerRule"];
  };
  "/doorcontroller/getDoorControllerRules": {
    /** Get all rules owned by the door controller. */
    post: operations["getDoorControllerRules"];
  };
  "/doorcontroller/getDoorControllerStateList": {
    /** Get state information about all door controllers in an organization */
    post: operations["getDoorControllerStateList"];
  };
  "/doorcontroller/registerDiscoveredRhombusReader": {
    /** Register a Rhombus reader that a Door Controller has discovered */
    post: operations["registerDiscoveredRhombusReader"];
  };
  "/doorcontroller/updateConfig": {
    /** Update a door controller's config */
    post: operations["updateDoorControllerConfig"];
  };
  "/doorcontroller/updateDetails": {
    /** Update details for door controller. Note: uuid is a required field */
    post: operations["updateDoorControllerDetails"];
  };
  "/doorcontroller/updateDoorControllerRule": {
    /** Update a rule owned by a specific door controller. */
    post: operations["updateDoorControllerRule"];
  };
  "/ethernettester/getEthernetTesterConfig": {
    /** Get test configuration */
    post: operations["getEthernetTesterConfig"];
  };
  "/event/createClipGroup": {
    /** Create a group of clips */
    post: operations["createClipGroup"];
  };
  "/event/createSharedClipGroup": {
    /** Use /createSharedClipGroupV3 instead */
    post: operations["createSharedClipGroup"];
  };
  "/event/createSharedClipGroupV2": {
    /** Use /createSharedClipGroupV3 instead */
    post: operations["createSharedClipGroupV2"];
  };
  "/event/createSharedClipGroupV3": {
    /** Share multiple clips in a single page */
    post: operations["createSharedClipGroupV3"];
  };
  "/event/deleteAlertMonitoringThreatCase": {
    /** Delete alert monitoring threat case */
    post: operations["deleteAlertMonitoringThreatCase"];
  };
  "/event/deleteAlertMonitoringThreatCaseByStatus": {
    /** Delete alert monitoring threat case by status */
    post: operations["deleteAlertMonitoringThreatCaseByStatus"];
  };
  "/event/deleteClipGroup": {
    /** Delete a clip group */
    post: operations["deleteClipGroup"];
  };
  "/event/deleteSavedClip": {
    /** Delete all types of saved clips (splices in progress, completed splices, saved alerts) */
    post: operations["deleteSavedClip"];
  };
  "/event/deleteSharedClipGroup": {
    /** Use /deleteSharedClipGroupV2 instead */
    post: operations["deleteSharedClipGroup"];
  };
  "/event/deleteSharedClipGroupV2": {
    /** Delete a shared clip page */
    post: operations["deleteSharedClipGroupV2"];
  };
  "/event/dismissAllPolicyAlertsForDevice": {
    /** Dismiss all policy alerts for each specified device(s) */
    post: operations["dismissAllPolicyAlertsForDevice"];
  };
  "/event/dismissAllPolicyAlertsV2": {
    /** Dismiss all policy alerts in organization */
    post: operations["dismissAllPolicyAlertsV2"];
  };
  "/event/dismissPolicyAlertV2": {
    /** Dismiss a policy alert */
    post: operations["dismissPolicyAlertV2"];
  };
  "/event/dismissPolicyAlertsV2": {
    /** Dismiss multiple policy alerts */
    post: operations["dismissPolicyAlertsV2"];
  };
  "/event/getAlertMonitoringThreatCase": {
    /** Get alert monitoring threat case */
    post: operations["getAlertMonitoringThreatCase"];
  };
  "/event/getAlertMonitoringThreatCases": {
    /** Get alert monitoring threat cases */
    post: operations["getAlertMonitoringThreatCases"];
  };
  "/event/getClipGroupDetails": {
    /** Get details like seekpoints for a clip group */
    post: operations["getClipGroupDetails"];
  };
  "/event/getClipGroupsForOrg": {
    /** Get all clip groups for an org */
    post: operations["getClipGroupsForOrg"];
  };
  "/event/getClipWithProgress": {
    /** Get a specified saved clip with current progress */
    post: operations["getClipWithProgress"];
  };
  "/event/getClipsWithProgress": {
    /** Get list of saved clips in organization, with current progress */
    post: operations["getClipsWithProgress"];
  };
  "/event/getExpiringClipsForOrg": {
    /** Get list of expiring saved clips in organization. */
    post: operations["getExpiringClipsForOrg"];
  };
  "/event/getExpiringPolicyAlerts": {
    /** Retrieves all policy alerts that will expire before the provided timestamp */
    post: operations["getExpiringPolicyAlerts"];
  };
  "/event/getMotionGrid": {
    /** Get motion data for specified camera */
    post: operations["getMotionGrid"];
  };
  "/event/getMotionHeatMap": {
    /** Get aggregated motion heatmap for specified time period and camera. Divides a camera's resolution into a 36x64 grid and counts the number of motion events that occurred in each cell. */
    post: operations["getMotionHeatMap"];
  };
  "/event/getPolicyAlert": {
    /** Get information about a policy alert */
    post: operations["getPolicyAlert"];
  };
  "/event/getPolicyAlertCount": {
    /** Get count of policy alerts */
    post: operations["getPolicyAlertCount"];
  };
  "/event/getPolicyAlertDetails": {
    /** Get detailed information about policy alert, including seekpoints and bounding boxes */
    post: operations["getPolicyAlertDetails"];
  };
  "/event/getPolicyAlertGroupsForDevice": {
    /** Get recent policy alerts for device, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
    post: operations["getPolicyAlertGroupsForDevice"];
  };
  "/event/getPolicyAlertGroupsForLocation": {
    /** Get recent policy alerts for a location, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
    post: operations["getPolicyAlertGroupsForLocation"];
  };
  "/event/getPolicyAlertGroupsV2": {
    /** Get recent policy alerts for organization, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
    post: operations["getPolicyAlertGroupsV2"];
  };
  "/event/getPolicyAlertV2": {
    /** Get information about a policy alert */
    post: operations["getPolicyAlertV2"];
  };
  "/event/getPolicyAlerts": {
    /** Get recent policy alerts for organization */
    post: operations["getPolicyAlerts"];
  };
  "/event/getPolicyAlertsV2": {
    /** Get recent policy alerts for organization */
    post: operations["getPolicyAlertsV2"];
  };
  "/event/getSavedClipCount": {
    /** Get a count of saved clips in and organization */
    post: operations["getSavedClipCount"];
  };
  "/event/getSavedClipDetails": {
    /** Get detailed information about a saved clip, including seekpoints and bounding boxes */
    post: operations["getSavedClipDetails"];
  };
  "/event/getSavedClips": {
    /** Use /getSavedClipsV2 instead */
    post: operations["getSavedClips"];
  };
  "/event/getSavedClipsByExternalTransactionId": {
    /** Get list of saved clips matching the external transaction id */
    post: operations["getSavedClipsByExternalTransactionId"];
  };
  "/event/getSavedClipsV2": {
    /** Get list of saved clips in organization */
    post: operations["getSavedClipsV2"];
  };
  "/event/getSharedClipGroupDetails": {
    /** Get detailed information about a shared clip page, including seekpoints and bounding boxes */
    post: operations["getSharedClipGroupDetails"];
  };
  "/event/getSharedClipGroups": {
    /** Use /getSharedClipGroupsV2 instead */
    post: operations["getSharedClipGroups"];
  };
  "/event/getSharedClipGroupsV2": {
    /** Get list of shared clip pages in organization */
    post: operations["getSharedClipGroupsV2"];
  };
  "/event/getSplicedClipsInProgress": {
    /** Get spliced clips in progress */
    post: operations["DEPRECATED_getSplicedClipsInProgress"];
  };
  "/event/getUnhealthyDeviceAlerts": {
    /** Get list of unhealthy devices in organization */
    post: operations["getUnhealthyDeviceAlerts"];
  };
  "/event/muteNotificationsForDevice": {
    /** Mute notifications from a device for specified number of seconds */
    post: operations["muteNotificationsForDevice"];
  };
  "/event/reportBadPolicyAlert": {
    /** Report a bad policy event (AI false positive) and send information for feedback. Note: this adds the clip to our AI training data set */
    post: operations["reportBadPolicyAlert"];
  };
  "/event/savePolicyAlertV2": {
    /** Save a policy alert as a saved clip */
    post: operations["savePolicyAlertV2"];
  };
  "/event/searchMotionGrid": {
    /** Search motion grid for motion events occuring in specified grid cells. Note: motion grid is a 64x36 grid of cells with the upper left hand corner being (0, 0) */
    post: operations["searchMotionGrid"];
  };
  "/event/searchMotionGridWithActivities": {
    /** Search motion grid for motion events occuring in specified grid cells. Note: motion grid is a 64x36 grid of cells with the upper left hand corner being (0, 0) */
    post: operations["searchMotionGridWithActivities"];
  };
  "/event/unSavePolicyAlertV2": {
    /** Unsave policy alert and remove associated saved clip */
    post: operations["unSavePolicyAlertV2"];
  };
  "/event/updateClipGroup": {
    /** Update a clip group's title, description, or clips */
    post: operations["updateClipGroup"];
  };
  "/event/updatePolicyAlertTextDescription": {
    /** Update the text description field of a policy alert. Development only for now */
    post: operations["updatePolicyAlertTextDescription"];
  };
  "/event/updateSavedClip": {
    /** Update saved clip title or summary */
    post: operations["updateSavedClip"];
  };
  "/event/updateSharedClipGroup": {
    /** Use /updateSharedClipGroupV2 instead */
    post: operations["updateSharedClipGroup"];
  };
  "/event/updateSharedClipGroupV2": {
    /** Update shared clip page title, description, password, or expiration time */
    post: operations["updateSharedClipGroupV2"];
  };
  "/eventSearch/getCameraOrDoorbellCameraSeekpoints": {
    /** Get camera or doorbell camera seekpoints */
    post: operations["getCameraOrDoorbellCameraSeekpoints"];
  };
  "/eventSearch/getEventSeekpoints": {
    /** Get normal seekpoint events and access control seekpoint events */
    post: operations["getDeprecatedEventSeekpoints"];
  };
  "/eventSearch/getEventSeekpointsV2": {
    /** Get normal seekpoint events and access control seekpoint events */
    post: operations["getDeprecatedEventSeekpointsV2"];
  };
  "/eventSearchV2/getEventSeekpoints": {
    /** Get normal seekpoint events and access control seekpoint events */
    post: operations["getEventSeekpoints"];
  };
  "/export/audit": {
    /** Download audit log */
    post: operations["exportAudit"];
  };
  "/export/climateEvents": {
    /** Download climate event log */
    post: operations["exportClimateEvents"];
  };
  "/export/countReports": {
    /** Download count report */
    post: operations["exportCountReports"];
  };
  "/export/diagnostic": {
    /** Download diagnostic log */
    post: operations["exportDiagnostic"];
  };
  "/export/doorEvents": {
    /** Download door event log */
    post: operations["exportDoorEvents"];
  };
  "/export/environmentalGatewayEvents": {
    /** Download environmental gateway event log */
    post: operations["exportEnvironmentalGatewayEvents"];
  };
  "/export/inventory": {
    /** Download device inventory */
    post: operations["exportInventory"];
  };
  "/export/motionEvents": {
    /** Download motion event log for motion sensors */
    post: operations["exportMotionEvents"];
  };
  "/export/peopleCountEvents": {
    /** Download people count report */
    post: operations["exportPeopleCountEvents"];
  };
  "/export/peopleEvents": {
    /** Download people event log */
    post: operations["exportPeopleEvents"];
  };
  "/export/proximityEvents": {
    /** Download proximity tag event log */
    post: operations["exportProximityEvents"];
  };
  "/export/proximityLocomotionEvents": {
    /** Download proximity tag event log */
    post: operations["exportProximityLocomotionEvents"];
  };
  "/export/uptime": {
    /** Download device uptime reports */
    post: operations["exportUptime"];
  };
  "/export/users": {
    /** Download org users */
    post: operations["exportUsers"];
  };
  "/export/vehicleEvents": {
    /** Download vehicle event log.  Use /export/vehicleEventsV2 instead for more functionality */
    post: operations["exportVehicleEvents"];
  };
  "/export/vehicleEventsV2": {
    /** Download vehicle event log */
    post: operations["exportVehicleEventsV2"];
  };
  "/faceRecognition/faceEvent/deleteFaceEvent": {
    /** Delete face event. */
    post: operations["deleteFaceEvent"];
  };
  "/faceRecognition/faceEvent/exportFaceEventsByOrg": {
    /** Export face events for an organization */
    post: operations["exportFaceEventsByOrg"];
  };
  "/faceRecognition/faceEvent/findFaceEventsByDeviceForReporting": {
    /** Find face events by device for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findFaceEventsByDeviceForReporting"];
  };
  "/faceRecognition/faceEvent/findFaceEventsByLocationForReporting": {
    /** Find face events by location for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findFaceEventsByLocationForReporting"];
  };
  "/faceRecognition/faceEvent/findFaceEventsByOrg": {
    /** Find face events for an organization. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findFaceEventsByOrg"];
  };
  "/faceRecognition/faceEvent/findFaceEventsByOrgForReporting": {
    /** Find face events by org for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findFaceEventsByOrgForReporting"];
  };
  "/faceRecognition/faceEvent/findSimilarFaceEvents": {
    /** Find face events for an organization that are similar to a specified face event. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findSimilarFaceEvents"];
  };
  "/faceRecognition/faceEvent/findSimilarFaceEventsByEmbedding": {
    /** Find face events for an organization that are similar to a specified face embedding. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findSimilarFaceEventsByEmbedding"];
  };
  "/faceRecognition/faceEvent/findSimilarFaceEventsByFaceMatchmaker": {
    /** Find face events for an organization that are similar to a specified face matchmaker. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findSimilarFaceEventsByFaceMatchmaker"];
  };
  "/faceRecognition/faceEvent/getFaceEvent": {
    /** Get face event. */
    post: operations["getFaceEvent"];
  };
  "/faceRecognition/faceEvent/processFaceEventSearchImage": {
    /** Generates an embedding for the face search image if a face is detected. The embedding can be used to search for similar face events. */
    post: operations["processFaceEventSearchImage"];
  };
  "/faceRecognition/faceEvent/updateFaceEvent": {
    /** Update face event. */
    post: operations["updateFaceEvent"];
  };
  "/faceRecognition/matchmaker/createFaceMatchmakerFromSighting": {
    /** Create face matchmaker from face sighting. */
    post: operations["createFaceMatchmakerFromSighting"];
  };
  "/faceRecognition/matchmaker/createPersonAndFaceMatchmakers": {
    /** Create person and face matchmakers. */
    post: operations["createPersonAndFaceMatchmakers"];
  };
  "/faceRecognition/matchmaker/deleteFaceMatchmaker": {
    /** Delete face matchmaker. */
    post: operations["deleteFaceMatchmaker"];
  };
  "/faceRecognition/matchmaker/findFaceMatchmakersByOrg": {
    /** Find face matchmakers by org. */
    post: operations["findFaceMatchmakersByOrg"];
  };
  "/faceRecognition/matchmaker/findFaceMatchmakersByPerson": {
    /** Find face matchmakers by person. */
    post: operations["findFaceMatchmakersByPerson"];
  };
  "/faceRecognition/matchmaker/findFaceUploadMetadataByTransaction": {
    /** Find face upload metadata by transaction. */
    post: operations["findFaceUploadMetadataByTransaction"];
  };
  "/faceRecognition/matchmaker/getFaceMatchingConfig": {
    /** Get face matching configuration. */
    post: operations["getFaceMatchingConfig"];
  };
  "/faceRecognition/matchmaker/getFaceMatchmaker": {
    /** Get face matchmaker. */
    post: operations["getFaceMatchmaker"];
  };
  "/faceRecognition/matchmaker/updateFaceMatchingConfig": {
    /** Update face matching configuration. */
    post: operations["updateFaceMatchingConfig"];
  };
  "/faceRecognition/matchmaker/uploadFaceMatchmakerForPerson/{personUuid}": {
    /** Upload face matchmaker image for a specific person. */
    post: operations["uploadFaceMatchmakerForPerson"];
  };
  "/faceRecognition/matchmaker/uploadFaceMatchmakers": {
    /** Upload face matchmaker images for one or more people. The uploaded file name is matched to a person's name. If a person is not found and createPersonIfNotFound is set to true, a new person is created. */
    post: operations["uploadFaceMatchmakers"];
  };
  "/faceRecognition/matchmaker/validateFaceMatchmakerImage": {
    /** Validates if image is suitable to be a face matchmaker. */
    post: operations["validateFaceMatchmakerImage"];
  };
  "/faceRecognition/person/addPersonLabel": {
    /** Add a label to a person */
    post: operations["addPersonLabel"];
  };
  "/faceRecognition/person/createPerson": {
    /** Create a person for face recognition purposes. */
    post: operations["createPerson"];
  };
  "/faceRecognition/person/deletePerson": {
    /** Delete person created for face recognition purposes. */
    post: operations["deletePerson"];
  };
  "/faceRecognition/person/findPeopleByOrg": {
    /** Find people created for face recognition purposes in an organization. */
    post: operations["findPeopleByOrg"];
  };
  "/faceRecognition/person/findPersonLabelsByOrg": {
    /** Find all person labels for organization. */
    post: operations["findPersonLabelsByOrg"];
  };
  "/faceRecognition/person/getPerson": {
    /** Get a person created for face recognition purposes. */
    post: operations["getPerson"];
  };
  "/faceRecognition/person/removePersonLabel": {
    /** Remove a label from a person. */
    post: operations["removePersonLabel"];
  };
  "/faceRecognition/person/updatePerson": {
    /** Update person created for face recognition purposes. */
    post: operations["updatePerson"];
  };
  "/feature/getDeviceEventTypes": {
    /** Get possible event types for specified device dependent on features enabled */
    post: operations["getDeviceEventTypes"];
  };
  "/feature/getDeviceFeatures": {
    /** Get enabled features for a device */
    post: operations["getDeviceFeatures"];
  };
  "/feature/getDeviceFeaturesList": {
    /** Get enabled features for all devices in an org */
    post: operations["getDeviceFeaturesList"];
  };
  "/feature/getFeatureCompatabilityMatrix": {
    /** Get feature compatability matrix */
    post: operations["getFeatureCompatabilityMatrix"];
  };
  "/feature/updateDeviceFeatures": {
    /** Update enabled features for a device */
    post: operations["updateDeviceFeatures"];
  };
  "/guestExternal/updateGuestByToken": {
    /** Updates guest information using a provided token. Validates the token, fetches location data, performs offender checks, and updates guest details including face images. This endpoint is used for external guest management forms. */
    post: operations["updateGuestByToken"];
  };
  "/guestmanagement/activateKiosk": {
    /** Activate kiosk and redirect to kiosk page */
    post: operations["activateKiosk"];
  };
  "/guestmanagement/addUsersToGuestManagementHostGroup": {
    /** Adds specified users to a guest management host group */
    post: operations["addUsersToGuestManagementHostGroup"];
  };
  "/guestmanagement/createGuest": {
    /** Create Guest Without Email Invite */
    post: operations["createGuest"];
  };
  "/guestmanagement/createGuestInvite": {
    /** Create Guest Invite */
    post: operations["createGuestInvite"];
  };
  "/guestmanagement/createGuestManagementHostGroup": {
    /** Creates a guest management host group */
    post: operations["createGuestManagementHostGroup"];
  };
  "/guestmanagement/createGuestManagementSettings": {
    /** Create guest management settings */
    post: operations["createGuestManagementSettings"];
  };
  "/guestmanagement/deleteGuest": {
    /** Delete Guest */
    post: operations["deleteGuest"];
  };
  "/guestmanagement/deleteGuestManagementHostGroup": {
    /** Delete a guest management host group */
    post: operations["deleteGuestManagementHostGroup"];
  };
  "/guestmanagement/deleteGuestManagementSettings": {
    /** Delete guest management settings */
    post: operations["deleteGuestManagementSettings"];
  };
  "/guestmanagement/exportGuestActivity": {
    /** Export Guest Activity .csv */
    post: operations["exportGuestActivity"];
  };
  "/guestmanagement/exportGuestActivityForGuest": {
    /** Export Single Guest Activity .csv */
    post: operations["exportGuestActivityForGuest"];
  };
  "/guestmanagement/exportGuestList": {
    /** Export Guest List .csv */
    post: operations["exportGuestList"];
  };
  "/guestmanagement/findAllUsersForGuestManagementHostGroup": {
    /** Find all users belonging to an guest management host group */
    post: operations["findAllUsersForGuestManagementHostGroup"];
  };
  "/guestmanagement/findGuestManagementHostGroupByExactName": {
    /** Retrieve the guest management host group with the specified name */
    post: operations["findGuestManagementHostGroupByExactName"];
  };
  "/guestmanagement/findGuestManagementHostGroupMembershipsByUser": {
    /** Find all guest management host group memberships by user */
    post: operations["findGuestManagementHostGroupMembershipsByUser"];
  };
  "/guestmanagement/findGuestManagementHostGroupsByNamePrefix": {
    /** Retrieve all guest management host groups with a name starting with the specified prefix */
    post: operations["findGuestManagementHostGroupsByNamePrefix"];
  };
  "/guestmanagement/findGuestManagementHostGroupsByOrg": {
    /** Retrieve all guest management host groups defined in the org */
    post: operations["findGuestManagementHostGroupsByOrg"];
  };
  "/guestmanagement/findGuestManagementHostGroupsByUserMembership": {
    /** Find all guest management host groups a user belongs to */
    post: operations["findGuestManagementHostGroupsByUserMembership"];
  };
  "/guestmanagement/getActivitiesForGuest": {
    /** Get activity logs for a guest */
    post: operations["getActivitiesForGuest"];
  };
  "/guestmanagement/getActivitiesForLocation": {
    /** Get activity logs for a location */
    post: operations["getActivitiesForLocation"];
  };
  "/guestmanagement/getAllGuestInvitesByOrg": {
    /** Get All Guest Invites by Org */
    post: operations["getAllGuestInvitesByOrg"];
  };
  "/guestmanagement/getAllGuestsByOrg": {
    /** Get All Guests by Org */
    post: operations["getAllGuestsByOrg"];
  };
  "/guestmanagement/getGuest": {
    /** Get Guest */
    post: operations["getGuest"];
  };
  "/guestmanagement/getGuestActivityLogs": {
    /** Get org wide activity logs for guests */
    post: operations["getGuestActivityLogs"];
  };
  "/guestmanagement/getGuestInvite": {
    /** Get Guest Invite */
    post: operations["getGuestInvite"];
  };
  "/guestmanagement/getGuestInviteByEmail": {
    /** Get Guest Invite by Email */
    post: operations["getGuestInvitesByEmail"];
  };
  "/guestmanagement/getGuestManagementSettings": {
    /** Get guest management Settings for org */
    post: operations["getGuestManagementSettings"];
  };
  "/guestmanagement/getKioskInfo": {
    /** Get info for kiosk */
    post: operations["getKioskInfo"];
  };
  "/guestmanagement/getKiosksForOrg": {
    /** Get kiosks for org */
    post: operations["getGuestManagementKiosksForOrg"];
  };
  "/guestmanagement/getNametagTemplateForGuest": {
    /** Get name tag template for guest */
    post: operations["getNametagTemplateForGuest"];
  };
  "/guestmanagement/inviteGuest": {
    /** Invite Guest Via Email */
    post: operations["inviteGuest"];
  };
  "/guestmanagement/removeUsersFromGuestManagementHostGroup": {
    /** Removes specified users from a guest management host group */
    post: operations["removeUsersFromGuestManagementHostGroup"];
  };
  "/guestmanagement/sendFormInvite": {
    /** Invite Guest Via Email */
    post: operations["sendFormInvite"];
  };
  "/guestmanagement/signInGuest": {
    /** Sign In Guest */
    post: operations["signInGuest"];
  };
  "/guestmanagement/signOutGuest": {
    /** Sign Out Guest */
    post: operations["signOutGuest"];
  };
  "/guestmanagement/updateGuest": {
    /** Update Guest */
    post: operations["updateGuest"];
  };
  "/guestmanagement/updateGuestInvite": {
    /** Update Guest Invite */
    post: operations["updateGuestInvite"];
  };
  "/guestmanagement/updateGuestManagementHostGroup": {
    /** Updates a guest management host group's meta information like name and description */
    post: operations["updateGuestManagementHostGroup"];
  };
  "/guestmanagement/updateGuestManagementSettings": {
    /** Update guest management settings */
    post: operations["updateGuestManagementSettings"];
  };
  "/help/feedback": {
    /** Leave feedback of our system */
    post: operations["sendFeedback"];
  };
  "/help/openTickets": {
    /**
     * Get Open Support Tickets For A Client Organization. Tickets are associated to an organziation based on the requester's organization association.
     * This endpoint returns a paginated response sorted by the request date. The first page is indexed at 1 and each page has up to 100 ticket entries.
     */
    post: operations["getOpenTickets"];
  };
  "/help/openTicketsV2": {
    /** Get Open Support Tickets For A Client Organization. Tickets are associated to an organziation based on the requester's organization association. */
    post: operations["getOpenTicketsV2"];
  };
  "/help/rma": {
    /** Open an RMA for a camera */
    post: operations["processRMA"];
  };
  "/help/ticket": {
    /** Open a support ticket */
    post: operations["createTicket"];
  };
  "/help/ticketWithFile": {
    /** Open a support ticket and optionally include a file upload. Uploading multiple Files are not supported throught this call. */
    post: operations["createTicketWithFile"];
  };
  "/help/triageDevice": {
    /** Triage a device connection/recording issue */
    post: operations["triageDevice"];
  };
  "/integrations/IoT/deleteDeviceIntegration": {
    /** Delete Device integration */
    post: operations["deleteDeviceIntegration"];
  };
  "/integrations/IoT/deleteFlicIntegration": {
    /** Delete Flic Integration */
    post: operations["deleteFlicIntegration"];
  };
  "/integrations/IoT/deleteHaloIntegration": {
    /** Delete Halo Smart Sensor integration */
    post: operations["deleteHaloIntegration"];
  };
  "/integrations/IoT/deleteIntuifaceIntegration": {
    /** Delete Intuiface integration */
    post: operations["deleteIntuifaceIntegration"];
  };
  "/integrations/IoT/deleteNineOneOneCellularIntegration": {
    /** Delete 911Cellular Integration */
    post: operations["deleteNineOneOneCellularIntegration"];
  };
  "/integrations/IoT/deleteOmnialertIntegration": {
    /** Delete Omnialert integration */
    post: operations["deleteOmnialertIntegration"];
  };
  "/integrations/IoT/deleteShellyIntegration": {
    /** Delete Shelly integration */
    post: operations["deleteShellyIntegration"];
  };
  "/integrations/IoT/generateFlicToken": {
    /** Generate Rhombus Token for use */
    post: operations["generateFlicToken"];
  };
  "/integrations/IoT/generateNineOneOneCellularToken": {
    /** Generate Rhombus Token for use */
    post: operations["generateNineOneOneCellularToken"];
  };
  "/integrations/IoT/getDeviceIntegration": {
    /** Get Device integration */
    post: operations["getDeviceIntegration"];
  };
  "/integrations/IoT/getFlicDevices": {
    /** Grabs all Flic Devices */
    post: operations["getFlicDevices"];
  };
  "/integrations/IoT/getFlicIntegration": {
    /** Get Flic Integration */
    post: operations["getFlicIntegration"];
  };
  "/integrations/IoT/getFlicModule": {
    /** Get Uploaded Module UUID */
    post: operations["getFlicModule"];
  };
  "/integrations/IoT/getNineOneOneCellularIntegration": {
    /** Get 911Cellular Integration */
    post: operations["getNineOneOneCellularIntegration"];
  };
  "/integrations/IoT/getNineOneOneCellularSecurityZones": {
    /** Get 911Cellular Security Zones */
    post: operations["getNineOneOneCellularSecurityZones"];
  };
  "/integrations/IoT/getOmnialertIntegration": {
    /** Get Omnialert integration */
    post: operations["getOmnialertIntegration"];
  };
  "/integrations/IoT/getShellyIntegration": {
    /** Get Shelly integration */
    post: operations["getShellyIntegration"];
  };
  "/integrations/IoT/initiateShellyAuth": {
    /** Initiate the Shelly Auth Process */
    post: operations["initiateShellyAuth"];
  };
  "/integrations/IoT/togglePower": {
    /** Toggle power for a managed power switch */
    post: operations["togglePower"];
  };
  "/integrations/IoT/updateDeviceIntegration": {
    /** Update Device integration */
    post: operations["updateDeviceIntegration"];
  };
  "/integrations/IoT/updateFlicIntegration": {
    /** Update Flic Integration */
    post: operations["updateFlicIntegration"];
  };
  "/integrations/IoT/updateHaloIntegration": {
    /** Update Halo Smart Sensor integration */
    post: operations["updateHaloIntegration"];
  };
  "/integrations/IoT/updateIntuifaceIntegration": {
    /** Update Intuiface integration */
    post: operations["updateIntuifaceIntegration"];
  };
  "/integrations/IoT/updateNineOneOneCellularIntegration": {
    /** Update 911Cellular Integration */
    post: operations["updateNineOneOneCellularIntegration"];
  };
  "/integrations/IoT/updateOmnialertIntegration": {
    /** Update Omnialert integration */
    post: operations["updateOmnialertIntegration"];
  };
  "/integrations/IoT/updateShellyIntegration": {
    /** Update Shelly rules engine integration */
    post: operations["updateShellyIntegration"];
  };
  "/integrations/accessControl/aperio/clearDtc": {
    /** Issues a command to clear the device's DTC */
    post: operations["clearDtc"];
  };
  "/integrations/accessControl/aperio/createAperioDoors": {
    /** Create one or more Aperio Door component(s). */
    post: operations["createAperioAccessControlledDoors"];
  };
  "/integrations/accessControl/aperio/createAperioGateway": {
    /** Create an Aperio Gateway component. */
    post: operations["createAperioGateway"];
  };
  "/integrations/accessControl/aperio/downloadCertificate": {
    /** Download a certificate to use with Aperio's devices. */
    post: operations["downloadCertificate"];
  };
  "/integrations/accessControl/aperio/getAperioIntegration": {
    /** Retrieve the Aperio integration configuration. */
    post: operations["getAperioIntegration"];
  };
  "/integrations/accessControl/aperio/rebootAperioGateway": {
    /** Reboot an Aperio gateway that is connected to a Door Controller. */
    post: operations["rebootAperioGateway"];
  };
  "/integrations/accessControl/aperio/updateAperioIntegration": {
    /** Update the Aperio integration configuration. */
    post: operations["updateAperioIntegration"];
  };
  "/integrations/accessControl/aperio/uploadFirmwareFile": {
    /** Upload a firmware file which will be deployed to Aperio's communication hubs. */
    post: operations["uploadFirmwareFile"];
  };
  "/integrations/accessControl/deleteAmtIntegration": {
    /** Delete Amt badge integration */
    post: operations["deleteAmtIntegration"];
  };
  "/integrations/accessControl/deleteAvigilonAltaIntegrationV2": {
    /** Delete Avigilon Alta badge integration V2 */
    post: operations["deleteAvigilonAltaIntegrationV2"];
  };
  "/integrations/accessControl/deleteBrivoIntegration": {
    /** Delete Brivo badge integration */
    post: operations["deleteBrivoIntegration"];
  };
  "/integrations/accessControl/deleteBrivoIntegrationV2": {
    /** Delete Brivo badge integration V2 */
    post: operations["deleteBrivoIntegrationV2"];
  };
  "/integrations/accessControl/deleteBrivoIntegrationV3": {
    /** Delete Brivo badge integration V3 */
    post: operations["deleteBrivoIntegrationV3"];
  };
  "/integrations/accessControl/deleteButterflymxIntegration": {
    /** Delete ButterflyMX badge integration */
    post: operations["deleteButterflymxIntegration"];
  };
  "/integrations/accessControl/deleteButterflymxIntegrationV2": {
    /** Delete ButterflyMX badge integration V2 */
    post: operations["deleteButterflymxIntegrationV2"];
  };
  "/integrations/accessControl/deleteGeneaIntegration": {
    /** Delete Genea badge integration */
    post: operations["deleteGeneaIntegration"];
  };
  "/integrations/accessControl/deleteGeneaIntegrationV2": {
    /** Delete Genea badge integration V2 */
    post: operations["deleteGeneaIntegrationV2"];
  };
  "/integrations/accessControl/deleteInnerRangeIntegration": {
    /** Delete Inner Range integration */
    post: operations["deleteInnerRangeIntegration"];
  };
  "/integrations/accessControl/deleteKisiIntegration": {
    /** Delete Kisi badge integration */
    post: operations["deleteKisiIntegration"];
  };
  "/integrations/accessControl/deleteKisiIntegrationV2": {
    /** Delete Kisi badge integration V2 */
    post: operations["deleteKisiIntegrationV2"];
  };
  "/integrations/accessControl/deleteOpenpathIntegration": {
    /** Delete Openpath badge integration */
    post: operations["deleteOpenpathIntegration"];
  };
  "/integrations/accessControl/deleteOpentechAllianceIntegration": {
    /** Delete Opentech Alliance integration */
    post: operations["deleteOpentechAllianceIntegration"];
  };
  "/integrations/accessControl/deleteOpentechAllianceIntegrationV2": {
    /** Delete Opentech Alliance integration */
    post: operations["deleteOpentechAllianceIntegrationV2"];
  };
  "/integrations/accessControl/deletePdkIntegration": {
    /** Delete ProDataKey badge integration */
    post: operations["deletePdkIntegration"];
  };
  "/integrations/accessControl/deletePdkIntegrationV2": {
    /** Delete ProDataKey badge integration */
    post: operations["deletePdkIntegrationV2"];
  };
  "/integrations/accessControl/deletePlaceOsIntegration": {
    /** Delete PlaceOs badge integration */
    post: operations["deletePlaceOsIntegration"];
  };
  "/integrations/accessControl/deletePlaceOsIntegrationV2": {
    /** Delete PlaceOs badge integration */
    post: operations["deletePlaceOsIntegrationV2"];
  };
  "/integrations/accessControl/enablePdkIntegration": {
    /** Enabled and Redirect to ProDataKey */
    get: operations["enablePdkIntegration"];
  };
  "/integrations/accessControl/getAccessControlIntegrationsForAlm": {
    /** Get list of v2 Access Control integrations for org that can be used for Rhombus Alarm Monitoring */
    post: operations["getAccessControlIntegrationsForAlm"];
  };
  "/integrations/accessControl/getAmtReaders": {
    /** Get list of AMT readers to assign cameras */
    post: operations["getAmtReaders"];
  };
  "/integrations/accessControl/getAvigilonAltaIntegration": {
    /** Get Avigilon Alta integration */
    post: operations["getAvigilonAltaIntegration"];
  };
  "/integrations/accessControl/getBrivoDoors": {
    /** Get list of available Brivo doors to assign cameras */
    post: operations["getBrivoDoors"];
  };
  "/integrations/accessControl/getBrivoDoorsV2": {
    /** Get list of available Brivo doors to assign cameras */
    post: operations["getBrivoDoorsV2"];
  };
  "/integrations/accessControl/getBrivoDoorsV3": {
    /** Get list of available Brivo doors to assign cameras */
    post: operations["getBrivoDoorsV3"];
  };
  "/integrations/accessControl/getBrivoIntegrationV2": {
    /** Get Brivo badge integration */
    post: operations["getBrivoIntegrationV2"];
  };
  "/integrations/accessControl/getButterflymxIntegrationV2": {
    /** Get ButterflyMX badge integration */
    post: operations["getButterflymxIntegrationV2"];
  };
  "/integrations/accessControl/getButterflymxPanels": {
    /** Get list of available ButterflyMX panels to assign cameras */
    post: operations["getButterflymxPanels"];
  };
  "/integrations/accessControl/getButterflymxPanelsV2": {
    /** Get list of available ButterflyMX panels to assign cameras */
    post: operations["getButterflymxPanelsV2"];
  };
  "/integrations/accessControl/getGeneaDoors": {
    /** Get list of Genea doors to assign cameras */
    post: operations["getGeneaDoors"];
  };
  "/integrations/accessControl/getGeneaIntegration": {
    /** Get Genea integration */
    post: operations["getGeneaIntegration"];
  };
  "/integrations/accessControl/getInnerRangeConsoles": {
    /** Get Inner Range console settings */
    post: operations["getInnerRangeConsoles"];
  };
  "/integrations/accessControl/getInnerRangeDoors": {
    /** Get list of Inner Range doors */
    post: operations["getInnerRangeDoors"];
  };
  "/integrations/accessControl/getInnerRangeIntegration": {
    /** Get Inner Range integration */
    post: operations["getInnerRangeIntegration"];
  };
  "/integrations/accessControl/getKisiDoors": {
    /** Get list of Kisi doors to assign cameras */
    post: operations["getKisiDoors"];
  };
  "/integrations/accessControl/getKisiIntegration": {
    /** Get Kisi badge integration */
    post: operations["getKisiIntegration"];
  };
  "/integrations/accessControl/getKisiIntegrationV2": {
    /** Get Kisi badge integration V2 */
    post: operations["getKisiIntegrationV2"];
  };
  "/integrations/accessControl/getKisiPlaces": {
    /** Get list of Kisi places to assign cameras */
    post: operations["getKisiPlaces"];
  };
  "/integrations/accessControl/getOpenpathDoors": {
    /** Get list of Openpath doors to assign cameras */
    post: operations["getOpenpathDoors"];
  };
  "/integrations/accessControl/getOpenpathLockdownPlans": {
    /** Get list of Openpath lockdown plans to trigger */
    post: operations["getOpenpathLockdownPlans"];
  };
  "/integrations/accessControl/getOpentechAllianceFacilities": {
    /** Get list of Opentech Alliance facilities */
    post: operations["getOpentechAllianceFacilities"];
  };
  "/integrations/accessControl/getOpentechAllianceFacilitiesV2": {
    /** Get list of Opentech Alliance facilities */
    post: operations["getOpentechAllianceFacilitiesV2"];
  };
  "/integrations/accessControl/getOpentechAllianceIntegrationV2": {
    /** Get Opentech Alliance integration */
    post: operations["getOpentechAllianceIntegrationV2"];
  };
  "/integrations/accessControl/getPdkDoors": {
    /** Get list of ProDataKey doors to assign cameras */
    post: operations["getPdkDoors"];
  };
  "/integrations/accessControl/getPdkIntegration": {
    /** Get ProDataKey badge integration */
    post: operations["getPdkIntegration"];
  };
  "/integrations/accessControl/getPdkSystemId": {
    /** Get SystemID for ProDataKey badge integration */
    post: operations["getPdkSystemId"];
  };
  "/integrations/accessControl/getPlaceOsDoors": {
    /** Get list of PlaceOs doors to assign cameras */
    post: operations["getPlaceOsDoors"];
  };
  "/integrations/accessControl/getPlaceOsIntegrationV2": {
    /** Get PlaceOs integration */
    post: operations["getPlaceOsIntegrationV2"];
  };
  "/integrations/accessControl/initiateBrivoOauth": {
    /** Initiate Brivo Oauth 2.0 process */
    post: operations["initiateBrivoOauth"];
  };
  "/integrations/accessControl/initiateButterflymxOauth": {
    /** Initiate Butterflymx Oauth */
    post: operations["initiateButterflymxOauth"];
  };
  "/integrations/accessControl/revertOpenpathLockdown": {
    /** Revert Openpath lockdown plan */
    post: operations["revertOpenpathLockdown"];
  };
  "/integrations/accessControl/triggerOpenpathLockdown": {
    /** Trigger Openpath lockdown plan */
    post: operations["triggerOpenpathLockdown"];
  };
  "/integrations/accessControl/unlockBrivoDoor": {
    /** Unlock Brivo door */
    post: operations["unlockBrivoDoor"];
  };
  "/integrations/accessControl/unlockBrivoDoorV2": {
    /** Unlock Brivo door */
    post: operations["unlockBrivoDoorV2"];
  };
  "/integrations/accessControl/unlockBrivoDoorV3": {
    /** Unlock Brivo door V3 */
    post: operations["unlockBrivoDoorV3"];
  };
  "/integrations/accessControl/unlockGeneaDoor": {
    /** Unlock Genea door */
    post: operations["unlockGeneaDoor"];
  };
  "/integrations/accessControl/unlockInnerRangeDoor": {
    /** Unlock Inner Range door */
    post: operations["unlockInnerRangeDoor"];
  };
  "/integrations/accessControl/unlockKisiDoor": {
    /** Unlock Kisi door */
    post: operations["unlockKisiDoor"];
  };
  "/integrations/accessControl/unlockOpenpathDoor": {
    /** Unlock Openpath door */
    post: operations["unlockOpenpathDoor"];
  };
  "/integrations/accessControl/unlockOpentechAllianceDoor": {
    /** Unlock Opentech Alliance door */
    post: operations["unlockOpentechAllianceDoor"];
  };
  "/integrations/accessControl/unlockOpentechAllianceDoorV2": {
    /** Unlock Opentech Alliance door */
    post: operations["unlockOpentechAllianceDoorV2"];
  };
  "/integrations/accessControl/unlockPdkDoor": {
    /** Unlock ProDataKey door */
    post: operations["unlockPdkDoor"];
  };
  "/integrations/accessControl/unlockPlaceOsDoor": {
    /** Unlock PlaceOs door */
    post: operations["unlockPlaceOsDoor"];
  };
  "/integrations/accessControl/updateAmtIntegration": {
    /** Update Amt badge integration */
    post: operations["updateAmtIntegration"];
  };
  "/integrations/accessControl/updateAvigilonAltaIntegrationV2": {
    /** Update Avigilon Alta badge integration V2 */
    post: operations["updateAvigilonAltaIntegrationV2"];
  };
  "/integrations/accessControl/updateBrivoIntegration": {
    /** Update Brivo badge integration */
    post: operations["updateBrivoIntegration"];
  };
  "/integrations/accessControl/updateBrivoIntegrationV2": {
    /** Update Brivo badge integration */
    post: operations["updateBrivoIntegrationV2"];
  };
  "/integrations/accessControl/updateBrivoIntegrationV3": {
    /** Update Brivo badge integration V3 */
    post: operations["updateBrivoIntegrationV3"];
  };
  "/integrations/accessControl/updateButterflymxIntegration": {
    /** Update ButterflyMX badge integration */
    post: operations["updateButterflymxIntegration"];
  };
  "/integrations/accessControl/updateButterflymxIntegrationV2": {
    /** Update ButterflyMX badge integration V2 */
    post: operations["updateButterflymxIntegrationV2"];
  };
  "/integrations/accessControl/updateGeneaIntegration": {
    /** Update Genea badge integration */
    post: operations["updateGeneaIntegration"];
  };
  "/integrations/accessControl/updateGeneaIntegrationV2": {
    /** Update Genea badge integration V2 */
    post: operations["updateGeneaIntegrationV2"];
  };
  "/integrations/accessControl/updateInnerRangeIntegration": {
    /** Update Inner Range integration */
    post: operations["updateInnerRangeIntegration"];
  };
  "/integrations/accessControl/updateKisiIntegration": {
    /** Update Kisi badge integration */
    post: operations["updateKisiIntegration"];
  };
  "/integrations/accessControl/updateKisiIntegrationV2": {
    /** Update Kisi badge integration V2 */
    post: operations["updateKisiIntegrationV2"];
  };
  "/integrations/accessControl/updateOpenpathIntegration": {
    /** Update Openpath badge integration */
    post: operations["updateOpenpathIntegration"];
  };
  "/integrations/accessControl/updateOpentechAllianceIntegration": {
    /** Update Opentech Alliance integration */
    post: operations["updateOpentechAllianceIntegration"];
  };
  "/integrations/accessControl/updateOpentechAllianceIntegrationV2": {
    /** Update Opentech Alliance integration */
    post: operations["updateOpentechAllianceIntegrationV2"];
  };
  "/integrations/accessControl/updatePdkIntegration": {
    /** Update ProDataKey badge integration */
    post: operations["updatePdkIntegration"];
  };
  "/integrations/accessControl/updatePdkIntegrationV2": {
    /** Update ProDataKey badge integration */
    post: operations["updatePdkIntegrationV2"];
  };
  "/integrations/accessControl/updatePlaceOsSettings": {
    /** Update PlaceOs badge integration */
    post: operations["updatePlaceOsSettings"];
  };
  "/integrations/accessControl/updatePlaceOsSettingsV2": {
    /** Update PlaceOs badge integration */
    post: operations["updatePlaceOsSettingsV2"];
  };
  "/integrations/accessControl/validateKisiApiKey": {
    /** Validate Kisi api key */
    post: operations["validateKisiApiKey"];
  };
  "/integrations/accessControl/validateKisiApiKeyV2": {
    /** Validate Kisi api key V2 */
    post: operations["validateKisiApiKeyV2"];
  };
  "/integrations/deleteAmtIntegration": {
    /** Delete Amt badge integration */
    post: operations["deleteAmtIntegrationDep"];
  };
  "/integrations/deleteDeviceIntegration": {
    /** Delete Device integration */
    post: operations["deleteDeviceIntegrationDep"];
  };
  "/integrations/deleteMattermostIntegration": {
    /** Delete Mattermost alert integration */
    post: operations["deleteMattermostIntegrationDep"];
  };
  "/integrations/deleteOpenAIIntegration": {
    /** Delete OpenAI integration */
    post: operations["deleteOpenAIIntegrationDep"];
  };
  "/integrations/deleteWebhookIntegration": {
    /** Delete outbound webhook alert integration */
    post: operations["deleteWebhookIntegrationDep"];
  };
  "/integrations/deleteWebhookIntegrationV2": {
    /** Delete entire webhook integration */
    post: operations["deleteWebhookIntegrationV2Dep"];
  };
  "/integrations/getAmtReaders": {
    /** Get list of AMT readers to assign cameras */
    post: operations["getAmtReadersDep"];
  };
  "/integrations/getApiTokenApplications": {
    /** Get details of all open api token requests for organization */
    post: operations["getApiTokenApplicationsDep"];
  };
  "/integrations/getApiTokens": {
    /** Get list of all api tokens for organization */
    post: operations["getApiTokensDep"];
  };
  "/integrations/getCalendlyEventDetails": {
    /** Get Calendly event details */
    post: operations["getCalendlyEventDetailsDep"];
  };
  "/integrations/getDeviceIntegration": {
    /** Get Device integration */
    post: operations["getDeviceIntegrationDep"];
  };
  "/integrations/getOpenAIIntegration": {
    /** Get OpenAI integration */
    post: operations["getOpenAIIntegrationDep"];
  };
  "/integrations/getOpenAIModels": {
    /** Get list of OpenAI models */
    post: operations["getOpenAIModelsDep"];
  };
  "/integrations/getOrgIntegrations": {
    /** Get details of all third-party integrations for organization */
    post: operations["getOrgIntegrationsDep"];
  };
  "/integrations/getOrgIntegrationsV2": {
    /** Get details of all V2 third-party integrations for an organization */
    post: operations["getOrgIntegrationsV2Dep"];
  };
  "/integrations/getWebhookIntegration": {
    /** Get webhook integration */
    post: operations["getWebhookIntegrationDep"];
  };
  "/integrations/incidentManagement/deleteDiceIntegration": {
    /** Delete Dice integration */
    post: operations["deleteDiceIntegration"];
  };
  "/integrations/incidentManagement/deleteEmailIntegration": {
    /** Delete email alert integration */
    post: operations["deleteEmailIntegration"];
  };
  "/integrations/incidentManagement/deleteInformacastIntegration": {
    /** Delete Informacast integration */
    post: operations["deleteInformacastIntegration"];
  };
  "/integrations/incidentManagement/deleteLumeoIntegration": {
    /** Delete Lumeo integration */
    post: operations["deleteLumeoIntegration"];
  };
  "/integrations/incidentManagement/deleteMattermostIntegration": {
    /** Delete Mattermost alert integration */
    post: operations["deleteMattermostIntegration"];
  };
  "/integrations/incidentManagement/deleteMicrosoftTeamsIntegration": {
    /** Delete Microsoft Teams alert integration */
    post: operations["deleteMicrosoftTeamsIntegration"];
  };
  "/integrations/incidentManagement/deleteMicrosoftTeamsIntegrationV2": {
    /** Delete Microsoft Teams alert integration */
    post: operations["deleteMicrosoftTeamsIntegrationV2"];
  };
  "/integrations/incidentManagement/deleteMicrosoftTeamsUser": {
    /** Remove configurations for Microsoft Teams user */
    post: operations["deleteMicrosoftTeamsUser"];
  };
  "/integrations/incidentManagement/deleteOpenAIIntegration": {
    /** Delete OpenAI integration */
    post: operations["deleteOpenAIIntegration"];
  };
  "/integrations/incidentManagement/deletePagerDutyIntegration": {
    /** Delete PagerDuty alert integration */
    post: operations["deletePagerDutyIntegration"];
  };
  "/integrations/incidentManagement/deletePimlocIntegration": {
    /** Delete Pimloc integration */
    post: operations["deletePimlocIntegration"];
  };
  "/integrations/incidentManagement/deleteRaptorIntegration": {
    /** Delete Raptor Integration */
    post: operations["deleteRaptorIntegration"];
  };
  "/integrations/incidentManagement/deleteServiceNowIntegration": {
    /** Delete ServiceNow alert integration */
    post: operations["deleteServiceNowIntegration"];
  };
  "/integrations/incidentManagement/deleteSlackIntegrationV2": {
    /** Delete Slack alert integration v2 */
    post: operations["deleteSlackIntegrationV2"];
  };
  "/integrations/incidentManagement/getDiceIntegration": {
    /** Get Dice integration */
    post: operations["getDiceIntegration"];
  };
  "/integrations/incidentManagement/getInformacastIntegration": {
    /** Get Informacast integration */
    post: operations["getInformacastIntegration"];
  };
  "/integrations/incidentManagement/getInformacastScenarios": {
    /** Get Informacast scenarios */
    post: operations["getInformacastScenarios"];
  };
  "/integrations/incidentManagement/getLumeoIntegration": {
    /** Get Lumeo integration */
    post: operations["getLumeoIntegration"];
  };
  "/integrations/incidentManagement/getMicrosoftTeamsIntegration": {
    /** Get Microsoft Teams alert integration */
    post: operations["getMicrosoftTeamsIntegration"];
  };
  "/integrations/incidentManagement/getMicrosoftUsersJoinedTeams": {
    /** Get a list of teams a Microsoft Teams user joined */
    post: operations["getMicrosoftUsersJoinedTeams"];
  };
  "/integrations/incidentManagement/getOpenAIIntegration": {
    /** Get OpenAI integration */
    post: operations["getOpenAIIntegration"];
  };
  "/integrations/incidentManagement/getOpenAIModels": {
    /** Get list of OpenAI models */
    post: operations["getOpenAIModels"];
  };
  "/integrations/incidentManagement/getPimlocIntegration": {
    /** Get Pimloc integration */
    post: operations["getPimlocIntegration"];
  };
  "/integrations/incidentManagement/getRaptorBuildings": {
    /** Get Raptor Buildings */
    post: operations["getRaptorBuildings"];
  };
  "/integrations/incidentManagement/getRaptorIntegration": {
    /** Get Raptor Integration */
    post: operations["getRaptorIntegration"];
  };
  "/integrations/incidentManagement/getRaptorTemplates": {
    /** Get Raptor Templates */
    post: operations["getRaptorTemplates"];
  };
  "/integrations/incidentManagement/initiateMicrosoftTeamsOAuth": {
    /** Initiate the Microsoft Teams OAuth Process */
    post: operations["initiateMicrosoftTeamsOAuth"];
  };
  "/integrations/incidentManagement/initiateSlackOAuth": {
    /** Initiate the Slack OAuth Process */
    post: operations["initiateSlackOAuth"];
  };
  "/integrations/incidentManagement/installMicrosoftTeamsBotForTeam": {
    /** Install notification bot for Microsoft Teams team */
    post: operations["installMicrosoftTeamsBotForTeam"];
  };
  "/integrations/incidentManagement/installMicrosoftTeamsBotForUser": {
    /** Install notification bot for Microsoft Teams user */
    post: operations["installMicrosoftTeamsBotForUser"];
  };
  "/integrations/incidentManagement/uninstallMicrosoftTeamsBotForTeam": {
    /** Uninstall notification bot for Microsoft Teams team */
    post: operations["uninstallMicrosoftTeamsBotForTeam"];
  };
  "/integrations/incidentManagement/uninstallMicrosoftTeamsBotForUser": {
    /** Uninstall notification bot for Microsoft Teams user */
    post: operations["uninstallMicrosoftTeamsBotForUser"];
  };
  "/integrations/incidentManagement/updateDiceIntegration": {
    /** Update Dice integration */
    post: operations["updateDiceIntegration"];
  };
  "/integrations/incidentManagement/updateEmailIntegration": {
    /** Update email alert integration */
    post: operations["updateEmailIntegration"];
  };
  "/integrations/incidentManagement/updateInformacastIntegration": {
    /** Update Informacast rules engine integration */
    post: operations["updateInformacastIntegration"];
  };
  "/integrations/incidentManagement/updateLumeoIntegration": {
    /** Update Lumeo integration */
    post: operations["updateLumeoIntegration"];
  };
  "/integrations/incidentManagement/updateMattermostIntegration": {
    /** Update Mattermost alert integration */
    post: operations["updateMattermostIntegration"];
  };
  "/integrations/incidentManagement/updateMicrosoftTeamsIntegration": {
    /** Update Microsoft Teams alert integration */
    post: operations["updateMicrosoftTeamsIntegration"];
  };
  "/integrations/incidentManagement/updateMicrosoftTeamsIntegrationV2": {
    /** Update Microsoft Teams alert integration */
    post: operations["updateMicrosoftTeamsIntegrationV2"];
  };
  "/integrations/incidentManagement/updateOpenAIIntegration": {
    /** Update OpenAI integration */
    post: operations["updateOpenAIIntegration"];
  };
  "/integrations/incidentManagement/updatePagerDutyIntegration": {
    /** Update PagerDuty alert integration */
    post: operations["updatePagerDutyIntegration"];
  };
  "/integrations/incidentManagement/updatePimlocIntegration": {
    /** Update Pimloc integration */
    post: operations["updatePimlocIntegration"];
  };
  "/integrations/incidentManagement/updateRaptorIntegration": {
    /** Update Raptor Integration */
    post: operations["updateRaptorIntegration"];
  };
  "/integrations/incidentManagement/updateServiceNowIntegration": {
    /** Update ServiceNow alert integration */
    post: operations["updateServiceNowIntegration"];
  };
  "/integrations/incidentManagement/updateSlackIntegration": {
    /** Update Slack alert integration */
    post: operations["updateSlackIntegration"];
  };
  "/integrations/incidentManagement/updateSlackIntegrationV2": {
    /** Update Slack alert integration v2 */
    post: operations["updateSlackIntegrationV2"];
  };
  "/integrations/org/getApiTokenApplications": {
    /** Get details of all open api token requests for organization */
    post: operations["getApiTokenApplications"];
  };
  "/integrations/org/getApiTokens": {
    /** Get list of all api tokens for organization */
    post: operations["getApiTokens"];
  };
  "/integrations/org/getOrgIntegrations": {
    /** Get details of all third-party integrations for organization */
    post: operations["getOrgIntegrations"];
  };
  "/integrations/org/getOrgIntegrationsV2": {
    /** Get details of all V2 third-party integrations for an organization */
    post: operations["getOrgIntegrationsV2"];
  };
  "/integrations/org/revokeApiToken": {
    /** Remove an api token from organization. Note: this is irreversible */
    post: operations["revokeApiToken"];
  };
  "/integrations/org/submitApiTokenApplication": {
    /** Request an api token for organization */
    post: operations["submitApiTokenApplication"];
  };
  "/integrations/org/updateApiToken": {
    /** Update display name and permissions of an api token */
    post: operations["updateApiToken"];
  };
  "/integrations/revokeApiToken": {
    /** Remove an api token from organization. Note: this is irreversible */
    post: operations["revokeApiTokenDep"];
  };
  "/integrations/serviceManagement/createEnvoyInvite": {
    /** Create an invite with Envoy */
    post: operations["createEnvoyInvite"];
  };
  "/integrations/serviceManagement/deleteEnvoyIntegration": {
    /** Delete Envoy badge integration */
    post: operations["deleteEnvoyIntegration"];
  };
  "/integrations/serviceManagement/deleteEnvoyIntegrationV2": {
    /** Delete Envoy integration */
    post: operations["deleteEnvoyIntegrationV2"];
  };
  "/integrations/serviceManagement/deleteGuest": {
    /** Delete Guest */
    post: operations["deleteGuestI"];
  };
  "/integrations/serviceManagement/deleteGuestManagementIntegration": {
    /** Delete guest management integration */
    post: operations["deleteGuestManagementIntegration"];
  };
  "/integrations/serviceManagement/deleteToastIntegration": {
    /** Delete Toast integration */
    post: operations["deleteToastIntegration"];
  };
  "/integrations/serviceManagement/deleteToastIntegrationV2": {
    /** Delete Toast integration */
    post: operations["deleteToastIntegrationV2"];
  };
  "/integrations/serviceManagement/getAllGuestsByOrg": {
    /** Get All Guests by Org */
    post: operations["getAllGuestsByOrgI"];
  };
  "/integrations/serviceManagement/getCalendlyEventDetails": {
    /** Get Calendly event details */
    post: operations["getCalendlyEventDetails"];
  };
  "/integrations/serviceManagement/getEnvoyIntegration": {
    /** Get Envoy integration */
    post: operations["getEnvoyIntegration"];
  };
  "/integrations/serviceManagement/getGuest": {
    /** Get Guest */
    post: operations["getGuestI"];
  };
  "/integrations/serviceManagement/getGuestManagementIntegration": {
    /** Get guest management integration details */
    post: operations["getGuestManagementIntegration"];
  };
  "/integrations/serviceManagement/getToastIntegration": {
    /** Get Toast integration */
    post: operations["getToastIntegration"];
  };
  "/integrations/serviceManagement/getToastServiceAreas": {
    /** Get list of Toast service areas to assign cameras */
    post: operations["getToastServiceAreas"];
  };
  "/integrations/serviceManagement/initiateEnvoyOAuth": {
    /** Initiate the Envoy OAuth Process */
    post: operations["initiateEnvoyOAuth"];
  };
  "/integrations/serviceManagement/updateEnvoyIntegration": {
    /** Update Envoy badge integration */
    post: operations["updateEnvoyIntegration"];
  };
  "/integrations/serviceManagement/updateEnvoyIntegrationV2": {
    /** Update Envoy integration */
    post: operations["updateEnvoyIntegrationV2"];
  };
  "/integrations/serviceManagement/updateGuest": {
    /** Update Guest */
    post: operations["updateGuestI"];
  };
  "/integrations/serviceManagement/updateGuestManagementIntegration": {
    /** Update guest management integration configuration */
    post: operations["updateGuestManagementIntegration"];
  };
  "/integrations/serviceManagement/updateToastIntegration": {
    /** Update Toast integration */
    post: operations["updateToastIntegration"];
  };
  "/integrations/serviceManagement/updateToastIntegrationV2": {
    /** Update Toast integration */
    post: operations["updateToastIntegrationV2"];
  };
  "/integrations/storage/deleteAwsIntegration": {
    /** Delete AWS S3 clip storage integration */
    post: operations["deleteAwsIntegration"];
  };
  "/integrations/storage/deleteBoxIntegration": {
    /** Delete Box clip storage integration */
    post: operations["deleteBoxIntegration"];
  };
  "/integrations/storage/deleteDropboxIntegration": {
    /** Delete Dropbox clip storage integration */
    post: operations["deleteDropboxIntegration"];
  };
  "/integrations/storage/deleteGoogleIntegration": {
    /** Delete Google Drive clip storage integration */
    post: operations["deleteGoogleIntegration"];
  };
  "/integrations/storage/deleteGoogleIntegrationV2": {
    /** Delete Google Drive clip storage integration */
    post: operations["deleteGoogleIntegrationV2"];
  };
  "/integrations/storage/deleteOffice365Integration": {
    /** Delete Office365 Sharepoint clip storage integration */
    post: operations["deleteOffice365Integration"];
  };
  "/integrations/storage/getGoogleIntegration": {
    /** Get Google Drive clip storage integration */
    post: operations["getGoogleIntegration"];
  };
  "/integrations/storage/initiateDropboxOAuth": {
    /** Initiate the Dropbox OAuth Process */
    post: operations["initiateDropboxOAuth"];
  };
  "/integrations/storage/initiateGoogleOAuth": {
    /** Initiate the Google OAuth Process */
    post: operations["initiateGoogleOAuth"];
  };
  "/integrations/storage/initiateOffice365OAuth": {
    /** Initiate the Office365 OAuth Process */
    post: operations["initiateOffice365OAuth"];
  };
  "/integrations/storage/migrateGoogleIntegration": {
    /** Migrate Google Drive settings from the V1 table to the V2 table */
    post: operations["migrateGoogleIntegration"];
  };
  "/integrations/storage/refreshGoogleAccessToken": {
    /** Refresh Google access token */
    post: operations["refreshGoogleAccessToken"];
  };
  "/integrations/storage/revokeGoogleDriveAccess": {
    /** Revokes access to a Google Drive account */
    post: operations["revokeGoogleDriveAccess"];
  };
  "/integrations/storage/updateAwsIntegration": {
    /** Update AWS S3 clip storage integration */
    post: operations["updateAwsIntegration"];
  };
  "/integrations/storage/updateBoxIntegration": {
    /** Update Box clip storage integration */
    post: operations["updateBoxIntegration"];
  };
  "/integrations/storage/updateDropboxIntegration": {
    /** Update Dropbox clip storage integration */
    post: operations["updateDropboxIntegration"];
  };
  "/integrations/storage/updateGoogleIntegration": {
    /** Update Google Drive clip storage integration */
    post: operations["updateGoogleIntegration"];
  };
  "/integrations/storage/updateGoogleIntegrationV2": {
    /** Update Google Drive clip storage integration */
    post: operations["updateGoogleIntegrationV2"];
  };
  "/integrations/storage/updateOffice365Integration": {
    /** Update Office365 Sharepoint clip storage integration */
    post: operations["updateOffice365Integration"];
  };
  "/integrations/submitApiTokenApplication": {
    /** Request an api token for organization */
    post: operations["submitApiTokenApplicationDep"];
  };
  "/integrations/subscribeZapierWebhook": {
    /** Setup a Zapier webhook */
    post: operations["subscribeZapierWebhookDep"];
  };
  "/integrations/unsubscribeZapierWebhook": {
    /** Delete a Zapier webhook */
    post: operations["unsubscribeZapierWebhookDep"];
  };
  "/integrations/updateAmtIntegration": {
    /** Update Amt badge integration */
    post: operations["updateAmtIntegrationDep"];
  };
  "/integrations/updateApiToken": {
    /** Update display name and permissions of an api token */
    post: operations["updateApiTokenDep"];
  };
  "/integrations/updateDeviceIntegration": {
    /** Update Device integration */
    post: operations["updateDeviceIntegrationDep"];
  };
  "/integrations/updateMattermostIntegration": {
    /** Update Mattermost alert integration */
    post: operations["updateMattermostIntegrationDep"];
  };
  "/integrations/updateNoonlightSettings": {
    /** Update Noonlight integration */
    post: operations["updateNoonlightSettings"];
  };
  "/integrations/updateOpenAIIntegration": {
    /** Update OpenAI integration */
    post: operations["updateOpenAIIntegrationDep"];
  };
  "/integrations/updateWebhookIntegration": {
    /** Update outbound webhook alert integration */
    post: operations["updateWebhookIntegrationDep"];
  };
  "/integrations/updateWebhookIntegrationV2": {
    /** Update preexisting webhooks */
    post: operations["updateWebhookIntegrationV2Dep"];
  };
  "/integrations/validateToken": {
    /** Verifies an API token is still active */
    post: operations["validateTokenDep"];
  };
  "/integrations/webhooks/deleteWebhookIntegration": {
    /** Delete outbound webhook alert integration */
    post: operations["deleteWebhookIntegration"];
  };
  "/integrations/webhooks/deleteWebhookIntegrationV2": {
    /** Delete entire webhook integration */
    post: operations["deleteWebhookIntegrationV2"];
  };
  "/integrations/webhooks/getWebhookIntegration": {
    /** Get webhook integration */
    post: operations["getWebhookIntegration"];
  };
  "/integrations/webhooks/subscribeZapierWebhook": {
    /** Setup a Zapier webhook */
    post: operations["subscribeZapierWebhook"];
  };
  "/integrations/webhooks/unsubscribeZapierWebhook": {
    /** Delete a Zapier webhook */
    post: operations["unsubscribeZapierWebhook"];
  };
  "/integrations/webhooks/updateWebhookIntegration": {
    /** Update outbound webhook alert integration */
    post: operations["updateWebhookIntegration"];
  };
  "/integrations/webhooks/updateWebhookIntegrationV2": {
    /** Update preexisting webhooks */
    post: operations["updateWebhookIntegrationV2"];
  };
  "/internal/accessControlDoorOnly": {
    /** Migrate access control door only from sf opp */
    post: operations["accessControlDoorOnly"];
  };
  "/internal/addPartnerAsSuperAdmin": {
    /** Add partner as super admin */
    post: operations["addPartnerAsSuperAdmin"];
  };
  "/internal/alarmMonitoringOnly": {
    /** Migrate alarm monitoring only from sf opp */
    post: operations["alarmMonitoringOnly"];
  };
  "/internal/createCombinedLicensesFromV1": {
    /** Migrate pro and ent devices, cloud archiving, alm and acd from sf opp */
    post: operations["createCombinedLicensesFromV1"];
  };
  "/internal/createOrg": {
    /** Create a new organization */
    post: operations["createOrg"];
  };
  "/internal/createPartnerOrg": {
    /** Create a new partner organization */
    post: operations["createPartnerOrg"];
  };
  "/internal/createReturnInventoryAuditReservation": {
    /** Create return inventory audit reservation */
    post: operations["createReturnInventoryAuditReservation"];
  };
  "/internal/createSupportAuthority": {
    /** Add a support authority to organization */
    post: operations["createInternalSalesforceSupportAuthority"];
  };
  "/internal/developerNewsletterEnroll": {
    /** Enroll in developer newsletter */
    post: operations["developerNewsletterEnroll"];
  };
  "/internal/entDevicesOnly": {
    /** Migrate ent devices only from sf opp */
    post: operations["entDevicesOnly"];
  };
  "/internal/getSuperAdminGroupUUID": {
    /** Get super admin group UUID */
    post: operations["getSuperAdminGroupUUID"];
  };
  "/internal/initiateShipment": {
    /** Initiate shipment process */
    post: operations["initiateShipment"];
  };
  "/internal/listOrgs": {
    /** List organizations */
    post: operations["listOrgs"];
  };
  "/internal/parentLifetimeSpend": {
    /** Get parent lifetime spend information */
    post: operations["parentLifetimeSpend"];
  };
  "/internal/proDevicesOnly": {
    /** Migrate pro devices only from sf opp */
    post: operations["proDevicesOnly"];
  };
  "/internal/requestHardwareForDevelopment": {
    /** Request hardware for development purposes */
    post: operations["requestHardwareForDevelopment"];
  };
  "/internal/sendShipmentShippedEmail": {
    /** Send shipment shipped email notification */
    post: operations["sendShipmentShippedEmail"];
  };
  "/internal/setOpportunityForPurchaseOrder": {
    /** Set opportunity for purchase order */
    post: operations["setOpportunityForPurchaseOrder"];
  };
  "/internal/verifyCanMigrateOrgFromV1": {
    /** Verify org can migrate from v1, takes in custom CSV generated from Salesforce script */
    post: operations["verifyCanMigrateOrgFromV1"];
  };
  "/invoice/charge": {
    /** Charge an invoice, version 0 (original) */
    post: operations["invoiceCharge"];
  };
  "/invoice/chargeV1": {
    /** Charge an invoice, version 1 */
    post: operations["invoiceChargeV1"];
  };
  "/invoice/chargeV2": {
    /** Charge an invoice, version 2 */
    post: operations["invoiceChargeV2"];
  };
  "/invoice/details": {
    /** Get details of an invoice, version 0 (original) */
    post: operations["invoiceDetails"];
  };
  "/invoice/detailsV1": {
    /** Get details of an invoice, version 1 */
    post: operations["invoiceDetailsV1"];
  };
  "/invoice/detailsV2": {
    /** Get details of an invoice, version 2 */
    post: operations["invoiceDetailsV2"];
  };
  "/keypad/authenticatePin": {
    /** Authenticate a keypad PIN */
    post: operations["authenticatePin"];
  };
  "/keypad/checkin": {
    /** Method for keypad online/offline processing */
    post: operations["keypadCheckin"];
  };
  "/keypad/claimKeypadActivationToken": {
    /** Connects a keypad to Rhombus services */
    post: operations["claimKeypadActivationToken"];
  };
  "/keypad/getCurrentKeypad": {
    /** Get the current keypad */
    post: operations["getCurrentKeypad"];
  };
  "/keypad/getKeypadsForLocation": {
    /** Get a list of all registered keypads for a location */
    post: operations["getKeypadsForLocation"];
  };
  "/keypad/getKeypadsForOrg": {
    /** Get a list of all registered keypads for an org */
    post: operations["getKeypadsForOrg"];
  };
  "/keypad/publishKeypadCommand": {
    /** Publishes a STOMP containing a keypad command which is broadcasted to a location */
    post: operations["publishKeypadCommand"];
  };
  "/keypad/unregisterKeypad": {
    /** Unregister a keypad */
    post: operations["unregisterKeypad"];
  };
  "/keypad/updateKeypad": {
    /** Update keypad settings */
    post: operations["updateKeypad"];
  };
  "/kiosk/claimKioskActivationToken": {
    /** Update kiosk settings */
    post: operations["claimKioskActivationToken"];
  };
  "/kiosk/deleteKiosk": {
    /** Deleted a kiosk */
    post: operations["deleteKiosk"];
  };
  "/kiosk/getCurrentKiosk": {
    /** Get the current kiosk */
    post: operations["getCurrentKiosk"];
  };
  "/kiosk/getKiosksForLocation": {
    /** Get a list of all registered kiosks for a location */
    post: operations["getKiosksForLocation"];
  };
  "/kiosk/getKiosksForOrg": {
    /** Get a list of all registered kiosks for an org */
    post: operations["getKiosksForOrg"];
  };
  "/kiosk/heartbeat": {
    /** Method for kiosk online/offline processing */
    post: operations["kioskCheckin"];
  };
  "/kiosk/unregisterKiosk": {
    /** Unregister a kiosk */
    post: operations["unregisterKiosk"];
  };
  "/kiosk/updateKiosk": {
    /** Update kiosk settings */
    post: operations["updateKiosk"];
  };
  "/license/assignACUDoorLicense": {
    /** Assign ACU door license */
    post: operations["assignACUDoorLicense"];
  };
  "/license/assignAlertMonitoringLicense": {
    /** Assign alert monitoring license */
    post: operations["assignAlertMonitoringLicense"];
  };
  "/license/assignDeviceLicense": {
    /** Assign or unassign a device license. */
    post: operations["assignDeviceLicense"];
  };
  "/license/assignLicense": {
    /** Assign an add-on license to a device */
    post: operations["assignLicense"];
  };
  "/license/calculateLicenseStatsForClientOrg": {
    /** Calculate license statistics for client organization */
    post: operations["calculateLicenseStatsForClientOrg"];
  };
  "/license/calculateLicenseStatsForOrg": {
    /** Calculate license statistics for organization */
    post: operations["calculateLicenseStatsForOrg"];
  };
  "/license/catalog/findCatalogItems": {
    /** Find catalog items */
    post: operations["findCatalogItems"];
  };
  "/license/catalog/getCatalogItemByProductCode": {
    /** Get catalog item by product code */
    post: operations["getCatalogItemByProductCode"];
  };
  "/license/claimkey/claimLicenses": {
    /** Start claiming licenses represented by claim key with the specified code. This operation is asynchronous. */
    post: operations["claimLicenses"];
  };
  "/license/claimkey/claimLicensesForClientOrg": {
    /** Claim licenses for client organization */
    post: operations["claimLicensesForClientOrg"];
  };
  "/license/claimkey/createClaimKey": {
    /** Create claim key */
    post: operations["createClaimKey"];
  };
  "/license/claimkey/createRenewalClaimKey": {
    /** Create renewal claim key */
    post: operations["createRenewalClaimKey"];
  };
  "/license/claimkey/findClaimKeysByOrg": {
    /** Find claim keys by org */
    post: operations["findClaimKeysByOrg"];
  };
  "/license/claimkey/getClaimKey": {
    /** Get claim key with the specified uuid */
    post: operations["getClaimKey"];
  };
  "/license/claimkey/getClaimKeyByCode": {
    /** Get claim key with the specified code */
    post: operations["getClaimKeyByCode"];
  };
  "/license/claimkey/getClaimKeyByCodeForClientOrg": {
    /** Get claim key with the specified code for a client organization. */
    post: operations["getClaimKeyByCodeForClientOrg"];
  };
  "/license/claimkey/returnClaimKeyProductQuantities": {
    /** Return claim key product quantities */
    post: operations["returnClaimKeyProductQuantities"];
  };
  "/license/createACUDoorLicense": {
    /** Create ACU door license */
    post: operations["createACUDoorLicense"];
  };
  "/license/createAlertMonitoringLicense": {
    /** Create alert monitoring license */
    post: operations["createAlertMonitoringLicense"];
  };
  "/license/createDeviceLicense": {
    /** Create a device license for an organization */
    post: operations["createDeviceLicense"];
  };
  "/license/createLicense": {
    /** Create an add-on license for an organization */
    post: operations["createLicense"];
  };
  "/license/deleteAlertMonitoringLicense": {
    /** Delete alert monitoring license */
    post: operations["deleteAlertMonitoringLicense"];
  };
  "/license/deleteDeviceLicense": {
    /** Delete an unassigned device license from an organization */
    post: operations["deleteDeviceLicense"];
  };
  "/license/deleteLicense": {
    /** Delete an unassigned add-on license from an organization */
    post: operations["deleteLicense"];
  };
  "/license/findLicensesByClaimKey": {
    /** Find licenses by claim key */
    post: operations["findLicensesByClaimKey"];
  };
  "/license/getACUDoorLicenses": {
    /** Get list of access controlled door licenses licenses available in organization */
    post: operations["getACUDoorLicenses"];
  };
  "/license/getACUDoorLicensesForClientOrg": {
    /** Get list of access controlled door licenses licenses available for a client organization */
    post: operations["getACUDoorLicensesForClientOrg"];
  };
  "/license/getAlertMonitoringLicenses": {
    /** Get list of alert monitoring licenses available in organization */
    post: operations["getAlertMonitoringLicenses"];
  };
  "/license/getAlertMonitoringLicensesForClientOrg": {
    /** Get list of alert monitoring licenses available for a client organization */
    post: operations["getAlertMonitoringLicensesForClientOrg"];
  };
  "/license/getDeviceLicenses": {
    /** Get list of device licenses available in organization */
    post: operations["getDeviceLicenses"];
  };
  "/license/getDeviceLicensesForClientOrg": {
    /** Get list of device licenses available for a client organization */
    post: operations["getDeviceLicensesForClientOrg"];
  };
  "/license/getLicenses": {
    /** Get list of add-on licenses available in organization */
    post: operations["getLicenses"];
  };
  "/license/getLicensesForClientOrg": {
    /** Get a list of licenses available for a client organization */
    post: operations["getLicensesForClientOrg"];
  };
  "/location/addLocationLabel": {
    /** Add a label to a location */
    post: operations["addLocationLabel"];
  };
  "/location/createLocation": {
    /** Create a location */
    post: operations["createlocation"];
  };
  "/location/deleteLocation": {
    /** Remove a location */
    post: operations["deleteLocation"];
  };
  "/location/geoCode": {
    /** Get the latitude and longitude of an address */
    post: operations["geoCode"];
  };
  "/location/getLocation": {
    /** Get location by id */
    post: operations["getLocation"];
  };
  "/location/getLocationLabelsForOrg": {
    /** Get all location labels for an organization */
    post: operations["getLocationLabelsForOrg"];
  };
  "/location/getLocations": {
    /** Get list of locations in organization */
    post: operations["getLocations"];
  };
  "/location/getLocationsAssociatedToLocationLabelsByOrg": {
    /** Get all locations associated to location labels for an organization */
    post: operations["getLocationsAssociatedToLocationLabelsByOrg"];
  };
  "/location/getLocationsByGeo": {
    /** Get list of locations given latitude and longitude */
    post: operations["getLocationsByGeo"];
  };
  "/location/getLocationsBySubLocationsHierarchyKey": {
    /** Get nested locations by subLocationHierarchyKey */
    post: operations["getLocationsBySubLocationsHierarchyKey"];
  };
  "/location/getLocationsV2": {
    /** Get list of locations in organization */
    post: operations["getLocationsV2"];
  };
  "/location/removeLocationLabel": {
    /** Remove a label from a location */
    post: operations["removeLocationLabel"];
  };
  "/location/selectiveUpdateLocation": {
    /** Selectively update a location */
    post: operations["selectiveUpdateLocation"];
  };
  "/location/updateLocation": {
    /** Update a location **NOTE: This will replace old settings meaning if you leave a field blank it will be overrode to blank. For selective field updates use the endpoint /selectiveUpdateLocation */
    post: operations["updateLocation"];
  };
  "/location/validateLocation": {
    /** Validate a location address for Alarm Monitoring */
    post: operations["validateLocation"];
  };
  "/logistics/getRMAs": {
    /** Get RMAs */
    post: operations["getRMAs"];
  };
  "/logistics/getShipments": {
    /** Get shipments */
    post: operations["getShipments"];
  };
  "/logistics/getWarrantyApprovedRMAs": {
    /** Get warranty approved RMAs */
    post: operations["getWarrantyApprovedRMAs"];
  };
  "/maps/generateMapUrl": {
    /** Generate a map URL */
    post: operations["generateMapUrl"];
  };
  "/mediadevice/getBulkMediaDeviceDetails": {
    /** Get media information of any video-supporting media device */
    post: operations["getBulkMediaDeviceDetails"];
  };
  "/metric/logEvents": {
    /** Upload logs */
    post: operations["logEvent"];
  };
  "/metric/mobile/logEvents": {
    /** Upload mobile logs */
    post: operations["uploadMobileLogs"];
  };
  "/metric/reportError": {
    /** Report an error */
    post: operations["reportError"];
  };
  "/mobile/loginToOrg": {
    /** Allows a multi-org user on mobile to login to a different org they are able to access. */
    post: operations["loginToOrg"];
  };
  "/mobile/loginVerifiedSupportAuthority": {
    /** Mobile login of partner to client org. */
    post: operations["loginVerifiedSupportAuthority"];
  };
  "/mobile/logout": {
    /** Ends a mobile session. */
    post: operations["logoutMobileUser"];
  };
  "/mobile/refreshMobileSession": {
    /** Refreshes the mobile session for the authenticated user. */
    post: operations["refreshMobileSession"];
  };
  "/mobile/updateNotificationToken": {
    /** Updates a mobile notification token for the Console mobile app */
    post: operations["updateNotificationToken"];
  };
  "/mobile/updateRhombusKeyNotificationToken": {
    /** Updates a mobile notification token for the Rhombus Key mobile app */
    post: operations["updateRhombusKeyNotificationToken"];
  };
  "/modularai/addModelToDevice": {
    /** Add model to device */
    post: operations["addModelToDevice"];
  };
  "/modularai/getDevicesForModel": {
    /** Get devices running model */
    post: operations["getDevicesForModel"];
  };
  "/modularai/getModels": {
    /** Get available models */
    post: operations["getModels"];
  };
  "/modularai/getModelsAddedToDevice": {
    /** Get models added to device */
    post: operations["getModelsAddedToDevice"];
  };
  "/modularai/removeModelFromDevice": {
    /** Remove model from device */
    post: operations["removeModelFromDevice"];
  };
  "/modularai/updateModel": {
    /** Update model config name, description, or model parameters */
    post: operations["updateModel"];
  };
  "/modularai/uploadCustomModel": {
    /** Upload a custom model */
    post: operations["uploadCustomModel"];
  };
  "/modularai/uploadQuantizedModel": {
    /** [DEV ONLY] Upload a quantized model for an existing modular AI config */
    post: operations["uploadQuantizedModel"];
  };
  "/network/getDeviceNetworkConfiguration": {
    /** Get device network configuration */
    post: operations["getDeviceNetworkConfiguration"];
  };
  "/network/updateDeviceIpConfiguration": {
    /** Update device IP configuration */
    post: operations["updateDeviceIpConfiguration"];
  };
  "/oauth/authorize": {
    /** User authorizes to share permission and ac settings, receives temporary authorization code */
    get: operations["authorize"];
  };
  "/oauth/deleteApplication": {
    /** Delete application */
    post: operations["deleteApplication"];
  };
  "/oauth/getAllApplicationsForOrg": {
    /** Get all applications for org */
    post: operations["getAllApplicationsForOrg"];
  };
  "/oauth/getApplicationByClientId": {
    /** Get application by clientId */
    post: operations["getApplicationByClientId"];
  };
  "/oauth/submitApplication": {
    /** Application for client_id and client_secret */
    post: operations["submitApplication"];
  };
  "/oauth/updateApplication": {
    /** Update application */
    post: operations["updateApplication"];
  };
  "/occupancy/getMinimalOccupancySensorStateList": {
    /** Get basic state information about all proximity tags in organization */
    post: operations["getMinimalOccupancySensorStateList"];
  };
  "/occupancy/getOccupancyEventsForSensor": {
    /** Get recent events for specified proximity tag */
    post: operations["getOccupancyEventsForSensor"];
  };
  "/occupancy/getOccupancyPresenceWindows": {
    /** Get stored video information for sensor */
    post: operations["getOccupancyPresenceWindows"];
  };
  "/occupancy/updateDetails": {
    /** Update the details of an occupancy sensor */
    post: operations["updateOccupancySensorDetails"];
  };
  "/openapiwebservice/getSchemas": {
    /** Exposes custom objects and enums to the component schema - this endpoint should not be invoked */
    post: operations["getSchemas"];
  };
  "/org/claimActivationToken": {
    /** Claim activation token for organization */
    post: operations["claimActivationToken"];
  };
  "/org/claimShipmentRegistrationToken": {
    /** Claim shipment registration token for an organization */
    post: operations["claimShipmentRegistrationToken"];
  };
  "/org/createPendingRegistration": {
    /** Create a pending registration. Registration will be completed when the hardware establishes connectivity */
    post: operations["createPendingRegistration"];
  };
  "/org/deleteCloudArchivingConfig": {
    /** Delete scoped cloud archiving config.  Note that the priority of scoping is Org > Location > Device */
    post: operations["deleteCloudArchivingConfig"];
  };
  "/org/deleteKeypadLogo": {
    /** Delete keypad logo. */
    post: operations["deleteKeypadLogo"];
  };
  "/org/deleteRhombusKeyLogo": {
    /** Delete rhombus key logo. */
    post: operations["deleteRhombusKeyLogo"];
  };
  "/org/findAllHardwareWithPendingRegistration": {
    /** Find all hardware for which a pending registrations exists */
    post: operations["findAllHardwareWithPendingRegistration"];
  };
  "/org/findHardwareAvailableForPendingRegistration": {
    /** Find hardware for which pending registrations can be created */
    post: operations["findHardwareAvailableForPendingRegistration"];
  };
  "/org/findIfTeamNameAvailable": {
    /** Get organization team name if it is available */
    post: operations["findIfTeamNameAvailable"];
  };
  "/org/findSCIMSettingsForOrg": {
    /** Get SCIM configuration for organization */
    post: operations["findSCIMSettingsForOrg"];
  };
  "/org/generateFederatedSessionToken": {
    /** Generate a federated session token login for organization */
    post: operations["generateFederatedSessionToken"];
  };
  "/org/getAwsIntCloudformationFile": {
    /** Get AWS integration cloudformation file */
    post: operations["getAwsIntCloudFormationFile"];
  };
  "/org/getClientOrg": {
    /** Get details about the client organization */
    post: operations["getClientOrg"];
  };
  "/org/getCloudArchivingConfigs": {
    /** Get scoped cloud archiving configs.  Note that the priority of scoping is Org > Location > Device */
    post: operations["getCloudArchivingConfigs"];
  };
  "/org/getDeviceFlags": {
    /** Get flags for a device */
    post: operations["getDeviceFlags"];
  };
  "/org/getFeatures": {
    /** Get organization wide features */
    post: operations["getFeatures"];
  };
  "/org/getLocationFlags": {
    /** Get flags for all locations */
    post: operations["getLocationFlags"];
  };
  "/org/getOrg": {
    /** Get details about organization */
    post: operations["getOrg"];
  };
  "/org/getOrgIntegrations": {
    /** Use endpoints in Integrations Webservice instead */
    post: operations["DEPRECATED_getOrgIntegrations"];
  };
  "/org/getOrgNotificationTemplate": {
    /** This endpoint is no longer in use. Please use getOrgNotificationTemplateV2 instead. */
    post: operations["getOrgNotificationTemplate"];
  };
  "/org/getOrgNotificationTemplateV2": {
    /** Get organization's default notification schedule template */
    post: operations["getOrgNotificationTemplateV2"];
  };
  "/org/getOrgV2": {
    /** Get details about organization */
    post: operations["getOrgV2"];
  };
  "/org/getSAMLSettings": {
    /** Deprecated. Use getSAMLSettingsV2 */
    post: operations["getSAMLSettings"];
  };
  "/org/getSAMLSettingsV2": {
    /** Get details about organization */
    post: operations["getSAMLSettingsV2"];
  };
  "/org/getScimDisplayInfo": {
    /** Get SCIM display info for organization */
    post: operations["getScimDisplayInfo"];
  };
  "/org/getTemporaryOrgToken": {
    /** Generate a temporary org token for use in OAuth flows */
    post: operations["getTemporaryOrgToken"];
  };
  "/org/peekShipmentRegistrationToken": {
    /** Peek at a shipping registration token for an organization */
    post: operations["peekShipmentRegistrationToken"];
  };
  "/org/removePendingRegistration": {
    /** Remove a pending registration */
    post: operations["removePendingRegistration"];
  };
  "/org/revokeSCIMAccessForOrg": {
    /** Revoke SCIM access for organization */
    post: operations["revokeSCIMAccessForOrg"];
  };
  "/org/setFlag": {
    /** Store a flag for organization */
    post: operations["setOrgFlag"];
  };
  "/org/setupSCIMAccessForOrg": {
    /** Initially configure SCIM access for organization */
    post: operations["setupSCIMAccessForOrg"];
  };
  "/org/updateAiTrainingSettings": {
    /** Update organization AI training settings */
    post: operations["updateAiTrainingSettings"];
  };
  "/org/updateCloudArchivingConfig": {
    /** Update scoped cloud archiving config.  Note that the priority of scoping is Org > Location > Device */
    post: operations["updateCloudArchivingConfig"];
  };
  "/org/updateFirmwareSettings": {
    /** Update organization firmware schedule settings */
    post: operations["updateFirmwareSettings"];
  };
  "/org/updateGeneralSettings": {
    /** Update organization General settings */
    post: operations["updateGeneralSettings"];
  };
  "/org/updateMFASettings": {
    /** Update organization MFA settings */
    post: operations["updateMFASettings"];
  };
  "/org/updateOrg": {
    /** Update organization details */
    post: operations["updateOrg"];
  };
  "/org/updateOrgAudioAnalysisPolicy": {
    /** Update organization AI audio analysis policy */
    post: operations["updateOrgAudioAnalysisPolicy"];
  };
  "/org/updateOrgAudioRecordingPolicy": {
    /** Update organization audio recording policy */
    post: operations["updateOrgAudioRecordingPolicy"];
  };
  "/org/updateOrgIntegrations": {
    /** Use endpoints in Integrations Webservice instead */
    post: operations["updateOrgIntegrations"];
  };
  "/org/updateOrgLLMUsagePolicy": {
    /** Update organization's LLM usage opt-in policy */
    post: operations["updateOrgLLMUsagePolicy"];
  };
  "/org/updateOrgNotificationTemplate": {
    /** This endpoint is no longer in use. Please use updateOrgNotificationTemplateV2 instead. */
    post: operations["updateOrgNotificationTemplate"];
  };
  "/org/updateOrgNotificationTemplateV2": {
    /** Update default notification schedule template for newly created Users in Org */
    post: operations["updateOrgNotificationTemplateV2"];
  };
  "/org/updatePendingRegistration": {
    /** Update pending registration for hardware */
    post: operations["updatePendingRegistration"];
  };
  "/org/updateSAMLSettings": {
    /** Deprecated. Use updateSAMLSettingsV2 */
    post: operations["updateSAMLSettings"];
  };
  "/org/updateSAMLSettingsV2": {
    /** Update organization SAML settings */
    post: operations["updateSAMLSettingsV2"];
  };
  "/org/updateSCIMSettingsForOrg": {
    /** Update SCIM configuration for organization */
    post: operations["updateSCIMSettingsForOrg"];
  };
  "/partner/createPartnerClient": {
    /** Create a client account */
    post: operations["createPartnerClient"];
  };
  "/partner/customizeClient": {
    /** Customize a client account */
    post: operations["customizeClient"];
  };
  "/partner/customizeClientDevice": {
    /** Customize a client device */
    post: operations["customizeClientDevice"];
  };
  "/partner/deleteClient": {
    /** Delete a client account */
    post: operations["deletePartnerClient"];
  };
  "/partner/getApiTokenApplications": {
    /** Get details of all open api token requests for organization */
    post: operations["partner_getApiTokenApplications"];
  };
  "/partner/getApiTokens": {
    /** Get list of all api tokens for a partner */
    post: operations["partner_getApiTokens"];
  };
  "/partner/getClientDevices": {
    /** Retrieve a list of devices for a specific client. */
    post: operations["getClientDevices"];
  };
  "/partner/getClientRhombusOrgUsersForPartnerActivationTokenV2": {
    /** Get client rhombus organization users for partner activation token V2 */
    post: operations["getClientRhombusOrgUsersForPartnerActivationTokenV2"];
  };
  "/partner/getClientStatusMap": {
    /** Get a map of all client accounts to device and location info */
    post: operations["getPartnerClientsStatusMap"];
  };
  "/partner/getClientSummaryInfo": {
    /** Get information about a client */
    post: operations["getClientSummaryInfo"];
  };
  "/partner/getClients": {
    /** Get a list of all client accounts */
    post: operations["getPartnerClients"];
  };
  "/partner/getClientsV2": {
    /** Get a list of all client accounts. NOTICE: This is the same as getPartnerClients, but only returns the basic info so partners can login to clients quickly. The other info will be returned by getPartnerClientsStatusMap. */
    post: operations["getPartnerClientsV2"];
  };
  "/partner/getDeviceLicensesForOrg": {
    /** Get a list of licenses available for a client organization */
    post: operations["getDeviceLicensesForOrg"];
  };
  "/partner/getLicensesForOrg": {
    /** Get a list of licenses available for a client organization */
    post: operations["getLicensesForOrg"];
  };
  "/partner/getListOfAllClientDevices": {
    /** Retrieve list of all devices registered across all clients */
    post: operations["getListOfAllClientDevices"];
  };
  "/partner/getListOfAvailableHardware": {
    /** Retrieve a list of hardware available for remote registration. Any hardware originally registered by a Partner is available for re-registration after being removed from an active client account. */
    post: operations["getListOfControlledHardware"];
  };
  "/partner/getPartnerClientMobileAccountAccess": {
    /** Get client mobile account access as partner */
    post: operations["getPartnerClientMobileAccountAccess"];
  };
  "/partner/getShipments": {
    /** Get client shipments */
    post: operations["PartnerGetShipments"];
  };
  "/partner/grantSupportAccessToClient": {
    /** Grant support access to a client account */
    post: operations["grantSupportAccessToClient"];
  };
  "/partner/reassignDeviceOrg": {
    /** Reassign device(s) to a different organization. Only devices which hardware is controlled by the partner can be reassigned */
    post: operations["reassignDeviceOrg"];
  };
  "/partner/registerCameraToClient": {
    /** Register a controlled camera to a client */
    post: operations["registerCameraToClient"];
  };
  "/partner/registerDeal": {
    /** Register a deal */
    post: operations["registerDeal"];
  };
  "/partner/requestAccessToClientAccount": {
    /** Request access to a client account */
    post: operations["requestAccessToClientAccount"];
  };
  "/partner/requestAccessToClientAccountV2": {
    /** Request access to a client account using the V2 endpoint */
    post: operations["requestAccessToClientAccountV2"];
  };
  "/partner/revokeApiToken": {
    /** Remove an api token from organization. Note: this is irreversible */
    post: operations["partner_revokeApiToken"];
  };
  "/partner/submitApiTokenApplication": {
    /** Request a partner api token for 1 or more organizations */
    post: operations["partner_submitApiTokenApplication"];
  };
  "/partner/submitSupportAccessDecisionForPartnerActivationTokenV2": {
    /** Submit support access decision for partner activation token V2 */
    post: operations["submitSupportAccessDecisionForPartnerActivationTokenV2"];
  };
  "/partner/updateApiToken": {
    /** Update display name and permissions of an api token */
    post: operations["partner_updateApiToken"];
  };
  "/partner/updateSendLicenseExpirationEmail": {
    /** Update send license expiration email feature flag by org */
    post: operations["updateManuallySendLicenseExpirationEmail"];
  };
  "/password/forgot": {
    /** Submit a forgot password request for password reset */
    post: operations["forgotPassword"];
  };
  "/password/reset": {
    /** Reset user password using reset token */
    post: operations["resetPassword"];
  };
  "/password/user/signup": {
    /** Create a new user account in the organization */
    post: operations["userSignup"];
  };
  "/permission/assignPermission": {
    /** Use Permission Group endpoints instead */
    post: operations["assignPermission"];
  };
  "/permission/createPartnerPermissionGroup": {
    /** Create a permission group */
    post: operations["createPartnerPermissionGroup"];
  };
  "/permission/createPermissionGroup": {
    /** Create a permission group */
    post: operations["createPermissionGroup"];
  };
  "/permission/deletePartnerPermissionGroup": {
    /** Delete a permission group */
    post: operations["deletePartnerPermissionGroup"];
  };
  "/permission/deletePermissionGroup": {
    /** Delete a permission group */
    post: operations["deletePermissionGroup"];
  };
  "/permission/getPartnerPermissionGroups": {
    /** Get partner permission groups for the organization */
    post: operations["getPartnerPermissionGroups"];
  };
  "/permission/getPermissionGroups": {
    /** Get details about all permission groups in organization */
    post: operations["getPermissionGroups"];
  };
  "/permission/getPermissionGroupsForOrg": {
    /** Get permission groups for a specific organization */
    post: operations["getPermissionGroupsForOrg"];
  };
  "/permission/getPermissionsForCurrentPartner": {
    /** Get permissions for the current partner user */
    post: operations["getPermissionsForCurrentPartner"];
  };
  "/permission/getPermissionsForCurrentUser": {
    /** Get device and functionality permissions for user or API token */
    post: operations["getPermissionsForCurrentUser"];
  };
  "/permission/updatePartnerPermissionGroup": {
    /** Update a partner permission group */
    post: operations["updatePartnerPermissionGroup"];
  };
  "/permission/updatePermissionGroup": {
    /** Update a permission group */
    post: operations["updatePermissionGroup"];
  };
  "/policy/createAccessControlledDoorPolicy": {
    /** Create a policy to be assigned to a access controlled door */
    post: operations["createAccessControlledDoorPolicy"];
  };
  "/policy/createAudioPolicy": {
    /** Create a policy to be assigned to audio gateways */
    post: operations["createAudioPolicy"];
  };
  "/policy/createCameraPolicy": {
    /** Create a policy to be assigned to cameras */
    post: operations["createCameraPolicy"];
  };
  "/policy/createClimatePolicy": {
    /** Create a policy to be assigned to a climate sensor */
    post: operations["createClimatePolicy"];
  };
  "/policy/createDoorPolicy": {
    /** Create a policy to be assigned to a door sensor */
    post: operations["createDoorPolicy"];
  };
  "/policy/createOccupancyPolicy": {
    /** Create a policy to be assigned to a occupancy sensor */
    post: operations["createOccupancyPolicy"];
  };
  "/policy/createPolicyAddendumForLocation": {
    /** Create policy addendum for location */
    post: operations["createPolicyAddendumForLocation"];
  };
  "/policy/createPolicyAddendumsForDevices": {
    /** Create policy addendums for devices */
    post: operations["createPolicyAddendumsForDevices"];
  };
  "/policy/createProximityPolicy": {
    /** Create a policy to be assigned to an asset tag */
    post: operations["createProximityPolicy"];
  };
  "/policy/createSchedule": {
    /** Create a schedule to be used for policy creation */
    post: operations["createSchedule"];
  };
  "/policy/createVideoIntercomPolicy": {
    /** Create a video intercom policy */
    post: operations["createVideoIntercomPolicy"];
  };
  "/policy/deleteAccessControlledDoorPolicy": {
    /** Delete an access controlled door policy */
    post: operations["deleteAccessControlledDoorPolicy"];
  };
  "/policy/deleteAudioPolicy": {
    /** Delete a audio gateway policy */
    post: operations["deleteAudioPolicy"];
  };
  "/policy/deleteCameraPolicy": {
    /** Delete a camera policy */
    post: operations["deleteCameraPolicy"];
  };
  "/policy/deleteClimatePolicy": {
    /** Delete a climate policy */
    post: operations["deleteClimatePolicy"];
  };
  "/policy/deleteDevicePolicyAddendums": {
    /** Delete a policy addendums */
    post: operations["deleteDevicePolicyAddendums"];
  };
  "/policy/deleteDoorPolicy": {
    /** Delete a door sensor policy */
    post: operations["deleteDoorPolicy"];
  };
  "/policy/deleteLocationPolicyAddendum": {
    /** Delete a policy addendums */
    post: operations["deleteLocationPolicyAddendum"];
  };
  "/policy/deleteOccupancyPolicy": {
    /** Delete an Occupancy policy */
    post: operations["deleteOccupancyPolicy"];
  };
  "/policy/deletePolicyPauseSettingForComponentComposite": {
    /** Delete a policy pause setting for a component composite */
    post: operations["deletePolicyPauseSettingForComponentComposite"];
  };
  "/policy/deletePolicyPauseSettingForDevice": {
    /** Delete a policy pause setting for a device */
    post: operations["deletePolicyPauseSettingForDevice"];
  };
  "/policy/deletePolicyPauseSettingForLocation": {
    /** Delete a policy pause setting for a location */
    post: operations["deletePolicyPauseSettingForLocation"];
  };
  "/policy/deleteProximityPolicy": {
    /** Delete an asset tag policy */
    post: operations["deleteProximityPolicy"];
  };
  "/policy/deleteSchedule": {
    /** Delete a schedule used for policy creation */
    post: operations["deleteSchedule"];
  };
  "/policy/deleteVideoIntercomPolicy": {
    /** Delete a video intercom policy */
    post: operations["deleteVideoIntercomPolicy"];
  };
  "/policy/findSchedules": {
    /** Find all schedules in organization */
    post: operations["findSchedules"];
  };
  "/policy/getAccessControlledDoorPolicies": {
    /** Get details about all access controlled door policies in organization */
    post: operations["getAccessControlledDoorPolicies"];
  };
  "/policy/getAudioPolicies": {
    /** Get details about all audio gateway policies in organization */
    post: operations["getAudioPolicies"];
  };
  "/policy/getCameraPolicies": {
    /** Get details about all camera policies in organization */
    post: operations["getCameraPolicies"];
  };
  "/policy/getClimatePolicies": {
    /** Get details about all climate policies in organization */
    post: operations["getClimatePolicies"];
  };
  "/policy/getDoorPolicies": {
    /** Get details about all door sensor policies in organization */
    post: operations["getDoorPolicies"];
  };
  "/policy/getOccupancyPolicies": {
    /** Get details about all occupancy policies in organization */
    post: operations["getOccupancyPolicies"];
  };
  "/policy/getPoliciesUsingSchedule": {
    /** Get details about all climate policies in organization */
    post: operations["getPoliciesUsingSchedule"];
  };
  "/policy/getPolicyAddendums": {
    /** Get the current and planned policy alert addendums */
    post: operations["getPolicyAddendums"];
  };
  "/policy/getPolicyPauseSettings": {
    /** Get the current and planned policy alert pause details */
    post: operations["getPolicyPauseSettings"];
  };
  "/policy/getProximityPolicies": {
    /** Get details about all asset tag policies in organization */
    post: operations["getProximityPolicies"];
  };
  "/policy/getVideoIntercomPolicies": {
    /** Get details about all video intercom policies in organization */
    post: operations["getVideoIntercomPolicies"];
  };
  "/policy/pauseAlertPolicyForComponentComposite": {
    /** Pause alert policy for component composite */
    post: operations["pauseAlertPolicyForComponentComposite"];
  };
  "/policy/pauseAlertPolicyForDevice": {
    /** Pause alert policy for device */
    post: operations["pauseAlertPolicyForDevice"];
  };
  "/policy/pauseAlertPolicyForLocation": {
    /** Pause alert policy for location */
    post: operations["pauseAlertPolicyForLocation"];
  };
  "/policy/updateAccessControlledDoorPolicy": {
    /** Update an access controlled door policy */
    post: operations["updateAccessControlledDoorPolicy"];
  };
  "/policy/updateAudioPolicy": {
    /** Update a audio gateway policy */
    post: operations["updateAudioPolicy"];
  };
  "/policy/updateCameraPolicy": {
    /** Update a camera policy */
    post: operations["updateCameraPolicy"];
  };
  "/policy/updateClimatePolicy": {
    /** Update a climate policy */
    post: operations["updateClimatePolicy"];
  };
  "/policy/updateDoorPolicy": {
    /** Update a door sensor policy */
    post: operations["updateDoorPolicy"];
  };
  "/policy/updateOccupancyPolicy": {
    /** Update an occupancy policy */
    post: operations["updateOccupancyPolicy"];
  };
  "/policy/updateProximityPolicy": {
    /** Update an asset tag policy */
    post: operations["updateProximityPolicy"];
  };
  "/policy/updateSchedule": {
    /** Update a schedule to be used for policy creation */
    post: operations["updateSchedule"];
  };
  "/policy/updateVideoIntercomPolicy": {
    /** Update video intercom policy */
    post: operations["updateVideoIntercomPolicy"];
  };
  "/proximity/getLocomotionEventsForTag": {
    /** Get locomotion events for specified proximity tag */
    post: operations["getLocomotionEventsForTag"];
  };
  "/proximity/getMinimalProximityStateList": {
    /** Get basic state information about all proximity tags in organization */
    post: operations["getMinimalProximityStateList"];
  };
  "/proximity/getProximityEventsForTag": {
    /** Get recent events for specified proximity tag */
    post: operations["getProximityEventsForTags"];
  };
  "/proximity/updateDetails": {
    /** Update details for a proximity tag */
    post: operations["updateProximitySensorDetails"];
  };
  "/rapidsos/getNearbyFeeds": {
    /** Get closest 10 feeds by lat and long */
    post: operations["getNearbyFeeds"];
  };
  "/relay/assignThirdPartyCameraToNVR": {
    /** Assign a third party camera to an NVR */
    post: operations["assignThirdPartyCameraToNVR"];
  };
  "/relay/assignThirdPartyCameraToRelayCamera": {
    /** Assign a third party camera to a relay Camera */
    post: operations["assignThirdPartyCameraToRelayCamera"];
  };
  "/relay/authenticateThirdPartyCamera": {
    /** Authenticate a third party camera, effectively validating the credentials specified to be used for it. */
    post: operations["authenticateThirdPartyCamera"];
  };
  "/relay/createThirdPartyCameraPassword": {
    /** Create a third party camera password */
    post: operations["createThirdPartyCameraPassword"];
  };
  "/relay/deleteThirdPartyCameraPassword": {
    /** Delete a third party camera password */
    post: operations["deleteThirdPartyCameraPasswords"];
  };
  "/relay/executeThirdPartyCameraDiscovery": {
    /** Trigger a discovery of cameras on the local LANs */
    post: operations["executeThirdPartyCameraDiscovery"];
  };
  "/relay/findDefaultRtspUrlsByManufacturer": {
    /** Find default rtsp urls by camera manufacturer. */
    post: operations["findDefaultRtspUrlsByManufacturer"];
  };
  "/relay/findDiscoveriesWithUnassignedRtspEndpoints": {
    /** Finds discoveries that have unassigned RTSP endpoints. Only discoveries containing at least one endpoint are returned. */
    post: operations["findDiscoveriesWithUnassignedRtspEndpoints"];
  };
  "/relay/getAssignedThirdPartyCameras": {
    /** Get a list of the third party cameras assigned to an NVR */
    post: operations["getAssignedThirdPartyCameras"];
  };
  "/relay/getDetails": {
    /** Get hardware details of multiple NVRs */
    post: operations["getNVRDetails"];
  };
  "/relay/getFullNVRState": {
    /** Get detailed information about state of specified NVR */
    post: operations["getFullNVRState"];
  };
  "/relay/getImportThirdPartyCamerasFormat": {
    /** Returns format for importing third party cameras. */
    post: operations["getImportThirdPartyCamerasFormat"];
  };
  "/relay/getMinimalNVRStateList": {
    /** Get basic state information about all NVRs in organization */
    post: operations["getMinimalNVRStateList"];
  };
  "/relay/getMinimalThirdPartyCameraStateList": {
    /** Get basic state information about all third party cameras in the organization */
    post: operations["getMinimalThirdPartyCameraStateList"];
  };
  "/relay/getRtspEndpoints": {
    /** Gets rtsp endpoints for device with the specified mac address. */
    post: operations["getRtspEndpoints"];
  };
  "/relay/getThirdPartyCameraPasswords": {
    /** Get a list of the third party camera passwords */
    post: operations["getThirdPartyCameraPasswords"];
  };
  "/relay/importThirdPartyCameras/{locationUuid}": {
    /** Imports third party cameras in csv format */
    post: operations["importThirdPartyCameras"];
  };
  "/relay/manualDiscoverCamera": {
    /** Manually identify a camera on the network */
    post: operations["manualDiscoverCamera"];
  };
  "/relay/ptzMove": {
    /** Trigger a pan, tilt, or zoom */
    post: operations["ptzMove"];
  };
  "/relay/ptzStatus": {
    /** Trigger a pan, tilt, or zoom */
    post: operations["ptz"];
  };
  "/relay/reboot": {
    /** Reboot an NVR */
    post: operations["rebootNVR"];
  };
  "/relay/unassignThirdPartyCamera": {
    /** Unassign a third party camera from an NVR */
    post: operations["unassignThirdPartyCamera"];
  };
  "/relay/unregister": {
    /** Remove an NVR from organization */
    post: operations["unregisterNVR"];
  };
  "/relay/updateDetailsV2": {
    /** Update hardware details of NVR. */
    post: operations["updateNVRDetailsV2"];
  };
  "/relay/updateFirmware": {
    /** Send command to update firmware to NVR */
    post: operations["updateNVRFirmware"];
  };
  "/report/getAuditFeed": {
    /** Get the latest audit logs for organization */
    post: operations["getAuditFeed"];
  };
  "/report/getAuditFeedForTarget": {
    /** Get audit logs for a specified entity */
    post: operations["getAuditFeedForTarget"];
  };
  "/report/getAverageReport": {
    /** Get the average report if it is available for the specified count report */
    post: operations["getAverageReport"];
  };
  "/report/getAverageReports": {
    /** Get the average reports if they are available for the specified count report */
    post: operations["getAverageReports"];
  };
  "/report/getCountReport": {
    /** Use /getCountReportV2 instead */
    post: operations["getCountReport"];
  };
  "/report/getCountReportV2": {
    /** Get the specified count reports */
    post: operations["getCountReportV2"];
  };
  "/report/getCountReports": {
    /** Get multiple specified count reports */
    post: operations["getCountReports"];
  };
  "/report/getCountReportsForDevicesAtLocation": {
    /** Get count reports by device for a specified location */
    post: operations["getCountReportsForDevicesAtLocation"];
  };
  "/report/getCustomLLMBinaryCounts": {
    /**
     * Retrieves aggregated counts of boolean event values (true/false) produced by a selected prompt over a specified time window.
     *
     * Scope & filters:
     * 	•	promptUuid – The prompt to aggregate (required).
     *
     * Time window & interval:
     * 	•	A time range (startTimeMs → endTimeMs, epoch ms) is required and is used exactly as provided.
     * 	•	If an interval is supplied (e.g., MINUTELY, QUARTERHOURLY, HOURLY), events are bucketed at that granularity.
     * 	•	Aggregation is always performed in the device’s local timezone. Buckets are computed relative to each device’s timezone, then evaluated within the exact provided window.
     *
     * Response:
     * 	•	Per interval bucket, returns a BinaryAggregationValue with counts for true and false.
     * 	•	Includes minValueTimestampMs and maxValueTimestampMs (if available) and the bucket timestamp from BaseReportValue.
     *
     * Notes:
     * 	•	Only binary/boolean prompt types are valid for this endpoint.
     */
    post: operations["getCustomLLMBinaryCounts"];
  };
  "/report/getCustomLLMNumericCounts": {
    /**
     * Retrieves aggregated statistics for numeric events event values produced by a selected prompt over a specified time window.
     * Scope & filters:
     * 	•	promptUuid – The prompt to aggregate (required).
     *
     * Time window & interval:
     * 	•	A time range (startTimeMs → endTimeMs, epoch ms) is required and is used exactly as provided.
     * 	•	If an interval is supplied (e.g., MINUTELY, QUARTERHOURLY, HOURLY), events are bucketed at that granularity.
     * 	•	Aggregation is always performed in the device’s local timezone. Buckets are computed relative to each device’s timezone, then evaluated within the exact provided window.
     *
     * Response:
     * 	•	Per interval bucket, returns numeric aggregates derived from raw values: count, sum, min, max, average.
     * 	•	Includes minValueTimestampMs and maxValueTimestampMs indicating when min/max occurred within the bucket (if available).
     * 	•	Bucket timestamps are returned as epoch ms.
     *
     * Notes:
     * 	•	Only numeric prompt types are valid for this endpoint.
     */
    post: operations["getCustomLLMNumericCounts"];
  };
  "/report/getCustomLLMReport": {
    /**
     * Retrieves a custom events report containing raw time-series event values recorded by selected prompts and devices within the specified time window.
     * The report can be filtered by:
     * 	•	promptUuid – The specific prompt to query.
     * 	•	deviceFacetUuids – A set of devices to include.
     * 	•	locationUuid – The location context for the query.
     * For example, a request may specify a promptUuid to fetch results from a certain LLM prompt, and additionally restrict results to only devices in a given locationUuid.
     * The time range (startTimeMs → endTimeMs) is required and determines the interval of events returned.
     * The response includes, per device and prompt, the raw event values (numeric or boolean as string) along with timestamps, check-condition results (if selected), and prompt type.
     */
    post: operations["getCustomLLMReport"];
  };
  "/report/getDiagnosticFeed": {
    /** Get the latest diagnostic logs for organization */
    post: operations["getDiagnosticFeed"];
  };
  "/report/getEnvoyDeliveries": {
    /** Get a list of deliveries from Envoy to populate reporting logs */
    post: operations["getEnvoyDeliveries"];
  };
  "/report/getEnvoyEmployees": {
    /** Get a list of employees from Envoy */
    post: operations["getEnvoyEmployees"];
  };
  "/report/getEnvoyLocations": {
    /** Get list of Envoy locations */
    post: operations["getEnvoyLocations"];
  };
  "/report/getEnvoyVisitors": {
    /** Get a list of visitors from Envoy to populate reporting logs */
    post: operations["getEnvoyVisitors"];
  };
  "/report/getIntegrationDiagnosticEvents": {
    /** Get the diagnostic logs of supported third-party devices for organization */
    post: operations["getIntegrationDiagnosticEvents"];
  };
  "/report/getLicensePlatesByDevice": {
    /** Get license plate counting events for a specified camera */
    post: operations["getLicensePlatesByDevice"];
  };
  "/report/getMostRecentPeopleCountEvents": {
    /** Get the X most recent people counting events for a specified device */
    post: operations["getMostRecentPeopleCountEvents"];
  };
  "/report/getOccupancyCount": {
    /** Get occupancy count */
    post: operations["getOccupancyCount"];
  };
  "/report/getOccupancyCounts": {
    /**
     * Returns the estimated occupancy count for a specified room or area within a given time range. This endpoint allows you to monitor occupancy trends over time or retrieve a single count for a defined interval.
     * Important: An occupancy region must be defined in the Rhombus Console before using this endpoint.
     * You can optionally specify an interval (e.g., MINUTELY, QUARTERHOURLY, HOURLY ...) to retrieve occupancy counts broken down by sub-intervals between startTime and endTime.
     * If no interval is provided, a single occupancy count is returned for the entire duration between startTime and endTime.
     */
    post: operations["getOccupancyCounts"];
  };
  "/report/getProximityTagLocationsByDate": {
    /** Get proximity tag locations by date */
    post: operations["getProximityTagLocationsByDate"];
  };
  "/report/getRunningAverage": {
    /** Get the running average for the specified count report if it is available, based on recent data */
    post: operations["getRunningAverage"];
  };
  "/report/getSummaryCountReport": {
    /** Get a summary report for a camera, location, or organization */
    post: operations["getSummaryCountReport"];
  };
  "/report/getThresholdCrossingCountReport": {
    /** Get threshold crossing count report */
    post: operations["getThresholdCrossingCountReport"];
  };
  "/report/getThresholdCrossingCounts": {
    /** Get the occupancy counts from threshold crossing for a group of cameras over a period of time */
    post: operations["getThresholdCrossingCounts"];
  };
  "/report/getThresholdCrossingEvents": {
    /** Get the raw threshold crossing events for a group of cameras over a period of time */
    post: operations["getThresholdCrossingEvents"];
  };
  "/report/getThresholdCrossingEventsForDevice": {
    /** Get threshold crossing events for device */
    post: operations["getThresholdCrossingEventsForDevice"];
  };
  "/report/getToastEventsTable": {
    /** Get list of Toast orders to populate events table */
    post: operations["getToastEventsTable"];
  };
  "/report/getToastEventsTableAllLocations": {
    /** Get list of Toast orders from all restaurants to populate events table */
    post: operations["getToastEventsTableAllLocations"];
  };
  "/report/resetRunningAverage": {
    /** Reset the running average for the specified count report */
    post: operations["resetRunningAverage"];
  };
  "/rules/createRule": {
    /** Create a rule */
    post: operations["createRule"];
  };
  "/rules/deleteRule": {
    /** Delete a rule */
    post: operations["deleteRule"];
  };
  "/rules/deleteRulePauseSetting": {
    /** Delete a rule pause setting */
    post: operations["deleteRulePauseSetting"];
  };
  "/rules/getRulePauseSettings": {
    /** Get the current and planned rule pause details */
    post: operations["getRulePauseSettings"];
  };
  "/rules/getRulesFiltered": {
    /** Get rules with Uuid and Type filtering */
    post: operations["getRulesFiltered"];
  };
  "/rules/getRulesForOrg": {
    /** List rules for org */
    post: operations["getRulesForOrg"];
  };
  "/rules/pauseRule": {
    /** Pause rule */
    post: operations["pauseRule"];
  };
  "/rules/updateRule": {
    /** Update a rule */
    post: operations["updateRule"];
  };
  "/rulesRecords/deleteRulesEventRecord": {
    /** Delete a rules event historical record */
    post: operations["deleteRulesEventRecord"];
  };
  "/rulesRecords/getLatestRulesEventRecords": {
    /** Get N latest rules event historical records */
    post: operations["getLatestRulesEventRecords"];
  };
  "/rulesRecords/getRulesEventRecords": {
    /** Find rules event historical records */
    post: operations["getRulesEventRecords"];
  };
  "/scenequery/createPromptConfiguration": {
    /** Create scene query configuration */
    post: operations["createPromptConfiguration"];
  };
  "/scenequery/deletePromptConfiguration": {
    /** Delete scene query configuration */
    post: operations["deletePromptConfiguration"];
  };
  "/scenequery/findPromptConfigurations": {
    /** Find all scene query configurations */
    post: operations["findAllPromptConfigurations"];
  };
  "/scenequery/getPromptConfiguration": {
    /** Get scene query configuration */
    post: operations["getPromptConfiguration"];
  };
  "/scenequery/selectiveUpdatePromptConfiguration": {
    /** Selectively update a scene query configuration */
    post: operations["selectiveUpdatePromptConfiguration"];
  };
  "/scenequery/triggerPrompt": {
    /** Trigger scene query with a custom prompt */
    post: operations["triggerPrompt"];
  };
  "/scenequery/updatePromptConfiguration": {
    /** Update scene query configuration */
    post: operations["updatePromptConfiguration"];
  };
  "/schedule/createAbsoluteSchedule": {
    /** Create a absolute schedule */
    post: operations["createAbsoluteSchedule"];
  };
  "/schedule/createRelativeDateTimeIntervalsSchedule": {
    /** Create a one-time relative datetime schedule */
    post: operations["createRelativeDateTimeIntervalsSchedule"];
  };
  "/schedule/createRelativeSchedule": {
    /** Create a realtime relative schedule */
    post: operations["createRelativeSchedule"];
  };
  "/schedule/createWeeklySchedule": {
    /** Create a weekly schedule */
    post: operations["createWeeklySchedule"];
  };
  "/schedule/deleteSchedule": {
    /** Delete a schedule */
    post: operations["deleteScheduleV2"];
  };
  "/schedule/findAbsoluteSchedule": {
    /** Find an absolute schedule */
    post: operations["findAbsoluteSchedule"];
  };
  "/schedule/findRelativeDateTimeIntervalsSchedule": {
    /** Find a one-time relative datetime schedule */
    post: operations["findRelativeDateTimeIntervalsSchedule"];
  };
  "/schedule/findRelativeSchedule": {
    /** Find a relative schedule */
    post: operations["findRelativeSchedule"];
  };
  "/schedule/findWeeklySchedule": {
    /** Find a weekly schedule */
    post: operations["findWeeklySchedule"];
  };
  "/schedule/getScheduleData": {
    /** Get weekly schedules in org with usage data */
    post: operations["getScheduleData"];
  };
  "/schedule/getScheduleDataV2": {
    /** Get weekly schedules in org with usage data */
    post: operations["getScheduleDataV2"];
  };
  "/schedule/getSchedules": {
    /** Get schedules in org */
    post: operations["getSchedules"];
  };
  "/search/deleteVideoEmbeddings": {
    /** Delete video embedding, do not use unless you know what you're doing. */
    post: operations["deleteVideoEmbedding"];
  };
  "/search/indexVideoEmbeddings": {
    /** Index video embedding, do not use unless you know what you're doing. */
    post: operations["indexVideoEmbedding"];
  };
  "/search/searchLicensePlates": {
    /** Fuzzy search for license plate sightings based on a partial or full plate number. Use /vehicle/getVehicleEvents instead. */
    post: operations["searchLicensePlates"];
  };
  "/search/searchObjectsByColor": {
    /** Search for objects by color */
    post: operations["searchObjectsByColor"];
  };
  "/search/searchSimilarObjectEmbeddings": {
    /** Search for similar objects by embedding */
    post: operations["searchSimilarObjectEmbeddings"];
  };
  "/search/searchSimilarObjectEmbeddingsByText": {
    /** Search for similar objects by text */
    post: operations["searchSimilarObjectEmbeddingsByText"];
  };
  "/search/searchSimilarObjectEmbeddingsByVector": {
    /** Search for similar objects by explicit vector */
    post: operations["searchSimilarObjectEmbeddingsByVector"];
  };
  "/search/searchSimilarVideoEmbeddings": {
    /** Search for similar videos by embedding */
    post: operations["searchSimilarVideoEmbeddings"];
  };
  "/search/searchSimilarVideoEmbeddingsByTimeWindow": {
    /** Search for similar videos by time window */
    post: operations["searchSimilarVideoEmbeddingsByTimeWindow"];
  };
  "/sensors/getFootageSensorSeekpointsForCamera": {
    /** Retrieves sensor activity seekpoints for a specific camera within a given time range. Returns footage seekpoints that correspond to sensor events detected by the camera. */
    post: operations["getSensorFootageSensorSeekpointsForCamera"];
  };
  "/sensors/getFootageSensorSeekpointsForLocation": {
    /** Retrieves sensor activity seekpoints for a specific location within a given time range. Returns footage seekpoints that correspond to sensor events detected at the specified location. */
    post: operations["getFootageSensorSeekpointsForLocation"];
  };
  "/sensors/getFootageSensorSeekpointsForSensor": {
    /** Retrieves sensor activity seekpoints for a specific sensor within a given time range. Returns footage seekpoints that correspond to events detected by the specified sensor device. */
    post: operations["getFootageSensorSeekpointsForSensor"];
  };
  "/share/camera/getCurrentState": {
    /** Retrieves the current state information for a shared camera, including connection status, video operation URL, region, and cloud archive details. */
    post: operations["getCurrentState"];
  };
  "/share/camera/getFootageBoundingBoxes": {
    /** Retrieves object detection bounding boxes for a shared video clip, providing coordinates and metadata for detected objects within the footage. */
    post: operations["getShareFootageBoundingBoxes"];
  };
  "/share/camera/getFootageSeekpoints": {
    /** Deprecated method for retrieving footage seekpoints. Use the V2 endpoint instead for improved functionality and performance. */
    post: operations["getShareFootageSeekpoints"];
  };
  "/share/camera/getFootageSeekpointsV2": {
    /** Retrieves activity seekpoints for a shared video clip, providing timestamps and metadata for significant events within the footage. */
    post: operations["getShareFootageSeekpointsV2"];
  };
  "/share/camera/getMediaUris": {
    /** Retrieves media URIs for a shared camera stream, including live stream URLs and video on demand access points. */
    post: operations["getMediaUris"];
  };
  "/share/camera/getPresenceWindows": {
    /** Retrieves presence detection data for a shared video stream, providing information about when people or objects are detected in the camera view. */
    post: operations["getSharePresenceWindows"];
  };
  "/share/camera/getSharedVideoWallMediaUris": {
    /** Retrieves media URIs for devices in a shared video wall, providing access to live streams and video on demand for each camera in the wall. */
    post: operations["getSharedVideoWallMediaUris"];
  };
  "/share/clips/getSharedClipData": {
    /** Retrieves detailed information about a shared video clip, including metadata, access permissions, and clip properties. */
    post: operations["getSharedClipData"];
  };
  "/share/getSharedLiveStreamInfo": {
    /** Retrieves detailed information about a shared live video stream, including device configuration, location details, schedule information, and video settings. */
    post: operations["getSharedLiveStreamInfo"];
  };
  "/share/getSharedVideoWallInfo": {
    /** Retrieves information about shared video walls, including device lists, permissions, location details, and video settings for each device in the wall. */
    post: operations["getSharedVideoWallInfo"];
  };
  "/share/sensors/getFootageSensorSeekpointsForCamera": {
    /** Retrieves sensor activity seekpoints for a shared camera, providing timestamps and metadata for sensor events detected by the camera. */
    post: operations["getShareFootageSensorSeekpointsForCamera"];
  };
  "/share/shareLink": {
    /** Sends an email or SMS message containing a shared media link to specified recipients. Requires data exfiltration permissions and is audited for security compliance. */
    post: operations["shareLink"];
  };
  "/share/timelapse/getSharedTimelapseClipData": {
    /** Deprecated method for retrieving shared timelapse clip data. Use the V2 endpoint instead for improved functionality and performance. */
    post: operations["getSharedTimelapseClipData"];
  };
  "/share/timelapse/getSharedTimelapseClipDataV2": {
    /** Retrieves detailed information about a shared timelapse clip, including metadata, access permissions, and timelapse properties. */
    post: operations["getSharedTimelapseClipDataV2"];
  };
  "/supportAuthority/addSupportAuthority": {
    /** Creates a new support authority for the organization, allowing external support providers or partners to access the system with specified permissions and expiration settings. */
    post: operations["addSupportAuthority"];
  };
  "/supportAuthority/allowSupportAuthorityAccess": {
    /** Enables login access for a support authority, allowing them to authenticate and access the system with their assigned permissions. */
    post: operations["allowSupportAuthorityAccess"];
  };
  "/supportAuthority/findSupportAuthoritySessions": {
    /** Retrieves information about all active sessions for support authorities, including session details and authentication status. */
    post: operations["findSupportAuthoritySessions"];
  };
  "/supportAuthority/getSupportAuthorities": {
    /** Retrieves a list of all support authorities configured for the organization, including their permissions, access settings, and status information. */
    post: operations["getSupportAuthorities"];
  };
  "/supportAuthority/logoutAllSupportAuthoritySessions": {
    /** Terminates all active sessions for a specific support authority, forcing them to re-authenticate for future access. */
    post: operations["logoutAllSupportAuthoritySessions"];
  };
  "/supportAuthority/lookupSupportPartnerAuthorities": {
    /** Searches for available partner organizations that can be added as support authorities, based on name or contact information. */
    post: operations["lookupSupportPartnerAuthorities"];
  };
  "/supportAuthority/removeSupportAuthority": {
    /** Removes a support authority from the organization, revoking all access permissions and terminating any active sessions for the specified authority. */
    post: operations["removeSupportAuthority"];
  };
  "/supportAuthority/revokeSupportAuthorityAccess": {
    /** Disables login access for a support authority and terminates all active sessions, preventing further authentication attempts. */
    post: operations["revokeSupportAuthorityAccess"];
  };
  "/supportAuthority/updateSupportAuthority": {
    /** Updates the configuration of an existing support authority, including permissions, access settings, expiration dates, and contact information. */
    post: operations["updateSupportAuthority"];
  };
  "/tvos/getTvOsConfig": {
    /** Retrieves a specific tvOs configuration by UUID, returning the detailed settings and parameters for a particular Apple TV client. */
    post: operations["getTvOsConfig"];
  };
  "/tvos/getTvOsConfigsForOrg": {
    /** Retrieves all tvOs configurations for the organization, providing a list of all Apple TV client configurations and their settings. */
    post: operations["getTvOsConfigsForOrg"];
  };
  "/tvos/updateTvOsConfig": {
    /** Updates the configuration for a tvOs client, allowing modification of settings and parameters for Apple TV applications. */
    post: operations["updateTvOsConfig"];
  };
  "/upload/accessControlledDoor/delete/{accessControlledDoorUuidStr}": {
    /** Deletes the image associated with a specific access controlled door, removing the file from S3 storage. */
    post: operations["deleteAccessControlledDoorPicture"];
  };
  "/upload/accessControlledDoor/{accessControlledDoorUuidStr}": {
    /** Uploads an image for a specific access controlled door, supporting various image formats with size validation and automatic storage to S3. */
    post: operations["uploadAccessControlledDoorPicture"];
  };
  "/upload/badgeTemplate/images": {
    /** Uploads images for badge templates with associated metadata, supporting JPEG and PNG formats with size validation and automatic S3 storage. */
    post: operations["uploadBadgeTemplateImages"];
  };
  "/upload/bulkUploadUserProfilePhotos": {
    /** Uploads multiple user profile pictures in a single request, supporting up to 100 photos with automatic user matching based on filename or metadata. Each photo must be <= 5MB. */
    post: operations["bulkUploadUserProfilePhotos"];
  };
  "/upload/companyLogo": {
    /** Uploads a company logo image, supporting various formats including JPEG, PNG, BMP, GIF, WebP, and PSD, and updates the organization's logo URL. */
    post: operations["uploadCompanyLogo"];
  };
  "/upload/errors/{fileName}": {
    /** Uploads error log files for debugging purposes, storing them in a dedicated S3 bucket for error tracking and analysis. */
    post: operations["uploadErrors"];
  };
  "/upload/floorplan": {
    /** Uploads a new floorplan image for a location, supporting multiple formats including JPEG, PNG, PDF, WebP, and SVG with automatic conversion to JPEG for SVG files. */
    post: operations["uploadNewFloorPlan"];
  };
  "/upload/floorplan/{floorPlanUuid}": {
    /** Updates an existing floorplan image for a location using the specified floorplan UUID, supporting multiple formats with automatic format conversion. */
    post: operations["uploadExistingFloorPlan"];
  };
  "/upload/guest/{guestEmail}": {
    /** Uploads a profile picture for a specific guest by email address, supporting various image formats with size validation and automatic cache-busting for browser compatibility. */
    post: operations["uploadGuestProfilePicture"];
  };
  "/upload/keypadLogo": {
    /** Uploads a logo image for keypad devices, generating a unique UUID and storing the image with proper metadata and organization association. */
    post: operations["uploadKeypadLogo"];
  };
  "/upload/rhombusKeyLogo": {
    /** Uploads a logo image for Rhombus key devices, generating a unique UUID and storing the image with proper metadata and organization association. */
    post: operations["uploadRhombusKeyLogo"];
  };
  "/upload/sensor/{sensorUuid}/thumbnail": {
    /** Uploads an image to be associated with a sensor as a thumbnail, supporting JPEG format with automatic image normalization and orientation correction. */
    post: operations["uploadSensorThumbnails"];
  };
  "/upload/user/deleteProfile/{userUuidStr}": {
    /** Deletes the profile picture for a specific user, removing the image file from S3 storage and clearing the user's profile photo association. */
    post: operations["deleteUserProfilePicture"];
  };
  "/upload/user/{userUuidStr}": {
    /** Uploads a profile picture for a specific user, supporting various image formats with size validation and automatic storage to S3 with audit logging. */
    post: operations["uploadUserProfilePicture"];
  };
  "/user/assignEmailToUser": {
    /** Assign a user to an email as long as the user is not currently assigned to one, with validation to prevent duplicate email associations. */
    post: operations["assignEmailToUser"];
  };
  "/user/bulkProvisionCredentials": {
    /** Provisions credentials in bulk using a CSV file. Credentials can be assigned to existing users or left unassigned, depending on the data in the file. */
    post: operations["bulkProvisionCredentials"];
  };
  "/user/changeEmail": {
    /** Change a user's email address with proper validation and security controls for email updates. */
    post: operations["changeEmail"];
  };
  "/user/changePassword": {
    /** Change a user's password with current password validation and proper security controls. */
    post: operations["changePassword"];
  };
  "/user/createUser": {
    /** Create a user for organization with specified name, email, and role permissions, supporting both client and partner user types with proper validation and audit logging. */
    post: operations["createUser"];
  };
  "/user/deleteUser": {
    /** Delete a user from the organization with proper validation to prevent deletion of the last super admin and current user. */
    post: operations["deleteUser"];
  };
  "/user/deleteVirtualMfaDeviceForCurrentUser": {
    /** Remove MFA for current user, disabling multi-factor authentication for the authenticated user. */
    post: operations["deleteVirtualMfaDeviceForCurrentUser"];
  };
  "/user/findUser": {
    /** Retrieve a specific user by UUID with complete user details and associated information. */
    post: operations["findUser"];
  };
  "/user/findUserByEmail": {
    /** Retrieve a specific user by email address with complete user details and associated information. */
    post: operations["findUserByEmail"];
  };
  "/user/getBulkProvisionCredentialsFormat": {
    /** Returns format for bulk provisioning credentials, providing CSV template examples and field explanations based on access control configuration. */
    post: operations["getBulkProvisionCredentialsFormat"];
  };
  "/user/getImportUsersFormat": {
    /** Returns format for importing users, providing CSV template examples and field explanations based on access control configuration. */
    post: operations["getImportUsersFormat"];
  };
  "/user/getPartnerUsersInOrg": {
    /** Get list of all partners in organization with partner-specific user details and permissions. */
    post: operations["getPartnerUsersInOrg"];
  };
  "/user/getRhombusKeyConfigForUser": {
    /** Retrieve the RhombusKey mobile app config for a user. If it does not exist a default one is created and returned. */
    post: operations["getRhombusKeyConfigForUser"];
  };
  "/user/getUserCustomizationFlags": {
    /** Get user's customization flags for UI preferences and user experience settings. */
    post: operations["getUserCustomizationFlags"];
  };
  "/user/getUsersInOrg": {
    /** Get list of all users in organization with complete user details, permissions, notification settings, and partner information. */
    post: operations["getUsersInOrg"];
  };
  "/user/getUsersInOrgForReports": {
    /** Gets a reduced amount of information about users in the organization to be used for reports, providing streamlined user data for reporting purposes. */
    post: operations["getUsersInOrgForReports"];
  };
  "/user/getVirtualMfaDeviceForCurrentUser": {
    /** Get details about MFA for current user, including device status and configuration information. */
    post: operations["getVirtualMfaDeviceForCurrentUser"];
  };
  "/user/importUsers": {
    /** Imports users in CSV format with support for user details, roles, groups, credentials, and custom metadata fields. Processes users in batches with duplicate detection and validation. */
    post: operations["importUsers"];
  };
  "/user/metadata/createUserMetadataFieldTemplate": {
    /** Create a new template user metadata field that will be applicable to all users in the organization, allowing custom field definitions for user data. */
    post: operations["createUserMetadataFieldTemplate"];
  };
  "/user/metadata/deleteUserMetadataField": {
    /** Deletes the specified user's value stored for the specified template, removing the custom field value while preserving the template definition. */
    post: operations["deleteUserMetadataField"];
  };
  "/user/metadata/deleteUserMetadataFieldTemplate": {
    /** Delete a template user metadata field. THIS WILL DELETE THE CUSTOM FIELD AND USER DATA FOR THIS FIELD, permanently removing the field definition and all associated user values. */
    post: operations["deleteUserMetadataFieldTemplate"];
  };
  "/user/metadata/findUserMetadataFieldTemplates": {
    /** Find all template user metadata fields for the organization, returning the complete list of custom field definitions available for users. */
    post: operations["findUserMetadataFieldTemplates"];
  };
  "/user/metadata/findUserMetadataFields": {
    /** Returns the org template metadata fields and the queried users stored values for those fields if they've been set, providing complete metadata information for a specific user. */
    post: operations["findUserMetadataFields"];
  };
  "/user/metadata/saveUserMetadataFields": {
    /** Saves custom metadata values for the user specified. Template IDs that do not map to an actual org metadata template are ignored and values for omitted Template IDs are left as-is. */
    post: operations["saveUserMetadataFields"];
  };
  "/user/metadata/updateUserMetadataFieldTemplate": {
    /** Update a template user metadata field that will be applicable to all users, allowing modification of existing custom field definitions. */
    post: operations["updateUserMetadataFieldTemplate"];
  };
  "/user/sendMobileDownloadSMS": {
    /** Send SMS with link to download mobile app to the specified phone number using AWS SNS. */
    post: operations["sendMobileDownloadSMS"];
  };
  "/user/sendPartnerAccessGranted": {
    /** Send partner an email to access client account with proper access credentials and instructions. */
    post: operations["sendPartnerAccessGrantedEmail"];
  };
  "/user/sendRhombusKeyUserWelcomeEmail": {
    /** Send a rhombus key welcome email to a user with mobile app download instructions and setup information. */
    post: operations["sendRhombusKeyUserWelcomeEmail"];
  };
  "/user/sendUserWelcomeEmail": {
    /** Send a welcome email to a user with organization-specific branding and welcome information. */
    post: operations["sendUserWelcomeEmail"];
  };
  "/user/setupVirtualMfaDeviceForCurrentUser": {
    /** Configure MFA for current user with virtual device setup and QR code generation. */
    post: operations["setupVirtualMfaDeviceForCurrentUser"];
  };
  "/user/updatePartnerUser": {
    /** Update a partner's details with partner-specific validation and audit logging. */
    post: operations["updatePartnerUser"];
  };
  "/user/updatePartnerUserNotificationSettings": {
    /** Update notification settings for partner user with partner-specific notification configurations. */
    post: operations["updatePartnerUserNotificationSettings"];
  };
  "/user/updateRhombusKeySettingsForUser": {
    /** Update the RhombusKey mobile app settings for the user, including access permissions and app configuration. */
    post: operations["updateRhombusKeySettingsForUser"];
  };
  "/user/updateUser": {
    /** Update a user's details, DEPRECATED[4/28/2025]: use updateUserSelective for better field-level control. */
    post: operations["updateUser"];
  };
  "/user/updateUserCustomizationFlags": {
    /** Update user's customization flags for UI preferences and user experience settings. */
    post: operations["updateUserCustomizationFlags"];
  };
  "/user/updateUserNotificationSettings": {
    /** Update notification settings for user with various notification channels and preferences. */
    post: operations["updateUserNotificationSettings"];
  };
  "/user/updateUserSelective": {
    /** Selectively updates a user's details. Omitted fields are ignored but fields with null will unset a value, providing granular control over user updates. */
    post: operations["updateUserSelective"];
  };
  "/vehicle/addVehicleLabel": {
    /** Add a label to a vehicle */
    post: operations["addVehicleLabel"];
  };
  "/vehicle/associateEventsToVehicle": {
    /** Associate vehicle events to a saved vehicle */
    post: operations["associateEventsToVehicle"];
  };
  "/vehicle/deleteVehicle": {
    /** Delete a saved vehicle */
    post: operations["deleteVehicle"];
  };
  "/vehicle/getRecentVehicleEvents": {
    /** Get recent vehicle events for organization. Use /vehicle/getVehicleEvents instead. */
    post: operations["getRecentVehicleEvents"];
  };
  "/vehicle/getRecentVehicleEventsByLocation": {
    /** Get recent vehicle events for a location. Use /vehicle/getVehicleEvents instead. */
    post: operations["getRecentVehicleEventsByLocation"];
  };
  "/vehicle/getRecentVehicleEventsForVehicle": {
    /** Get recent vehicle events for specified vehicle. Use /vehicle/getVehicleEvents instead. */
    post: operations["getRecentVehicleEventsForVehicle"];
  };
  "/vehicle/getVehicleEvents": {
    /** Get vehicle events with filters and additive queries */
    post: operations["getVehicleEvents"];
  };
  "/vehicle/getVehicleLabelsForOrg": {
    /** Get all vehicle labels for organization */
    post: operations["getVehicleLabelsForOrg"];
  };
  "/vehicle/getVehicles": {
    /** Get details of all saved vehicles in organization */
    post: operations["getVehicles"];
  };
  "/vehicle/removeVehicleLabel": {
    /** Remove a label to a vehicle */
    post: operations["removeVehicleLabel"];
  };
  "/vehicle/reportVehicleEvent": {
    /** Report a mis-detected license plate event.  This sends the image/clip to Rhombus to better train AI models and removes the event */
    post: operations["reportVehicleEvent"];
  };
  "/vehicle/saveVehicle": {
    /** Name and save a vehicle based on license plate number */
    post: operations["saveVehicle"];
  };
  "/video/cancelSplice": {
    /** Use /cancelSpliceV2 instead */
    post: operations["cancelSplice"];
  };
  "/video/cancelSpliceV2": {
    /** Cancel a spliced clip request */
    post: operations["cancelSpliceV2"];
  };
  "/video/createSharedTimelapseGroup": {
    /** Share multiple timelapses in one link */
    post: operations["createSharedTimelapseGroup"];
  };
  "/video/deleteSharedTimelapseGroup": {
    /** Delete a shared timelapse link */
    post: operations["deleteSharedTimelapseGroup"];
  };
  "/video/deleteTimelapseClips": {
    /** Delete a timelapse */
    post: operations["deleteTimelapseClips"];
  };
  "/video/generateTimelapseClip": {
    /** Generate a timelapse */
    post: operations["generateTimelapseClip"];
  };
  "/video/getExactFrameUri": {
    /** Generate URL to get an exact frame with optional crop from a camera */
    post: operations["getExactFrameUri"];
  };
  "/video/getMaxSpliceDuration": {
    /** Get the max splice duration an organization can set */
    post: operations["getMaxSpliceDuration"];
  };
  "/video/getSharedTimelapseGroups": {
    /** Get details of all shared timelapse links for organization */
    post: operations["getSharedTimelapseGroups"];
  };
  "/video/getSplicedClipsInProgress": {
    /** Get all spliced clips in progress */
    post: operations["getSplicedClipsInProgress"];
  };
  "/video/getTimelapseClips": {
    /** Get all timelapse clips for organization */
    post: operations["getTimelapseClips"];
  };
  "/video/getTimelapseMetadata": {
    /** Get information about earliest available timelapse images for cameras */
    post: operations["getTimelapseMetadata"];
  };
  "/video/retrySplice": {
    /** Send a request to retry splicing a clip */
    post: operations["retrySplice"];
  };
  "/video/shareTimelapseClips": {
    /** Use /CreateSharedTimelapseGroup instead */
    post: operations["shareTimelapseClips"];
  };
  "/video/splice": {
    /** Use /spliceV3 instead */
    post: operations["splice"];
  };
  "/video/spliceFrame": {
    /** Send a request to create a single image from a point in time */
    post: operations["spliceFrame"];
  };
  "/video/spliceV2": {
    /** Use /spliceV3 instead */
    post: operations["spliceV2"];
  };
  "/video/spliceV3": {
    /** Send a request to create an arbitrary clip for multiple cameras */
    post: operations["spliceV3"];
  };
  "/video/updateSharedTimelapseGroup": {
    /** Update title, description, or expiration on a shared timelapse link */
    post: operations["updateSharedTimelapseGroup"];
  };
  "/video/updateTimelapseClipMetadata": {
    /** Update a timelapse clip's editable metadata */
    post: operations["updateTimelapseClipMetadata"];
  };
}

export interface components {
  schemas: {
    ACUDoorCatalogItem: {
      durationMonths?: number | null;
      productCode?: string | null;
      productType?: ACUDoorCatalogItemProductTypeEnum | null;
    } | null;
    /** List of access controlled door licenses available for the client organization */
    ACUDoorLicenseType: {
      /** base 64 (url-safe) uuid string */
      claimKeyUuid?: string | null;
      createdOn?: string | null;
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
      firstAssignedDate?: string | null;
      licenseToUnassignEmailState?: ACUDoorLicenseLicenseToUnassignEmailStateEnum | null;
      maxDeleteDate?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: ACUDoorLicenseProductTypeEnum | null;
      state?: ACUDoorLicenseStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    AITShipmentInfoType: {
      aitTrackingNumber?: string | null;
      carrierTrackingNumber?: string | null;
      depositorOrderNumber?: string | null;
      destinationAddress?: string | null;
      isIngramDistributorShipment?: boolean | null;
      shipmentDate?: string | null;
      shippedItems?: components["schemas"]["ShippedItemType"][] | null;
    } | null;
    AMSirenSettingsType: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      durationSeconds?: number | null;
      playCount?: number | null;
    };
    AbsoluteSecondsIntervalType: {
      b?: number | null;
      e?: number | null;
    } | null;
    AbsoluteSecondsScheduleType:
      | ({
          intervalList?:
            | components["schemas"]["AbsoluteSecondsIntervalType"][]
            | null;
        } & {
          mutable?: boolean | null;
          name?: string | null;
          oneTimeUse?: boolean | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          strategy?: AbsoluteSecondsScheduleStrategyEnum | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AccessControlAuthenticationResultEnumType: AccessControlAuthenticationResultEnumType;
    AccessControlAuthorizationResultEnumType: AccessControlAuthorizationResultEnumType;
    AccessControlCredentialEnumType: AccessControlCredentialEnumType;
    /** Updated Wiegand credential details */
    AccessControlCredentialType: (
      | components["schemas"]["StandardCsnType"]
      | components["schemas"]["RhombusSecureCsnType"]
      | components["schemas"]["RhombusSecureMobileType"]
      | components["schemas"]["PinCredential"]
      | components["schemas"]["WiegandH10301CredentialType"]
      | components["schemas"]["WiegandH10304Credential"]
      | components["schemas"]["WiegandD10202Credential"]
      | components["schemas"]["Wiegand64BitRawCredentialType"]
    ) & {
      createdAtMillis?: number | null;
      endDateEpochSecExclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUsedAccessControlledDoorUuid?: string | null;
      lastUsedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUsedLocationUuid?: string | null;
      lowercaseHexValue?: string | null;
      /** base 64 (url-safe) uuid string */
      managedCredUuid?: string | null;
      note?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      startDateEpochSecInclusive?: number | null;
      type?: components["schemas"]["AccessControlCredentialEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      value?: string | null;
      workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
    };
    AccessControlCredentialWorkflowStatusEnumType: AccessControlCredentialWorkflowStatusEnumType;
    AccessControlUnitBatteryStateChangeEventType:
      | ({
          batteryFound?: boolean | null;
          batteryMa?: number | null;
          batteryMv?: number | null;
          onBackupPower?: boolean | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AccessControlUnitDoorFirstInStateEvent:
      | ({
          doorAuthFirstInEventReference?: components["schemas"]["DoorFirstInStateChangeEventReference"];
          doorScheduleFirstInEventReference?: components["schemas"]["DoorFirstInStateChangeEventReference"];
          /** base 64 (url-safe) uuid string */
          settingsUuid?: string | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AccessControlUnitLocationLockdownStateEventType:
      | ({
          activatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          activeLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          deactivatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          doorEventReferenceMap?: {
            [
              key: string
            ]: components["schemas"]["DoorLockdownStateEventReference"];
          } | null;
          followingTestPlan?: boolean | null;
          locationLockdownStateChangedAtMillis?: number | null;
          originator?: components["schemas"]["BaseEventOriginator"];
          state?: components["schemas"]["LocationLockdownStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AccessControlUnitTamperEventType:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          source?: components["schemas"]["AccessControlUnitTamperSourceEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AccessControlUnitTamperSourceEnumType: AccessControlUnitTamperSourceEnumType;
    AccessControlledDoorPolicyAlertType:
      | ({
          /** base 64 (url-safe) uuid string */
          accessControlUnitUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          accessControlledDoorUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          initiatingUsername?: string | null;
          originatorEntityName?: string | null;
        } & {
          /** base 64 (url-safe) uuid string */
          alertMonitoringThreatCaseUuid?: string | null;
          alertMonitoringVerified?: boolean | null;
          clipLocationMap?: {
            [key: string]: components["schemas"]["MetaDataLocationType"];
          } | null;
          clipLocationMapV2?: { [key: string]: string | null } | null;
          delayedProcessing?: boolean | null;
          deleted?: boolean | null;
          durationSec?: number | null;
          finalized?: boolean | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          notificationSent?: boolean | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          policyAlertTriggers?: components["schemas"]["ActivityEnum"][] | null;
          /** base 64 (url-safe) uuid string */
          policyUuid?: string | null;
          saved?: boolean | null;
          shared?: boolean | null;
          subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
          /** Natural language description of the alert */
          textDescription?: string | null;
          thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
          thumbnailLocationV2?: string | null;
          timestampMs?: number | null;
          type?: AccessControlledDoorPolicyAlertTypeEnum | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    /** List of access controlled door policies using the schedule */
    AccessControlledDoorPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["AccessControlledDoorScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    AccessControlledDoorScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
    };
    AccessControlledDoorShadow: {
      authFirstIn?: components["schemas"]["FirstInShadow"];
      /** base 64 (url-safe) uuid string */
      componentCompositeUuid?: string | null;
      createdAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      scheduleFirstIn?: components["schemas"]["FirstInShadow"];
      state?: components["schemas"]["DoorStateShadow"];
      type?: components["schemas"]["ComponentCompositeShadowEnum"];
      updatedAtMillis?: number | null;
    };
    AccessControlledDoorStateEnumType: AccessControlledDoorStateEnumType;
    AccessControlledDoorType: {
      ajarTimeSec?: number | null;
      aperioDoorExtensionComponent?: components["schemas"]["ComponentReferenceType"];
      aperioDoorId?: string | null;
      aperioGatewayComponent?: components["schemas"]["ComponentReferenceType"];
      associatedCameras?: (string | null)[] | null;
      associatedFaceDetectionCameras?: (string | null)[] | null;
      createdAtMillis?: number | null;
      defaultState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      directionRadians?: number | null;
      doorAuthFirstInStateOverride?: components["schemas"]["FirstInState"];
      doorScheduleFirstInStateOverride?: components["schemas"]["FirstInState"];
      doorStateOverride?: components["schemas"]["BaseDoorStateOverride"];
      doorStateToScheduleUuidMap?: { [key: string]: string | null } | null;
      dpiComponents?: components["schemas"]["ComponentReferenceType"][] | null;
      floorNumber?: number | null;
      forceAllReadersFirstInAuthRequiredLedFeedbackEnabled?: boolean | null;
      forceAllReadersFirstInUnlockPendingLedFeedbackEnabled?: boolean | null;
      forceAllReadersOtherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      forceAllReadersRemoteUnlockAudioFeedbackEnabled?: boolean | null;
      forcedOpenEnabled?: boolean | null;
      forcedOpenTimeSec?: number | null;
      geofenceEnabled?: boolean | null;
      geofenceRadius?: number | null;
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      nfcSecureDowngradeEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      privacyModeSupportEnabled?: boolean | null;
      proximityUnlockSettings?: components["schemas"]["ProximityUnlockSettingsType"];
      readerComponents?:
        | components["schemas"]["ComponentReferenceType"][]
        | null;
      relayComponents?:
        | components["schemas"]["ComponentReferenceType"][]
        | null;
      relockAfterOpenTimeMs?: number | null;
      remoteUnlockEnabled?: boolean | null;
      rexComponents?: components["schemas"]["ComponentReferenceType"][] | null;
      sendExpiredIntentEvents?: boolean | null;
      subType?: AccessControlledDoorSubTypeEnum | null;
      type?: components["schemas"]["ComponentCompositeEnumType"];
      unlockTimeSec?: number | null;
      unlockTimeSecRex?: number | null;
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      waveToUnlockSettings?: components["schemas"]["WaveToUnlockSettingsType"];
    };
    /** List of access controlled doors */
    AccessControlledDoorType_Minimal: {
      aperioDoorExtensionComponent?: components["schemas"]["ComponentReferenceType_Minimal"];
      aperioDoorId?: string | null;
      aperioGatewayComponent?: components["schemas"]["ComponentReferenceType_Minimal"];
      directionRadians?: number | null;
      doorAuthFirstInStateOverride?: components["schemas"]["FirstInState_Minimal"];
      doorScheduleFirstInStateOverride?: components["schemas"]["FirstInState_Minimal"];
      doorStateOverride?: components["schemas"]["BaseDoorStateOverride_Minimal"];
      dpiComponents?:
        | components["schemas"]["ComponentReferenceType_Minimal"][]
        | null;
      floorNumber?: number | null;
      geofenceEnabled?: boolean | null;
      geofenceRadius?: number | null;
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      nfcSecureDowngradeEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      privacyModeSupportEnabled?: boolean | null;
      proximityUnlockSettings?: components["schemas"]["ProximityUnlockSettingsType_Minimal"];
      readerComponents?:
        | components["schemas"]["ComponentReferenceType_Minimal"][]
        | null;
      relayComponents?:
        | components["schemas"]["ComponentReferenceType_Minimal"][]
        | null;
      remoteUnlockEnabled?: boolean | null;
      rexComponents?:
        | components["schemas"]["ComponentReferenceType_Minimal"][]
        | null;
      subType?: MinimalSubTypeEnum | null;
      type?: components["schemas"]["ComponentCompositeEnumType_Minimal"];
      unlockTimeSec?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      waveToUnlockSettings?: components["schemas"]["WaveToUnlockSettingsType_Minimal"];
    };
    Accesscontrol_BaseSendUserPresenceForCurrentUserWsResponse: (
      | components["schemas"]["Accesscontrol_SendUserPresenceForCurrentUserSuccessWsResponse"]
      | components["schemas"]["Accesscontrol_SendUserPresenceForCurrentUserErrorWsResponse"]
    ) & {
      type?: BaseSendUserPresenceForCurrentUserWsResponseTypeEnum | null;
    };
    /** Represents an access controlled door that can be unlocked by a device. */
    Accesscontrol_DeviceUnlockableAccessControlledDoorType: {
      /** The name of the access controlled door. */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request to find unlockable access controlled doors by device. */
    Accesscontrol_FindUnlockableAccessControlledDoorsByDeviceWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    /** Response containing unlockable access controlled doors for a device. */
    Accesscontrol_FindUnlockableAccessControlledDoorsByDeviceWSResponse: {
      /** List of unlockable access controlled doors */
      accessControlledDoors?:
        | components["schemas"]["Accesscontrol_DeviceUnlockableAccessControlledDoorType"][]
        | null;
    };
    /** Request to force refresh an access control unit configuration. */
    Accesscontrol_ForceRefreshAccessControlUnitConfigWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlUnitUuid?: string | null;
    };
    /** Response for force refresh access control unit configuration operation. */
    Accesscontrol_ForceRefreshAccessControlUnitConfigWSResponse: {
      [key: string]: unknown;
    };
    /** Request to get minimal access controlled doors by location for current user. */
    Accesscontrol_GetMinimalAccessControlledDoorsByLocationForCurrentUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing minimal access controlled doors by location for current user. */
    Accesscontrol_GetMinimalAccessControlledDoorsByLocationForCurrentUserWSResponse: {
      /** List of access controlled doors */
      accessControlledDoors?:
        | components["schemas"]["AccessControlledDoorType_Minimal"][]
        | null;
      /** List of user access grants */
      accessGrants?:
        | components["schemas"]["Accesscontrol_UserAccessGrant"][]
        | null;
      /** List of user access revocations */
      accessRevocations?:
        | components["schemas"]["Accesscontrol_UserAccessRevocation"][]
        | null;
      /** List of schedules */
      schedules?:
        | components["schemas"]["BaseSavedScheduleType_Minimal"][]
        | null;
    };
    /** Error response for send user presence for current user operation. */
    Accesscontrol_SendUserPresenceForCurrentUserErrorWsResponse: {
      type?: SendUserPresenceForCurrentUserErrorWsResponseTypeEnum | null;
    } | null;
    /** Success response for send user presence for current user operation. */
    Accesscontrol_SendUserPresenceForCurrentUserSuccessWsResponse: {
      type?: SendUserPresenceForCurrentUserSuccessWsResponseTypeEnum | null;
    } | null;
    /** Request to send user presence information for the current user. */
    Accesscontrol_SendUserPresenceForCurrentUserWSRequest: {
      cmdVersion?: string | null;
      /** base 64 (url-safe) uuid string */
      credentialValue?: string | null;
      /** List of destinations for user presence */
      destinations?:
        | components["schemas"]["Accesscontrol_SendUserPresenceForCurrentUserWSRequest_Destination"][]
        | null;
    };
    /** Destination information for user presence. */
    Accesscontrol_SendUserPresenceForCurrentUserWSRequest_Destination: {
      /** base 64 (url-safe) uuid string */
      accessControlUnitUuid?: string | null;
      /** Beacon identifier */
      beaconIdentifier?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      readerUuid?: string | null;
      /** RSSI value of the reader as observed from the mobile device */
      rssi?: string | null;
    };
    /** Error response for unlock access controlled door operation. */
    Accesscontrol_UnlockAccessControlledDoorErrorWSResponse:
      | ({
          /** Enumeration of possible errors when unlocking an access controlled door. */
          errorType?: UnlockAccessControlledDoorErrorWSResponseErrorTypeEnum | null;
        } & {
          type?: UnlockAccessControlledDoorErrorWSResponseTypeEnum | null;
        })
      | null;
    /** Error response for unlock access controlled door for current user operation. */
    Accesscontrol_UnlockAccessControlledDoorForCurrentUserErrorWSResponse:
      | ({
          /** Enumeration of possible errors when unlocking an access controlled door for the current user. */
          errorType?: UnlockAccessControlledDoorForCurrentUserErrorWSResponseErrorTypeEnum | null;
        } & {
          type?: UnlockAccessControlledDoorForCurrentUserErrorWSResponseTypeEnum | null;
        })
      | null;
    /** Success response for unlock access controlled door for current user operation. */
    Accesscontrol_UnlockAccessControlledDoorForCurrentUserSuccessWSResponse: {
      type?: UnlockAccessControlledDoorForCurrentUserSuccessWSResponseTypeEnum | null;
    } | null;
    /** Request to unlock an access controlled door for the current user. */
    Accesscontrol_UnlockAccessControlledDoorForCurrentUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      cmdVersion?: string | null;
      /** Credential value for authentication */
      credentialValue?: string | null;
      /** Latitude of the mobile device for geofencing */
      latitude?: number | null;
      /** Longitude of the mobile device for geofencing */
      longitude?: number | null;
      /** Request time in milliseconds */
      requestTimeMillis?: number | null;
    };
    /** Success response for unlock access controlled door operation. */
    Accesscontrol_UnlockAccessControlledDoorSuccessWSResponse: {
      type?: UnlockAccessControlledDoorSuccessWSResponseTypeEnum | null;
    } | null;
    /** Request to unlock an access controlled door. */
    Accesscontrol_UnlockAccessControlledDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
    };
    /** Access grant information for a user containing schedule and door access permissions. */
    Accesscontrol_UserAccessGrant: {
      /** Set of access controlled door UUIDs that this grant provides access to. */
      accessControlledDoorUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Access revocation information for a user containing schedule and door access restrictions. */
    Accesscontrol_UserAccessRevocation: {
      /** Set of access controlled door UUIDs that this revocation restricts access to. */
      accessControlledDoorUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Request to create a location access grant. */
    Accesscontrol_accessgrant_CreateAccessGrantWSRequest: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
    };
    /** Response containing the created location access grant. */
    Accesscontrol_accessgrant_CreateAccessGrantWSResponse: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
    };
    /** Request to delete a location access grant. */
    Accesscontrol_accessgrant_DeleteLocationAccessGrantWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessGrantUuid?: string | null;
    };
    /** Response for location access grant deletion. */
    Accesscontrol_accessgrant_DeleteLocationAccessGrantWSResponse: {
      [key: string]: unknown;
    };
    /** Request to find location access grants by access controlled door. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByAccessControlledDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
    };
    /** Response containing location access grants for an access controlled door. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByAccessControlledDoorWSResponse: {
      /** List of location access grants */
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    /** Request to find location access grants by door label. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByDoorLabelWSRequest: {
      /** Door label identifier */
      doorLabelId?: string | null;
    };
    /** Response containing location access grants for a door label. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByDoorLabelWSResponse: {
      /** List of location access grants */
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    /** Request to find location access grants by group. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
    };
    /** Response containing location access grants for a group. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByGroupWSResponse: {
      /** List of location access grants */
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    /** Request to find location access grants by location and user. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationAndUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response containing location access grants for a location and user. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationAndUserWSResponse: {
      /** List of location access grants */
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    /** Request to find location access grants by location. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing location access grants for a location. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationWSResponse: {
      /** List of location access grants */
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    /** Request to find location access grants by organization. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByOrgWSRequest: {
      [key: string]: unknown;
    };
    /** Response containing location access grants for an organization. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByOrgWSResponse: {
      /** List of location access grants */
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    /** Request to find location access grants by user. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response containing location access grants for a user. */
    Accesscontrol_accessgrant_FindLocationAccessGrantsByUserWSResponse: {
      /** List of location access grants */
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    /** Request to get a location access grant by UUID. */
    Accesscontrol_accessgrant_GetLocationAccessGrantWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessGrantUuid?: string | null;
    };
    /** Response containing a location access grant. */
    Accesscontrol_accessgrant_GetLocationAccessGrantWSResponse: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
    };
    /** Request to get locations by access grant for current user. */
    Accesscontrol_accessgrant_GetLocationsByAccessGrantForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    /** Response for getting locations by access grant for current user. */
    Accesscontrol_accessgrant_GetLocationsByAccessGrantForCurrentUserWSResponse: {
      /** List of location lockdown states */
      locationLockdownStates?:
        | components["schemas"]["LocationLockdownStateType"][]
        | null;
      /** List of locations accessible to the current user */
      locations?: components["schemas"]["LocationType"][] | null;
      /** List of lockdown plans for the locations */
      lockdownPlans?: components["schemas"]["BaseLockdownPlanType"][] | null;
    };
    /** Request to get Rhombus Key location lockdown details for current user. */
    Accesscontrol_accessgrant_GetRhombusKeyLocationLockdownDetailsForCurrentUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response for getting Rhombus Key location lockdown details for current user. */
    Accesscontrol_accessgrant_GetRhombusKeyLocationLockdownDetailsForCurrentUserWSResponse: {
      locationLockdownState?: components["schemas"]["LocationLockdownStateType"];
    };
    /** Request to update a location access grant. */
    Accesscontrol_accessgrant_UpdateAccessGrantWSRequest: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
    };
    /** Response for location access grant update. */
    Accesscontrol_accessgrant_UpdateAccessGrantWSResponse: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
      error?: boolean | null;
      errorMsg?: string | null;
      /** Set of expired ACD license door UUIDs */
      expiredACDLicensesDoorUuids?: (string | null)[] | null;
      /** Set of unassigned ACD license door UUIDs */
      unassignedACDLicensesDoorUuids?: (string | null)[] | null;
    };
    /** Request to create a location access revocation. */
    Accesscontrol_accessrevocation_CreateAccessRevocationWSRequest: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
    };
    /** Response for location access revocation creation. */
    Accesscontrol_accessrevocation_CreateAccessRevocationWSResponse: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
    };
    /** Request to delete a location access revocation. */
    Accesscontrol_accessrevocation_DeleteLocationAccessRevocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessRevocationUuid?: string | null;
    };
    /** Response for location access revocation deletion. */
    Accesscontrol_accessrevocation_DeleteLocationAccessRevocationWSResponse: {
      [key: string]: unknown;
    };
    /** Request to find location access revocations by access controlled door. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByAccessControlledDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
    };
    /** Response containing location access revocations for an access controlled door. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByAccessControlledDoorWSResponse: {
      /** List of location access revocations */
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    /** Request to find location access revocations by door label. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByDoorLabelWSRequest: {
      /** Door label identifier */
      doorLabelId?: string | null;
    };
    /** Response containing location access revocations for a door label. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByDoorLabelWSResponse: {
      /** List of location access revocations */
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    /** Request to find location access revocations by group. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
    };
    /** Response containing location access revocations for a group. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByGroupWSResponse: {
      /** List of location access revocations */
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    /** Request to find location access revocations by organization. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByOrgWSRequest: {
      [key: string]: unknown;
    };
    /** Response containing location access revocations for an organization. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByOrgWSResponse: {
      /** List of location access revocations */
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    /** Request to find location access revocations by user. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response containing location access revocations for a user. */
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByUserWSResponse: {
      /** List of location access revocations */
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    /** Request to get a location access revocation by UUID. */
    Accesscontrol_accessrevocation_GetLocationAccessRevocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessRevocationUuid?: string | null;
    };
    /** Response containing a location access revocation. */
    Accesscontrol_accessrevocation_GetLocationAccessRevocationWSResponse: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
    };
    /** Request to update a location access revocation. */
    Accesscontrol_accessrevocation_UpdateAccessRevocationWSRequest: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
    };
    /** Response for location access revocation update operation. */
    Accesscontrol_accessrevocation_UpdateAccessRevocationWSResponse: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
      error?: boolean | null;
      errorMsg?: string | null;
      /** Set of expired ACD licenses door UUIDs */
      expiredACDLicensesDoorUuids?: (string | null)[] | null;
      /** Set of unassigned ACD licenses door UUIDs */
      unassignedACDLicensesDoorUuids?: (string | null)[] | null;
    };
    /** Request to create a new badge template. */
    Accesscontrol_badgetemplate_CreateBadgeTemplateWSRequest: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    /** Response containing the created badge template. */
    Accesscontrol_badgetemplate_CreateBadgeTemplateWSResponse: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    /** Request to delete a specific badge template image by UUID. */
    Accesscontrol_badgetemplate_DeleteBadgeTemplateImageWSRequest: {
      /** base 64 (url-safe) uuid string */
      imageUuid?: string | null;
    };
    /** Response containing the deleted badge template image metadata. */
    Accesscontrol_badgetemplate_DeleteBadgeTemplateImageWSResponse: {
      image?: components["schemas"]["BadgeTemplateImage"];
    };
    /** Request to delete a specific badge template by UUID. */
    Accesscontrol_badgetemplate_DeleteBadgeTemplateWSRequest: {
      /** base 64 (url-safe) uuid string */
      templateUuid?: string | null;
    };
    /** Response containing the deleted badge template. */
    Accesscontrol_badgetemplate_DeleteBadgeTemplateWSResponse: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    /** Request to search for badge template images with pagination support. */
    Accesscontrol_badgetemplate_FindBadgeTemplateImagesWSRequest: {
      /** Should be null on first request and populated on subsequent requests if provided in the response to retrieve the next page */
      lastEvaluatedKey?: string | null;
      /** Max number of results to return. Response's lastEvaluatedKey will be null if no additional results are available */
      maxPageSize?: number | null;
    };
    /** Response containing a list of badge template images with pagination information. */
    Accesscontrol_badgetemplate_FindBadgeTemplateImagesWSResponse: {
      /** List of badge template images found in the search. */
      images?: components["schemas"]["BadgeTemplateImage"][] | null;
      /** If a max page size was specified and there are additional results that can be retrievedthis will be non-null and should be supplied in the next request to retrieve the next page of results. */
      lastEvaluatedKey?: string | null;
    };
    /** Request to search for badge templates with pagination support. */
    Accesscontrol_badgetemplate_FindBadgeTemplatesWSRequest: {
      /** Should be null on first request and populated on subsequent requests if provided in the response to retrieve the next page */
      lastEvaluatedKey?: string | null;
      /** Max number of results to return. Response's lastEvaluatedKey will be null if no additional results are available */
      maxPageSize?: number | null;
    };
    /** Response containing a list of badge templates with pagination information. */
    Accesscontrol_badgetemplate_FindBadgeTemplatesWSResponse: {
      /** If a max page size was specified and there are additional results that can be retrievedthis will be non-null and should be supplied in the next request to retrieve the next page of results. */
      lastEvaluatedKey?: string | null;
      /** List of badge templates found in the search. */
      templates?: components["schemas"]["BadgeTemplate"][] | null;
    };
    /** Request to retrieve metadata for a specific badge template image by UUID. */
    Accesscontrol_badgetemplate_GetBadgeTemplateImageWSRequest: {
      /** base 64 (url-safe) uuid string */
      imageUuid?: string | null;
    };
    /** Response containing the requested badge template image metadata. */
    Accesscontrol_badgetemplate_GetBadgeTemplateImageWSResponse: {
      image?: components["schemas"]["BadgeTemplateImage"];
    };
    /** Request to retrieve a specific badge template by UUID. */
    Accesscontrol_badgetemplate_GetBadgeTemplateWSRequest: {
      /** base 64 (url-safe) uuid string */
      templateUuid?: string | null;
    };
    /** Response containing the requested badge template. */
    Accesscontrol_badgetemplate_GetBadgeTemplateWSResponse: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    /** Request to update metadata for a badge template image with selective field updates. */
    Accesscontrol_badgetemplate_UpdateBadgeTemplateImageWSRequest: {
      selectiveUpdate?: components["schemas"]["BadgeTemplateImageSelectiveUpdate"];
    };
    /** Response containing the updated badge template image metadata. */
    Accesscontrol_badgetemplate_UpdateBadgeTemplateImageWSResponse: {
      image?: components["schemas"]["BadgeTemplateImage"];
    };
    /** Request to update an existing badge template with selective field updates. */
    Accesscontrol_badgetemplate_UpdateBadgeTemplateWSRequest: {
      selectiveUpdate?: components["schemas"]["BadgeTemplateSelectiveUpdate"];
    };
    /** Response containing the updated badge template. */
    Accesscontrol_badgetemplate_UpdateBadgeTemplateWSResponse: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    /** Request to assign an access control credential to a user. */
    Accesscontrol_credentials_AssignAccessControlCredentialWSRequest: {
      /** Hex value of the credential */
      credentialHexValue?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response for assigning an access control credential to a user. */
    Accesscontrol_credentials_AssignAccessControlCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_BaseProvisionMobileAccessControlCredentialForCurrentUserWSResponse: (
      | components["schemas"]["Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserSuccessWSResponse"]
      | components["schemas"]["Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponse"]
    ) & {
      type?: BaseProvisionMobileAccessControlCredentialForCurrentUserWSResponseTypeEnum | null;
    };
    Accesscontrol_credentials_BaseUnlockAccessControlledDoorForCurrentUserWSResponse: (
      | components["schemas"]["Accesscontrol_UnlockAccessControlledDoorForCurrentUserSuccessWSResponse"]
      | components["schemas"]["Accesscontrol_UnlockAccessControlledDoorForCurrentUserErrorWSResponse"]
    ) & {
      type?: BaseUnlockAccessControlledDoorForCurrentUserWSResponseTypeEnum | null;
    };
    Accesscontrol_credentials_BaseUnlockAccessControlledDoorWSResponse: (
      | components["schemas"]["Accesscontrol_UnlockAccessControlledDoorSuccessWSResponse"]
      | components["schemas"]["Accesscontrol_UnlockAccessControlledDoorErrorWSResponse"]
    ) & {
      type?: BaseUnlockAccessControlledDoorWSResponseTypeEnum | null;
    };
    /** Request to bulk provision PIN credentials for multiple users. */
    Accesscontrol_credentials_BulkProvisionPinCredentialsWSRequest: {
      /** End date in epoch seconds when these credentials expire. Credentials never expire if this value is left null. */
      endDateEpochSecExclusive?: number | null;
      /** Whether to notify users about their new PIN credentials. */
      notifyUsers?: boolean | null;
      /** Length of PINs to be generated. Accepts length between 4 and 16. Default length is 5. */
      pinLength?: number | null;
      /** Start date in epoch seconds when these credentials become active. Credentials activate immediately if this value is left null. */
      startDateEpochSecInclusive?: number | null;
      userUuids?: (string | null)[] | null;
    };
    /** Response containing the bulk provisioned PIN credentials and any failed users. */
    Accesscontrol_credentials_BulkProvisionPinCredentialsWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of user UUIDs for which PIN credential creation failed */
      failedUsers?: (string | null)[] | null;
    };
    /** Request to bulk rotate PIN credentials for multiple users. */
    Accesscontrol_credentials_BulkRotatePinCredentialsWSRequest: {
      /** Set of credential uuids designated for PIN rotation. */
      credentialUuids: (string | null)[] | null;
      /** End date in epoch seconds when these credentials expire. Credentials never expire if this value is left null. */
      endDateEpochSecExclusive?: number | null;
      /** Whether to notify users about their rotated PIN credentials. */
      notifyUsers?: boolean | null;
      /** Length of PIN to be generated. Accepts length between 4 and 16. Default is 5. */
      pinLength?: number | null;
      /** Start date in epoch seconds when these credentials become active. Credentials activate immediately if this value is left null. */
      startDateEpochSecInclusive?: number | null;
    };
    /** Response containing the bulk rotated PIN credentials and any failed credentials. */
    Accesscontrol_credentials_BulkRotatePinCredentialsWSResponse: {
      /** List of successfully rotated PIN credentials */
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to create an access control credential by hex value and type. */
    Accesscontrol_credentials_CreateAccessControlCredentialByHexValueAndTypeWSRequest: {
      credentialType?: components["schemas"]["AccessControlCredentialEnumType"];
      /** End date in epoch seconds (exclusive) */
      endDateEpochSecExclusive?: number | null;
      /** Hex value of the credential */
      hexValue?: string | null;
      /** Only needed when creating Wiegand credentials */
      littleEndian?: boolean | null;
      /** Only needed when creating Wiegand credentials */
      numValueBits?: number | null;
      /** Start date in epoch seconds (inclusive) */
      startDateEpochSecInclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response for access control credential creation by hex value and type. */
    Accesscontrol_credentials_CreateAccessControlCredentialByHexValueAndTypeWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to create an Apple Wallet pass. */
    Accesscontrol_credentials_CreateAppleWalletPassWSRequest: {
      /** base 64 (url-safe) uuid string */
      credUuid?: string | null;
    };
    /** Response containing Apple Wallet pass data as a streaming output. */
    Accesscontrol_credentials_CreateAppleWalletPassWSResponse: {
      [key: string]: unknown;
    };
    /** Request to create a PIN credential for a user. */
    Accesscontrol_credentials_CreatePinCredentialWSRequest: {
      /** End date in epoch seconds when this credential expires. Credentials never expire if this value is left null. */
      endDateEpochSecExclusive?: number | null;
      /** Whether to notify the user about the new PIN credential. */
      notifyUser?: boolean | null;
      /** PIN code (4 to 16 digits), will be generated automatically if one is not provided. */
      pinCode?: string | null;
      /** Length of PIN to be generated if a PIN code is not provided. Accepts length between 4 and 16. Default length is 5. */
      pinLength?: number | null;
      /** Start date in epoch seconds when this credential becomes active. Credentials activate immediately if this value is left null. */
      startDateEpochSecInclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid: string | null;
    };
    /** Response containing the created PIN credential details. */
    Accesscontrol_credentials_CreatePinCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to create a Rhombus Secure CSN credential. */
    Accesscontrol_credentials_CreateRhombusSecureCsnCredentialWSRequest: {
      /** Credential value */
      credentialValue?: string | null;
      /** End date in epoch seconds (exclusive) */
      endDateEpochSecExclusive?: number | null;
      /** Start date in epoch seconds (inclusive) */
      startDateEpochSecInclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response for Rhombus Secure CSN credential creation. */
    Accesscontrol_credentials_CreateRhombusSecureCsnCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to create a standard CSN credential. */
    Accesscontrol_credentials_CreateStandardCsnCredentialWSRequest: {
      /** Credential value */
      credentialValue?: string | null;
      /** End date in epoch seconds (exclusive) */
      endDateEpochSecExclusive?: number | null;
      /** Start date in epoch seconds (inclusive) */
      startDateEpochSecInclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response for standard CSN credential creation. */
    Accesscontrol_credentials_CreateStandardCsnCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to create a 64-bit raw Wiegand credential. */
    Accesscontrol_credentials_CreateWiegand64BitRawCredentialWSRequest: {
      /** End date in epoch seconds (exclusive) */
      endDateEpochSecExclusive?: number | null;
      /** Start date in epoch seconds (inclusive) */
      startDateEpochSecInclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** Credential value */
      value?: string | null;
    };
    /** Response for 64-bit raw Wiegand credential creation. */
    Accesscontrol_credentials_CreateWiegand64BitRawCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to create a Wiegand credential. */
    Accesscontrol_credentials_CreateWiegandCredentialWSRequest: {
      /** Card number for the credential */
      cardNumber?: number | null;
      /** Company ID used by HID CORP 1000 */
      companyId?: number | null;
      /** End date in epoch seconds (exclusive) */
      endDateEpochSecExclusive?: number | null;
      /** Facility code for the credential */
      facilityCode?: number | null;
      /** Site code for the credential */
      siteCode?: number | null;
      /** Start date in epoch seconds (inclusive) */
      startDateEpochSecInclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** Final credential value used in RAW formats */
      value?: string | null;
      wiegandFormat?: components["schemas"]["WiegandFormatEnumType"];
    };
    /** Response for Wiegand credential creation. */
    Accesscontrol_credentials_CreateWiegandCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to create a D10202 Wiegand credential. */
    Accesscontrol_credentials_CreateWiegandD10202CredentialWSRequest: {
      /** Card number */
      cardNumber?: number | null;
      /** End date in epoch seconds (exclusive) */
      endDateEpochSecExclusive?: number | null;
      /** Facility code */
      facilityCode?: number | null;
      /** Start date in epoch seconds (inclusive) */
      startDateEpochSecInclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response for D10202 Wiegand credential creation. */
    Accesscontrol_credentials_CreateWiegandD10202CredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to create a H10301 Wiegand credential. */
    Accesscontrol_credentials_CreateWiegandH10301CredentialWSRequest: {
      /** Card number */
      cardNumber?: number | null;
      /** End date in epoch seconds (exclusive) */
      endDateEpochSecExclusive?: number | null;
      /** Facility code */
      facilityCode?: number | null;
      /** Start date in epoch seconds (inclusive) */
      startDateEpochSecInclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response for H10301 Wiegand credential creation. */
    Accesscontrol_credentials_CreateWiegandH10301CredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to create a H10304 Wiegand credential. */
    Accesscontrol_credentials_CreateWiegandH10304CredentialWSRequest: {
      /** Card number */
      cardNumber?: number | null;
      /** End date in epoch seconds (exclusive) */
      endDateEpochSecExclusive?: number | null;
      /** Facility code */
      facilityCode?: number | null;
      /** Start date in epoch seconds (inclusive) */
      startDateEpochSecInclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response for H10304 Wiegand credential creation. */
    Accesscontrol_credentials_CreateWiegandH10304CredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to delete an access control credential. */
    Accesscontrol_credentials_DeleteAccessControlCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
    };
    /** Response indicating successful deletion of an access control credential. */
    Accesscontrol_credentials_DeleteAccessControlCredentialWSResponse: {
      [key: string]: unknown;
    };
    /** Request to delete a PIN credential permanently from the system. */
    Accesscontrol_credentials_DeletePinCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid: string | null;
    };
    /** Response indicating successful deletion of a PIN credential. */
    Accesscontrol_credentials_DeletePinCredentialWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to delete an unassigned access control credential. */
    Accesscontrol_credentials_DeleteUnassignedAccessControlCredentialWSRequest: {
      /** Hex value of the credential to delete */
      credentialHexValue?: string | null;
    };
    /** Response indicating successful deletion of an unassigned access control credential. */
    Accesscontrol_credentials_DeleteUnassignedAccessControlCredentialWSResponse: {
      [key: string]: unknown;
    };
    /** Request to find access control credentials by organization. */
    Accesscontrol_credentials_FindAccessControlCredentialByOrgWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    /** Response containing access control credentials found for an organization. */
    Accesscontrol_credentials_FindAccessControlCredentialByOrgWSResponse: {
      /** List of access control credentials */
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    /** Request to find access control credentials by user. */
    Accesscontrol_credentials_FindAccessControlCredentialByUserWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response containing access control credentials found for a specific user. */
    Accesscontrol_credentials_FindAccessControlCredentialByUserWSResponse: {
      /** List of access control credentials */
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    /** Request to find access control credentials by multiple users. */
    Accesscontrol_credentials_FindAccessControlCredentialByUsersWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
      /** Set of user UUIDs to search for */
      userUuids?: (string | null)[] | null;
    };
    /** Response containing access control credentials mapped by user UUIDs. */
    Accesscontrol_credentials_FindAccessControlCredentialByUsersWSResponse: {
      /** Map of user UUIDs to their associated access control credentials */
      userCredentialsMap?: {
        [key: string]:
          | components["schemas"]["AccessControlCredentialType"][]
          | null;
      } | null;
    };
    /** Request to find credential history by credential hex value. */
    Accesscontrol_credentials_FindCredentialHistoryByCredentialHexValueWSRequest: {
      /** Hex value of the credential to search for */
      credentialHexValue?: string | null;
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    /** Response containing credential history found by credential hex value. */
    Accesscontrol_credentials_FindCredentialHistoryByCredentialHexValueWSResponse: {
      /** List of credential history records */
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    /** Request to find credential history by credential value. */
    Accesscontrol_credentials_FindCredentialHistoryByCredentialValueWSRequest: {
      credentialType?: components["schemas"]["AccessControlCredentialEnumType"];
      /** Credential value to search for */
      credentialValue?: string | null;
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    /** Response containing credential history found by credential value. */
    Accesscontrol_credentials_FindCredentialHistoryByCredentialValueWSResponse: {
      /** List of credential history records */
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    /** Request to find credential history by user. */
    Accesscontrol_credentials_FindCredentialHistoryByUserWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response containing credential history found for a specific user. */
    Accesscontrol_credentials_FindCredentialHistoryByUserWSResponse: {
      /** List of credential history records */
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    /** Request to find credential history. */
    Accesscontrol_credentials_FindCredentialHistoryWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    /** Response containing credential history. */
    Accesscontrol_credentials_FindCredentialHistoryWSResponse: {
      /** List of credential history records */
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    /** Request to find PIN credentials in the organization with optional filtering. */
    Accesscontrol_credentials_FindPinCredentialsByOrgWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    /** Response containing a list of PIN credentials found in the organization. */
    Accesscontrol_credentials_FindPinCredentialsByOrgWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to find Rhombus Secure mobile credentials for current user. */
    Accesscontrol_credentials_FindRhombusSecureMobileCredentialsForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    /** Response for finding Rhombus Secure mobile credentials for current user. */
    Accesscontrol_credentials_FindRhombusSecureMobileCredentialsForCurrentUserWSResponse: {
      /** List of Rhombus Secure mobile credentials */
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    /** Request to get an available PIN code for creating a PIN credential. */
    Accesscontrol_credentials_GetAvailablePinCodeWSRequest: {
      /** Length of PIN to be generated. */
      pinLength: number | null;
    };
    /** Response containing an available PIN code for credential creation. */
    Accesscontrol_credentials_GetAvailablePinCodeWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** The generated PIN code */
      pinCode?: string | null;
    };
    /** Request to get detailed information about a PIN credential including sensitive data. */
    Accesscontrol_credentials_GetPinCredentialDetailsWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid: string | null;
    };
    /** Response containing detailed PIN credential information including sensitive data. */
    Accesscontrol_credentials_GetPinCredentialDetailsWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to get Rhombus Secure CSN credential details. */
    Accesscontrol_credentials_GetRhombusSecureCsnCredentialDetailsWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
    };
    /** Response containing Rhombus Secure CSN credential details. */
    Accesscontrol_credentials_GetRhombusSecureCsnCredentialDetailsWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to get Rhombus Secure mobile app state stats for organization. */
    Accesscontrol_credentials_GetRhombusSecureMobileAppStateStatsForOrgWSRequest: {
      [key: string]: unknown;
    };
    /** Response for getting Rhombus Secure mobile app state stats for organization. */
    Accesscontrol_credentials_GetRhombusSecureMobileAppStateStatsForOrgWSResponse: {
      appStateStats?: components["schemas"]["RhombusSecureMobileAppStateStats"];
    };
    /** Request to get standard CSN credential details. */
    Accesscontrol_credentials_GetStandardCsnCredentialDetailsWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
    };
    /** Response containing standard CSN credential details. */
    Accesscontrol_credentials_GetStandardCsnCredentialDetailsWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponse:
      | ({
          /** Enumeration of possible errors when provisioning mobile access control credentials. */
          errorType?: ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponseErrorTypeEnum | null;
        } & {
          type?: ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponseTypeEnum | null;
        })
      | null;
    Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserSuccessWSResponse:
      | ({
          credential?: components["schemas"]["AccessControlCredentialType"];
          encodedPrivateKey?: string | null;
        } & {
          type?: ProvisionMobileAccessControlCredentialForCurrentUserSuccessWSResponseTypeEnum | null;
        })
      | null;
    /** Request to provision mobile access control credential for current user. */
    Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserWSRequest: {
      /** Name of the mobile app */
      appName?: string | null;
      appNotifications?: components["schemas"]["RhombusSecureMobileFeature"];
      /** Operating system of the mobile device */
      appOS?: string | null;
      /** Version of the mobile app */
      appVersion?: string | null;
      clientType?: components["schemas"]["MobileTokenOSEnum"];
      /** Model of the mobile device */
      deviceModel?: string | null;
      /** Installation ID of the mobile app */
      installationId?: string | null;
      tapToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
      waveToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
    };
    /** Request to revoke an access control credential. */
    Accesscontrol_credentials_RevokeAccessControlCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
    };
    /** Response containing the revoked access control credential details. */
    Accesscontrol_credentials_RevokeAccessControlCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to revoke a PIN credential, making it inactive. */
    Accesscontrol_credentials_RevokePinCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid: string | null;
    };
    /** Response indicating successful revocation of a PIN credential. */
    Accesscontrol_credentials_RevokePinCredentialWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to revoke Rhombus Secure mobile credential for current user. */
    Accesscontrol_credentials_RevokeRhombusSecureMobileCredentialForCurrentUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
    };
    /** Response for revoking Rhombus Secure mobile credential for current user. */
    Accesscontrol_credentials_RevokeRhombusSecureMobileCredentialForCurrentUserWSResponse: {
      [key: string]: unknown;
    };
    /** Request to rotate a PIN credential with a new value. */
    Accesscontrol_credentials_RotatePinCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid: string | null;
      /** End date in epoch seconds when this credential expires. If left null, copies the end date from the previous PIN. */
      endDateEpochSecExclusive?: number | null;
      /** Whether to notify the user about their rotated PIN credential. */
      notifyUser?: boolean | null;
      /** PIN code (4 to 16 digits), will be generated automatically if one is not provided. */
      pinCode?: string | null;
      /** Length of PIN to be generated if a PIN code is not provided. Accepts length between 4 and 16. If left null, the generated PIN will have the same length as the previous PIN. */
      pinLength?: number | null;
      /** Start date in epoch seconds when this credential becomes active. If left null, copies the start date from the previous PIN. */
      startDateEpochSecInclusive?: number | null;
    };
    /** Response containing the rotated PIN credential details. */
    Accesscontrol_credentials_RotatePinCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to suspend an access control credential. */
    Accesscontrol_credentials_SuspendAccessControlCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
    };
    /** Response containing the suspended access control credential details. */
    Accesscontrol_credentials_SuspendAccessControlCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to unsuspend an access control credential. */
    Accesscontrol_credentials_UnsuspendAccessControlCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
    };
    /** Response containing the unsuspended access control credential details. */
    Accesscontrol_credentials_UnsuspendAccessControlCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to update the note field of an access control credential. */
    Accesscontrol_credentials_UpdateAccessControlCredentialNoteWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      /** Note to be associated with the credential. Max length is 250 characters. */
      note?: string | null;
    };
    /** Response for updating the note field of an access control credential. */
    Accesscontrol_credentials_UpdateAccessControlCredentialNoteWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to update a PIN credential with new start and end dates. */
    Accesscontrol_credentials_UpdatePinCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    /** Response containing the updated PIN credential details. */
    Accesscontrol_credentials_UpdatePinCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to update Rhombus Key mobile app state for current user. */
    Accesscontrol_credentials_UpdateRhombusKeyMobileAppStateForCurrentUserWSRequest: {
      /** Name of the mobile app */
      appName?: string | null;
      appNotifications?: components["schemas"]["RhombusSecureMobileFeature"];
      /** Operating system of the mobile device */
      appOS?: string | null;
      /** Version of the mobile app */
      appVersion?: string | null;
      clientType?: components["schemas"]["MobileTokenOSEnum"];
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      /** Model of the mobile device */
      deviceModel?: string | null;
      tapToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
      waveToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
    };
    /** Response for updating Rhombus Key mobile app state for current user. */
    Accesscontrol_credentials_UpdateRhombusKeyMobileAppStateForCurrentUserWSResponse: {
      appState?: components["schemas"]["RhombusSecureMobileAppState"];
    };
    /** Request to update a Rhombus Secure CSN credential. */
    Accesscontrol_credentials_UpdateRhombusSecureCsnCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    /** Response containing the updated Rhombus Secure CSN credential. */
    Accesscontrol_credentials_UpdateRhombusSecureCsnCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to update a Rhombus Secure mobile credential. */
    Accesscontrol_credentials_UpdateRhombusSecureMobileCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    /** Response containing the updated Rhombus Secure mobile credential. */
    Accesscontrol_credentials_UpdateRhombusSecureMobileCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to update a standard CSN credential. */
    Accesscontrol_credentials_UpdateStandardCsnCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    /** Response containing the updated standard CSN credential. */
    Accesscontrol_credentials_UpdateStandardCsnCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to update a Wiegand credential. */
    Accesscontrol_credentials_UpdateWiegandCredentialWSRequest: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    /** Response containing the updated Wiegand credential. */
    Accesscontrol_credentials_UpdateWiegandCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    /** Request to create a new door schedule exception. */
    Accesscontrol_doorexception_CreateDoorScheduleExceptionWSRequest: {
      exception?: components["schemas"]["DoorScheduleExceptionType"];
    };
    /** Response containing the created door schedule exception. */
    Accesscontrol_doorexception_CreateDoorScheduleExceptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      exception?: components["schemas"]["DoorScheduleExceptionType"];
    };
    /** Request to delete a specific door schedule exception by UUID. */
    Accesscontrol_doorexception_DeleteDoorScheduleExceptionWSRequest: {
      /** base 64 (url-safe) uuid string */
      exceptionUuid?: string | null;
    };
    /** Response confirming the deletion of a door schedule exception. */
    Accesscontrol_doorexception_DeleteDoorScheduleExceptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to search for door schedule exceptions for a specific door with optional date range filtering. */
    Accesscontrol_doorexception_FindDoorScheduleExceptionsForDoorWSRequest: {
      dateRangeFilter?: components["schemas"]["DateRangeFilter"];
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
    };
    /** Response containing a list of door schedule exceptions found for a specific door. */
    Accesscontrol_doorexception_FindDoorScheduleExceptionsForDoorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of door schedule exceptions found for the specified door. */
      exceptions?: components["schemas"]["DoorScheduleExceptionType"][] | null;
    };
    /** Request to search for door schedule exceptions for a specific location with optional date range filtering. */
    Accesscontrol_doorexception_FindDoorScheduleExceptionsForLocationWSRequest: {
      dateRangeFilter?: components["schemas"]["DateRangeFilter"];
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing a list of door schedule exceptions found for a specific location. */
    Accesscontrol_doorexception_FindDoorScheduleExceptionsForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of door schedule exceptions found for the specified location. */
      exceptions?: components["schemas"]["DoorScheduleExceptionType"][] | null;
    };
    /** Request to search for door schedule exceptions with optional date range filtering. */
    Accesscontrol_doorexception_FindDoorScheduleExceptionsWSRequest: {
      dateRangeFilter?: components["schemas"]["DateRangeFilter"];
    };
    /** Response containing a list of door schedule exceptions found in the search. */
    Accesscontrol_doorexception_FindDoorScheduleExceptionsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of door schedule exceptions found in the search. */
      exceptions?: components["schemas"]["DoorScheduleExceptionType"][] | null;
    };
    /** Request to retrieve a specific door schedule exception by UUID. */
    Accesscontrol_doorexception_GetDoorScheduleExceptionWSRequest: {
      /** base 64 (url-safe) uuid string */
      exceptionUuid?: string | null;
    };
    /** Response containing the requested door schedule exception. */
    Accesscontrol_doorexception_GetDoorScheduleExceptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      exception?: components["schemas"]["DoorScheduleExceptionType"];
    };
    /** Request to update an existing door schedule exception. */
    Accesscontrol_doorexception_UpdateDoorScheduleExceptionWSRequest: {
      exception?: components["schemas"]["DoorScheduleExceptionType"];
    };
    /** Response containing the updated door schedule exception and license information. */
    Accesscontrol_doorexception_UpdateDoorScheduleExceptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      exception?: components["schemas"]["DoorScheduleExceptionType"];
      /** Set of door UUIDs with expired access control licenses. */
      expiredACDLicensesDoorUuids?: (string | null)[] | null;
      /** Set of door UUIDs with unassigned access control licenses. */
      unassignedACDLicensesDoorUuids?: (string | null)[] | null;
    };
    /** Request to apply door auth first-in state to all doors in a first-in settings group. */
    Accesscontrol_firstin_ApplyDoorAuthFirstInGroupStateWSRequest: {
      /** base 64 (url-safe) uuid string */
      settingsUuid?: string | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    /** Response containing the updated location first-in settings after applying door auth first-in group state. */
    Accesscontrol_firstin_ApplyDoorAuthFirstInGroupStateWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    /** Request to apply door auth first-in state to a specific door. */
    Accesscontrol_firstin_ApplyDoorAuthFirstInStateWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    /** Response containing the updated door after applying door auth first-in state. */
    Accesscontrol_firstin_ApplyDoorAuthFirstInStateWSResponse: {
      door?: components["schemas"]["AccessControlledDoorType"];
    };
    /** Request to apply door schedule first-in state to all doors in a first-in settings group. */
    Accesscontrol_firstin_ApplyDoorScheduleFirstInGroupStateWSRequest: {
      /** base 64 (url-safe) uuid string */
      settingsUuid?: string | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    /** Response containing the updated location first-in settings after applying door schedule first-in group state. */
    Accesscontrol_firstin_ApplyDoorScheduleFirstInGroupStateWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    /** Request to apply door schedule first-in state to a specific door. */
    Accesscontrol_firstin_ApplyDoorScheduleFirstInStateWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    /** Response containing the updated door after applying door schedule first-in state. */
    Accesscontrol_firstin_ApplyDoorScheduleFirstInStateWSResponse: {
      door?: components["schemas"]["AccessControlledDoorType"];
    };
    /** Request to create new location first-in settings. */
    Accesscontrol_firstin_CreateLocationFirstInSettingsWSRequest: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    /** Response containing the created location first-in settings. */
    Accesscontrol_firstin_CreateLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    /** Request to delete specific location first-in settings by UUID. */
    Accesscontrol_firstin_DeleteLocationFirstInSettingsWSRequest: {
      /** base 64 (url-safe) uuid string */
      settingsUuid?: string | null;
    };
    /** Response containing the deleted location first-in settings. */
    Accesscontrol_firstin_DeleteLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    /** Request to search for location first-in settings for a specific location with pagination support. */
    Accesscontrol_firstin_FindLocationFirstInSettingsByLocationWSRequest: {
      /** Should be null on first request and populated on subsequent requests if provided in the response to retrieve the next page */
      lastEvaluatedKey?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Max number of results to return. Response's lastEvaluatedKey will be null if no additional results are available */
      maxPageSize?: number | null;
    };
    /** Response containing a list of location first-in settings found for the specified location with pagination information. */
    Accesscontrol_firstin_FindLocationFirstInSettingsByLocationWSResponse: {
      /** If a max page size was specified and there are additional results that can be retrievedthis will be non-null and should be supplied in the next request to retrieve the next page of results. */
      lastEvaluatedKey?: string | null;
      /** List of location first-in settings found for the specified location. */
      settingsList?: components["schemas"]["LocationFirstInSettings"][] | null;
    };
    /** Request to search for location first-in settings across the organization with pagination support. */
    Accesscontrol_firstin_FindLocationFirstInSettingsByOrgWSRequest: {
      /** Should be null on first request and populated on subsequent requests if provided in the response to retrieve the next page */
      lastEvaluatedKey?: string | null;
      /** Max number of results to return. Response's lastEvaluatedKey will be null if no additional results are available */
      maxPageSize?: number | null;
    };
    /** Response containing a list of location first-in settings found in the organization with pagination information. */
    Accesscontrol_firstin_FindLocationFirstInSettingsByOrgWSResponse: {
      /** If a max page size was specified and there are additional results that can be retrievedthis will be non-null and should be supplied in the next request to retrieve the next page of results. */
      lastEvaluatedKey?: string | null;
      /** List of location first-in settings found in the organization. */
      settingsList?: components["schemas"]["LocationFirstInSettings"][] | null;
    };
    /** Request to retrieve location first-in settings for a specific door. */
    Accesscontrol_firstin_GetLocationFirstInSettingsForDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
    };
    /** Response containing the location first-in settings for the specified door. */
    Accesscontrol_firstin_GetLocationFirstInSettingsForDoorWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    /** Request to retrieve specific location first-in settings by UUID. */
    Accesscontrol_firstin_GetLocationFirstInSettingsWSRequest: {
      /** base 64 (url-safe) uuid string */
      settingsUuid?: string | null;
    };
    /** Response containing the requested location first-in settings. */
    Accesscontrol_firstin_GetLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    /** Request to remove a door from its assigned location first-in settings. */
    Accesscontrol_firstin_RemoveDoorLocationFirstInSettingsWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
    };
    /** Response containing the updated location first-in settings after removing the door. */
    Accesscontrol_firstin_RemoveDoorLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    /** Request to update existing location first-in settings with selective field updates. */
    Accesscontrol_firstin_UpdateLocationFirstInSettingsWSRequest: {
      /** Optional description for the first-in settings. */
      description?: string | null;
      /** Optional flag to enable/disable door auth requirement. */
      doorAuthRequirementEnabled?: boolean | null;
      /** Optional flag to enable/disable door schedule requirement. */
      doorScheduleRequirementEnabled?: boolean | null;
      /** Optional sorted set of door UUIDs to assign to these settings. */
      doorUuids?: (string | null)[] | null;
      /** Optional sorted set of group UUIDs to assign to these settings. */
      groupUuids?: (string | null)[] | null;
      /** Optional name for the first-in settings. */
      name?: string | null;
      /** Optional list of first-in reset configurations. */
      resets?: components["schemas"]["BaseFirstInReset"][] | null;
      /** base 64 (url-safe) uuid string */
      settingsUuid?: string | null;
      /** Optional sorted set of user UUIDs to assign to these settings. */
      userUuids?: (string | null)[] | null;
    };
    /** Response containing the updated location first-in settings. */
    Accesscontrol_firstin_UpdateLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    /** Request to activate lockdown for a specific location via Rhombus Key with optional optimistic locking. */
    Accesscontrol_lockdownplan_ActivateLockdownForLocationViaRhombusKeyWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Set of lockdown plan UUIDs to activate for the location. */
      lockdownPlanUuids?: (string | null)[] | null;
      /** Optional timestamp for optimistic locking to ensure the user is updating the latest record. */
      stateUpdatedAtMillis?: number | null;
    };
    /** Response containing the result of activating lockdown for a location via Rhombus Key. */
    Accesscontrol_lockdownplan_ActivateLockdownForLocationViaRhombusKeyWSResponse: {
      result?: components["schemas"]["LockdownActivationResultEnumType"];
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    /** Request to activate lockdown for a specific location with optional optimistic locking. */
    Accesscontrol_lockdownplan_ActivateLockdownForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Set of lockdown plan UUIDs to activate for the location. */
      lockdownPlanUuids?: (string | null)[] | null;
      /** Optional timestamp for optimistic locking to ensure the user is updating the latest record. */
      stateUpdatedAtMillis?: number | null;
    };
    /** Response containing the result of activating lockdown for a location. */
    Accesscontrol_lockdownplan_ActivateLockdownForLocationWSResponse: {
      result?: components["schemas"]["LockdownActivationResultEnumType"];
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    /** Request to create a new location lockdown plan. */
    Accesscontrol_lockdownplan_CreateLocationLockdownPlanWSRequest: {
      lockdownPlan?: components["schemas"]["LocationLockdownPlanType"];
    };
    /** Response containing the created location lockdown plan. */
    Accesscontrol_lockdownplan_CreateLocationLockdownPlanWSResponse: {
      lockdownPlan?: components["schemas"]["LocationLockdownPlanType"];
    };
    /** Request to create a new lockdown rule for a specific location. */
    Accesscontrol_lockdownplan_CreateLockdownRuleForLocationWSRequest: {
      rule?: components["schemas"]["Accesscontrol_lockdownplan_ExternalLockdownPlanRuleType"];
    };
    /** Response containing the UUID of the created lockdown rule. */
    Accesscontrol_lockdownplan_CreateLockdownRuleForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Request to deactivate lockdown for a specific location via Rhombus Key with optional optimistic locking. */
    Accesscontrol_lockdownplan_DeactivateLockdownForLocationViaRhombusKeyWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Optional timestamp for optimistic locking to ensure the user is updating the latest record. */
      stateUpdatedAtMillis?: number | null;
    };
    /** Response containing the result of deactivating lockdown for a location via Rhombus Key. */
    Accesscontrol_lockdownplan_DeactivateLockdownForLocationViaRhombusKeyWSResponse: {
      result?: components["schemas"]["LockdownDeactivationResultEnumType"];
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    /** Request to deactivate lockdown for a specific location with optional optimistic locking. */
    Accesscontrol_lockdownplan_DeactivateLockdownForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Optional timestamp for optimistic locking to ensure the user is updating the latest record. */
      stateUpdatedAtMillis?: number | null;
    };
    /** Response containing the result of deactivating lockdown for a location. */
    Accesscontrol_lockdownplan_DeactivateLockdownForLocationWSResponse: {
      result?: components["schemas"]["LockdownDeactivationResultEnumType"];
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    /** Request to delete the lockdown state tracking for a specific location. */
    Accesscontrol_lockdownplan_DeleteLocationLockdownStateWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response indicating successful deletion of location lockdown state. */
    Accesscontrol_lockdownplan_DeleteLocationLockdownStateWSResponse: {
      [key: string]: unknown;
    };
    /** Request to delete a specific lockdown plan by UUID. */
    Accesscontrol_lockdownplan_DeleteLockdownPlanWSRequest: {
      /** base 64 (url-safe) uuid string */
      lockdownPlanUuid?: string | null;
    };
    /** Response confirming the deletion of a lockdown plan. */
    Accesscontrol_lockdownplan_DeleteLockdownPlanWSResponse: {
      /** base 64 (url-safe) uuid string */
      lockdownPlanUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Request to delete a specific lockdown rule for a location. */
    Accesscontrol_lockdownplan_DeleteLockdownRuleForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Response indicating successful deletion of a lockdown rule. */
    Accesscontrol_lockdownplan_DeleteLockdownRuleForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to disable test mode for lockdown at a specific location. */
    Accesscontrol_lockdownplan_DisableLockdownTestModeForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing the updated lockdown state after disabling test mode. */
    Accesscontrol_lockdownplan_DisableLockdownTestModeForLocationWSResponse: {
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    /** Request to enable test mode for lockdown at a specific location. */
    Accesscontrol_lockdownplan_EnableLockdownTestModeForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing the updated lockdown state after enabling test mode. */
    Accesscontrol_lockdownplan_EnableLockdownTestModeForLocationWSResponse: {
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    /** External representation of a lockdown plan rule configuration. */
    Accesscontrol_lockdownplan_ExternalLockdownPlanRuleType: {
      action?: components["schemas"]["RuleActionType"];
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      ruleFilters?: components["schemas"]["RuleFilterType"];
      /** The name of the lockdown rule. */
      ruleName?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
      triggerActivity?: components["schemas"]["ActivityEnum"];
    };
    /** Request to find lockdown events for a specific location with optional time filtering. */
    Accesscontrol_lockdownplan_FindLocationLockdownEventsWSRequest: {
      /** Returns events created after (exclusive) the specified millisecond epoch timestamp */
      createdAfterMs?: number | null;
      /** Returns events created before (exclusive) the specified millisecond epoch timestamp */
      createdBeforeMs?: number | null;
      /** Limits the number of returned events to the latest LIMIT events */
      limit?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid: string | null;
    };
    /** Response containing a list of lockdown events for a specific location. */
    Accesscontrol_lockdownplan_FindLocationLockdownEventsWSResponse: {
      /** List of lockdown events found for the specified location. */
      events?: components["schemas"]["BaseLockdownStateEventType"][] | null;
    };
    /** Request to find location lockdown states with optional filtering. */
    Accesscontrol_lockdownplan_FindLocationLockdownStatesWSRequest: {
      /** Optional filter to limit results to specific lockdown states. */
      stateFilter?:
        | components["schemas"]["LocationLockdownStateEnumType"][]
        | null;
    };
    /** Response containing a list of location lockdown states. */
    Accesscontrol_lockdownplan_FindLocationLockdownStatesWSResponse: {
      /** List of location lockdown states found for the organization. */
      states?: components["schemas"]["LocationLockdownStateType"][] | null;
    };
    /** Request to search for lockdown plans for a specific location. */
    Accesscontrol_lockdownplan_FindLockdownPlansByLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing a list of lockdown plans found for the specified location. */
    Accesscontrol_lockdownplan_FindLockdownPlansByLocationWSResponse: {
      /** List of lockdown plans found for the specified location. */
      lockdownPlans?: components["schemas"]["BaseLockdownPlanType"][] | null;
    };
    /** Request to search for lockdown plans across the organization. */
    Accesscontrol_lockdownplan_FindLockdownPlansWSRequest: {
      [key: string]: unknown;
    };
    /** Response containing a list of lockdown plans found in the organization. */
    Accesscontrol_lockdownplan_FindLockdownPlansWSResponse: {
      /** List of lockdown plans found in the organization. */
      lockdownPlans?: components["schemas"]["BaseLockdownPlanType"][] | null;
    };
    /** Request to retrieve a specific lockdown plan by UUID. */
    Accesscontrol_lockdownplan_GetLockdownPlanWSRequest: {
      /** base 64 (url-safe) uuid string */
      lockdownPlanUuid?: string | null;
    };
    /** Response containing the requested lockdown plan. */
    Accesscontrol_lockdownplan_GetLockdownPlanWSResponse: {
      lockdownPlan?: components["schemas"]["BaseLockdownPlanType"];
    };
    /** Request to retrieve all lockdown rules for a specific location. */
    Accesscontrol_lockdownplan_GetLockdownRulesForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing a list of lockdown rules for a specific location. */
    Accesscontrol_lockdownplan_GetLockdownRulesForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of lockdown rules configured for the specified location. */
      rules?:
        | components["schemas"]["Accesscontrol_lockdownplan_ExternalLockdownPlanRuleType"][]
        | null;
    };
    /** Request to retrieve an existing lockdown state or create one for a specific location. */
    Accesscontrol_lockdownplan_GetOrCreateLocationLockdownStateWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing the lockdown state for the specified location. */
    Accesscontrol_lockdownplan_GetOrCreateLocationLockdownStateWSResponse: {
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    /** Request to update an existing location lockdown plan with selective field updates. */
    Accesscontrol_lockdownplan_UpdateLocationLockdownPlanWSRequest: {
      activationPlan?: components["schemas"]["LockdownActivationPlanType"];
      deactivationPlan?: components["schemas"]["LockdownDeactivationPlanType"];
      defaultLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
      doorLockdownStateMap?: {
        [key: string]: components["schemas"]["DoorLockdownStateEnumType"];
      } | null;
      /** base 64 (url-safe) uuid string */
      lockdownPlanUuid?: string | null;
      name?: string | null;
      physicalAccess?: components["schemas"]["LockdownPhysicalAccessType"];
      testPlan?: components["schemas"]["LockdownTestPlanType"];
    };
    /** Response containing the updated location lockdown plan. */
    Accesscontrol_lockdownplan_UpdateLocationLockdownPlanWSResponse: {
      lockdownPlan?: components["schemas"]["LocationLockdownPlanType"];
    };
    /** Request to generate a QR access code. */
    Accesscontrol_qr_GenerateQRAccessCodeWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      auditPrincipal?: string | null;
      /** Valid duration in seconds */
      validDurationSec?: number | null;
    };
    /** Response for QR access code generation. */
    Accesscontrol_qr_GenerateQRAccessCodeWSResponse: {
      /** base 64 (url-safe) uuid string */
      accessTokenUuid?: string | null;
      /** QR code as PNG byte array */
      qrCode?: (string | null)[] | null;
    };
    /** Request to get QR access codes. */
    Accesscontrol_qr_GetQRAccessCodesWSRequest: { [key: string]: unknown };
    /** Response for getting QR access codes. */
    Accesscontrol_qr_GetQRAccessCodesWSResponse: {
      /** List of QR access codes */
      qrAccessCodes?:
        | components["schemas"]["Accesscontrol_qr_QRAccessCodeType"][]
        | null;
    };
    /** QR code access configuration for a specific door. */
    Accesscontrol_qr_QRAccessCodeType: {
      /** base 64 (url-safe) uuid string */
      accesTokenUuid?: string | null;
      /** Information about the user of the QR code so that audit events can be tracked. */
      auditPrincipal?: string | null;
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
      /** The expiration time of this QR code in seconds since epoch. */
      expirationTimeSec?: number | null;
    };
    Action: ActionEnum;
    ActivateLocationLockdownActionRecordType: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      lockdownPlanUuid?: string | null;
      succeeded?: boolean | null;
    };
    ActivateLocationLockdownActionType: {
      /** base 64 (url-safe) uuid string */
      locationLockdownPlanUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    ActivityEnum: ActivityEnum;
    AddOnLicense: AddOnLicenseEnum;
    AddOnLicenseInvoiceType: {
      cloudArchiveDays?: number | null;
      count?: number | null;
      description?: string | null;
      license?: components["schemas"]["AddOnLicense"];
      perceptionTypes?: components["schemas"]["PerceptionType"][] | null;
      price?: number | null;
    };
    AddOnLicenseStats: {
      addOnLicenseType?: components["schemas"]["AddOnLicense"];
      assignedCount?: number | null;
      deviceLicenseFamilyStats?:
        | components["schemas"]["DeviceLicenseFamilyStats"][]
        | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    AdvancedRMAType: {
      invoiceNeeded?: boolean | null;
      knownIssue?: boolean | null;
      managerialApproved?: boolean | null;
      managerialApprovedRMAs?: components["schemas"]["rctpRMAType"];
      rctpPartnerRequested?: boolean | null;
      rctpPartnerUuid?: string | null;
      rctpRMAs?: components["schemas"]["rctpRMAType"];
    };
    /** Primary pollutant affecting air quality index */
    AirQualityIndexPollutantEnum: AirQualityIndexPollutantEnum;
    AlertActionRecordType: {
      /** base 64 (url-safe) uuid string */
      policyAlertUuid?: string | null;
      status?: components["schemas"]["AlertActionStatusEnum"];
    };
    AlertActionStatusEnum: AlertActionStatusEnum;
    AlertMonitoringCatalogItem:
      | ({
          monthlyVerificationLimit?: number | null;
        } & {
          durationMonths?: number | null;
          productCode?: string | null;
          productType?: AlertMonitoringCatalogItemProductTypeEnum | null;
        })
      | null;
    AlertMonitoringEventRecordType: {
      alertMonitoringEventType?: components["schemas"]["AlertMonitoringRulesEventTypeEnum"];
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** base 64 (url-safe) uuid string */
      threatCaseUuid?: string | null;
      timestampMs?: number | null;
    };
    /** List of alert monitoring licenses available for the client organization */
    AlertMonitoringLicenseType: {
      allowedDeviceCount?: number | null;
      /** base 64 (url-safe) uuid string */
      claimKeyUuid?: string | null;
      createdOn?: string | null;
      deviceUuids?: (string | null)[] | null;
      firstAssignedDate?: string | null;
      licenseToUnassignEmailState?: AlertMonitoringLicenseLicenseToUnassignEmailStateEnum | null;
      licenseType?: components["schemas"]["License"];
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      maxDeleteDate?: string | null;
      monthlyVerificationLimit?: number | null;
      monthsReset?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      percentUsage?: number | null;
      /** base 64 (url-safe) uuid string */
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: AlertMonitoringLicenseProductTypeEnum | null;
      remainingAlarms?: number | null;
      remainingVerifications?: number | null;
      state?: AlertMonitoringLicenseStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      warningStage?: number | null;
    };
    /** Alert monitoring PIN to update. */
    AlertMonitoringPIN: {
      /** Timestamp in epoch ms when this PIN was created. */
      createdAtMillis?: number | null;
      /** PIN description. */
      description?: string | null;
      /** End date in epoch seconds when this PIN expires. */
      endDateEpochSecExclusive?: number | null;
      /** Set of location uuids associated with this PIN. */
      locationUuids: (string | null)[] | null;
      /** PIN name. */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** Timestamp in epoch ms when this PIN was last rotated. */
      rotatedAtMillis?: number | null;
      /** Duration in days that determines when this PIN will be automatically rotated. If an expiration date is specified, that is when the first rotation will occur. Auto-rotation is disabled if this value is null. */
      rotationPeriodDays?: number | null;
      /** Determines whether this PIN can be shared. */
      shared?: boolean | null;
      /** Start date in epoch seconds when this PIN becomes active. */
      startDateEpochSecInclusive?: number | null;
      /** Timestamp in epoch ms when this PIN was last modified. */
      updatedAtMillis?: number | null;
      /** Set of user uuids associated with this PIN. */
      userUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      /** PIN value. */
      value: string | null;
    };
    AlertMonitoringPinType: {
      description?: string | null;
      name?: string | null;
      pin?: string | null;
    };
    AlertMonitoringRuleTriggerType:
      | ({
          alertMonitoringRulesEventType?: components["schemas"]["AlertMonitoringRulesEventTypeEnum"];
          locationUuids?: (string | null)[] | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    AlertMonitoringRulesEventTypeEnum: AlertMonitoringRulesEventTypeEnum;
    AlertMonitoringSubmissionDelayIntervalType: {
      escalationDelayMinutes?: number | null;
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
      promptTheme?: components["schemas"]["NoonlightPromptTheme"];
    };
    /** List of threat cases matching the request criteria */
    AlertMonitoringThreatCaseType: {
      associatedDeviceUuids?: { [key: string]: number | null } | null;
      createdAtMillis?: number | null;
      deleted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      locationName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      noonlightAlarmId?: string | null;
      noonlightVerificationId?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      policyAlertUuid?: string | null;
      policyAlertUuids?: (string | null)[] | null;
      promptTheme?: components["schemas"]["NoonlightPromptTheme"];
      promptTitle?: string | null;
      /** base 64 (url-safe) uuid string */
      sharedClipGroupUuid?: string | null;
      sirenSettings?: components["schemas"]["AMSirenSettingsType"];
      status?: components["schemas"]["ThreatCaseStatus"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      submissionTimestampMs?: number | null;
      submitDelayExpireTimestampMs?: number | null;
      timelineEventList?:
        | components["schemas"]["ThreatCaseTimelineEventType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      verificationHistory?: components["schemas"]["VerificationHistory"];
    };
    /** Histogram item representing alert monitoring data for a specific device. */
    Alertmonitoring_AMDeviceHistogramItem: {
      /** The count of alerts for this device. */
      count?: number | null;
      /** The name of the device. */
      deviceName?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    /** Request to accept the terms of service for alert monitoring at a specific location. */
    Alertmonitoring_AcceptAlertMonitoringTermsOfServiceForLocationRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Request to accept the terms of service for alert monitoring. */
    Alertmonitoring_AcceptAlertMonitoringTermsOfServiceRequest: {
      [key: string]: unknown;
    };
    /** Response indicating the result of accepting alert monitoring terms of service. */
    Alertmonitoring_AcceptAlertMonitoringTermsOfServiceResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_AddPromptThreatQualificationsWSRequest: {
      threatQualification?: components["schemas"]["NoonlightPromptSelection"];
    };
    Alertmonitoring_AddPromptThreatQualificationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Information about who modified an alert monitoring configuration and when. */
    Alertmonitoring_AmModifiedBy: {
      /** Whether the alert monitoring is armed after the modification. */
      armed?: boolean | null;
      /** The email address of the user who made the modification. */
      email?: string | null;
      /** Enumeration of possible modification events for alert monitoring. */
      event?: AmModifiedByEventEnum | null;
      /** The timestamp when the modification occurred in milliseconds since epoch. */
      timestamp?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Request to cancel a threat case in alert monitoring. */
    Alertmonitoring_CancelThreatCaseWSRequest: {
      /** PIN code required to cancel the threat case */
      pin?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response indicating the result of canceling a threat case. */
    Alertmonitoring_CancelThreatCaseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Indicates whether the threat case cancellation was successful */
      success?: boolean | null;
    };
    /** Represents count data for a specific day and month with activation/deactivation information. */
    Alertmonitoring_CountType: {
      /** The day of the month (1-31). */
      dayOfMonth?: number | null;
      /** The number of deactivated items for this day and month. */
      deactivated?: number | null;
      /** The month (1-12). */
      month?: number | null;
      /** The count value for this day and month. */
      value?: number | null;
    };
    /** Request to create a custom PIN for alert monitoring at a specific location. */
    Alertmonitoring_CreateCustomPinForNoonlightWSRequest: {
      /** Description of the PIN */
      description?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Name for the PIN */
      name?: string | null;
      /** Custom PIN code to be created */
      pin?: string | null;
    };
    /** Response indicating the result of creating a custom PIN for alert monitoring. */
    Alertmonitoring_CreateCustomPinForNoonlightWSResponse: {
      /** Indicates whether the PIN already exists */
      alreadyExists?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to create alert monitoring settings for a location. */
    Alertmonitoring_CreateNoonlightSettingsForLocationRequest: {
      noonlightSettings?: components["schemas"]["NoonlightVersionedSettingsType"];
    };
    /** Response indicating the result of creating alert monitoring settings for a location. */
    Alertmonitoring_CreateNoonlightSettingsForLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to create a PIN for alert monitoring at a specific location. */
    Alertmonitoring_CreatePinForNoonlightWSRequest: {
      /** Description of the PIN */
      description?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Name for the PIN */
      name?: string | null;
    };
    /** Response containing the generated PIN for alert monitoring. */
    Alertmonitoring_CreatePinForNoonlightWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** The generated PIN code */
      pin?: string | null;
    };
    /** Chart data containing daily and cumulative monthly verification counts. */
    Alertmonitoring_CumulativeChartData: {
      /** List of cumulative monthly verification counts. */
      cumulativeMonthlyVerifications?:
        | components["schemas"]["Alertmonitoring_CountType"][]
        | null;
      /** List of daily verification counts. */
      dailyVerifications?:
        | components["schemas"]["Alertmonitoring_CountType"][]
        | null;
    };
    /** Request to delete alert monitoring settings for a location. */
    Alertmonitoring_DeleteNoonlightSettingsForLocationRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response indicating the result of deleting alert monitoring settings for a location. */
    Alertmonitoring_DeleteNoonlightSettingsForLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to delete a PIN for alert monitoring at a specific location. */
    Alertmonitoring_DeletePinForNoonlightWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** PIN code to be deleted */
      pin?: string | null;
    };
    /** Response indicating the result of deleting a PIN for alert monitoring. */
    Alertmonitoring_DeletePinForNoonlightWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_DeletePromptThreatQualificationByTitleWSRequest: {
      title?: string | null;
    };
    Alertmonitoring_DeletePromptThreatQualificationByTitleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to disable alert monitoring for a specific location. */
    Alertmonitoring_DisableLocationRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** PIN code required to disable alert monitoring */
      pin?: string | null;
    };
    /** Response indicating the result of disabling alert monitoring for a location. */
    Alertmonitoring_DisableLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to dismiss a threat case in alert monitoring. */
    Alertmonitoring_DismissThreatCaseWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** PIN code required to dismiss the threat case */
      pin?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response indicating the result of dismissing a threat case. */
    Alertmonitoring_DismissThreatCaseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Indicates whether the threat case dismissal was successful */
      success?: boolean | null;
    };
    /** Request to enable alert monitoring for a specific location. */
    Alertmonitoring_EnableLocationRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** The PIN code required to enable alert monitoring. */
      pin?: string | null;
    };
    /** Response indicating successful enabling of alert monitoring for a location. */
    Alertmonitoring_EnableLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to escalate a threat case to an alarm for alert monitoring. */
    Alertmonitoring_EscalateThreatCaseToAlarmWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response indicating the result of escalating a threat case to an alarm. */
    Alertmonitoring_EscalateThreatCaseToAlarmWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to generate monthly verifications for year report for alert monitoring at specific locations. */
    Alertmonitoring_GenerateMonthlyVerificationsForYearReportForLocationWSRequest: {
      /** List of location UUIDs to generate monthly verifications for */
      locationUuids?: (string | null)[] | null;
    };
    /** Response containing monthly verifications for year report for alert monitoring at specific locations. */
    Alertmonitoring_GenerateMonthlyVerificationsForYearReportForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of location UUIDs to their monthly verification counts */
      verificationsPerMonthPerLocation?: {
        [key: string]: { [key: string]: number | null } | null;
      } | null;
    };
    /** Request to generate report data for alert monitoring at a specific location. */
    Alertmonitoring_GenerateReportDataForLocationWSRequest: {
      /** End time for the report period in milliseconds since epoch */
      endTimeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Start time for the report period in milliseconds since epoch */
      startTimeMs?: number | null;
    };
    /** Response containing generated report data for alert monitoring at a specific location. */
    Alertmonitoring_GenerateReportDataForLocationWSResponse: {
      cumulativeChartData?: components["schemas"]["Alertmonitoring_CumulativeChartData"];
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of modification records showing who made changes */
      modifiedBy?:
        | components["schemas"]["Alertmonitoring_AmModifiedBy"][]
        | null;
      /** List of threat case report items for the report period */
      threatCaseReportItems?:
        | components["schemas"]["Alertmonitoring_ThreatCaseReportItem"][]
        | null;
      /** Set of uuids corresponding to the threatcases that produced verifications in the report period */
      threatCases?: (string | null)[] | null;
      /** List of device histogram items showing verifications by device */
      verificationsByDevice?:
        | components["schemas"]["Alertmonitoring_AMDeviceHistogramItem"][]
        | null;
    };
    /** Request to get the count of tripwire groups for alert monitoring. */
    Alertmonitoring_GetAlertMonitoringTripwireGroupCountWSRequest: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Response containing the count of tripwire groups for alert monitoring. */
    Alertmonitoring_GetAlertMonitoringTripwireGroupCountWSResponse: {
      /** Number of tripwire groups */
      count?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve all monitored door sensors for a location. */
    Alertmonitoring_GetMonitoredDoorSensorsForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid: string | null;
    };
    /** Response containing all monitored door sensors for a location. */
    Alertmonitoring_GetMonitoredDoorSensorsForLocationWSResponse: {
      /** List of minimal door state information for all monitored door sensors in a location */
      doorStates?: components["schemas"]["Door_MinimalDoorStateType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve alert monitoring settings for a specific location. */
    Alertmonitoring_GetNoonlightSettingsForLocationWSRequest: {
      /** If provided and true, response will contain a list of previous versions of the settings. For debugging purposes. */
      includePreviousVersions?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing alert monitoring settings for a specific location. */
    Alertmonitoring_GetNoonlightSettingsForLocationWSResponse: {
      alertMonitoringSettings?: components["schemas"]["Alertmonitoring_NoonlightWSSettings"];
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of previous versions of the alert monitoring settings */
      previousVersions?:
        | components["schemas"]["NoonlightVersionedSettingsType"][]
        | null;
    };
    /** Request to retrieve alert monitoring settings. */
    Alertmonitoring_GetNoonlightSettingsWSRequest: { [key: string]: unknown };
    /** Response containing alert monitoring settings for multiple locations. */
    Alertmonitoring_GetNoonlightSettingsWSResponse: {
      /** Map of location UUIDs to their alert monitoring settings */
      alertMonitoringSettings?: {
        [
          key: string
        ]: components["schemas"]["Alertmonitoring_NoonlightWSSettings"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_GetPromptThreatQualificationsWSRequest: {
      [key: string]: unknown;
    };
    Alertmonitoring_GetPromptThreatQualificationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      threatQualifications?:
        | components["schemas"]["NoonlightPromptSelection"][]
        | null;
    };
    /** Request to retrieve alarm monitoring status for a specific location. */
    Alertmonitoring_LocationStatusWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing alarm monitoring status for a specific location. */
    Alertmonitoring_LocationStatusWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      status?: components["schemas"]["MonitoringEnableStatus"];
    };
    /** Web service settings for Noonlight integration with alert monitoring. */
    Alertmonitoring_NoonlightWSSettings: {
      acceptedTermsOfService?: boolean | null;
      badgeAuthDisablesMonitoring?: boolean | null;
      defaultDelay?: number | null;
      defaultEmergencyContact?: components["schemas"]["EmergencyContact"];
      defaultPromptTheme?: components["schemas"]["NoonlightPromptTheme"];
      deleted?: boolean | null;
      /** The timestamp when Noonlight integration was disabled in milliseconds since epoch. */
      disabledOnMs?: number | null;
      emergencyContacts?:
        | components["schemas"]["EmergencyResponseContactsScheduleType"][]
        | null;
      enabled?: boolean | null;
      /** The timestamp when Noonlight integration was enabled in milliseconds since epoch. */
      enabledOnMs?: number | null;
      entryInstructions?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      manualEscalationSettings?: components["schemas"]["NoonlightScheduleType"];
      modifiedByEmail?: string | null;
      modifiedByIntegration?: boolean | null;
      modifiedByMetadata?: string | null;
      /** base 64 (url-safe) uuid string */
      modifiedByUuid?: string | null;
      modifiedTimeMs?: number | null;
      monitoringMode?: NoonlightWSSettingsMonitoringModeEnum | null;
      oneTimePauses?: components["schemas"]["NoonlightScheduleType"][] | null;
      oneTimeSchedules?:
        | components["schemas"]["NoonlightScheduleType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pins?: components["schemas"]["AlertMonitoringPinType"][] | null;
      rules?: (string | null)[] | null;
      schedules?: components["schemas"]["NoonlightScheduleType"][] | null;
      status?: components["schemas"]["MonitoringEnableStatus"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      talkdownEnabled?: boolean | null;
    };
    /** Request to retrieve alarm monitoring status for all locations in an organization. */
    Alertmonitoring_OrgStatusWSRequest: {
      /** If true, includes alert monitoring settings that were soft deleted in the response. */
      includeDeleted?: boolean | null;
    };
    /** Response containing alarm monitoring status for all locations in an organization. */
    Alertmonitoring_OrgStatusWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of location UUIDs to their monitoring enable status */
      locationStatuses?: {
        [key: string]: components["schemas"]["MonitoringEnableStatus"];
      } | null;
    };
    /** Request to reset the count of tripwire groups for alert monitoring. */
    Alertmonitoring_ResetAlertMonitoringTripwireGroupCountWSRequest: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      /** Timestamp in milliseconds since epoch when the reset should occur */
      timestampMs?: number | null;
    };
    /** Response indicating the result of resetting the tripwire group count for alert monitoring. */
    Alertmonitoring_ResetAlertMonitoringTripwireGroupCountWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Report item containing threat case information with device and alert details. */
    Alertmonitoring_ThreatCaseReportItem: {
      /** Whether the alert was not found for this threat case. */
      alertNotFound?: boolean | null;
      /** List of alert types associated with this threat case. */
      alertTypes?: components["schemas"]["ActivityEnum"][] | null;
      associatedDeviceUuids?: { [key: string]: number | null } | null;
      createdAtMillis?: number | null;
      deleted?: boolean | null;
      /** The name of the device involved in this threat case. */
      deviceName?: string | null;
      /** Whether the device was not found for this threat case. */
      deviceNotFound?: boolean | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      locationName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      noonlightAlarmId?: string | null;
      noonlightVerificationId?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      policyAlertUuid?: string | null;
      policyAlertUuids?: (string | null)[] | null;
      promptTheme?: components["schemas"]["NoonlightPromptTheme"];
      promptTitle?: string | null;
      /** The reason for the threat case result. */
      reason?: string | null;
      /** The result of the threat case investigation. */
      result?: string | null;
      /** base 64 (url-safe) uuid string */
      sharedClipGroupUuid?: string | null;
      sirenSettings?: components["schemas"]["AMSirenSettingsType"];
      status?: components["schemas"]["ThreatCaseStatus"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      submissionTimestampMs?: number | null;
      submitDelayExpireTimestampMs?: number | null;
      timelineEventList?:
        | components["schemas"]["ThreatCaseTimelineEventType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      verificationHistory?: components["schemas"]["VerificationHistory"];
    };
    /** Request to update alert monitoring settings for a location. */
    Alertmonitoring_UpdateNoonlightSettingsForLocationRequest: {
      noonlightSettings?: components["schemas"]["NoonlightVersionedSettingsType"];
    };
    /** Response indicating the result of updating alert monitoring settings for a location. */
    Alertmonitoring_UpdateNoonlightSettingsForLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Base response containing alert monitoring PIN information. */
    Alertmonitoring_pin_BasePinWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      pin?: components["schemas"]["AlertMonitoringPIN"];
    };
    /** Response containing multiple alert monitoring PINs for bulk operations. */
    Alertmonitoring_pin_BulkPinsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of user UUIDs that failed during bulk operations. */
      failedUsers?: (string | null)[] | null;
      /** List of alert monitoring PINs created or updated. */
      pins?: components["schemas"]["AlertMonitoringPIN"][] | null;
    };
    /** Request to bulk provision alert monitoring PINs for multiple users. */
    Alertmonitoring_pin_BulkProvisionPinsWSRequest: {
      /** End date in epoch seconds when these PINs expire. PINs never expire if this value is left null. */
      endDateEpochSecExclusive?: number | null;
      /** Set of location uuids these PINs are assigned to. */
      locationUuids: (string | null)[] | null;
      /** If enabled, sends an email to the assigned users notifying them of their new PIN code. */
      notifyUsers?: boolean | null;
      /** Length of PINs to be generated. Accepts length between 4 and 16. */
      pinLength: number | null;
      /** Period in days when PINs should be automatically rotated. If left null, PINs will not be auto-rotated. */
      rotationPeriodDays?: number | null;
      /** Start date in epoch seconds when these PINs become active. PINs activate immediately if this value is left null. */
      startDateEpochSecInclusive?: number | null;
      /** Set of user uuids to provision PINs for. */
      userUuids: (string | null)[] | null;
    };
    /** Request to bulk rotate multiple alert monitoring PINs. */
    Alertmonitoring_pin_BulkRotatePinsWSRequest: {
      /** If enabled, sends an email to the assigned users notifying them of their new PIN code. */
      notifyUsers?: boolean | null;
      /** Length of PINs to be generated. Accepts length between 4 and 16. */
      pinLength: number | null;
      /** Uuids of PINs to rotate in bulk. */
      pinUuids: (string | null)[] | null;
    };
    /** Request to create a new alert monitoring PIN. */
    Alertmonitoring_pin_CreatePinWSRequest: {
      /** If enabled, sends an email to the user assigned this PIN notifying them of their new PIN code. If no user is assigned, notifications will not be sent. */
      notifyUser?: boolean | null;
      pin: components["schemas"]["AlertMonitoringPIN"];
    };
    /** Request to delete an alert monitoring PIN by UUID. */
    Alertmonitoring_pin_DeletePinWSRequest: {
      /** base 64 (url-safe) uuid string */
      pinUuid: string | null;
    };
    /** Request to find alert monitoring PINs filtered by location and/or user. */
    Alertmonitoring_pin_FindPinsByLocationAndUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Request to find alert monitoring PINs in the organization with optional filtering and pagination. */
    Alertmonitoring_pin_FindPinsByOrgWSRequest: {
      filter?: components["schemas"]["PinQueryFilter"];
      pageRequest?: components["schemas"]["DynamoPageRequest"];
    };
    /** Response containing a list of alert monitoring PINs with optional pagination information. */
    Alertmonitoring_pin_FindPinsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Last evaluated key for pagination in subsequent requests. */
      lastEvaluatedKey?: string | null;
      /** List of alert monitoring PINs found. */
      pins?: components["schemas"]["AlertMonitoringPIN"][] | null;
    };
    /** Request to get an available PIN code for alert monitoring. */
    Alertmonitoring_pin_GetAvailableALMPinCodeWSRequest: {
      /** Length of PIN to be generated. */
      pinLength: number | null;
    };
    /** Response containing an available PIN code for alert monitoring. */
    Alertmonitoring_pin_GetAvailableALMPinCodeWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** The generated PIN code for alert monitoring. */
      pinCode?: string | null;
    };
    /** Request to retrieve an alert monitoring PIN by UUID. */
    Alertmonitoring_pin_GetPinWSRequest: {
      /** base 64 (url-safe) uuid string */
      pinUuid: string | null;
    };
    /** Request to rotate an alert monitoring PIN. */
    Alertmonitoring_pin_RotatePinWSRequest: {
      /** If enabled, sends an email to the user assigned this PIN notifying them of their new PIN code. If no user is assigned, notifications will not be sent. */
      notifyUser?: boolean | null;
      /** base 64 (url-safe) uuid string */
      pinUuid: string | null;
    };
    /** Request to update an existing alert monitoring PIN. */
    Alertmonitoring_pin_UpdatePinWSRequest: {
      /** If enabled, sends an email to the user assigned this PIN notifying them of their current PIN code. If no user is assigned, notifications will not be sent. */
      notifyUser?: boolean | null;
      pin: components["schemas"]["AlertMonitoringPIN"];
      /** If set to true, only the non-null fields will be considered for this update. */
      selectiveUpdate?: boolean | null;
    };
    /** Map of device facet UUIDs to altered view configurations */
    AlteredView: {
      crop?: components["schemas"]["CroppedPermyriadRect"];
      dewarp?: components["schemas"]["DewarpedView"];
    };
    AmtSettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      email?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      password?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: number | null;
      webhookSignatureSecret?: string | null;
    };
    AperioActivatorStateEvent:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          state?: number | null;
          stateUpdatedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioDoorExtension:
      | ({
          aperioDoorDeviceId?: (string | null)[] | null;
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        } & {
          aperioDoorDeviceId: unknown;
          aperioDoorId: unknown;
          aperioGatewayId: unknown;
        })
      | null;
    AperioDoorExtensionShadow:
      | ({
          activatorState?: number | null;
          activatorStateUpdatedAtMs?: number | null;
          aperioDoorDeviceId?: (string | null)[] | null;
          aperioGatewayId?: (string | null)[] | null;
          aperioId?: string | null;
          clockRetrievedAtMs?: number | null;
          connected?: boolean | null;
          connectionStateUpdatedAtMs?: number | null;
          deviceClockSec?: number | null;
          deviceTimezone?: number | null;
          doorMode?: number | null;
          doorModeUpdatedAtMs?: number | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
          dtcsUpdatedAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          gatewayComponentId?: string | null;
          handleState?: number | null;
          handleStateUpdatedAtMs?: number | null;
          keyCylinderState?: number | null;
          keyCylinderStateUpdatedAtMs?: number | null;
          lastSeenMs?: number | null;
          name?: string | null;
          removed?: boolean | null;
          stateUpdatedAtMs?: number | null;
          tamperState?: number | null;
          tamperStateUpdatedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    AperioDoorExtensionStateEvent:
      | ({
          activatorState?: number | null;
          activatorStateUpdatedAtMs?: number | null;
          aperioId?: string | null;
          clockRetrievedAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          connected?: boolean | null;
          connectionStateUpdatedAtMs?: number | null;
          deviceClockSec?: number | null;
          deviceTimezone?: number | null;
          doorMode?: number | null;
          doorModeUpdatedAtMs?: number | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
          handleState?: number | null;
          handleStateUpdatedAtMs?: number | null;
          keyCylinderState?: number | null;
          keyCylinderStateUpdatedAtMs?: number | null;
          removed?: boolean | null;
          tamperState?: number | null;
          tamperStateUpdatedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioDoorHandleStateEvent:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          state?: number | null;
          stateUpdatedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioDoorModeEvent:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          state?: number | null;
          stateUpdatedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioDoorPositionIndicator:
      | ({
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
          dpiType?: components["schemas"]["DoorPositionIndicatorEnumType"];
          normalState?: components["schemas"]["NormalStateEnumType"];
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioDoorReader:
      | ({
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
          disableCardReader?: boolean | null;
          disableKeypad?: boolean | null;
          disableWaveToUnlock?: boolean | null;
          otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
          readerType?: components["schemas"]["DoorReaderEnumType"];
          remoteUnlockAudioFeedbackEnabled?: boolean | null;
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioDoorRelay:
      | ({
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
          deviceId?: (string | null)[] | null;
          relayType?: components["schemas"]["DoorRelayEnumType"];
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioDoorRequestToExit:
      | ({
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
          intentOnly?: boolean | null;
          intentOnlyEvents?: boolean | null;
          normalState?: components["schemas"]["NormalStateEnumType"];
          rexType?: components["schemas"]["RequestToExitEnumType"];
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioDtcEvent:
      | ({
          aperioDeviceId?: (string | null)[] | null;
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioGateway: {
      aperioGatewayId?: (string | null)[] | null;
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      hwVersion?: (string | null)[] | null;
      name?: string | null;
      oemCode?: string | null;
      oemGeneratedAtMs?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    AperioGatewayConnectionStateChangeEvent:
      | ({
          aperioId?: (string | null)[] | null;
          connected?: boolean | null;
          ipAddress?: string | null;
          stateChangedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioGatewayShadow:
      | ({
          aperioId?: (string | null)[] | null;
          connected?: boolean | null;
          connectionStateUpdatedAtMs?: number | null;
          deviceClockSec?: number | null;
          deviceTimezone?: number | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
          firmwareVersion?: string | null;
          hwVersion?: (string | null)[] | null;
          ipAddress?: string | null;
          lastSeenMs?: number | null;
          oemCode?: string | null;
          oemCodeFetchedAtMs?: number | null;
          protocolVersionMajor?: number | null;
          protocolVersionMinor?: number | null;
          protocolVersionPatch?: number | null;
          rawTamperState?: number | null;
          stateUpdatedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    AperioGatewayStateEvent:
      | ({
          aperioId?: (string | null)[] | null;
          connected?: boolean | null;
          connectionStateUpdatedAtMs?: number | null;
          deviceClockSec?: number | null;
          deviceTimezone?: number | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
          firmwareVersion?: string | null;
          hwVersion?: (string | null)[] | null;
          ipAddress?: string | null;
          lastSeenMs?: number | null;
          oemCode?: string | null;
          oemCodeFetchedAtMs?: number | null;
          protocolVersionMajor?: number | null;
          protocolVersionMinor?: number | null;
          protocolVersionPatch?: number | null;
          rawTamperState?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioKeyCylinderStateEvent:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          state?: number | null;
          stateUpdatedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioTamperStateEvent:
      | ({
          aperioDoorId?: string | null;
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          state?: number | null;
          stateUpdatedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    AperioType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    } | null;
    /** Optional filter for API client types */
    ApiClientTypeEnum: ApiClientTypeEnum;
    ApiTokenApplicationType: {
      authType?: components["schemas"]["ApiTokenAuthTypeEnum"];
      authenticationTokenHash?: string | null;
      clientDetails?: { [key: string]: string | null } | null;
      clientType?: components["schemas"]["ApiClientTypeEnum"];
      csr?: string | null;
      displayName?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      tokenUuid?: string | null;
    };
    /** Authentication type for the API token */
    ApiTokenAuthTypeEnum: ApiTokenAuthTypeEnum;
    ApiTokenEventOriginator:
      | ({
          tokenName?: string | null;
          /** base 64 (url-safe) uuid string */
          tokenUuid?: string | null;
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    ApiTokenLockdownEventOriginator:
      | ({
          tokenName?: string | null;
          /** base 64 (url-safe) uuid string */
          tokenUuid?: string | null;
        } & {
          type?: components["schemas"]["LockdownEventOriginatorEnumType"];
        })
      | null;
    /** List of API tokens */
    ApiTokenType: {
      allowedRequetsPerSecond?: number | null;
      authType?: components["schemas"]["ApiTokenAuthTypeEnum"];
      authenticationTokenHash?: string | null;
      cert?: string | null;
      certFingerprint?: string | null;
      clientDetails?: { [key: string]: string | null } | null;
      clientType?: components["schemas"]["ApiClientTypeEnum"];
      csr?: string | null;
      displayName?: string | null;
      hashed?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      tokenUuid?: string | null;
    };
    AspectRatio: {
      height?: number | null;
      width?: number | null;
    };
    AudioExpressionDetectionConfig: {
      category?: components["schemas"]["ActivityEnum"];
      confidence_min?: number | null;
      expression?: string | null;
      loudness_min?: number | null;
    };
    AudioGatewayStatusEnum: AudioGatewayStatusEnum;
    AudioLoudActivityEventType:
      | ({
          audioLufsThreshold?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    AudioParamConfig: {
      expressions?:
        | components["schemas"]["AudioExpressionDetectionConfig"][]
        | null;
      significant_loudness_min?: number | null;
    };
    AudioPlaybackActionRecordType: {
      /** base 64 (url-safe) uuid string */
      audioClipUuid?: string | null;
      audioGatewayStatuses?: {
        [key: string]: components["schemas"]["AudioGatewayStatusEnum"];
      } | null;
    };
    AudioPlaybackActionType: {
      /** base 64 (url-safe) uuid string */
      audioClipUuid?: string | null;
      audioGateways?: (string | null)[] | null;
      loopDurationSec?: number | null;
      playCount?: number | null;
    };
    /** List of audio policies using the schedule */
    AudioPolicyType: {
      defaultTriggers?: components["schemas"]["AudioTriggerType"][] | null;
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["AudioScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    AudioScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["AudioTriggerType"][] | null;
    };
    AudioTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      threshold?: number | null;
    };
    /** List of audio upload metadata for the organization */
    AudioUploadMetadataType: {
      audioPlaintext?: string | null;
      audioSSML?: string | null;
      description?: string | null;
      displayName?: string | null;
      durationMs?: number | null;
      mutable?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      s3ObjectKey?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      voiceId?: string | null;
    };
    /** Information for offline LAN streaming of audio gateway content. */
    Audiogateway_AudioGatewayOfflineLanStreamingInfo: {
      /** Access token for offline LAN streaming */
      accessToken?: string | null;
      /** List of LAN addresses for offline streaming */
      lanAddresses?: (string | null)[] | null;
    };
    /** Request to remove an audio gateway from organization. */
    Audiogateway_DeleteAudioGatewayWSRequest: {
      /** base 64 (url-safe) uuid string */
      gatewayUuid?: string | null;
      /** Indicates whether to mummify the audio gateway */
      mummify?: boolean | null;
    };
    /** Response indicating the result of deleting an audio gateway. */
    Audiogateway_DeleteAudioGatewayWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the delete operation */
      responseStatus?: DeleteAudioGatewayWSResponseResponseStatusEnum | null;
    };
    /** Request to get configuration for an audio gateway. */
    Audiogateway_GetAudioGatewayConfigWSRequest: {
      /** base 64 (url-safe) uuid string */
      audioGatewayUuid?: string | null;
    };
    /** Response containing configuration for an audio gateway. */
    Audiogateway_GetAudioGatewayConfigWSResponse: {
      config?: components["schemas"]["IAudioUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to get offline LAN streaming information for all audio gateways. */
    Audiogateway_GetAudioGatewayOfflineLanStreamingInfoWSRequest: {
      [key: string]: unknown;
    };
    /** Response containing offline LAN streaming information for all audio gateways. */
    Audiogateway_GetAudioGatewayOfflineLanStreamingInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of audio gateway UUIDs to their offline LAN streaming information */
      info?: {
        [
          key: string
        ]: components["schemas"]["Audiogateway_AudioGatewayOfflineLanStreamingInfo"];
      } | null;
    };
    /** Request to get audio seek points for an audio gateway. */
    Audiogateway_GetAudioSeekpointsWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** Duration in seconds */
      duration?: number | null;
      /** Start time in milliseconds since epoch */
      startTime?: number | null;
    };
    /** Response containing audio seek points for an audio gateway. */
    Audiogateway_GetAudioSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of audio seek points for the specified time period */
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
    };
    /** Request to get detailed information about the state of a specified audio gateway. */
    Audiogateway_GetFullAudioGatewayStateWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** Force refresh of the device state */
      force?: boolean | null;
    };
    /** Response containing detailed information about the state of a specified audio gateway. */
    Audiogateway_GetFullAudioGatewayStateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      fullAudioGatewayState?: components["schemas"]["FullDeviceStateType"];
    };
    /** Request to get media URIs for an audio gateway to retrieve footage. */
    Audiogateway_GetMediaUrisWSRequest: {
      /** RUUID with optional appended facet information */
      gatewayUuid?: string | null;
    };
    /** Response containing media URIs for audio gateway footage retrieval. */
    Audiogateway_GetMediaUrisWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of LAN check URLs to verify device availability on local network */
      lanCheckUrls?: (string | null)[] | null;
      /** List of LAN live MPD URIs for local network media streaming */
      lanLiveMpdUris?: (string | null)[] | null;
      /** List of LAN live Opus URIs for local network audio streaming */
      lanLiveOpusUris?: (string | null)[] | null;
      /** List of LAN VOD MPD URI templates for local network video on demand */
      lanVodMpdUrisTemplates?: (string | null)[] | null;
      /** WAN live MPD URI for real-time media streaming */
      wanLiveMpdUri?: string | null;
      /** WAN live Opus URI for real-time audio streaming */
      wanLiveOpusUri?: string | null;
      /** WAN VOD MPD URI template for video on demand content */
      wanVodMpdUriTemplate?: string | null;
    };
    /** Request to get basic state information for all audio gateways. */
    Audiogateway_GetMinimalAudioGatewayStatesWSRequest: {
      [key: string]: unknown;
    };
    /** Response containing basic state information for all audio gateways. */
    Audiogateway_GetMinimalAudioGatewayStatesWSResponse: {
      /** List of minimal audio gateway state information */
      audioGatewayStates?:
        | components["schemas"]["MinimalAudioGatewayStateType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to reboot the specified audio gateway. */
    Audiogateway_RebootAudioGatewayWSRequest: {
      /** base 64 (url-safe) uuid string */
      audioGatewayUuid: string | null;
    };
    /** Request to update configuration for an audio gateway. */
    Audiogateway_UpdateAudioGatewayConfigWSRequest: {
      /** Adjust boost for external mic. Integer between 0 and 3. */
      audioExternalMicBoost?: number | null;
      /** Adjust volume for external mic. Integer between 0 and 63. */
      audioExternalMicVolume?: number | null;
      /** Adjust volume for external speaker. Integer between 0 and 127. */
      audioExternalSpeakerVolume?: number | null;
      /** Enable acoustic echo cancellation for internal microphone */
      audioInternalMicAecEnabled?: boolean | null;
      /** Adjust boost for internal mic. Integer between 0 and 3. */
      audioInternalMicBoost?: number | null;
      /** Adjust volume for internal mic. Integer between 0 and 63. */
      audioInternalMicVolume?: number | null;
      /** Adjust volume for internal speaker. Integer between 0 and 127. */
      audioInternalSpeakerVolume?: number | null;
      /** Enable/disable audio recording. Cannot set to true unless organization settings allow it */
      audioRecord?: boolean | null;
      /** Use external microphone instead of internal */
      audioUseExternalMic?: boolean | null;
      /** Use external speaker instead of internal */
      audioUseExternalSpeaker?: boolean | null;
      /** Enable/disable device mic. Cannot set to true unless organization settings allow it */
      deviceMicEnabled?: boolean | null;
      /** Enable/disable device speaker */
      deviceSpeakerEnabled?: boolean | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      /** Enable frontend noise suppression */
      frontendNoiseSuppression?: boolean | null;
      /** RUUID with optional appended facet information */
      uuid?: string | null;
    };
    /** Response indicating the result of updating audio gateway configuration. */
    Audiogateway_UpdateAudioGatewayConfigWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to update details for an audio gateway. Note: uuid is a required field. */
    Audiogateway_UpdateAudioGatewayDetailsWSRequest: {
      /** List of associated camera device UUIDs */
      associatedCameras?: (string | null)[] | null;
      associatedCamerasUpdated?: boolean | null;
      /** Indicates whether the audio gateway is deleted */
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      /** Description of the audio gateway */
      description?: string | null;
      descriptionUpdated?: boolean | null;
      /** Floor number where the audio gateway is located */
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      /** Latitude coordinate of the audio gateway location */
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      /** Longitude coordinate of the audio gateway location */
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      /** Name of the audio gateway */
      name?: string | null;
      nameUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response indicating the result of updating audio gateway details. */
    Audiogateway_UpdateAudioGatewayDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to cancel looping audio playback on audio devices. */
    Audioplayback_CancelLoopingAudioPlaybackWSRequest: {
      /** List of audio device UUIDs to cancel looping playback on */
      audioDevices?: (string | null)[] | null;
    };
    /** Response from canceling looping audio playback. */
    Audioplayback_CancelLoopingAudioPlaybackWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of audio device UUIDs to success status for canceling playback */
      successMap?: { [key: string]: boolean | null } | null;
    };
    /** Request to delete audio upload metadata. */
    Audioplayback_DeleteAudioUploadMetadataWSRequest: {
      /** base 64 (url-safe) uuid string */
      audioUploadUuid?: string | null;
    };
    /** Response from deleting audio upload metadata. */
    Audioplayback_DeleteAudioUploadMetadataWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to get audio upload metadata for organization. */
    Audioplayback_GetAudioUploadMetadataForOrgWSRequest: {
      [key: string]: unknown;
    };
    /** Response containing audio upload metadata for organization. */
    Audioplayback_GetAudioUploadMetadataForOrgWSResponse: {
      /** List of audio upload metadata for the organization */
      audioUploadMetadata?:
        | components["schemas"]["AudioUploadMetadataType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to play an uploaded audio clip through audio devices. */
    Audioplayback_PlayAudioUploadWSRequest: {
      /** List of audio gateway device UUIDs to play audio through */
      audioGatewayUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      audioUploadUuid?: string | null;
      /** Duration in seconds to loop the audio playback */
      loopDurationSec?: number | null;
      /** Number of times to play the audio clip */
      playCount?: number | null;
    };
    /** Response from playing an uploaded audio clip. */
    Audioplayback_PlayAudioUploadWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Indicates if audio playback was successful */
      success?: boolean | null;
    };
    /** Request to update audio upload metadata. */
    Audioplayback_UpdateAudioUploadMetadataWSRequest: {
      /** base 64 (url-safe) uuid string */
      audioUploadUuid?: string | null;
      /** New description for the audio clip */
      newDescription?: string | null;
      /** New display name for the audio clip */
      newDisplayName?: string | null;
    };
    /** Response from updating audio upload metadata. */
    Audioplayback_UpdateAudioUploadMetadataWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response from uploading PCM audio clip. */
    Audioplayback_UploadAudioPcmWSResponse: {
      /** Indicates if audio encoding failed */
      encodingFailure?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request to upload text for audio synthesis. */
    Audioplayback_UploadAudioTextWSRequest: {
      /** Plain text to synthesize into audio */
      audioPlaintext?: string | null;
      /** SSML markup for audio synthesis */
      audioSSML?: string | null;
      /** Description of the audio clip */
      description?: string | null;
      /** Display name for the audio clip */
      displayName?: string | null;
      /** Voice ID for text-to-speech synthesis */
      voiceId?: string | null;
    };
    /** Response from uploading text for audio synthesis. */
    Audioplayback_UploadAudioTextWSResponse: {
      /** Indicates if audio encoding failed */
      encodingFailure?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Indicates if SSML markup is invalid */
      invalidSSML?: boolean | null;
      /** Indicates if text-to-speech synthesis failed */
      synthesisFailure?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    AuditRuleTriggerType:
      | ({
          auditEvent?: components["schemas"]["SimpleAuditEventType"];
          userUuids?: (string | null)[] | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    AuthDecisionSourceEnum: AuthDecisionSourceEnum;
    /** Selective update applied to the automated job settings. */
    AutomatedPrompt: {
      apiKey?: string | null;
      followUpActions?: components["schemas"]["FollowUpAction"][] | null;
      frequency?: components["schemas"]["PromptFrequency"];
      invokeAtMs?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      prompt?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      tokenUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    AuxiliaryEnumType: AuxiliaryEnumType;
    AuxiliaryInputPhysicalPortEnumType: AuxiliaryInputPhysicalPortEnumType;
    AuxiliaryInputPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["AuxiliaryInputPhysicalPortEnumType"];
      supervisionConfiguration?: components["schemas"]["PortSupervisionConfigurationType"];
    };
    AuxiliaryRelayPhysicalPortEnumType: AuxiliaryRelayPhysicalPortEnumType;
    AuxiliaryRelayPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["AuxiliaryRelayPhysicalPortEnumType"];
    };
    AvigilonAltaType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
          doorsValidated?: boolean | null;
          email?: string | null;
          eventToWebhookIdMap?: { [key: string]: number | null } | null;
          eventToWebhookMap?: {
            [key: string]: components["schemas"]["WebhookMapEntry"];
          } | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          password?: string | null;
          refreshToken?: string | null;
          /** base 64 (url-safe) uuid string */
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          webhookId?: number | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    AwsSettings: {
      accessKey?: string | null;
      bucketName?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      secretKey?: string | null;
    };
    BackblazeSettings: {
      applicationKey?: string | null;
      applicationKeyId?: string | null;
      bucketName?: string | null;
      enabled?: boolean | null;
    };
    BadgeIntegrationDefaultOptions: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      defaultOptionsEnabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      saveClips?: boolean | null;
    } | null;
    BadgeIntegrationDoorInfoType: {
      assignedCameraList?: (string | null)[] | null;
      clipDuration?: number | null;
      doorName?: string | null;
      leadingSeconds?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      remoteUnlock?: boolean | null;
    } | null;
    BadgeIntegrationRuleTriggerType: {
      type?: components["schemas"]["RuleTriggerTypeEnum"];
    } | null;
    BadgeIntegrationSettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      misconfiguredDoors?: (number | null)[] | null;
      placeId?: number | null;
      placeName?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: number | null;
    } | null;
    /** The updated badge template */
    BadgeTemplate: {
      createdAtMillis?: number | null;
      elements?: components["schemas"]["BaseBadgeTemplateElement"][] | null;
      front?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      portrait?: boolean | null;
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      version?: string | null;
    };
    BadgeTemplateElementEnum: BadgeTemplateElementEnum;
    /** The updated badge template image metadata. */
    BadgeTemplateImage: {
      createdAtMillis?: number | null;
      imageS3Key?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      originalFileName?: string | null;
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** The selective update containing the fields to update for the badge template image. */
    BadgeTemplateImageSelectiveUpdate: {
      createdAtMillis?: number | null;
      imageS3Key?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      originalFileName?: string | null;
      updatedAtMillis?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** The selective update containing the fields to update. */
    BadgeTemplateSelectiveUpdate: {
      createdAtMillis?: number | null;
      elements?: components["schemas"]["BaseBadgeTemplateElement"][] | null;
      front?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      portrait?: boolean | null;
      updatedAtMillis?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      version?: string | null;
    };
    /** Request to delete a badge reader device. */
    Badgereader_DeleteBadgeReaderWSRequest: {
      /** base 64 (url-safe) uuid string */
      badgeReaderUuid: string | null;
      /** Whether to mummify the device instead of hard delete */
      mummify: boolean | null;
    };
    /** Response from deleting a badge reader device. */
    Badgereader_DeleteBadgeReaderWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the delete operation */
      responseStatus?: DeleteBadgeReaderWSResponseResponseStatusEnum | null;
    };
    /** Response containing badge reader configuration. */
    Badgereader_GetBadgeReaderConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_ExternalReadableFacetedUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response containing full state information for a badge reader. */
    Badgereader_GetBadgeReaderFullStateWSResponse: {
      fullState?: components["schemas"]["FullDeviceStateType"];
    };
    /** Response containing minimal state information for all badge readers in organization. */
    Badgereader_GetBadgeReaderMinimalStateListWSResponse: {
      /** List of minimal device state information for badge readers */
      minimalStates?: components["schemas"]["MinimalDeviceStateType"][] | null;
    };
    /** Request to reboot a badge reader device. */
    Badgereader_RebootBadgeReaderWSRequest: {
      /** base 64 (url-safe) uuid string */
      badgeReaderUuid: string | null;
    };
    /** Request to update badge reader configuration. */
    Badgereader_UpdateBadgeReaderConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_ExternalUpdateableFacetedUserConfig"];
    };
    /** Request to update badge reader device details. */
    Badgereader_UpdateBadgeReaderDetailsWSRequest: {
      /** Optional description for the badge reader */
      description?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Optional direction in radians */
      directionRadians?: number | null;
      /** Optional floor number */
      floorNumber?: number | null;
      /** Optional latitude coordinate */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Optional longitude coordinate */
      longitude?: number | null;
      /** Optional name for the badge reader */
      name?: string | null;
    };
    /** Base response object denoting success, or failure with a reason, for an endpoint. */
    BaseApiResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    BaseBadgeTemplateElement: (
      | components["schemas"]["CustomTextElement"]
      | components["schemas"]["UserMetadataTextElement"]
      | components["schemas"]["UserCustomMetadataTextElement"]
      | components["schemas"]["CustomImageElement"]
      | components["schemas"]["UserProfilePhotoElement"]
    ) & {
      type?: components["schemas"]["BadgeTemplateElementEnum"];
      x?: number | null;
      y?: number | null;
    };
    BaseCatalogItem: {
      durationMonths?: number | null;
      productCode?: string | null;
      productType?: BaseCatalogItemProductTypeEnum | null;
    };
    BaseClaimKey: {
      /** Date/time when claiming of licenses represented by this claim key ended successfully. */
      claimEndDate?: string | null;
      /** Date/time when claiming of licenses represented by this claim key started. */
      claimStartDate?: string | null;
      createdOn?: string | null;
      endDate?: string | null;
      expirationEmailState?: BaseClaimKeyExpirationEmailStateEnum | null;
      gracePeriodEndDate?: string | null;
      /** Masked claim code for redeemed claim keys. This field can be used for reference purposes. */
      maskedClaimCode?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      renewedByClaimKeyUuid?: string | null;
      /** Externally supplied request id to prevent creation of unnecessary claim keys due to reprocessing or bugs. Unnecessary claim keys are claim keys that are not tied to anything in the external system.  This property is unique for all claim keys. */
      requestId?: string | null;
      returnHistory?: components["schemas"]["ClaimKeyReturnEvent"][] | null;
      state?: BaseClaimKeyStateEnum | null;
      trial?: boolean | null;
      type?: BaseClaimKeyTypeEnum | null;
      updatedOn?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    BaseComponentType: (
      | components["schemas"]["RhombusOsdpDoorReaderType"]
      | components["schemas"]["OsdpDoorReaderType"]
      | components["schemas"]["WiegandDoorReaderType"]
      | components["schemas"]["IntegratedDoorPositionIndicatorType"]
      | components["schemas"]["IntegratedRequestToExitType"]
      | components["schemas"]["IntegratedDoorRelayType"]
      | components["schemas"]["IntegratedGenericRelayType"]
      | components["schemas"]["IntegratedGenericInputType"]
      | components["schemas"]["IntegratedGenericButtonType"]
      | components["schemas"]["AperioDoorReader"]
      | components["schemas"]["AperioGateway"]
      | components["schemas"]["AperioDoorExtension"]
      | components["schemas"]["AperioDoorRelay"]
      | components["schemas"]["AperioDoorPositionIndicator"]
    ) & {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    BaseDoorStateOverride: {
      originator?: components["schemas"]["BaseEventOriginator"];
      requestedAtMillis?: number | null;
      type?: components["schemas"]["ManualDoorStateChangeEnum"];
    };
    BaseDoorStateOverride_Minimal: {
      originator?: components["schemas"]["BaseEventOriginator_Minimal"];
      requestedAtMillis?: number | null;
      type?: components["schemas"]["ManualDoorStateChangeEnum_Minimal"];
    };
    BaseEventOriginator: (
      | components["schemas"]["SupportAuthorityEventOriginator"]
      | components["schemas"]["ApiTokenEventOriginator"]
      | components["schemas"]["UserEventOriginator"]
      | components["schemas"]["RuleEventOriginator"]
      | components["schemas"]["ComponentCompositeEventOriginator"]
    ) & {
      type?: components["schemas"]["EventOriginatorEnum"];
    };
    BaseEventOriginator_Minimal: (
      | components["schemas"]["SupportAuthorityEventOriginator"]
      | components["schemas"]["ApiTokenEventOriginator"]
      | components["schemas"]["UserEventOriginator"]
      | components["schemas"]["RuleEventOriginator"]
      | components["schemas"]["ComponentCompositeEventOriginator"]
    ) & {
      type?: components["schemas"]["EventOriginatorEnum_Minimal"];
    };
    /** Optional list of first-in reset configurations. */
    BaseFirstInReset: components["schemas"]["DailyFirstInReset"] & {
      type?: components["schemas"]["FirstInResetEnum"];
    };
    /** List of licenses found by claim key */
    BaseLicenseType: {
      /** base 64 (url-safe) uuid string */
      claimKeyUuid?: string | null;
      createdOn?: string | null;
      firstAssignedDate?: string | null;
      licenseToUnassignEmailState?: BaseLicenseLicenseToUnassignEmailStateEnum | null;
      maxDeleteDate?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: BaseLicenseProductTypeEnum | null;
      state?: BaseLicenseStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    BaseLocationLockdownEventOriginator: {
      type?: components["schemas"]["LockdownEventOriginatorEnumType"];
    };
    /** The requested lockdown plan. */
    BaseLockdownPlanType: components["schemas"]["LocationLockdownPlanType"] & {
      activationPlan?: components["schemas"]["LockdownActivationPlanType"];
      createdAtMillis?: number | null;
      deactivationPlan?: components["schemas"]["LockdownDeactivationPlanType"];
      defaultLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
      doorLockdownStateMap?: {
        [key: string]: components["schemas"]["DoorLockdownStateEnumType"];
      } | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      physicalAccess?: components["schemas"]["LockdownPhysicalAccessType"];
      /** base 64 (url-safe) uuid string */
      scopeUuid?: string | null;
      testPlan?: components["schemas"]["LockdownTestPlanType"];
      type?: components["schemas"]["LockdownPlanScopeEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** List of lockdown events found for the specified location. */
    BaseLockdownStateEventType: {
      createdAtMillis?: number | null;
      followingTestPlan?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      originator?: components["schemas"]["BaseLocationLockdownEventOriginator"];
      stateChangedAtMillis?: number | null;
      type?: components["schemas"]["LockdownStateEventEnumType"];
    };
    /** List of policy alerts matching the request criteria */
    BasePolicyAlertType: (
      | components["schemas"]["PolicyAlertV2Type"]
      | components["schemas"]["AccessControlledDoorPolicyAlertType"]
    ) & {
      /** base 64 (url-safe) uuid string */
      alertMonitoringThreatCaseUuid?: string | null;
      alertMonitoringVerified?: boolean | null;
      clipLocationMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      clipLocationMapV2?: { [key: string]: string | null } | null;
      delayedProcessing?: boolean | null;
      deleted?: boolean | null;
      durationSec?: number | null;
      finalized?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      notificationSent?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      policyAlertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      saved?: boolean | null;
      shared?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Natural language description of the alert */
      textDescription?: string | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      thumbnailLocationV2?: string | null;
      timestampMs?: number | null;
      type?: BasePolicyAlertTypeEnum | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    BaseRuleTriggerType: (
      | components["schemas"]["DeviceActivityRuleTriggerType"]
      | components["schemas"]["AuditRuleTriggerType"]
      | components["schemas"]["AlertMonitoringRuleTriggerType"]
      | components["schemas"]["DiagnosticRuleTriggerType"]
      | components["schemas"]["BadgeIntegrationRuleTriggerType"]
      | components["schemas"]["ScheduledRuleTriggerType"]
      | components["schemas"]["VisionLLMRuleTriggerType"]
      | components["schemas"]["RecurringRuleTriggerType"]
      | components["schemas"]["LocationLockdownActivatedRuleTriggerType"]
      | components["schemas"]["LocationLockdownDeactivatedRuleTriggerType"]
      | components["schemas"]["CustomLLMEventRuleTriggerType"]
      | components["schemas"]["ButtonIntegrationRuleTriggerType"]
    ) & {
      type?: components["schemas"]["RuleTriggerTypeEnum"];
    };
    /** Schedule for the shared live stream */
    BaseSavedScheduleType: (
      | components["schemas"]["WeeklyRepeatingScheduleType"]
      | components["schemas"]["AbsoluteSecondsScheduleType"]
      | components["schemas"]["RealtimeRelativeSecondsScheduleType"]
      | components["schemas"]["RelativeDateTimeIntervalsScheduleType"]
    ) & {
      mutable?: boolean | null;
      name?: string | null;
      oneTimeUse?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      strategy?: BaseSavedScheduleStrategyEnum | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** List of schedules */
    BaseSavedScheduleType_Minimal: (
      | components["schemas"]["WeeklyRepeatingScheduleType"]
      | components["schemas"]["AbsoluteSecondsScheduleType"]
      | components["schemas"]["RealtimeRelativeSecondsScheduleType"]
      | components["schemas"]["RelativeDateTimeIntervalsScheduleType"]
    ) & {
      mutable?: boolean | null;
      name?: string | null;
      oneTimeUse?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      strategy?: MinimalStrategyEnum | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** List of batch registration token usage results */
    BatchRegistrationTokenUsageResult: {
      /** base 64 (url-safe) uuid string */
      di?: string | null;
      /** base 64 (url-safe) uuid string */
      hi?: string | null;
      rs?: string | null;
      ts?: number | null;
    };
    /** Map of binary count reports */
    BinaryAggregationValue: {
      eventCount?: number | null;
      false?: number | null;
      localDate?: string | null;
      maxValueTimestampMs?: number | null;
      minValueTimestampMs?: number | null;
      timestampMs?: number | null;
      true?: number | null;
      utcDate?: string | null;
    };
    /** Map of BLE device keys to their advertisement data. */
    Ble_BleDeviceMap: {
      /** Map of device keys to secure beacon advertisement data */
      keyToSecureBeacon?: { [key: string]: (string | null)[] | null } | null;
    };
    /** Information about a registered BLE device. */
    Ble_BleRegisteredDeviceWSType: {
      /** Indicates if the device has been deleted */
      deleted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** Name of the registered BLE device */
      name?: string | null;
      /** Secret data for the registered BLE device */
      secret?: (string | null)[] | null;
      /** Firmware version to update to */
      updateToFirmwareVersion?: string | null;
    };
    /** Information about an unregistered BLE hardware device. */
    Ble_BleUnregisteredHardwareWSType: {
      /** MAC address of the unregistered BLE device */
      mac?: string | null;
      /** Secret data for the unregistered BLE device */
      secret?: (string | null)[] | null;
    };
    /** Request to get available base stations for BLE sensors. */
    Ble_GetBaseStationsWSRequest: { [key: string]: unknown };
    /** Response containing available base stations for BLE sensors. */
    Ble_GetBaseStationsWSResponse: {
      /** List of base station UUIDs available for BLE sensors */
      baseStations?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response containing secure secrets for registered BLE devices. */
    Ble_GetSecureSecretForRegisteredWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of hardware variations to firmware download URLs */
      hardwareVariationToFirmwareDownloadUrl?: {
        [key: string]: { [key: string]: string | null } | null;
      } | null;
      /** Map of device keys to registered device information */
      keyToRegisteredDevice?: {
        [key: string]: components["schemas"]["Ble_BleRegisteredDeviceWSType"];
      } | null;
    };
    /** Response containing secure secrets for unregistered BLE devices. */
    Ble_GetSecureSecretForUnregisteredWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of serial numbers to unregistered device information */
      keyToUnregisteredDevice?: {
        [
          key: string
        ]: components["schemas"]["Ble_BleUnregisteredHardwareWSType"];
      } | null;
    };
    /** Request to get firmware update details for BLE sensors. */
    Ble_GetSensorHardwareFirmwareUpdateDetailsRequest: {
      [key: string]: unknown;
    };
    /** Response containing firmware update details for BLE sensors. */
    Ble_GetSensorHardwareFirmwareUpdateDetailsResponse: {
      /** Map of hardware variations to firmware download URLs */
      hardwareVariationToFirmwareDownloadUrl?: {
        [key: string]: { [key: string]: string | null } | null;
      } | null;
    };
    /** Request to register a BLE sensor device. */
    Ble_RegisterSensorWSRequest: {
      /** BLE advertisement data from the sensor */
      bleData?: (string | null)[] | null;
      /** Latitude coordinate for sensor placement */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate for sensor placement */
      longitude?: number | null;
      /** Name for the sensor device */
      name?: string | null;
      /** Serial number of the BLE sensor */
      serialNum?: string | null;
    };
    /** Response from registering a BLE sensor. */
    Ble_RegisterSensorWSResponse: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to unregister a BLE sensor. */
    Ble_UnregisterSensorWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    /** Response from unregistering a BLE sensor. */
    Ble_UnregisterSensorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Reason for failure if unregistration was not successful */
      failureReason?: string | null;
      /** Indicates if the unregistration was successful */
      success?: boolean | null;
    };
    BoardPhysicalPortConfigType: {
      boardNum?: number | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      portMap?: {
        [key: string]: components["schemas"]["PhysicalPortType"];
      } | null;
    };
    BodyPart: {
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: { [key: string]: unknown } | null;
      headers?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parameterizedHeaders?:
        | ({
            empty?: boolean | null;
          } & {
            [key: string]:
              | components["schemas"]["ParameterizedHeader"][]
              | null;
          })
        | null;
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
    } | null;
    BoundingBoxType: {
      bottom?: number | null;
      left?: number | null;
      right?: number | null;
      top?: number | null;
    };
    /** Box file storage integration settings to update */
    BoxSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      enterpriseId?: string | null;
      folderId?: string | null;
    };
    BrivoSettings: {
      accessToken?: string | null;
      alertUnauthorizedFaces?: boolean | null;
      clientId?: string | null;
      clientSecret?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      password?: string | null;
      refreshToken?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      username?: string | null;
      webhookId?: number | null;
    };
    BrivoType:
      | ({
          accessToken?: string | null;
          alertUnauthorizedFaces?: boolean | null;
          apiKey?: string | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          clientId?: string | null;
          clientSecret?: string | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          password?: string | null;
          refreshToken?: string | null;
          /** base 64 (url-safe) uuid string */
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          username?: string | null;
          version?: number | null;
          webhookId?: number | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    BurstyRateLimit: {
      base_interval_ms?: number | null;
      burst_token_generation_ms?: number | null;
      burst_token_initial_count?: number | null;
      burst_token_max_count?: number | null;
    };
    ButterflyMXSettings: {
      /** A HashMap of <ButterflyMx Building Id, Webhook Id>. */
      buildingWebhookIdMap?: { [key: string]: string | null } | null;
      createSeekPoints?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      indexFaces?: boolean | null;
      migrated?: boolean | null;
      /** A HashMap of <Panel Id, ButterflymxPanelInfoType>. */
      panelInfoMap?: {
        [key: string]: components["schemas"]["ButterflymxPanelInfoType"];
      } | null;
      refreshToken?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
    };
    ButterflyMXType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          /** A HashMap of <ButterflyMx Building Id, Webhook Id>. */
          buildingWebhookIdMap?: { [key: string]: string | null } | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          /** A HashMap of <Panel Id, ButterflymxPanelInfoType>. */
          panelInfoMap?: {
            [key: string]: components["schemas"]["ButterflymxPanelInfoType"];
          } | null;
          refreshToken?: string | null;
          /** base 64 (url-safe) uuid string */
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    ButterflymxBuilding: {
      id?: number | null;
      name?: string | null;
      panels?: components["schemas"]["DoorType"][] | null;
    };
    /** A HashMap of <Panel Id, ButterflymxPanelInfoType>. */
    ButterflymxPanelInfoType: {
      /** The list of Rhombus Camera RUUIDs. */
      assignedCameraList?: (string | null)[] | null;
      /** The ButterflyMx Building Id. */
      buildingId?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** The ButterflyMx Panel Name. */
      panelName?: string | null;
    } | null;
    ButtonEnumType: ButtonEnumType;
    ButtonEventType:
      | ({
          buttonPress?: components["schemas"]["ButtonPressEnum"];
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
          pressDurationMillis?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    ButtonIntegrationRuleTriggerType:
      | ({
          thirdPartyBatteryLevel?: string | null;
          thirdPartyButtonAction?: string | null;
          thirdPartyButtonName?: string | null;
          thirdPartyButtonSerialNumber?: string | null;
          thirdPartyButtonUuid?: string | null;
          timestamp?: number | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    /** Optional button mode configuration */
    ButtonModeEnum: ButtonModeEnum;
    ButtonPhysicalPortEnumType: ButtonPhysicalPortEnumType;
    ButtonPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["ButtonPhysicalPortEnumType"];
    };
    ButtonPressEnum: ButtonPressEnum;
    /** Update Button settings */
    ButtonSettingsSelectiveUpdate: {
      button_emergency_onsite_contact?: components["schemas"]["EmergencyContact"];
      button_test_mode_enabled?: boolean | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    /** Detailed health status for button sensors. */
    Button_ButtonHealthDetailsEnum: Button_ButtonHealthDetailsEnum;
    /** Health status for button sensors. */
    Button_ButtonHealthEnum: Button_ButtonHealthEnum;
    /** Request to create a rule for a button sensor. */
    Button_CreateRuleForButtonWSRequest: {
      rule?: components["schemas"]["Button_ExternalButtonRuleType"];
    };
    /** Response from creating a rule for a button sensor. */
    Button_CreateRuleForButtonWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Request to delete a rule for a button sensor. */
    Button_DeleteRuleForButtonWSRequest: {
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
    };
    /** Response from deleting a rule for a button sensor. */
    Button_DeleteRuleForButtonWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** External button rule configuration. */
    Button_ExternalButtonRuleType: {
      action?: components["schemas"]["RuleActionType"];
      ruleFilters?: components["schemas"]["RuleFilterType"];
      /** Name of the button rule */
      ruleName?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
      triggerPress?: components["schemas"]["ButtonPressEnum"];
    };
    /** Request to get button press events for a specific sensor. */
    Button_GetButtonPressEventsForSensorWSRequest: {
      /** Timestamp in milliseconds to get events created after this time */
      createdAfterMs?: number | null;
      /** Timestamp in milliseconds to get events created before this time */
      createdBeforeMs?: number | null;
      /** Maximum number of events to return */
      limit?: number | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
    };
    /** Response containing button press events for a sensor. */
    Button_GetButtonPressEventsForSensorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of button press events for the sensor */
      events?: components["schemas"]["ButtonEventType"][] | null;
    };
    /** Request to get rules for all buttons in an organization. */
    Button_GetButtonRulesForOrgWSRequest: { [key: string]: unknown };
    /** Response containing rules for all buttons in an organization. */
    Button_GetButtonRulesForOrgWSResponse: {
      /** Map of button UUIDs to their associated rules */
      buttonUuidToRulesMap?: {
        [key: string]:
          | components["schemas"]["Button_ExternalButtonRuleType"][]
          | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to get minimal state information for all button sensors. */
    Button_GetMinimalButtonStatesWSRequest: { [key: string]: unknown };
    /** Response containing minimal state information for all button sensors. */
    Button_GetMinimalButtonStatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of minimal button state information */
      states?: components["schemas"]["Button_MinimalButtonStateType"][] | null;
    };
    /** Request to get rules for a button sensor. */
    Button_GetRulesForButtonWSRequest: {
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
    };
    /** Response containing rules for a button sensor. */
    Button_GetRulesForButtonWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of rules configured for the button sensor */
      rules?: components["schemas"]["Button_ExternalButtonRuleType"][] | null;
    };
    /** Minimal state information for a button sensor. */
    Button_MinimalButtonStateType: {
      /** List of associated camera device UUIDs */
      associatedCameras?: (string | null)[] | null;
      /** Battery percentage of the button sensor */
      batteryPercent?: number | null;
      buttonEmergencyOnsiteContact?: components["schemas"]["EmergencyContact"];
      buttonMode?: components["schemas"]["ButtonModeEnum"];
      /** base 64 (url-safe) uuid string */
      closestBaseStation?: string | null;
      /** Creation timestamp in milliseconds */
      createdAtMillis?: number | null;
      /** Firmware version of the button sensor */
      firmwareVersion?: string | null;
      /** Floor number where the button sensor is located */
      floorNumber?: number | null;
      health?: components["schemas"]["Button_ButtonHealthEnum"];
      healthDetails?: components["schemas"]["Button_ButtonHealthDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** Last time the button sensor was seen in seconds */
      lastSeenSec?: number | null;
      /** Latitude coordinate of the button sensor */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate of the button sensor */
      longitude?: number | null;
      /** Name of the button sensor */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
      /** Serial number of the button sensor */
      serialNumber?: string | null;
      /** Signal strength of the button sensor */
      signalStrength?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Indicates if test mode is enabled for the button sensor */
      testModeEnabled?: boolean | null;
    };
    /** Request to update button sensor configuration. */
    Button_UpdateButtonConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableButtonUserConfig"];
    };
    /** Request to update button sensor details. */
    Button_UpdateButtonDetailsWSRequest: {
      /** List of associated camera device UUIDs */
      associatedCameras?: (string | null)[] | null;
      buttonMode?: components["schemas"]["ButtonModeEnum"];
      /** Optional description for the button sensor */
      description?: string | null;
      /** Optional floor number */
      floorNumber?: number | null;
      /** Optional latitude coordinate */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Optional longitude coordinate */
      longitude?: number | null;
      /** Optional name for the button sensor */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
    };
    Buyer: {
      address1?: string | null;
      address2?: string | null;
      address3?: string | null;
      city?: string | null;
      companyName?: string | null;
      contactName?: string | null;
      country?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      state?: string | null;
    };
    COSensorType: {
      adcRaw?: number | null;
      adcVoltage?: number | null;
      coConcentration?: number | null;
      timestampSec?: number | null;
    };
    CameraAiDewarpConfigType: {
      dewarp_tile_height?: number | null;
      dewarp_tile_width?: number | null;
      orientation?: number | null;
    };
    CameraConfiguration: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      checkConditionOverride?: components["schemas"]["CheckCondition"];
      promptExtension?: string | null;
      promptOverride?: string | null;
      region?: components["schemas"]["RegionPolygonType"];
      scheduledActions?: components["schemas"]["ScheduledAction"][] | null;
    };
    CameraCrossCountingSettingsType: {
      directions?: (CameraCrossCountingSettingsDirectionsEnum | null)[] | null;
      in_roi?: components["schemas"]["RegionPolygonType"][] | null;
      object_type?: CameraCrossCountingSettingsObjectTypeEnum | null;
      object_type_id?: number | null;
      out_roi?: components["schemas"]["RegionPolygonType"][] | null;
    };
    CameraHumanLoiteringSettingsType: {
      roi?: components["schemas"]["RegionPolygonType"][] | null;
    };
    CameraMeteringConfigType: {
      rotation?: number | null;
      table?: string | null;
    };
    CameraMotorConfigType: {
      af_enabled?: boolean | null;
      af_region?: components["schemas"]["PermyriadRect"];
      focus?: number | null;
      piris?: number | null;
      zoom?: number | null;
    };
    CameraPTZConfigType: {
      offset_x_percent?: number | null;
      offset_y_percent?: number | null;
      rotation?: number | null;
      size_percent?: number | null;
    };
    /** List of camera policies using the schedule */
    CameraPolicyV2Type: {
      defaultTriggers?: components["schemas"]["CameraTriggerType"][] | null;
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["CameraScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    CameraScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["CameraTriggerType"][] | null;
    };
    CameraTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      faceAlertLabelSet?: (string | null)[] | null;
      faceAlertUnidentified?: boolean | null;
      faceAllowedLabelSet?: (string | null)[] | null;
      threshold?: number | null;
      vehicleAlertLabelSet?: (string | null)[] | null;
      vehicleAlertUnidentified?: boolean | null;
      vehicleAllowedLabelSet?: (string | null)[] | null;
    };
    /** List of third-party cameras assigned to the specified NVR */
    CameraType: {
      archiveRegion?: string | null;
      cameraFramerate?: number | null;
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      deviceFacetRadians?: { [key: string]: number | null } | null;
      directionRadians?: number | null;
      facetNameMap?: { [key: string]: string | null } | null;
      floorNumber?: number | null;
      hardwareId?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pending?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      serialNumber?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      type?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    CameraVisualTamperConfigType: {
      analyze_fps?: number | null;
      analyze_res?: number | null;
      canny_thresh?: number | null;
      edge_cov_diff_thresh?: number | null;
      enabled?: boolean | null;
      long_buf_size?: number | null;
      short_buf_size?: number | null;
    };
    /** Backwards compatible camera update type with optional fields. */
    Camera_CameraBackwardsCompatUpdateType: {
      /** Archive region for the camera */
      archiveRegion?: string | null;
      /** Whether the camera is deleted */
      deleted?: boolean | null;
      /** Description of the camera */
      description?: string | null;
      /** Floor number where the camera is located */
      floorNumber?: number | null;
      /** Latitude coordinate of the camera */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate of the camera */
      longitude?: number | null;
      /** Whether the camera is mummified */
      mummified?: boolean | null;
      /** Name of the camera */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Current state information for a camera. */
    Camera_CameraCurrentStateType: {
      /** Base URI for video operations */
      baseVideoOperationUri?: string | null;
      /** Status enumeration for camera states. */
      connectionStatus?: CameraCurrentStateConnectionStatusEnum | null;
      /** Connection timestamp in milliseconds */
      connectionTimestampMs?: number | null;
      /** Default network interface */
      defaultInterface?: string | null;
      /** MAC address of default interface */
      defaultInterfaceMac?: string | null;
      /** Current firmware version */
      firmwareVersion?: string | null;
      /** Status enumeration for camera states. */
      healthStatus?: CameraCurrentStateHealthStatusEnum | null;
      /** Detailed health status enumeration for cameras. */
      healthStatusDetails?: CameraCurrentStateHealthStatusDetailsEnum | null;
      /** Latest available firmware version */
      latestFirmwareVersion?: string | null;
      /** Media region */
      mediaRegion?: string | null;
      /** State information stored on the camera */
      onCameraState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      /** State information stored in the cloud */
      onCloudState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      /** Camera region */
      region?: string | null;
      /** Camera serial number */
      serialNumber?: string | null;
      /** WiFi SSID */
      ssid?: string | null;
      /** Number of firmware versions behind */
      versionsBehind?: number | null;
      /** MAC address of WiFi access point */
      wifiApMac?: string | null;
      /** WiFi signal strength in bars (1-5) */
      wifiBars?: number | null;
      /** WiFi signal strength in dBm */
      wifiSignalStrength?: number | null;
    };
    /** External faceted camera type with device UUID. */
    Camera_CameraExternalFacetedType: {
      archiveRegion?: string | null;
      cameraFramerate?: number | null;
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      deviceFacetRadians?: { [key: string]: number | null } | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      directionRadians?: number | null;
      facetNameMap?: { [key: string]: string | null } | null;
      floorNumber?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      pending?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      serialNumber?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      type?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** External camera type. */
    Camera_CameraExternalType: {
      archiveRegion?: string | null;
      cameraFramerate?: number | null;
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      deviceFacetRadians?: { [key: string]: number | null } | null;
      directionRadians?: number | null;
      facetNameMap?: { [key: string]: string | null } | null;
      floorNumber?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      pending?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      serialNumber?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      type?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Information for offline LAN streaming. */
    Camera_CameraOfflineLanStreamingInfo: {
      /** Access token for LAN streaming */
      accessToken?: string | null;
      /** List of LAN addresses for streaming */
      lanAddresses?: (string | null)[] | null;
    };
    /** Request to create custom footage seek points for a camera. */
    Camera_CreateCustomFootageSeekpointsWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** List of custom footage seek points to create */
      footageSeekPoints?:
        | components["schemas"]["CustomFootageSeekPointType"][]
        | null;
    };
    /** Request to create footage bounding boxes for a camera. */
    Camera_CreateFootageBoundingBoxesWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** List of footage bounding boxes to create */
      footageBoundingBoxes?:
        | components["schemas"]["FootageBoundingBoxType"][]
        | null;
    };
    /** Response indicating the result of creating footage bounding boxes. */
    Camera_CreateFootageBoundingBoxesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response indicating the result of creating footage seek points. */
    Camera_CreateFootageSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to create a shared live video stream for a camera. */
    Camera_CreateSharedLiveVideoStreamWSRequest: {
      /** RUUID with optional appended facet information */
      audioGatewayUuid?: string | null;
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** Add an expiration date for accessing the stream in seconds */
      expirationTimeSecs?: number | null;
      /** Camera must be associated with an audio gateway to have audio */
      includeAudio?: boolean | null;
      /** If given a schedule UUID, will hide the stream during the schedule instead and show it otherwise */
      invertSchedule?: boolean | null;
      /** If not provided, will be named 'Unnamed' */
      name?: string | null;
      /** Add a password to allow access to your shared stream */
      password?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      /** Org must have SSO setup to use SSO protected streams */
      ssoProtected?: boolean | null;
      streamType?: components["schemas"]["StreamTypeEnum"];
      /** Enables recording of live footage to a VOD */
      vodEnabled?: boolean | null;
    };
    /** Response containing the created shared live video stream information. */
    Camera_CreateSharedLiveVideoStreamWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** M3U8 URL for the shared live video stream */
      sharedLiveM3U8StreamUrl?: string | null;
      /** URL for the shared live video stream */
      sharedLiveVideoStreamUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      sharedLiveVideoStreamUuid?: string | null;
    };
    /** Request to create a shared video wall. */
    Camera_CreateSharedVideoWallWSRequest: {
      /** Expiration time in seconds */
      expirationTimeSecs?: number | null;
      /** Whether to invert the schedule */
      invertSchedule?: boolean | null;
      /** Password to protect the shared video wall */
      password?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      videoWallUuid?: string | null;
      /** Whether to enable video on demand */
      vodEnabled?: boolean | null;
    };
    /** Response containing the created shared video wall information. */
    Camera_CreateSharedVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** URL for accessing the shared video wall */
      sharedLiveVideoStreamUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      sharedLiveVideoStreamUuid?: string | null;
    };
    /** Request to create a video wall. */
    Camera_CreateVideoWallWSRequest: {
      videoWall?: components["schemas"]["VideoWallType"];
    };
    /** Response from creating a video wall. */
    Camera_CreateVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request to delete a camera from the system. */
    Camera_DeleteCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** Whether to mummify the camera instead of permanent deletion */
      mummify?: boolean | null;
    };
    /** Response indicating the result of deleting a camera. */
    Camera_DeleteCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the delete operation */
      responseStatus?: DeleteCameraWSResponseResponseStatusEnum | null;
    };
    /** Request to delete custom footage seek points for cameras within a time range. */
    Camera_DeleteCustomFootageSeekpointsWSRequest: {
      /** List of camera UUIDs to delete custom seek points for */
      cameraUuids?: (string | null)[] | null;
      /** Filter which custom seek points to delete with the custom name provided */
      customName?: string | null;
      /** UNIX milliseconds timestamp to end custom seek point deletion, up to 24 hours from the start timestamp */
      endTimestampMs?: number | null;
      /** UNIX milliseconds timestamp to start custom seek point deletion */
      startTimestampMs?: number | null;
    };
    /** Response containing the results of deleting custom footage seek points. */
    Camera_DeleteCustomFootageSeekpointsWSResponse: {
      /** Mapping of camera UUIDs to seek point deletion results */
      deleteSeekpointResponseMap?: {
        [
          key: string
        ]: components["schemas"]["Camera_DeleteCustomFootageSeekpointsWSResponse_SeekPointDeleteResponse"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response indicating the result of deleting seek points for a camera. */
    Camera_DeleteCustomFootageSeekpointsWSResponse_SeekPointDeleteResponse: {
      /** Whether an error occurred during deletion */
      err?: boolean | null;
      /** Error message if deletion failed */
      errMsg?: string | null;
    };
    /** Request to delete a shared live video stream. */
    Camera_DeleteSharedLiveVideoStreamWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request to delete a shared video wall. */
    Camera_DeleteSharedVideoWallWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      /** base 64 (url-safe) uuid string */
      videoWallUuid?: string | null;
    };
    /** Response indicating the result of deleting a shared video wall. */
    Camera_DeleteSharedVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to delete a video wall configuration. */
    Camera_DeleteVideoWallWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response indicating the result of deleting a video wall configuration. */
    Camera_DeleteVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to permanently erase a camera from the system. */
    Camera_EraseCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
    };
    /** Response indicating the result of erasing a camera. */
    Camera_EraseCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to find all shared live video streams. */
    Camera_FindAllSharedLiveVideoStreamsWSRequest: { [key: string]: unknown };
    /** Response containing all shared live video streams. */
    Camera_FindAllSharedLiveVideoStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared live video streams */
      sharedLiveVideoStreams?:
        | components["schemas"]["Camera_SharedLiveVideoStreamWS"][]
        | null;
    };
    /** Request to find shared live video streams for a camera. */
    Camera_FindSharedLiveVideoStreamsForWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
    };
    /** Response containing shared live video streams. */
    Camera_FindSharedLiveVideoStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared live video streams */
      sharedLiveVideoStreams?:
        | components["schemas"]["Camera_SharedLiveVideoStreamWS"][]
        | null;
    };
    /** Request to find shared video walls for a video wall. */
    Camera_FindSharedVideoWallsWSRequest: {
      /** base 64 (url-safe) uuid string */
      videoWallUuid?: string | null;
    };
    /** Response containing shared video walls for a video wall. */
    Camera_FindSharedVideoWallsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared video walls */
      sharedVideoWalls?:
        | components["schemas"]["Camera_SharedVideoWallWS"][]
        | null;
    };
    /** Summary of footage bounding boxes by device. */
    Camera_FootageBoundingBoxSummaryType: {
      /** Map of device UUIDs to their footage bounding box information */
      deviceMap?: {
        [key: string]: components["schemas"]["FootageBoundingBoxType"];
      } | null;
    };
    /** Summary of footage seek points with activity counts and metadata. */
    Camera_FootageSeekPointSummaryType: {
      /** Map of activities to device UUIDs and their counts */
      activityCountMap?: {
        [key: string]: { [key: string]: number | null } | null;
      } | null;
      /** Whether there is an alert */
      alert?: boolean | null;
      /** Set of recognized face names */
      faceNames?: (string | null)[] | null;
      /** Set of detected poses */
      poses?: (string | null)[] | null;
      /** Set of recognized objects */
      recognizedObjects?: (string | null)[] | null;
      /** Set of unidentified face IDs */
      unidentifiedFaceIds?: (string | null)[] | null;
      /** Set of vehicle license plates */
      vehicleLicensePlates?: (string | null)[] | null;
      /** Set of recognized vehicle names */
      vehicleNames?: (string | null)[] | null;
    };
    /** Request to generate batch registration information for cameras. */
    Camera_GenerateBatchRegistrationInfoRequest: {
      /** List of admin user permission group UUIDs */
      adminUserPermissionGroups?: (string | null)[] | null;
      /** Latitude coordinate */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate */
      longitude?: number | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** List of read-only user permission group UUIDs */
      readOnlyUserPermissionGroups?: (string | null)[] | null;
    };
    /** Response containing batch registration information for cameras. */
    Camera_GenerateBatchRegistrationInfoResponse: {
      /** Environment identifier */
      env?: string | null;
      /** base 64 (url-safe) uuid string */
      token?: string | null;
    };
    /** Request to generate a WiFi change authorization token. */
    Camera_GenerateWifiChangeAuthorizationTokenWSRequest: {
      /** Perceived IP address */
      perceivedIp?: string | null;
      /** WiFi network SSID */
      ssid?: string | null;
    };
    /** Response containing a WiFi change authorization token. */
    Camera_GenerateWifiChangeAuthorizationTokenWSResponse: {
      /** Authorization token for WiFi change */
      authorizationToken?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Request to retrieve batch registration token usage information. */
    Camera_GetBatchRegistrationTokenUsageRequest: {
      /** Timestamp in milliseconds since epoch to check usage from */
      sinceMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      token?: string | null;
    };
    /** Response containing batch registration token usage information. */
    Camera_GetBatchRegistrationTokenUsageResponse: {
      /** List of batch registration token usage results */
      usageList?:
        | components["schemas"]["BatchRegistrationTokenUsageResult"][]
        | null;
    };
    /** Request to retrieve AI thresholds for a camera. */
    Camera_GetCameraAIThresholdsWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
    };
    /** Response containing AI thresholds for a camera. */
    Camera_GetCameraAIThresholdsWSResponse: {
      /** Require this many consecutive frames of seeing a human to include that human detection in results. Set to 1 to always include detections, or higher to avoid false positives due to transient motion like bugs/spiders/rain. Default is 2 consecutive frames. */
      consecutiveHumanFilter?: number | null;
      /** Require this many consecutive frames of seeing a vehicle to include that vehicle detection in results. Set to 1 to always include detections, or higher to avoid false positives due to transient motion like bugs/spiders/rain. Default is 2 consecutive frames. */
      consecutiveVehicleFilter?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Confidence threshold for face detection. 0 or null means the built-in default. */
      faceConfidenceThreshold?: number | null;
      /** Confidence threshold for face matching (determining if two faces are the same person). 0 or null means the built-in default. We no longer support device specific face matching threshold. This property is deprecated and will be removed. */
      faceMatchConfidenceThreshold?: number | null;
      /** Confidence threshold for human detection. 0 or null means the built-in default. */
      humanConfidenceThreshold?: number | null;
      /** Confidence threshold for license plate detection and character recognition. 0 or null means the built-in default. */
      lprConfidenceThreshold?: number | null;
      /** The max event duration for an alert in milliseconds. Default is 30000, lowering down to 4000 will result in faster alert delivery but shorter alert clips. */
      maxEventDurationMs?: number | null;
      /** Confidence threshold for vehicle detection. 0 or null means the built-in default. */
      vehicleConfidenceThreshold?: number | null;
    };
    /** Request to retrieve detailed information for multiple cameras. */
    Camera_GetCameraDetailsWSRequest: {
      /** List of camera UUIDs to retrieve details for */
      cameraUuids?: (string | null)[] | null;
    };
    /** Response containing detailed information for multiple cameras. */
    Camera_GetCameraDetailsWSResponse: {
      /** List of camera details */
      cameras?: components["schemas"]["Camera_CameraExternalType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve cloud archived media information for a camera. */
    Camera_GetCloudArchivedMediaInfoWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
    };
    /** Response containing cloud archived media information for a camera. */
    Camera_GetCloudArchivedMediaInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Timestamp of the oldest archived video segment in seconds since epoch */
      oldestArchivedVideoSegmentSecs?: number | null;
    };
    /** Request to get cloud archiving configuration. */
    Camera_GetCloudArchivingConfigWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    /** Response containing cloud archiving configuration. */
    Camera_GetCloudArchivingConfigWSResponse: {
      archivingConfig?: components["schemas"]["ScopedCloudArchivingConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve camera configuration settings. */
    Camera_GetConfigWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
    };
    /** Response containing camera configuration settings. */
    Camera_GetConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_IExternalReadableAudioVideoUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve the current state of a camera (deprecated). */
    Camera_GetCurrentStateWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** Whether to force a refresh of the camera state */
      force?: boolean | null;
    };
    /** Response containing the current state of a camera (deprecated). */
    Camera_GetCurrentStateWSResponse: {
      cameraState?: components["schemas"]["Camera_CameraCurrentStateType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve custom footage seek points V2 for cameras within a time range. */
    Camera_GetCustomFootageSeekpointsV2WSRequest: {
      /** Filters which custom footage seek point to search for by description */
      customDescription?: string | null;
      /** Filters which custom footage seek point to search for by name */
      customDisplayName?: string | null;
      /** List of device UUIDs to filter the search */
      deviceUuids?: (string | null)[] | null;
      /** How far from the start timestamp to search in seconds */
      duration?: number | null;
      /** List of location UUIDs to filter the search */
      locationUuids?: (string | null)[] | null;
      /** Starting timestamp of the search in UNIX seconds */
      startTime?: number | null;
    };
    /** Response containing custom footage seek points V2 for cameras. */
    Camera_GetCustomFootageSeekpointsV2WSResponse: {
      /** List of custom footage seek points V2 */
      customFootageSeekPoints?:
        | components["schemas"]["SeekpointIndexType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetFacetedCameraDetailsWSResponse: {
      cameras?:
        | components["schemas"]["Camera_CameraExternalFacetedType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve footage bounding boxes for multiple cameras within a time range. */
    Camera_GetFootageBoundingBoxesForMultipleWSRequest: {
      /** List of camera UUIDs to retrieve bounding boxes for */
      cameraUuids?: (string | null)[] | null;
      /** Duration in seconds */
      durationSec?: number | null;
      /** Start time in seconds since epoch */
      startTimeSec?: number | null;
    };
    /** Response containing footage bounding boxes for multiple cameras. */
    Camera_GetFootageBoundingBoxesForMultipleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Mapping of timestamps to footage bounding box summaries */
      footageBoundingBoxMap?: {
        [
          key: string
        ]: components["schemas"]["Camera_FootageBoundingBoxSummaryType"];
      } | null;
    };
    /** Request to retrieve footage bounding boxes for a camera within a time range. */
    Camera_GetFootageBoundingBoxesWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** Duration in seconds */
      duration?: number | null;
      /** Start time in seconds since epoch */
      startTime?: number | null;
    };
    /** Response containing footage bounding boxes for a camera. */
    Camera_GetFootageBoundingBoxesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of footage bounding boxes */
      footageBoundingBoxes?:
        | components["schemas"]["FootageBoundingBoxType"][]
        | null;
    };
    /** Request to retrieve footage seek points for multiple cameras within a time range. */
    Camera_GetFootageSeekpointsForMultipleWSRequest: {
      /** List of camera UUIDs to retrieve seek points for */
      cameraUuids?: (string | null)[] | null;
      /** Duration in seconds */
      durationSec?: number | null;
      /** Whether to include any motion events */
      includeAnyMotion?: boolean | null;
      /** Start time in seconds since epoch */
      startTimeSec?: number | null;
    };
    /** Response containing footage seek points for multiple cameras. */
    Camera_GetFootageSeekpointsForMultipleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Mapping of timestamps to footage seek point summaries */
      footageSeekPointMap?: {
        [
          key: string
        ]: components["schemas"]["Camera_FootageSeekPointSummaryType"];
      } | null;
    };
    /** Request to retrieve footage seek points V2 for a camera within a time range. */
    Camera_GetFootageSeekpointsV2WSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** Duration in seconds */
      duration?: number | null;
      /** Whether to include any motion events */
      includeAnyMotion?: boolean | null;
      /** Start time in seconds since epoch */
      startTime?: number | null;
    };
    /** Response containing footage seek points V2 for a camera. */
    Camera_GetFootageSeekpointsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of footage seek points V2 */
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
    };
    /** Request to retrieve footage seek points for a camera within a time range (deprecated). */
    Camera_GetFootageSeekpointsWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** Duration in seconds */
      duration?: number | null;
      /** Start time in seconds since epoch */
      startTime?: number | null;
    };
    /** Response containing footage seek points for a camera (deprecated). */
    Camera_GetFootageSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of footage seek points */
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointType"][]
        | null;
    };
    /** Request to retrieve the full state information of a camera. */
    Camera_GetFullCameraStateWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** Whether to force a refresh of the camera state */
      force?: boolean | null;
    };
    /** Response containing the full state information of a camera. */
    Camera_GetFullCameraStateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      fullCameraState?: components["schemas"]["FullDeviceStateType"];
    };
    /** Request to get line crossing enabled cameras for a location. */
    Camera_GetLineCrossingEnabledCamerasForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response containing line crossing enabled cameras for a location. */
    Camera_GetLineCrossingEnabledCamerasForLocationWSResponse: {
      /** Map of camera UUIDs to their line crossing configurations */
      camerasToConfigs?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_userconfig_ExternalReadableFacetedUserConfig"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to get media URIs for a camera device. */
    Camera_GetMediaUrisWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
    };
    /** Response containing media URIs for camera streaming and playback. */
    Camera_GetMediaUrisWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of LAN check URLs to verify device availability */
      lanCheckUrls?: (string | null)[] | null;
      /** List of LAN H.264 live streaming URIs */
      lanLiveH264Uris?: (string | null)[] | null;
      /** List of LAN M3U8 live streaming URIs */
      lanLiveM3u8Uris?: (string | null)[] | null;
      /** List of LAN MPD live streaming URIs */
      lanLiveMpdUris?: (string | null)[] | null;
      /** List of LAN M3U8 VOD URI templates */
      lanVodM3u8UrisTemplates?: (string | null)[] | null;
      /** List of LAN MPD VOD URI templates */
      lanVodMpdUrisTemplates?: (string | null)[] | null;
      /** WAN H.264 live streaming URI */
      wanLiveH264Uri?: string | null;
      /** WAN M3U8 live streaming URI */
      wanLiveM3u8Uri?: string | null;
      /** WAN MPD live streaming URI */
      wanLiveMpdUri?: string | null;
      /** WAN H.264 VOD URI template */
      wanVodH264UriTemplate?: string | null;
      /** WAN M3U8 VOD URI template */
      wanVodM3u8UriTemplate?: string | null;
      /** WAN MPD VOD URI template */
      wanVodMpdUriTemplate?: string | null;
    };
    /** Request to retrieve a mapping of cameras to their location information. */
    Camera_GetMinimalCameraLocationMapWSRequest: { [key: string]: unknown };
    /** Response containing a mapping of cameras to their location information. */
    Camera_GetMinimalCameraLocationMapWSResponse: {
      /** Mapping of camera UUIDs to location information */
      cameraLocationMap?: {
        [
          key: string
        ]: components["schemas"]["Camera_GetMinimalCameraLocationMapWSResponse_CameraLocationInfo"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Information about a camera's location. */
    Camera_GetMinimalCameraLocationMapWSResponse_CameraLocationInfo: {
      /** Name of the camera */
      cameraName?: string | null;
      /** Name of the location */
      locationName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Request to retrieve a minimal list of camera states. */
    Camera_GetMinimalCameraStateListWSRequest: {
      /** Whether to include mummified cameras in the response */
      includeMummified?: boolean | null;
    };
    /** Response containing a minimal list of camera states. */
    Camera_GetMinimalCameraStateListWSResponse: {
      /** List of minimal camera state information */
      cameraStates?: components["schemas"]["MinimalDeviceStateType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve a minimal list of cameras (deprecated). */
    Camera_GetMinimalListWSRequest: {
      /** Whether to include mummified cameras in the response */
      includeMummified?: boolean | null;
    };
    /** Response containing a minimal list of cameras (deprecated). */
    Camera_GetMinimalListWSResponse: {
      /** List of minimal camera information */
      cameras?: components["schemas"]["Camera_MinimalCameraType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to get occupancy enabled cameras. */
    Camera_GetOccupancyEnabledCamerasWSRequest: { [key: string]: unknown };
    /** Request to retrieve offline LAN streaming information for cameras. */
    Camera_GetOfflineLanStreamingInfoWSRequest: { [key: string]: unknown };
    /** Response containing offline LAN streaming information for cameras. */
    Camera_GetOfflineLanStreamingInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Mapping of camera UUIDs to offline LAN streaming information */
      info?: {
        [
          key: string
        ]: components["schemas"]["Camera_CameraOfflineLanStreamingInfo"];
      } | null;
    };
    /** Request to retrieve presence windows for a camera within a time range. */
    Camera_GetPresenceWindowsWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** Duration in seconds */
      durationSec?: number | null;
      /** Start time in seconds since epoch */
      startTimeSec?: number | null;
    };
    /** Response containing presence windows for a camera. */
    Camera_GetPresenceWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Mapping of presence types to time windows */
      presenceWindows?: {
        [key: string]: components["schemas"]["TimeWindowSeconds"][] | null;
      } | null;
    };
    Camera_GetSharedCameraCurrentStateWSResponse: {
      cameraState?: components["schemas"]["Camera_SharedCameraCurrentStateType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to get storage recovery file for a device. */
    Camera_GetStorageRecoveryFileWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
    };
    /** Response containing storage recovery file contents. */
    Camera_GetStorageRecoveryFileWSResponse: {
      /** Binary contents of the storage recovery file */
      fileContents?: (string | null)[] | null;
    };
    /** Request to retrieve uptime windows for a camera within a time range. */
    Camera_GetUptimeWindowsWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** End time in seconds since epoch */
      endTime?: number | null;
      /** Start time in seconds since epoch */
      startTime?: number | null;
    };
    /** Response containing uptime windows for a camera. */
    Camera_GetUptimeWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of uptime windows */
      uptimeWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
    };
    /** Request to retrieve all video wall configurations. */
    Camera_GetVideoWallsWSRequest: { [key: string]: unknown };
    /** Response containing video wall configurations and associated user name mappings. */
    Camera_GetVideoWallsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Mapping of user UUIDs to user names */
      userNameMap?: { [key: string]: string | null } | null;
      /** List of video wall summary information */
      videoWalls?:
        | components["schemas"]["Camera_VideoWallSummaryType"][]
        | null;
    };
    /** Minimal camera information type. */
    Camera_MinimalCameraType: {
      /** Status enumeration for camera states. */
      connectionStatus?: MinimalCameraConnectionStatusEnum | null;
      /** Default network interface */
      defaultInterface?: string | null;
      /** MAC address of default interface */
      defaultInterfaceMac?: string | null;
      /** Floor number where the camera is located */
      floorNumber?: number | null;
      /** Status enumeration for camera states. */
      healthStatus?: MinimalCameraHealthStatusEnum | null;
      /** Detailed health status enumeration for cameras. */
      healthStatusDetails?: MinimalCameraHealthStatusDetailsEnum | null;
      /** List of LAN addresses */
      lanAddresses?: (string | null)[] | null;
      /** Latitude coordinate of the camera */
      latitude?: number | null;
      /** Whether live stream is shared */
      liveStreamShared?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate of the camera */
      longitude?: number | null;
      /** Media region */
      mediaRegion?: string | null;
      /** Whether the camera is mummified */
      mummified?: boolean | null;
      /** Name of the camera */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Camera region */
      region?: string | null;
      /** Camera serial number */
      serialNumber?: string | null;
      /** WiFi SSID */
      ssid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      /** MAC address of WiFi access point */
      wifiApMac?: string | null;
      /** WiFi signal strength in bars (1-5) */
      wifiBars?: number | null;
      /** WiFi signal strength in dBm */
      wifiSignalStrength?: number | null;
    };
    /** Request to reboot a camera device. */
    Camera_RebootCameraWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
    };
    /** Response from rebooting a camera device. */
    Camera_RebootCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status enumeration for reboot web service responses. */
      status?: RebootCameraWSResponseStatusEnum | null;
    };
    Camera_RevertCameraToDefaultsWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
    };
    Camera_RevertCameraToDefaultsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Current state information for a shared camera. */
    Camera_SharedCameraCurrentStateType: {
      /** Base URL for video operations */
      baseVideoOperationUrl?: string | null;
      /** Current connection status of the shared camera */
      connectionStatus?: SharedCameraCurrentStateConnectionStatusEnum | null;
      /** Oldest archived media timestamp in seconds */
      oldestArchivedMediaSeconds?: number | null;
      /** State information stored on the camera */
      onCameraState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      /** State information stored in the cloud */
      onCloudState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      /** Camera region */
      region?: string | null;
    };
    /** List of shared live video streams for the doorbell camera */
    Camera_SharedLiveVideoStreamWS: {
      audioDeviceHwVar?: components["schemas"]["HardwareVariationEnum"];
      /** RUUID with optional appended facet information */
      audioGatewayUuid?: string | null;
      audioPushToTalkEnabled?: boolean | null;
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      deviceHwVar?: components["schemas"]["HardwareVariationEnum"];
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      expirationTime?: number | null;
      hideOverlay?: boolean | null;
      invertSchedule?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      passwordProtected?: boolean | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      sharedLiveM3U8StreamUrl?: string | null;
      sharedLiveVideoStreamUrl?: string | null;
      sharedWithMonitoringService?: boolean | null;
      ssoProtected?: boolean | null;
      streamType?: components["schemas"]["StreamTypeEnum"];
      timestampMs?: number | null;
      unscheduledMessage?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      vodEnabled?: boolean | null;
    };
    /** List of shared video walls */
    Camera_SharedVideoWallWS: {
      deviceScheduleMap?: {
        [key: string]: components["schemas"]["DeviceSchedule"];
      } | null;
      expirationTime?: number | null;
      hideOverlay?: boolean | null;
      invertSchedule?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      passwordProtected?: boolean | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      sharedVideoWallUrl?: string | null;
      timestampMs?: number | null;
      unscheduledMessage?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      /** base 64 (url-safe) uuid string */
      videoWallUuid?: string | null;
      vodEnabled?: boolean | null;
    };
    /** Request to update AI thresholds for a camera. */
    Camera_UpdateCameraAIThresholdsWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** Require this many consecutive frames of seeing a human to include that human detection in results. Set to 1 to always include detections, or higher to avoid false positives due to transient motion like bugs/spiders/rain. Default is 2 consecutive frames. */
      consecutiveHumanFilter?: number | null;
      /** Require this many consecutive frames of seeing a vehicle to include that vehicle detection in results. Set to 1 to always include detections, or higher to avoid false positives due to transient motion like bugs/spiders/rain. Default is 2 consecutive frames. */
      consecutiveVehicleFilter?: number | null;
      /** Confidence threshold for face detection. Set to 0 or null to use the default. Maximum range of 1. Default = 0.7 */
      faceConfidenceThreshold?: number | null;
      /** Confidence threshold for face matching (determining if two faces are the same person). Set to 0 or null to use the default. Maximum range of 1. Default = 0.7. We no longer support device specific face matching threshold. This property is deprecated and will be removed. */
      faceMatchConfidenceThreshold?: number | null;
      /** Confidence threshold for human detection. Set to 0 or null to use the default. Maximum range of 1. Default = 0.6 */
      humanConfidenceThreshold?: number | null;
      /** Confidence threshold for license plate detection and character recognition. Set to 0 or null to use the default. Maximum range of 1. Default = 0.8 */
      lprConfidenceThreshold?: number | null;
      /** Set the max event duration for an alert in milliseconds. Default is 30000, lowering down to 4000 will result in faster alert delivery but shorter alert clips. */
      maxEventDurationMs?: number | null;
      /** Confidence threshold for vehicle detection. Set to 0 or null to use the default. Maximum range of 1. Default = 0.6 */
      vehicleConfidenceThreshold?: number | null;
    };
    /** Response indicating the result of updating camera AI thresholds. */
    Camera_UpdateCameraAIThresholdsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to update camera firmware. */
    Camera_UpdateCameraFirmwareWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
    };
    /** Response containing the status of camera firmware update. */
    Camera_UpdateCameraFirmwareWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the firmware update operation */
      status?: UpdateCameraFirmwareWSResponseStatusEnum | null;
    };
    /** Request to update human loitering configuration for a camera. */
    Camera_UpdateCameraHumanLoiteringConfigWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** Region of interests of the human loitering feature. NULL or empty list will disable the feature */
      rois?: components["schemas"]["RegionPolygonType"][] | null;
    };
    /** Response indicating the result of updating camera human loitering configuration. */
    Camera_UpdateCameraHumanLoiteringWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to update line crossing thresholds for a camera. */
    Camera_UpdateCameraLineCrossingThresholdsWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** Set of crossing directions to monitor. */
      directions?: (UpdateCameraLineCrossingThresholdsWSRequestDirectionsEnum | null)[] | null;
      /** By default, INGRESS events occur when the following condition is met for the following line types: an entity moves from top -> bottom when a horizontal line is defined, an entity moves from left -> right when a vertical line is defined, an entity moves from top-left -> bottom-right when an upwards sloping line is defined, and an entity moves from top-right to bottom-left when a downwards sloping line is defined. Setting this value to true will switch INGRESS to EGRESS events and vice-versa. */
      inverted?: boolean | null;
      /** Type of object to monitor for line crossing. */
      objectType?: UpdateCameraLineCrossingThresholdsWSRequestObjectTypeEnum | null;
      pointA?: components["schemas"]["Camera_UpdateCameraLineCrossingThresholdsWSRequest_Coordinate"];
      pointB?: components["schemas"]["Camera_UpdateCameraLineCrossingThresholdsWSRequest_Coordinate"];
    };
    /** (X,Y) coordinate expressed as a percentage of the camera's resolution.Minimum range is 0.1 and maximum range is 0.9. Leaving this value as null will disable line-crossing. */
    Camera_UpdateCameraLineCrossingThresholdsWSRequest_Coordinate: {
      /** Value ranges from 0.1 to 0.9 */
      x?: number | null;
      /** Value ranges from 0.1 to 0.9 */
      y?: number | null;
    };
    /** Response indicating the result of updating camera line crossing thresholds. */
    Camera_UpdateCameraLineCrossingThresholdsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to update camera information V2 with partial update support. */
    Camera_UpdateCameraV2WSRequest: {
      /** Custom data for the camera */
      customData?: string | null;
      /** Whether custom data was updated */
      customDataUpdated?: boolean | null;
      /** Whether the camera is deleted */
      deleted?: boolean | null;
      /** Whether deleted status was updated */
      deletedUpdated?: boolean | null;
      /** Description of the camera */
      description?: string | null;
      /** Whether description was updated */
      descriptionUpdated?: boolean | null;
      /** Direction in radians */
      directionRadians?: number | null;
      /** Whether direction radians was updated */
      directionRadiansUpdated?: boolean | null;
      /** Mapping of device facets to names */
      facetNameMap?: { [key: string]: string | null } | null;
      /** Whether facet name map was updated */
      facetNameMapUpdated?: boolean | null;
      /** Floor number */
      floorNumber?: number | null;
      /** Whether floor number was updated */
      floorNumberUpdated?: boolean | null;
      /** Latitude coordinate */
      latitude?: number | null;
      /** Whether latitude was updated */
      latitudeUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Whether location UUID was updated */
      locationUuidUpdated?: boolean | null;
      /** Longitude coordinate */
      longitude?: number | null;
      /** Whether longitude was updated */
      longitudeUpdated?: boolean | null;
      /** Whether the camera is mummified */
      mummified?: boolean | null;
      /** Whether mummified status was updated */
      mummifiedUpdated?: boolean | null;
      /** Name of the camera */
      name?: string | null;
      /** Whether name was updated */
      nameUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Whether policy UUID was updated */
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Whether sub-locations hierarchy key was updated */
      subLocationsHierarchyKeyUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response indicating the result of updating camera information V2. */
    Camera_UpdateCameraV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to update camera information (deprecated). */
    Camera_UpdateCameraWSRequest: {
      camera?: components["schemas"]["Camera_CameraBackwardsCompatUpdateType"];
    };
    /** Response indicating the result of updating camera information (deprecated). */
    Camera_UpdateCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to update multiple cameras in bulk V2. */
    Camera_UpdateCamerasBulkV2WSRequest: {
      /** List of camera bulk update details */
      cameraBulkDetails?:
        | components["schemas"]["Camera_UpdateCameraV2WSRequest"][]
        | null;
    };
    /** Request to update camera configuration settings. */
    Camera_UpdateConfigWSRequest: {
      config?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableAudioVideoUserConfig"];
    };
    /** Request to update a video wall configuration. */
    Camera_UpdateVideoWallWSRequest: {
      videoWall?: components["schemas"]["VideoWallType"];
    };
    /** Response indicating the result of updating a video wall configuration. */
    Camera_UpdateVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to update WiFi settings for one or more cameras. */
    Camera_UpdateWifiWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** List of camera UUIDs to update WiFi settings for */
      cameraUuids?: (string | null)[] | null;
      /** WiFi network password */
      password?: string | null;
      /** WiFi network SSID */
      ssid?: string | null;
    };
    /** Response containing the status of WiFi update operations for each camera. */
    Camera_UpdateWifiWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Mapping of camera UUIDs to WiFi update success status */
      status?: { [key: string]: boolean | null } | null;
    };
    /** Summary information for a video wall. */
    Camera_VideoWallSummaryType: {
      deviceList?: (string | null)[] | null;
      displayName?: string | null;
      /** Number of shares for the video wall */
      numShares?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      othersCanEdit?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerUserUuid?: string | null;
      settings?: { [key: string]: { [key: string]: unknown } | null } | null;
      shared?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    CancelLoopingAudioPlaybackActionRecordType: {
      statusMap?: {
        [key: string]: components["schemas"]["AudioGatewayStatusEnum"];
      } | null;
    };
    CancelLoopingAudioPlaybackActionType: {
      _audioDevices?: (string | null)[] | null;
      audioDevices?: (string | null)[] | null;
    };
    CancelledDoorStateOverride:
      | ({
          cancelledDoorStateOverride?: components["schemas"]["DoorStateOverride"];
        } & {
          originator?: components["schemas"]["BaseEventOriginator"];
          requestedAtMillis?: number | null;
          type?: components["schemas"]["ManualDoorStateChangeEnum"];
        })
      | null;
    /** Change type enum for exposing to OpenAPI component schemas */
    ChangeType: ChangeTypeEnum;
    ChatPrivacy: {
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      permittedPrincipalUuids?: (string | null)[] | null;
      visibility?: components["schemas"]["ChatVisibility"];
    };
    /** Optional field for filtering chat records. */
    ChatQueryFilter: {
      afterMs?: number | null;
      beforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      responseTypes?: components["schemas"]["ResponseType"][] | null;
      responseTypesStr?: (string | null)[] | null;
    };
    /** Chat record used for a selective update. */
    ChatRecord: {
      contextId?: string | null;
      llmInfo?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      principalUuid?: string | null;
      privacy?: components["schemas"]["ChatPrivacy"];
      queriedAtMs?: number | null;
      query?: string | null;
      respondedAtMs?: number | null;
      response?: string | null;
      responseType?: components["schemas"]["ResponseType"];
      timeline?: components["schemas"]["QueryTimelineEvent"][] | null;
      toolingTimeline?: components["schemas"]["QueryTool"][] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ChatVisibility: ChatVisibilityEnum;
    /** Response object for creating, updating or retrieving chatbot automation settings. */
    Chatbot_BaseAutomatedPromptWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      settings?: components["schemas"]["AutomatedPrompt"];
    };
    /** Response object for retrieving or updating a chat record. */
    Chatbot_BaseChatWSResponse: {
      chat?: components["schemas"]["ChatRecord"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for creating chatbot automation settings. */
    Chatbot_CreateAutomatedPromptWSRequest: {
      settings: components["schemas"]["AutomatedPrompt"];
    };
    /** Request object for deleting chatbot automation settings. */
    Chatbot_DeleteAutomatedPromptWSRequest: {
      /** base 64 (url-safe) uuid string */
      promptUuid: string | null;
    };
    /** Request object for deleting a chat record. */
    Chatbot_DeleteChatRecordWSRequest: {
      /** base 64 (url-safe) uuid string */
      recordUuid: string | null;
    };
    /** Request object for deleting a user's conversation with Rhombus MIND. */
    Chatbot_DeleteChatbotConversationWSRequest: {
      /** Context identifier of the conversation to delete. */
      contextId: string | null;
    };
    /** Request object for retrieving chat history for a given automated prompt. */
    Chatbot_GetAutomatedPromptChatHistoryWSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
      /** base 64 (url-safe) uuid string */
      promptUuid: string | null;
    };
    /** Request object for retrieving chatbot automation settings. */
    Chatbot_GetAutomatedPromptWSRequest: {
      /** base 64 (url-safe) uuid string */
      promptUuid: string | null;
    };
    /** Response object for retrieving chatbot automation settings for an org. */
    Chatbot_GetAutomatedPromptsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Pagination key to resume a paginated query. */
      lastEvaluatedKey?: string | null;
      /** List of chatbot automation settings for this org. */
      settingsList?: components["schemas"]["AutomatedPrompt"][] | null;
    };
    /** Request object for retrieving a user's chat history for a given conversation with Rhombus MIND. */
    Chatbot_GetChatHistoryByContextIdWSRequest: {
      /** Context ID to get chat history for. */
      contextId: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
    };
    /** Request object for retrieving a user's entire chat history with Rhombus MIND. */
    Chatbot_GetChatHistoryWSRequest: {
      filter?: components["schemas"]["ChatQueryFilter"];
      pageRequest?: components["schemas"]["DynamoPageRequest"];
    };
    /** Response object for retrieving an entity's chat history with Rhombus MIND. */
    Chatbot_GetChatHistoryWSResponse: {
      /** An entity's chat history with Rhombus MIND. */
      chatHistory?: components["schemas"]["ChatRecord"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Pagination key to resume a paginated query. */
      lastEvaluatedKey?: string | null;
    };
    /** Request object for retrieving a chat record. */
    Chatbot_GetChatRecordWSRequest: {
      /** base 64 (url-safe) uuid string */
      recordUuid: string | null;
    };
    /** Request object for retrieving a user's conversations with Rhombus MIND. */
    Chatbot_GetChatbotConversationsWSRequest: {
      pageRequest?: components["schemas"]["DynamoPageRequest"];
    };
    /** Response object for retrieving a user's conversations with Rhombus MIND. */
    Chatbot_GetChatbotConversationsWSResponse: {
      /** List of a user's conversations. */
      conversations?: components["schemas"]["ContextRecord"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Pagination key to resume a paginated query. */
      lastEvaluatedKey?: string | null;
    };
    /** Request object for retrieving chat records shared with the current user. */
    Chatbot_GetSharedChatRecordsWSRequest: {
      filter?: components["schemas"]["ChatQueryFilter"];
    };
    /** Response object for retrieving chat records shared with the current user. */
    Chatbot_GetSharedChatRecordsWSResponse: {
      /** List of chat records shared with the current user. */
      chatRecords?: components["schemas"]["ChatRecord"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for submitting a query to Rhombus MIND. */
    Chatbot_SubmitChatWSRequest: {
      /** Uuid used to track the current conversation with Rhombus MIND. */
      contextId: string | null;
      /** The name of the conversation if this query is the start of a new conversation. If not specified, the conversation will be named after the first query. */
      conversationName?: string | null;
      /** The query to submit to Rhombus MIND. */
      query: string | null;
    };
    /** Response object for submitting a query to Rhombus MIND. */
    Chatbot_SubmitChatWSResponse: {
      /** base 64 (url-safe) uuid string */
      chatRecordUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for submitting a test prompt with Rhombus MIND. */
    Chatbot_SubmitTestPromptWSRequest: {
      /** Prompt to test with Rhombus MIND. */
      testPrompt: string | null;
    };
    /** Response object for submitting a test prompt with Rhombus MIND. */
    Chatbot_SubmitTestPromptWSResponse: {
      /** base 64 (url-safe) uuid string */
      chatUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating chatbot automation settings. */
    Chatbot_UpdateAutomatedPromptWSRequest: {
      selectiveUpdate: components["schemas"]["AutomatedPrompt"];
    };
    /** Request object for selectively updating a chat record. */
    Chatbot_UpdateChatRecordWSRequest: {
      chat: components["schemas"]["ChatRecord"];
    };
    /** Request object for selectively updating a user's conversation with Rhombus MIND. */
    Chatbot_UpdateChatbotConversationWSRequest: {
      selectiveUpdate?: components["schemas"]["ContextRecordSelectiveUpdate"];
    };
    /** Response object for updating a user's conversation with Rhombus MIND. */
    Chatbot_UpdateChatbotConversationsWSResponse: {
      conversation?: components["schemas"]["ContextRecord"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for rescheduling an automated prompt that became inactive. */
    Chatbot_VerifyJobScheduledWSRequest: {
      /** base 64 (url-safe) uuid string */
      promptUuid: string | null;
    };
    /** Response object for rescheduling an automated prompt that became inactive. */
    Chatbot_VerifyJobScheduledWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Schedule expression when this automated prompt will trigger. */
      scheduleExpression?: string | null;
      /** Timezone the schedule expression is in. */
      scheduleTimezone?: string | null;
    };
    CheckCondition: {
      operator?: CheckConditionOperatorEnum | null;
      value?: string | null;
    };
    ClaimKey:
      | ({
          entry?: components["schemas"]["ClaimKeyEntry"];
          startDate?: string | null;
        } & {
          /** Date/time when claiming of licenses represented by this claim key ended successfully. */
          claimEndDate?: string | null;
          /** Date/time when claiming of licenses represented by this claim key started. */
          claimStartDate?: string | null;
          createdOn?: string | null;
          endDate?: string | null;
          expirationEmailState?: ClaimKeyExpirationEmailStateEnum | null;
          gracePeriodEndDate?: string | null;
          /** Masked claim code for redeemed claim keys. This field can be used for reference purposes. */
          maskedClaimCode?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          renewedByClaimKeyUuid?: string | null;
          /** Externally supplied request id to prevent creation of unnecessary claim keys due to reprocessing or bugs. Unnecessary claim keys are claim keys that are not tied to anything in the external system.  This property is unique for all claim keys. */
          requestId?: string | null;
          returnHistory?: components["schemas"]["ClaimKeyReturnEvent"][] | null;
          state?: ClaimKeyStateEnum | null;
          trial?: boolean | null;
          type?: ClaimKeyTypeEnum | null;
          updatedOn?: string | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    ClaimKeyEntry: {
      productQuantities?: { [key: string]: number | null } | null;
    } | null;
    ClaimKeyReturnEvent: {
      returnedProductQuantities?: { [key: string]: number | null } | null;
      timestamp?: string | null;
    };
    ClaimKeySearchFilter: {
      excludeUnclaimed?: boolean | null;
      excludedStates?: (ClaimKeySearchFilterExcludedStatesEnum | null)[] | null;
      includedStates?: (ClaimKeySearchFilterIncludedStatesEnum | null)[] | null;
    };
    Client: ClientEnum;
    ClimateActivityEventType:
      | ({
          climateThreshold?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    /** List of climate events for the sensor */
    ClimateEventType: {
      alertActivities?: components["schemas"]["ActivityEnum"][] | null;
      /** base 64 (url-safe) uuid string */
      baseStationUuid?: string | null;
      batteryPercentage?: number | null;
      /** base 64 (url-safe) uuid string */
      bleDeviceUuid?: string | null;
      bleRssi?: number | null;
      closeBaseStations?: (string | null)[] | null;
      co2?: number | null;
      ethanol?: number | null;
      heatIndexDegF?: number | null;
      heatIndexRangeWarning?: components["schemas"]["HeatIndexRangeWarningEnum"];
      humidity?: number | null;
      iaq?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pm25?: number | null;
      probeTempC?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tampered?: boolean | null;
      temp?: number | null;
      thcDetected?: boolean | null;
      thcPercent?: number | null;
      timestampMs?: number | null;
      tvoc?: number | null;
      vapeSmokeDetected?: boolean | null;
      vapeSmokePercent?: number | null;
    };
    /** List of climate policies using the schedule */
    ClimatePolicyType: {
      backoffAlertSecs?: { [key: string]: number | null } | null;
      defaultTriggers?: components["schemas"]["ClimateTriggerType"][] | null;
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["ClimateScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ClimateScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ClimateTriggerType"][] | null;
    };
    ClimateSettings: {
      alert_window_minutes?: number | null;
      smoke_ai_threshold?: number | null;
      thc_ai_threshold?: number | null;
      vape_ai_threshold?: number | null;
    };
    /** Update Sensor Climate settings */
    ClimateSettingsSelectiveUpdate: {
      alert_window_minutes?: number | null;
      smoke_ai_threshold?: number | null;
      thc_ai_threshold?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      vape_ai_threshold?: number | null;
    };
    ClimateTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      threshold?: number | null;
    };
    /** Request to delete an environmental gateway. */
    Climate_DeleteEnvironmentalGatewayWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Whether to mummify the gateway instead of deleting it */
      mummify?: boolean | null;
    };
    /** Response indicating the result of deleting an environmental gateway. */
    Climate_DeleteEnvironmentalGatewayWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the delete operation */
      responseStatus?: DeleteEnvironmentalGatewayWSResponseResponseStatusEnum | null;
    };
    /** Request to retrieve climate events for an environmental sensor. */
    Climate_GetClimateEventsForSensorWSRequest: {
      /** Timestamp in milliseconds after which events should be retrieved */
      createdAfterMs?: number | null;
      /** Timestamp in milliseconds before which events should be retrieved */
      createdBeforeMs?: number | null;
      /** Maximum number of events to return */
      limit?: number | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
    };
    /** Response containing climate events for an environmental sensor. */
    Climate_GetClimateEventsForSensorWSResponse: {
      /** List of climate events for the sensor */
      climateEvents?: components["schemas"]["ClimateEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve configuration for an environmental sensor. */
    Climate_GetClimateSensorConfigWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response containing configuration for an environmental sensor. */
    Climate_GetClimateSensorConfigWSResponse: {
      config?: components["schemas"]["IClimateUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve environmental gateway shadows. */
    Climate_GetEnvironmentalGatewayShadowsWSRequest: { [key: string]: unknown };
    /** Response containing environmental gateway shadows. */
    Climate_GetEnvironmentalGatewayShadowsWSResponse: {
      /** List of environmental gateway shadows */
      environmentalGatewayShadows?:
        | components["schemas"]["EnvironmentalGatewayShadowType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve events for an environmental gateway. */
    Climate_GetEventsForEnvironmentalGatewayWSRequest: {
      /** Timestamp in milliseconds after which events should be retrieved */
      createdAfterMs?: number | null;
      /** Timestamp in milliseconds before which events should be retrieved */
      createdBeforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      lastEvaluatedKey?: string | null;
      /** Maximum number of results to return per page */
      maxPageSize?: number | null;
    };
    /** Response containing events for an environmental gateway. */
    Climate_GetEventsForEnvironmentalGatewayWSResponse: {
      /** List of climate events for the environmental gateway */
      events?: components["schemas"]["E50ClimateEventType"][] | null;
      lastEvaluatedKey?: string | null;
    };
    /** Request to retrieve minimal climate state information for all environmental sensors. */
    Climate_GetMinimalClimateStatesWSRequest: { [key: string]: unknown };
    /** Response containing minimal climate state information for environmental sensors. */
    Climate_GetMinimalClimateStatesWSResponse: {
      /** List of minimal climate state information */
      climateStates?:
        | components["schemas"]["Climate_MinimalClimateStateType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve minimal environmental gateway states. */
    Climate_GetMinimalEnvironmentalGatewayStatesWSRequest: {
      [key: string]: unknown;
    };
    /** Response containing minimal environmental gateway states. */
    Climate_GetMinimalEnvironmentalGatewayStatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lastEvaluatedKey?: string | null;
      /** List of minimal environmental gateway states */
      minimalEnvironmentalGatewayStates?:
        | components["schemas"]["Climate_MinimalEnvironmentalGatewayStateType"][]
        | null;
    };
    /** Minimal climate state information for environmental sensors. */
    Climate_MinimalClimateStateType: {
      /** List of associated camera device facet UUIDs */
      associatedCameras?: (string | null)[] | null;
      /** Battery percentage of the environmental sensor */
      batteryPercent?: number | null;
      /** Whether the sensor is currently calibrating */
      calibrating?: boolean | null;
      /** base 64 (url-safe) uuid string */
      closestBaseStation?: string | null;
      /** CO2 measurement */
      co2?: number | null;
      /** Creation timestamp in milliseconds */
      createdAtMillis?: number | null;
      /** Ethanol measurement */
      ethanol?: number | null;
      /** Firmware version */
      firmwareVersion?: string | null;
      /** Floor number */
      floorNumber?: number | null;
      /** Health status enumeration for climate sensors. */
      health?: MinimalClimateStateHealthEnum | null;
      /** Detailed health status enumeration for climate sensors. */
      healthDetails?: MinimalClimateStateHealthDetailsEnum | null;
      /** Heat index in degrees Fahrenheit */
      heatIndexDegF?: number | null;
      heatIndexRangeWarning?: components["schemas"]["HeatIndexRangeWarningEnum"];
      /** Relative humidity percentage */
      humidity?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** Indoor Air Quality index */
      iaq?: number | null;
      /** Last seen timestamp in seconds */
      lastSeenSec?: number | null;
      /** Latitude coordinate */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate */
      longitude?: number | null;
      /** Name of the environmental sensor */
      name?: string | null;
      /** PM2.5 particulate matter measurement */
      pm25?: number | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Whether the probe is connected */
      probeConnected?: boolean | null;
      /** Temperature probe measurement in Celsius */
      probeTempC?: number | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
      /** Serial number of the environmental sensor */
      serialNumber?: string | null;
      /** Signal strength of the environmental sensor */
      signalStrength?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Temperature in Celsius */
      temperatureCelcius?: number | null;
      /** THC percentage measurement */
      thcPercent?: number | null;
      /** Total Volatile Organic Compounds (TVOC) measurement */
      tvoc?: number | null;
      /** Vape percentage measurement */
      vapePercent?: number | null;
    };
    /** Minimal environmental gateway state information. */
    Climate_MinimalEnvironmentalGatewayStateType: {
      /** List of detected activities */
      activities?: components["schemas"]["ActivityEnum"][] | null;
      /** Air quality index value */
      airQualityIndex?: number | null;
      airQualityIndexPollutant?: components["schemas"]["AirQualityIndexPollutantEnum"];
      /** List of alert triggers */
      alertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      /** List of associated camera device facet UUIDs */
      associatedCameras?: (string | null)[] | null;
      /** Whether the gateway is currently calibrating */
      calibrating?: boolean | null;
      /** Formaldehyde measurement in parts per billion */
      ch2oPpb?: number | null;
      /** CO2 measurement in parts per million */
      co2Ppm?: number | null;
      /** Carbon monoxide concentration */
      coConcentration?: number | null;
      /** Whether the gateway is connected */
      connected?: boolean | null;
      /** Creation timestamp in milliseconds */
      createdAtMillis?: number | null;
      /** Default interface MAC address */
      defaultInterfaceMac?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** External IP address */
      externalIPAddress?: string | null;
      /** False positive confidence percentage */
      falsePositiveConfidencePercent?: number | null;
      /** Firmware version */
      firmwareVersion?: string | null;
      /** Floor number */
      floorNumber?: number | null;
      healthDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      /** Heat index in degrees Fahrenheit */
      heatIndexDegF?: number | null;
      heatIndexRangeWarning?: components["schemas"]["HeatIndexRangeWarningEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** Indoor Air Quality index */
      iaq?: number | null;
      /** List of LAN IP addresses */
      lanAddresses?: (string | null)[] | null;
      /** Latitude coordinate */
      latitude?: number | null;
      /** Whether a leak is detected */
      leakDetected?: boolean | null;
      /** Whether leak probe is present */
      leakProbePresent?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate */
      longitude?: number | null;
      /** Name of the environmental gateway */
      name?: string | null;
      /** Number concentration 0.5 measurement */
      nc0p5?: number | null;
      /** Number concentration 10.0 measurement */
      nc10p0?: number | null;
      /** Number concentration 1.0 measurement */
      nc1p0?: number | null;
      /** Number concentration 2.5 measurement */
      nc2p5?: number | null;
      /** Number concentration 4.0 measurement */
      nc4p0?: number | null;
      /** Nitrogen Oxides index */
      noxIdx?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** PM10.0 particulate matter measurement */
      pm10p0?: number | null;
      /** PM1.0 particulate matter measurement */
      pm1p0?: number | null;
      /** PM2.5 particulate matter measurement */
      pm2p5?: number | null;
      /** PM4.0 particulate matter measurement */
      pm4p0?: number | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Pressure measurement */
      pressure?: number | null;
      /** Temperature probe measurement in Celsius */
      probeTempC?: number | null;
      /** Relative humidity percentage */
      relHumid?: number | null;
      /** Serial number of the environmental gateway */
      serialNumber?: string | null;
      /** Smoke detection confidence percentage */
      smokeConfidencePercent?: number | null;
      /** Smoke tobacco detection confidence percentage */
      smokeTobaccoConfidencePercent?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Temperature in Celsius */
      tempC?: number | null;
      /** Whether temperature probe is present */
      tempProbePresent?: boolean | null;
      /** Timestamp in milliseconds */
      timestampMs?: number | null;
      /** Typical particle size measurement */
      typPartSize?: number | null;
      /** Vape detection confidence percentage */
      vapeConfidencePercent?: number | null;
      /** Whether vape is detected */
      vapeDetected?: boolean | null;
      /** Vape THC detection confidence percentage */
      vapeThcConfidencePercent?: number | null;
      /** Volatile Organic Compounds index */
      vocIdx?: number | null;
    };
    /** Request to reboot an environmental gateway. */
    Climate_RebootEnvironmentalGatewayWSRequest: {
      /** base 64 (url-safe) uuid string */
      environmentalGatewayUuid?: string | null;
    };
    /** Request to update details for an environmental sensor. */
    Climate_UpdateClimateSensorDetailsWSRequest: {
      /** List of associated camera device facet UUIDs */
      associatedCameras?: (string | null)[] | null;
      associatedCamerasUpdated?: boolean | null;
      /** Whether the environmental sensor is deleted */
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      /** Description of the environmental sensor */
      description?: string | null;
      descriptionUpdated?: boolean | null;
      /** Floor number where the environmental sensor is located */
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      /** Latitude coordinate of the environmental sensor */
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      /** Longitude coordinate of the environmental sensor */
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      /** Name of the environmental sensor */
      name?: string | null;
      nameUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response indicating the result of updating environmental sensor details. */
    Climate_UpdateClimateSensorDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to update details for an environmental gateway. */
    Climate_UpdateEnvironmentalGatewayDetailsWSRequest: {
      /** List of associated camera device facet UUIDs */
      associatedCameras?: (string | null)[] | null;
      /** Whether the associated cameras have been updated */
      associatedCamerasUpdated?: boolean | null;
      /** Whether the environmental gateway is deleted */
      deleted?: boolean | null;
      /** Whether the deleted status has been updated */
      deletedUpdated?: boolean | null;
      /** Description of the environmental gateway */
      description?: string | null;
      /** Whether the description has been updated */
      descriptionUpdated?: boolean | null;
      /** Floor number where the environmental gateway is located */
      floorNumber?: number | null;
      /** Whether the floor number has been updated */
      floorNumberUpdated?: boolean | null;
      /** Latitude coordinate of the environmental gateway */
      latitude?: number | null;
      /** Whether the latitude has been updated */
      latitudeUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Whether the location UUID has been updated */
      locationUuidUpdated?: boolean | null;
      /** Longitude coordinate of the environmental gateway */
      longitude?: number | null;
      /** Whether the longitude has been updated */
      longitudeUpdated?: boolean | null;
      /** Name of the environmental gateway */
      name?: string | null;
      /** Whether the name has been updated */
      nameUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Whether the policy UUID has been updated */
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Whether the sub-locations hierarchy key has been updated */
      subLocationsHierarchyKeyUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response indicating the result of updating environmental gateway details. */
    Climate_UpdateEnvironmentalGatewayDetailsWSResponse: {
      [key: string]: unknown;
    };
    ClipAccessSettings: {
      allowedUsers?: (string | null)[] | null;
      visibility?: components["schemas"]["ClipVisibility"];
    };
    /** List of bounding boxes for the clip */
    ClipBoundingBoxType: {
      activity?: components["schemas"]["ActivityEnum"];
      alert?: boolean | null;
      bottom?: number | null;
      confidence?: number | null;
      croppedImageLocator?: string | null;
      customActivityColor?: ClipBoundingBoxCustomActivityColorEnum | null;
      customActivityDescription?: string | null;
      customActivityDisplayName?: string | null;
      faceName?: string | null;
      inMotion?: boolean | null;
      keypointsV2?: {
        [key: string]: components["schemas"]["PointType"];
      } | null;
      left?: number | null;
      licensePlate?: string | null;
      loudness?: number | null;
      objectId?: number | null;
      pose?: string | null;
      relativeSecond?: number | null;
      right?: number | null;
      sensorValType?: components["schemas"]["SensorValType"];
      toastOrderIdInfo?: components["schemas"]["ToastOrderIdType"];
      top?: number | null;
      unidentifiedFaceId?: string | null;
      vehicleName?: string | null;
    };
    /** List of clip groups for the organization */
    ClipGroupType: {
      clips?: components["schemas"]["SharedClipV2Type"][] | null;
      createdAtMillis?: number | null;
      description?: string | null;
      isShared?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      sharedGroups?: (string | null)[] | null;
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Detailed information about the clip group */
    ClipGroupWithDetailsType: {
      clips?: components["schemas"]["SharedClipWithDetailsType"][] | null;
      createdAtMillis?: number | null;
      description?: string | null;
      isShared?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      sharedGroups?: (string | null)[] | null;
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ClipMetaDataType: {
      activitySeekPoints?: { [key: string]: (number | null)[] | null } | null;
      activitySeekPointsV2?:
        | components["schemas"]["ClipSeekPointType"][]
        | null;
      activitySeekPointsV3?:
        | components["schemas"]["ClipSeekPointV2Type"][]
        | null;
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      durationSec?: number | null;
      mGrids?: (string | null)[] | null;
      soundSignificantLufs?: (number | null)[] | null;
      startTime?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      thumbnailLocationV2?: string | null;
    };
    ClipSeekPointType: {
      activity?: components["schemas"]["ActivityEnum"];
      alert?: boolean | null;
      bottom?: number | null;
      faceName?: string | null;
      keypointsV2?: {
        [key: string]: components["schemas"]["PointType"];
      } | null;
      left?: number | null;
      licensePlate?: string | null;
      pose?: string | null;
      relativeSecond?: number | null;
      right?: number | null;
      top?: number | null;
      unidentifiedFaceId?: string | null;
      vehicleName?: string | null;
    };
    /** List of seek points for the clip */
    ClipSeekPointV2Type: {
      activity?: components["schemas"]["ActivityEnum"];
      alert?: boolean | null;
      customActivityColor?: ClipSeekPointV2CustomActivityColorEnum | null;
      customActivityDescription?: string | null;
      customActivityDisplayName?: string | null;
      dcao?: boolean | null;
      faceName?: string | null;
      id?: number | null;
      inMotion?: boolean | null;
      licensePlate?: string | null;
      loudness?: number | null;
      pose?: string | null;
      relativeSecond?: number | null;
      sensorValType?: components["schemas"]["SensorValType"];
      toastOrderIdInfo?: components["schemas"]["ToastOrderIdType"];
      tu?: string | null;
      unidentifiedFaceId?: string | null;
      vehicleName?: string | null;
    };
    /** Visibility setting for the clip */
    ClipVisibility: ClipVisibilityEnum;
    CloudArchivingStrategy: CloudArchivingStrategyEnum;
    Co2SensorType: {
      co2Ppm?: number | null;
      relHumid?: number | null;
      tempC?: number | null;
      timestampSec?: number | null;
    };
    /** Request to calibrate floorplan projection for a device. */
    Common_devices_CalibrateFloorplanProjectionWSRequest: {
      /** List of camera image points in permyriad coordinates */
      cameraImagePointsPermyriad?: ((number | null)[] | null)[] | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** List of floorplan image points in permyriad coordinates */
      floorplanImagePointsPermyriad?: ((number | null)[] | null)[] | null;
    };
    /** Response containing the calibrated floorplan projection homography. */
    Common_devices_CalibrateFloorplanProjectionWSResponse: {
      /** 3x3 homography matrix for floorplan projection */
      homography?: ((number | null)[] | null)[] | null;
    };
    Common_devices_GetBoundingBoxesWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      durationSecs?: number | null;
      startTimeSec?: number | null;
    };
    Common_devices_GetBoundingBoxesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageBoundingBoxes?:
        | components["schemas"]["FootageBoundingBoxType"][]
        | null;
    };
    Common_devices_GetCameraOrDoorbellCameraSeekpointsWSRequest: {
      activitySet?: components["schemas"]["ActivityEnum"][] | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      durationSecs?: number | null;
      includeAnyMotion?: boolean | null;
      seekpointDurationIntervalSecs?: number | null;
      startTimeSec?: number | null;
    };
    Common_devices_GetFullDeviceStateWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      force?: boolean | null;
    };
    Common_devices_GetMediaUrisWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
    };
    Common_devices_GetMinimalDeviceStateListWSRequest: {
      includeMummified?: boolean | null;
    };
    /** Request to get stored video information for a device. */
    Common_devices_GetPresenceWindowsWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Duration in seconds */
      durationSec?: number | null;
      /** Start time in seconds since epoch */
      startTimeSec?: number | null;
    };
    /** Response containing stored video information for a device. */
    Common_devices_GetPresenceWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of presence types to their time windows */
      presenceWindows?: {
        [key: string]: components["schemas"]["TimeWindowSeconds"][] | null;
      } | null;
    };
    /** General seekpoints search request parameters */
    Common_devices_GetSeekpointsWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      durationSecs?: number | null;
      includeAnyMotion?: boolean | null;
      startTimeSec?: number | null;
    };
    Common_devices_GetSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
    };
    /** Request to get uptime information for a device. */
    Common_devices_GetUptimeWindowsWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** End time in milliseconds since epoch */
      endTimeMs?: number | null;
      /** Start time in milliseconds since epoch */
      startTimeMs?: number | null;
    };
    /** Response containing uptime information for a device. */
    Common_devices_GetUptimeWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of uptime windows for the device */
      uptimeWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
    };
    /** Response indicating the result of rebooting a device. */
    Common_devices_RebootDeviceWSResponse: {
      /** Result of the reboot operation */
      result?: RebootDeviceWSResponseResultEnum | null;
    };
    /** Response indicating the result of updating device configuration. */
    Common_devices_UpdateConfigWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Common_devices_UpdateDeviceDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to create a raw HTTP stream for a device. */
    Common_devices_rawstream_CreateRawHttpStreamWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** Name for the raw stream */
      rawStreamName?: string | null;
      streamType?: components["schemas"]["StreamTypeEnum"];
    };
    /** Response containing raw HTTP stream URLs for a device. */
    Common_devices_rawstream_CreateRawHttpStreamWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** LAN audio URL for the raw stream */
      lanAudioUrl?: string | null;
      /** LAN low resolution video URL for the raw stream */
      lanVideoLowResUrl?: string | null;
      /** LAN video URL for the raw stream */
      lanVideoUrl?: string | null;
    };
    /** Request to delete raw HTTP streams for a device. */
    Common_devices_rawstream_DeleteRawHttpStreamWSRequest: {
      /** Custom path part to identify specific stream */
      customPathPart?: string | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
    };
    /** Response indicating the result of deleting raw HTTP streams. */
    Common_devices_rawstream_DeleteRawHttpStreamWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request to retrieve all raw HTTP streams. */
    Common_devices_rawstream_FindAllRawHttpStreamsWSRequest: {
      [key: string]: unknown;
    };
    /** Response containing all raw HTTP streams. */
    Common_devices_rawstream_FindAllRawHttpStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of all raw HTTP streams */
      rawHttpStreams?:
        | components["schemas"]["Common_devices_rawstream_LanSpecificRawStreamType"][]
        | null;
    };
    /** Request to retrieve raw HTTP streams for a device. */
    Common_devices_rawstream_GetRawHttpStreamsWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
    };
    /** Response containing raw HTTP streams for a device. */
    Common_devices_rawstream_GetRawHttpStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of raw HTTP streams */
      rawHttpStreams?:
        | components["schemas"]["Common_devices_rawstream_LanSpecificRawStreamType"][]
        | null;
    };
    /** List of raw HTTP streams */
    Common_devices_rawstream_LanSpecificRawStreamType: {
      audioPath?: string | null;
      createdAtMs?: number | null;
      createdBy?: string | null;
      customPathPart?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      lanAudioUrl?: string | null;
      lanVideoLowResUrl?: string | null;
      lanVideoUrl?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      streamType?: components["schemas"]["StreamTypeEnum"];
      videoLowResPath?: string | null;
      videoPath?: string | null;
    };
    ComponentBaseEnumType: ComponentBaseEnumType;
    ComponentCompositeEnumType: ComponentCompositeEnumType;
    ComponentCompositeEnumType_Minimal: ComponentCompositeEnumType_Minimal;
    ComponentCompositeEventOriginator:
      | ({
          componentCompositeName?: string | null;
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          correlationId?: string | null;
          /** base 64 (url-safe) uuid string */
          eventUuid?: string | null;
          originator?: components["schemas"]["BaseEventOriginator"];
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    ComponentCompositeShadowEnum: ComponentCompositeShadowEnum;
    ComponentEnumType: ComponentEnumType;
    /** Limits results to only contain the specified type of events, if applicable */
    ComponentEventEnumType: ComponentEventEnumType;
    /** List of component events for the doorbell camera */
    ComponentEventType: (
      | components["schemas"]["DoorbellEventType"]
      | components["schemas"]["DoorReaderStateChangeEventType"]
      | components["schemas"]["DoorRelayStateChangeEventType"]
      | components["schemas"]["DoorPositionIndicatorStateChangeEventType"]
      | components["schemas"]["RequestToExitStateChangeEventType"]
      | components["schemas"]["CredentialReceivedEventType"]
      | components["schemas"]["ButtonEventType"]
      | components["schemas"]["GenericInputStateChangeEventType"]
      | components["schemas"]["GenericRelayStateChangeEventType"]
      | components["schemas"]["AccessControlUnitTamperEventType"]
      | components["schemas"]["AccessControlUnitLocationLockdownStateEventType"]
      | components["schemas"]["DoorLocationLockdownStateEventType"]
      | components["schemas"]["PanicButtonEventType"]
      | components["schemas"]["AccessControlUnitBatteryStateChangeEventType"]
      | components["schemas"]["WaveToUnlockIntentExpiredEvent"]
      | components["schemas"]["DoorStateChangeEvent"]
      | components["schemas"]["DoorAuthFirstInStateEvent"]
      | components["schemas"]["DoorScheduleFirstInStateEvent"]
      | components["schemas"]["AccessControlUnitDoorFirstInStateEvent"]
      | components["schemas"]["AperioDtcEvent"]
      | components["schemas"]["AperioDoorExtensionStateEvent"]
      | components["schemas"]["AperioActivatorStateEvent"]
      | components["schemas"]["AperioDoorModeEvent"]
      | components["schemas"]["AperioDoorHandleStateEvent"]
      | components["schemas"]["AperioKeyCylinderStateEvent"]
    ) & {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      correlationId?: string | null;
      createdAtMs?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      timestampMs?: number | null;
      type?: components["schemas"]["ComponentEventEnumType"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ComponentReferenceType: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    ComponentReferenceType_Minimal: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    ComponentRelayOutputType: ComponentRelayOutputTypeEnum;
    /** List of component seekpoints for the doorbell camera */
    ComponentSeekPointType: {
      activity?: components["schemas"]["ActivityEnum"];
      /** base 64 (url-safe) uuid string */
      componentCompositeUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      customActivityColor?: ComponentSeekPointCustomActivityColorEnum | null;
      customActivityDescription?: string | null;
      customActivityDisplayName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      originalEvent?: { [key: string]: unknown } | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      timestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ComponentShadowEnumType: ComponentShadowEnumType;
    ComponentShadowType: (
      | components["schemas"]["DoorReaderShadowType"]
      | components["schemas"]["DoorRelayShadowType"]
      | components["schemas"]["DoorPositionIndicatorShadowType"]
      | components["schemas"]["RequestToExitShadowType"]
      | components["schemas"]["GenericInputShadowType"]
      | components["schemas"]["IntegratedDoorRelayType"]
      | components["schemas"]["GenericRelayShadowType"]
      | components["schemas"]["GenericButtonShadowType"]
      | components["schemas"]["AperioGatewayShadow"]
      | components["schemas"]["AperioDoorExtensionShadow"]
    ) & {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      createdAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      type?: components["schemas"]["ComponentShadowEnumType"];
      updatedAtMillis?: number | null;
    };
    Component_AddAccessControlledDoorLabelWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      label?: string | null;
    };
    Component_AddAccessControlledDoorLabelWSResponse: {
      [key: string]: unknown;
    };
    Component_AggregatedCredentialReceivedEventInfo: {
      firstEvent?: components["schemas"]["CredentialReceivedEventType"];
      lastEvent?: components["schemas"]["CredentialReceivedEventType"];
      totalCount?: number | null;
    };
    /** Door state overrides are temporary changes to door's lock/unlock state even if otherwise scheduled. They can be superseded or cancelled at anytime. */
    Component_ApplyAccessControlledDoorStateOverrideWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid: string | null;
      doorAuthFirstInState?: components["schemas"]["FirstInStatus"];
      doorScheduleFirstInState?: components["schemas"]["FirstInStatus"];
      expireEarlyMode?: components["schemas"]["EarlyExpireModeEnum"];
      /** A millisecond epoch time that represents when the override will end if not ended earlier by a regular schedule interval. Cannot be longer than 24 hours and default is 24hours long */
      expiresAtMillis?: number | null;
      /** Default is false if not specified, the door state override will ignore schedule first-in requirements (if applicable) if false */
      followFirstInRules?: boolean | null;
      /** Default is 0 if not specified, determines how long to wait before applying the override */
      startDelaySeconds?: number | null;
      state: components["schemas"]["AccessControlledDoorStateEnumType"];
    };
    Component_ApplyAccessControlledDoorStateOverrideWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
    };
    Component_CancelAccessControlledDoorStateOverrideWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid: string | null;
    };
    Component_CancelAccessControlledDoorStateOverrideWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
    };
    Component_CreateAccessControlledDoorSeekpointsWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
      seekPoints?: components["schemas"]["CustomFootageSeekPointType"][] | null;
    };
    Component_CreateAccessControlledDoorSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      successMsg?: string | null;
    };
    Component_CreateAccessControlledDoorWSRequest: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
      accessControlledDoorLabels?: (string | null)[] | null;
    };
    Component_CreateAccessControlledDoorWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** The Aperio-assigned ID of the door(s) and the Aperio-assigned ID of their lock device. */
    Component_CreateAperioDoorInfo: {
      aperioDoorDeviceId?: string | null;
      aperioDoorId?: string | null;
    };
    Component_CreateAperioDoorsWSRequest: {
      /** base 64 (url-safe) uuid string */
      aperioGatewayComponentId: string | null;
      /** The Aperio-assigned ID of the door(s) and the Aperio-assigned ID of their lock device. */
      doors: components["schemas"]["Component_CreateAperioDoorInfo"][] | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid: string | null;
    };
    Component_CreateAperioDoorsWSResponse: {
      doors?: components["schemas"]["AccessControlledDoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      failedDoors?: components["schemas"]["AccessControlledDoorType"][] | null;
    };
    Component_CreateAperioGatewayWSRequest: {
      /** The Aperio-assigned ID of the gateway, given as a hex string, e.g. "034AB5". */
      aperioGatewayId: string | null;
      /** If enabled, also creates Aperio doors with this request. */
      includeAperioDoors?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid: string | null;
    };
    Component_CreateAperioGatewayWSResponse: {
      component?: components["schemas"]["AperioGateway"];
      doors?: components["schemas"]["AccessControlledDoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      failedDoors?: components["schemas"]["AccessControlledDoorType"][] | null;
    };
    Component_CreateIntegratedDoorPositionIndicatorWSRequest: {
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["DoorPositionIndicatorPortType"];
    };
    Component_CreateIntegratedDoorPositionIndicatorWSResponse: {
      component?: components["schemas"]["IntegratedDoorPositionIndicatorType"];
    };
    Component_CreateIntegratedDoorRelayWSRequest: {
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["DoorRelayPortType"];
    };
    Component_CreateIntegratedDoorRelayWSResponse: {
      component?: components["schemas"]["IntegratedDoorRelayType"];
    };
    Component_CreateIntegratedGenericButtonWSRequest: {
      mode?: components["schemas"]["ButtonModeEnum"];
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["ButtonPortType"];
    };
    Component_CreateIntegratedGenericButtonWSResponse: {
      component?: components["schemas"]["IntegratedGenericButtonType"];
    };
    Component_CreateIntegratedGenericInputWSRequest: {
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["AuxiliaryInputPortType"];
    };
    Component_CreateIntegratedGenericInputWSResponse: {
      component?: components["schemas"]["IntegratedGenericInputType"];
    };
    Component_CreateIntegratedGenericRelayWSRequest: {
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["AuxiliaryRelayPortType"];
      steadyState?: components["schemas"]["GenericRelayStateEnumType"];
    };
    Component_CreateIntegratedGenericRelayWSResponse: {
      component?: components["schemas"]["IntegratedGenericRelayType"];
    };
    Component_CreateIntegratedRequestToExitWSRequest: {
      intentOnly?: boolean | null;
      intentOnlyEvents?: boolean | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["RequestToExitPortType"];
    };
    Component_CreateIntegratedRequestToExitWSResponse: {
      component?: components["schemas"]["IntegratedRequestToExitType"];
    };
    Component_CreateOsdpReaderWSRequest: {
      allowUnencrypted?: boolean | null;
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["OsdpReaderPortType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
    };
    Component_CreateOsdpReaderWSResponse: {
      component?: components["schemas"]["OsdpDoorReaderType"];
    };
    Component_CreateRhombusOsdpReaderWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      disableCardReader?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["OsdpReaderPortType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
    };
    Component_CreateRhombusOsdpReaderWSResponse: {
      component?: components["schemas"]["RhombusOsdpDoorReaderType"];
    };
    Component_CreateWiegandReaderWSRequest: {
      buzzerPort?: components["schemas"]["WiegandOutputPortType"];
      d0Port?: components["schemas"]["WiegandDataPortType"];
      d1Port?: components["schemas"]["WiegandDataPortType"];
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      gledPort?: components["schemas"]["WiegandOutputPortType"];
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      rledPort?: components["schemas"]["WiegandOutputPortType"];
      tamperPort?: components["schemas"]["WiegandInputPortType"];
    };
    Component_CreateWiegandReaderWSResponse: {
      component?: components["schemas"]["WiegandDoorReaderType"];
    };
    Component_DeleteAccessControlledDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
    };
    Component_DeleteAccessControlledDoorWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
    };
    Component_DeleteComponentWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
    };
    Component_DeleteComponentWSResponse: { [key: string]: unknown };
    Component_DeleteComponentsByOwnerDeviceWSRequest: {
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
    };
    Component_DeleteComponentsByOwnerDeviceWSResponse: {
      [key: string]: unknown;
    };
    Component_FindAccessControlledDoorShadowsByLocationWSRequest: {
      lastEvaluatedKey?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindAccessControlledDoorShadowsByLocationWSResponse: {
      lastEvaluatedKey?: string | null;
      shadows?: components["schemas"]["AccessControlledDoorShadow"][] | null;
    };
    Component_FindAccessControlledDoorShadowsWSRequest: {
      lastEvaluatedKey?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindAccessControlledDoorShadowsWSResponse: {
      lastEvaluatedKey?: string | null;
      shadows?: components["schemas"]["AccessControlledDoorShadow"][] | null;
    };
    Component_FindAccessControlledDoorsByLocationWSRequest: {
      lastEvaluatedKey?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindAccessControlledDoorsByLocationWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["AccessControlledDoorType"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Component_FindAccessControlledDoorsByOwnerDeviceWSRequest: {
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
    };
    Component_FindAccessControlledDoorsByOwnerDeviceWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["AccessControlledDoorType"][]
        | null;
    };
    Component_FindAccessControlledDoorsWSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindAccessControlledDoorsWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["AccessControlledDoorType"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Component_FindAllComponentShadowsWSRequest: {
      componentUuids?: (string | null)[] | null;
    };
    Component_FindAllComponentShadowsWSResponse: {
      acuComponentShadowMap?: {
        [key: string]: components["schemas"]["ComponentShadowType"];
      } | null;
    };
    Component_FindComponentEventsByAccessControlledDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByAccessControlledDoorWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Component_FindComponentEventsByApiTokenWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      /** base 64 (url-safe) uuid string */
      tokenUuid?: string | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByApiTokenWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByComponentWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByComponentWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByCorrelationWSRequest: {
      correlationId?: string | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByCorrelationWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByCredentialHexValueWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      credentialHexValue?: string | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByCredentialHexValueWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByCredentialUuidWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByCredentialUuidWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByCredentialValueWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      credentialValue?: string | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByCredentialValueWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByLocationWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByLocationWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByOwnerDeviceWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByOwnerDeviceWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsBySupportAuthorityWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      /** base 64 (url-safe) uuid string */
      supportAuthorityUuid?: string | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsBySupportAuthorityWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByUserWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    Component_FindComponentEventsByUserWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsForCurrentUserWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsForCurrentUserWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsForOrgDashboardWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      reverseSearch?: boolean | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsForOrgDashboardWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsForVideoIntercomWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
      /** base 64 (url-safe) uuid string */
      videoIntercomUuid?: string | null;
    };
    Component_FindComponentEventsForVideoIntercomWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Component seekpoints search for access controlled door */
    Component_FindComponentSeekPointsByAccessControlledDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      durationSec?: number | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByAccessControlledDoorWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    /** Component seekpoints search for access controlled doors */
    Component_FindComponentSeekPointsByAccessControlledDoorsWSRequest: {
      accessControlledDoorUuidList?: (string | null)[] | null;
      durationSec?: number | null;
      sortResponse?: boolean | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByAccessControlledDoorsWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentSeekPointsByComponentWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      durationSec?: number | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByComponentWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentSeekPointsByLocationWSRequest: {
      durationSec?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByLocationWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    /** Component seekpoints search for owner device */
    Component_FindComponentSeekPointsByOwnerDeviceWSRequest: {
      durationSec?: number | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByOwnerDeviceWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentSeekPointsByUserWSRequest: {
      durationSec?: number | null;
      startTimeSecEpochExclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    Component_FindComponentSeekPointsByUserWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentShadowsByOwnerDeviceWSRequest: {
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
    };
    Component_FindComponentShadowsByOwnerDeviceWSResponse: {
      componentShadows?: components["schemas"]["ComponentShadowType"][] | null;
    };
    Component_FindComponentsByOwnerDeviceWSRequest: {
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
    };
    Component_FindComponentsByOwnerDeviceWSResponse: {
      components?: components["schemas"]["BaseComponentType"][] | null;
    };
    Component_FindDistinctOriginatorCredentialReceivedEventsByAccessControlledDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      activityFilter?: components["schemas"]["ActivityEnum"][] | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      credSourceFilter?:
        | components["schemas"]["CredentialSourceEnumType"][]
        | null;
      originatorTypeFilter?:
        | components["schemas"]["EventOriginatorEnum"][]
        | null;
      userFilter?: (string | null)[] | null;
    };
    Component_FindDistinctOriginatorCredentialReceivedEventsByAccessControlledDoorWSResponse: {
      events?:
        | components["schemas"]["Component_AggregatedCredentialReceivedEventInfo"][]
        | null;
    };
    Component_FindDistinctOriginatorCredentialReceivedEventsByLocationWSRequest: {
      activityFilter?: components["schemas"]["ActivityEnum"][] | null;
      componentCompositeFilter?: (string | null)[] | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      credSourceFilter?:
        | components["schemas"]["CredentialSourceEnumType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      originatorTypeFilter?:
        | components["schemas"]["EventOriginatorEnum"][]
        | null;
      userFilter?: (string | null)[] | null;
    };
    Component_FindDistinctOriginatorCredentialReceivedEventsByLocationWSResponse: {
      events?:
        | components["schemas"]["Component_AggregatedCredentialReceivedEventInfo"][]
        | null;
    };
    Component_FindMinimalStateAccessControlledDoorsByLocationWSRequest: {
      lastEvaluatedKey?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindMinimalStateAccessControlledDoorsByLocationWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["Component_MinimalStateAccessControlledDoor"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Component_FindMinimalStateAccessControlledDoorsWSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindMinimalStateAccessControlledDoorsWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["Component_MinimalStateAccessControlledDoor"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Component_GetAccessControlledDoorLabelsForOrgWSRequest: {
      [key: string]: unknown;
    };
    Component_GetAccessControlledDoorLabelsForOrgWSResponse: {
      accessControlledDoorLabels?: {
        [key: string]: (string | null)[] | null;
      } | null;
    };
    /** Determines the expected door state based on the current time and current door configuration */
    Component_GetCurrentExpectedAccessControlledDoorStateWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid: string | null;
    };
    Component_GetCurrentExpectedAccessControlledDoorStateWSResponse: {
      activeDoorState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      activeDoorStateSource?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      defaultDoorStateSource?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      defaultState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      doorStateIfFirstInRequired?: components["schemas"]["AccessControlledDoorStateEnumType"];
      doorStateIfFirstInSatisfied?: components["schemas"]["AccessControlledDoorStateEnumType"];
      doorStateSourceIfFirstInRequired?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      doorStateSourceIfFirstInSatisfied?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      firstInRequirementEnabled?: boolean | null;
      firstInRequirementSatisfied?: boolean | null;
      nextNearestSchedule?: components["schemas"]["Schedule_AccessControlledDoorNextNearestSchedule"];
    };
    Component_GetFullAccessControlledDoorShadowWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
    };
    Component_GetFullAccessControlledDoorShadowWSResponse: {
      doorComponentShadowMap?: {
        [key: string]: components["schemas"]["ComponentShadowType"];
      } | null;
      doorShadow?: components["schemas"]["AccessControlledDoorShadow"];
    };
    Component_GetOrCreateDevicePhysicalPortConfigWSRequest: {
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
    };
    Component_GetOrCreateDevicePhysicalPortConfigWSResponse: {
      detectedInvalidPortConfigs?:
        | components["schemas"]["InvalidPhysicalPortConfigType"][]
        | null;
      deviceComponents?: components["schemas"]["BaseComponentType"][] | null;
      devicePhysicalPortConfig?: components["schemas"]["DevicePhysicalPortConfigType"];
    };
    Component_MinimalStateAccessControlledDoor: {
      door?: components["schemas"]["AccessControlledDoorType"];
      shadow?: components["schemas"]["AccessControlledDoorShadow"];
    };
    Component_RemoveAccessControlledDoorLabelWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      label?: string | null;
    };
    Component_RemoveAccessControlledDoorLabelWSResponse: {
      [key: string]: unknown;
    };
    Component_UpdateAccessControlledDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      ajarTimeSec?: number | null;
      associatedCameras?: (string | null)[] | null;
      associatedFaceDetectionCameras?: (string | null)[] | null;
      defaultState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      directionRadians?: number | null;
      doorStateToScheduleUuidMap?: { [key: string]: string | null } | null;
      dpiComponents?: components["schemas"]["ComponentReferenceType"][] | null;
      floorNumber?: number | null;
      forceAllReadersFirstInAuthRequiredLedFeedbackEnabled?: boolean | null;
      forceAllReadersFirstInUnlockPendingLedFeedbackEnabled?: boolean | null;
      forceAllReadersOtherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      forceAllReadersRemoteUnlockAudioFeedbackEnabled?: boolean | null;
      forcedOpenEnabled?: boolean | null;
      forcedOpenTimeSec?: number | null;
      geofenceEnabled?: boolean | null;
      geofenceRadius?: number | null;
      latitude?: number | null;
      longitude?: number | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      proximityUnlockSettings?: components["schemas"]["ProximityUnlockSettingsType"];
      readerComponents?:
        | components["schemas"]["ComponentReferenceType"][]
        | null;
      relayComponents?:
        | components["schemas"]["ComponentReferenceType"][]
        | null;
      relockAfterOpenTimeMs?: number | null;
      remoteUnlockEnabled?: boolean | null;
      rexComponents?: components["schemas"]["ComponentReferenceType"][] | null;
      unlockTimeSec?: number | null;
      unlockTimeSecRex?: number | null;
      waveToUnlockSettings?: components["schemas"]["WaveToUnlockSettingsType"];
    };
    Component_UpdateAccessControlledDoorWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Component_UpdateIntegratedDoorPositionIndicatorWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      port?: components["schemas"]["DoorPositionIndicatorPortType"];
    };
    Component_UpdateIntegratedDoorPositionIndicatorWSResponse: {
      component?: components["schemas"]["IntegratedDoorPositionIndicatorType"];
    };
    Component_UpdateIntegratedDoorRelayWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      name?: string | null;
      port?: components["schemas"]["DoorRelayPortType"];
    };
    Component_UpdateIntegratedDoorRelayWSResponse: {
      component?: components["schemas"]["IntegratedDoorRelayType"];
    };
    Component_UpdateIntegratedGenericButtonWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      mode?: components["schemas"]["ButtonModeEnum"];
      name?: string | null;
      port?: components["schemas"]["ButtonPortType"];
    };
    Component_UpdateIntegratedGenericButtonWSResponse: {
      component?: components["schemas"]["IntegratedGenericButtonType"];
    };
    Component_UpdateIntegratedGenericInputWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      port?: components["schemas"]["AuxiliaryInputPortType"];
    };
    Component_UpdateIntegratedGenericInputWSResponse: {
      component?: components["schemas"]["IntegratedGenericInputType"];
    };
    Component_UpdateIntegratedGenericRelaySteadyStateWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      steadyState?: components["schemas"]["GenericRelayStateEnumType"];
    };
    Component_UpdateIntegratedGenericRelaySteadyStateWSResponse: {
      component?: components["schemas"]["IntegratedGenericRelayType"];
    };
    Component_UpdateIntegratedGenericRelayTransientStateWSRequest: {
      activate?: boolean | null;
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      correlationUuid?: string | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      durationMs?: number | null;
    };
    Component_UpdateIntegratedGenericRelayTransientStateWSResponse: {
      success?: boolean | null;
    };
    Component_UpdateIntegratedGenericRelayWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      name?: string | null;
      port?: components["schemas"]["AuxiliaryRelayPortType"];
    };
    Component_UpdateIntegratedGenericRelayWSResponse: {
      component?: components["schemas"]["IntegratedGenericRelayType"];
    };
    Component_UpdateIntegratedRequestToExitWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      intentOnly?: boolean | null;
      intentOnlyEvents?: boolean | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      port?: components["schemas"]["RequestToExitPortType"];
    };
    Component_UpdateIntegratedRequestToExitWSResponse: {
      component?: components["schemas"]["IntegratedRequestToExitType"];
    };
    Component_UpdateOsdpReaderWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      port?: components["schemas"]["OsdpReaderPortType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
    };
    Component_UpdateOsdpReaderWSResponse: {
      component?: components["schemas"]["OsdpDoorReaderType"];
    };
    Component_UpdateRhombusOsdpReaderWSRequest: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      disableCardReader?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      port?: components["schemas"]["OsdpReaderPortType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
    };
    Component_UpdateRhombusOsdpReaderWSResponse: {
      component?: components["schemas"]["RhombusOsdpDoorReaderType"];
    };
    Component_UpdateWiegandReaderWSRequest: {
      buzzerPort?: components["schemas"]["WiegandOutputPortType"];
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      d0Port?: components["schemas"]["WiegandDataPortType"];
      d1Port?: components["schemas"]["WiegandDataPortType"];
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      gledPort?: components["schemas"]["WiegandOutputPortType"];
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      rledPort?: components["schemas"]["WiegandOutputPortType"];
      tamperPort?: components["schemas"]["WiegandInputPortType"];
    };
    Component_UpdateWiegandReaderWSResponse: {
      component?: components["schemas"]["WiegandDoorReaderType"];
    };
    ConnectAudioDeviceToPhoneNumberActionType: {
      /** base 64 (url-safe) uuid string */
      audioDeviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
      phoneNumber?: string | null;
    };
    Consignee: {
      address1?: string | null;
      address2?: string | null;
      address3?: string | null;
      city?: string | null;
      companyName?: string | null;
      contactName?: string | null;
      country?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      state?: string | null;
    };
    ContentDisposition: {
      attachment?: boolean | null;
      charset?: {
        registered?: boolean | null;
      } | null;
      creationDate?: string | null;
      filename?: string | null;
      formData?: boolean | null;
      inline?: boolean | null;
      modificationDate?: string | null;
      name?: string | null;
      readDate?: string | null;
      size?: number | null;
      type?: string | null;
    };
    ContextRecord: {
      automated?: boolean | null;
      contextId?: string | null;
      expiresAtMs?: number | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      principalUuid?: string | null;
      queriedAtMs?: number | null;
    };
    ContextRecordSelectiveUpdate: {
      realTarget?: components["schemas"]["ContextRecord"];
      updatedFieldNameMap?: { [key: string]: boolean | null } | null;
    };
    CountingActivityEventType:
      | ({
          countingThreshold?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    CredentialEntry:
      | (components["schemas"]["CredentialEntryBleWave"] & {
          credSource?: components["schemas"]["CredentialSourceEnumType"];
          /** base 64 (url-safe) uuid string */
          credentialId?: string | null;
          firstInEligible?: boolean | null;
          originator?: components["schemas"]["BaseEventOriginator"];
        })
      | null;
    CredentialEntryBleWave:
      | ({
          finalRssi?: number | null;
          firstRssi?: number | null;
          firstRssiAtIntentElapsed?: number | null;
          lostAtIntentElapsed?: number | null;
          lostAtRssi?: number | null;
          maxRssi?: number | null;
          maxRssiAtIntentElapsed?: number | null;
          sessionFirstRssi?: number | null;
          sessionFirstRssiAtElapsed?: number | null;
          sessionLostAtElapsed?: number | null;
          sessionLostAtRssi?: number | null;
          sessionMaxRssi?: number | null;
          sessionMaxRssiAtElapsed?: number | null;
        } & {
          credSource?: components["schemas"]["CredentialSourceEnumType"];
          /** base 64 (url-safe) uuid string */
          credentialId?: string | null;
          firstInEligible?: boolean | null;
          originator?: components["schemas"]["BaseEventOriginator"];
        })
      | null;
    /** Filter criteria for finding credential history */
    CredentialQueryFilter: {
      credTypeFilter?:
        | components["schemas"]["AccessControlCredentialEnumType"][]
        | null;
      lastUsedAccessControlledDoorUuidFilter?: (string | null)[] | null;
      lastUsedAfterFilter?: number | null;
      lastUsedBeforeFilter?: number | null;
      lastUsedLocationUuidFilter?: (string | null)[] | null;
      workflowStatusFilter?:
        | components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"][]
        | null;
    };
    CredentialReceivedEventType:
      | ({
          /** base 64 (url-safe) uuid string */
          accessGrantOrRevocationUuid?: string | null;
          activeDoorLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
          /** base 64 (url-safe) uuid string */
          activeLockdownPlanUuid?: string | null;
          appName?: string | null;
          appOS?: string | null;
          appVersion?: string | null;
          authDecisionSource?: components["schemas"]["AuthDecisionSourceEnum"];
          /** base 64 (url-safe) uuid string */
          authDecisionUuid?: string | null;
          authWaitTimeMs?: number | null;
          authWaitTimeMsTotal?: number | null;
          authenticationResult?: components["schemas"]["AccessControlAuthenticationResultEnumType"];
          authorizationResult?: components["schemas"]["AccessControlAuthorizationResultEnumType"];
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          credSource?: components["schemas"]["CredentialSourceEnumType"];
          credentialHexValue?: string | null;
          /** base 64 (url-safe) uuid string */
          credentialUuid?: string | null;
          credentialValue?: string | null;
          credentialValueLengthBits?: number | null;
          credentials?: components["schemas"]["CredentialEntry"][] | null;
          deviceModel?: string | null;
          /** base 64 (url-safe) uuid string */
          managedCredentialUuid?: string | null;
          originator?: components["schemas"]["BaseEventOriginator"];
          /** base 64 (url-safe) uuid string */
          satisfiesFirstInSettingsUuid?: string | null;
          userAgent?: string | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    CredentialSourceEnumType: CredentialSourceEnumType;
    CroppedPermyriadRect: {
      height?: number | null;
      width?: number | null;
      x?: number | null;
      y?: number | null;
    };
    /** List of crossing counts */
    CrossingCountsType: {
      egressCount?: number | null;
      ingressCount?: number | null;
      timestampMs?: number | null;
    };
    /** List of custom footage seek points to create */
    CustomFootageSeekPointType: {
      /** Custom activity seekpoint color */
      color?: CustomFootageSeekPointColorEnum | null;
      /** Custom activity display description, maximum 100 characters */
      description?: string | null;
      /** Whether to display this seekpoint as an overlay in Console */
      displayOverlay?: boolean | null;
      /** Custom activity display name, maximum 32 characters */
      name: string | null;
      /** UNIX MS timestamp */
      timestampMs: number | null;
    };
    CustomImageElement:
      | ({
          height?: number | null;
          /** base 64 (url-safe) uuid string */
          imageUuid?: string | null;
          width?: number | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    CustomLLMActionType: {
      deviceFacetUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      promptUuid?: string | null;
      timestampMs?: number | null;
    };
    CustomLLMEventRuleTriggerType:
      | ({
          deviceFacetUuids?: (string | null)[] | null;
          /** base 64 (url-safe) uuid string */
          promptUuid?: string | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    CustomTextElement:
      | ({
          color?: string | null;
          content?: string | null;
          maxWidth?: number | null;
          style?: string | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    /** List of customer shipments */
    CustomerShipmentType: {
      "ait-aitTrackingNumber"?: string | null;
      "ait-carrierTrackingNumber"?: string | null;
      "ait-depositorOrderNumber"?: string | null;
      "ait-destinationAddress"?: string | null;
      "ait-isIngramDistributorShipment"?: boolean | null;
      "ait-shipmentDate"?: string | null;
      "ait-shippedItems"?: components["schemas"]["ShippedItemType"][] | null;
      interchangeControlNumber?: string | null;
      lastStateUpdateSec?: number | null;
      "rhombus-additionalEmails"?: string | null;
      "rhombus-chosenCarrierName"?: string | null;
      "rhombus-claimKeyToLicenseMap"?: {
        [key: string]: (string | null)[] | null;
      } | null;
      "rhombus-claimKeyToLicenseMapV2"?: {
        [key: string]: {
          [
            key: string
          ]: components["schemas"]["SalesforceLicenseStartDateTimeAndEndDateTime"];
        } | null;
      } | null;
      "rhombus-customerEmails"?: string | null;
      "rhombus-customerName"?: string | null;
      /** base 64 (url-safe) uuid string */
      "rhombus-orgUuid"?: string | null;
      /** base 64 (url-safe) uuid string */
      "rhombus-partnerOrgUuid"?: string | null;
      "rhombus-purchaseOrderNumber"?: string | null;
      "rhombus-rmaReturnTrackingNumber"?: string | null;
      /** base 64 (url-safe) uuid string */
      "rhombus-rmaUuid"?: string | null;
      "rhombus-rmaUuids"?: (string | null)[] | null;
      "rhombus-salesForceOpportunityId"?: string | null;
      "rhombus-zendeskTicketNumber"?: string | null;
      shipmentCategory?: CustomerShipmentShipmentCategoryEnum | null;
      shipmentEmailState?: CustomerShipmentShipmentEmailStateEnum | null;
      shipmentState?: CustomerShipmentShipmentStateEnum | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for accepting the usage policy for the current user. */
    Customer_AcceptUsagePolicyRequest: { [key: string]: unknown };
    /** Response object for accepting the usage policy for the current user. */
    Customer_AcceptUsagePolicyResponse: { [key: string]: unknown };
    /** Request object for deleting notification snooze settings for a specific entity. */
    Customer_DeleteNotificationSnoozeSettingWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for deleting notification snooze settings. */
    Customer_DeleteNotificationSnoozeSettingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving details about the current authenticated partner user. */
    Customer_GetCurrentPartnerUserWSRequest: { [key: string]: unknown };
    /** Response object containing details about the current authenticated partner user. */
    Customer_GetCurrentPartnerUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of user-specific flags and settings */
      flags?: { [key: string]: string | null } | null;
      notificationSettings?: components["schemas"]["PartnerNotificationSettingsType"];
      notificationSettingsV2?: components["schemas"]["PartnerNotificationSettingsV2"];
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    /** Request object for retrieving RhombusKey user configuration and details for the current user. */
    Customer_GetCurrentRhombusKeyUserWSRequest: { [key: string]: unknown };
    /** Response object containing RhombusKey user configuration, user details, and organization summary details. */
    Customer_GetCurrentRhombusKeyUserWSResponse: {
      orgDetails?: components["schemas"]["User_RhombusKeyOrgDetailsType"];
      rhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    /** Request object for retrieving organizations that the current user can context switch into for Console. */
    Customer_GetCurrentUserConsoleOrgsForContextSwitchWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing the list of organizations available for context switching in Console. */
    Customer_GetCurrentUserConsoleOrgsForContextSwitchWSResponse: {
      /** List of organizations that the user can context switch into */
      orgs?:
        | components["schemas"]["Customer_SelectableOrgForContextSwitch"][]
        | null;
    };
    /** Request object for retrieving organizations that the current user can context switch into for Rhombus Key. */
    Customer_GetCurrentUserRhombusKeyOrgsForContextSwitchWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing the list of organizations available for context switching in Rhombus Key. */
    Customer_GetCurrentUserRhombusKeyOrgsForContextSwitchWSResponse: {
      /** List of organizations that the user can context switch into */
      orgs?:
        | components["schemas"]["Customer_SelectableOrgForContextSwitch"][]
        | null;
    };
    /** Request object for retrieving the list of active sessions for the current user. */
    Customer_GetCurrentUserSessionsWSRequest: { [key: string]: unknown };
    /** Response object containing the list of active sessions for the current user. */
    Customer_GetCurrentUserSessionsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of active sessions for the current user */
      sessions?: components["schemas"]["SessionInfoWSType"][] | null;
    };
    /** Request object for retrieving detailed information about the current authenticated user. */
    Customer_GetCurrentUserWSRequest: { [key: string]: unknown };
    /** Response object containing detailed information about the current authenticated user. */
    Customer_GetCurrentUserWSResponse: {
      customizations?: components["schemas"]["UserCustomizationsType"];
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of user-specific flags and settings */
      flags?: { [key: string]: string | null } | null;
      notificationSettings?: components["schemas"]["UserNotificationSettingsV3Type"];
      notificationSettingsV2?: components["schemas"]["UserNotificationSettingsV4Type"];
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    /** Response object containing dashboard status and information for the current user. */
    Customer_GetDashboardStatusWSResponse: {
      dashboardStatus?: components["schemas"]["DashboardStatus"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving dashboard status and information for the current user. */
    Customer_GetDashboardstatusWSRequest: { [key: string]: unknown };
    /** Request object for retrieving the RhombusKey mobile app configuration for the current user. */
    Customer_GetRhombusKeyConfigForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing the RhombusKey mobile app configuration for the current user. */
    Customer_GetRhombusKeyConfigForCurrentUserWSResponse: {
      userRhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
    };
    /** Request object for retrieving current and planned user notification snooze details. */
    Customer_GetUserSnoozedNotificationSettingsWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing current and planned user notification snooze details. */
    Customer_GetUserSnoozedNotificationSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of intervals when all notifications are snoozed */
      snoozedForAllNotificationsIntervals?:
        | components["schemas"]["ScheduledIntervalType"][]
        | null;
      /** Map of component composite UUIDs to their snooze notification intervals */
      snoozedForComponentCompositesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      /** Map of device UUIDs to their snooze notification intervals */
      snoozedForDevicesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      /** Map of location UUIDs to their snooze notification intervals */
      snoozedForLocationsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
    };
    /** Request object for logging out all other active sessions for the current user. */
    Customer_LogoutAllOtherCurrentUserSessionsRequest: {
      [key: string]: unknown;
    };
    /** Response object for logging out all other active sessions for the current user. */
    Customer_LogoutAllOtherCurrentUserSessionsResponse: {
      [key: string]: unknown;
    };
    /** List of organizations that the user can context switch into */
    Customer_SelectableOrgForContextSwitch: {
      companyThumbnailLogoUrl?: string | null;
      orgName?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      rhombusKeyLogoUrl?: string | null;
      userName?: string | null;
    };
    /** Request object for storing a flag or setting for the current user. */
    Customer_SetFlagWSRequest: {
      /** Name of the flag to set */
      flagName?: string | null;
      /** Value to set for the flag */
      flagValue?: string | null;
    };
    /** Response object for storing a flag or setting for the current user. */
    Customer_SetFlagWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for snoozing all user notifications for the current user. */
    Customer_SnoozeAllNotificationsWSRequest: {
      /** Duration in seconds for the snooze period */
      durationSec?: number | null;
      /** Scheduled timestamp in seconds when the snooze should start */
      scheduledTimestampSec?: number | null;
    };
    /** Response object for snoozing all user notifications for the current user. */
    Customer_SnoozeAllNotificationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for snoozing user notifications for specific entities. */
    Customer_SnoozeNotificationsWSRequest: {
      /** List of component composite UUIDs to snooze notifications for */
      componentCompositeUuids?: (string | null)[] | null;
      /** List of device UUIDs to snooze notifications for */
      deviceUuids?: (string | null)[] | null;
      /** Duration in seconds for the snooze period */
      durationSec?: number | null;
      /** List of location UUIDs to snooze notifications for */
      locationUuids?: (string | null)[] | null;
      /** Scheduled timestamp in seconds when the snooze should start */
      scheduledTimestampSec?: number | null;
    };
    /** Response object for snoozing user notifications for specific entities. */
    Customer_SnoozeNotificationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating details and information for the current authenticated partner user. */
    Customer_UpdateCurrentPartnerWSRequest: {
      /** Whether to bypass SAML authentication for this user */
      bypassSaml?: boolean | null;
      /** Whether multi-factor authentication is enabled for the user */
      mfaEnabled?: boolean | null;
      /** Name of the partner user */
      name?: string | null;
      notificationSettings?: components["schemas"]["PartnerNotificationSettingsType"];
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      /** List of SMS phone numbers for the user */
      smsPhoneNumbers?: (string | null)[] | null;
      /** Whether summary emails are enabled for the user */
      summaryEmailEnabled?: boolean | null;
    };
    /** Response object for updating details and information for the current authenticated partner user. */
    Customer_UpdateCurrentPartnerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating details and information for the current authenticated user. */
    Customer_UpdateCurrentUserWSRequest: {
      dashboardCustomizations?: components["schemas"]["DashboardCustomizations"];
      /** Whether multi-factor authentication is enabled for the user */
      mfaEnabled?: boolean | null;
      /** Name of the user */
      name?: string | null;
      /** List of notification intervals for the user */
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      /** List of SMS phone numbers for the user */
      smsPhoneNumbers?: (string | null)[] | null;
      /** Whether summary emails are enabled for the user */
      summaryEmailEnabled?: boolean | null;
    };
    /** Response object for updating details and information for the current authenticated user. */
    Customer_UpdateCurrentUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating dashboard customization settings for the current user. */
    Customer_UpdateDashboardCustomizationsWSRequest: {
      /** Full camera configuration */
      fullCamera?: string | null;
      /** Whether the full camera has been updated */
      fullCameraUpdated?: boolean | null;
      /** Half camera configuration */
      halfCamera?: string | null;
      /** Whether the half camera has been updated */
      halfCameraUpdated?: boolean | null;
      /** Dashboard layout configuration */
      layout?: string | null;
      /** Whether the layout has been updated */
      layoutUpdated?: boolean | null;
      /** Remembered location for the user */
      rememberedLocation?: string | null;
      /** Whether the remembered location has been updated */
      rememberedLocationUpdated?: boolean | null;
      /** Report configuration */
      report?: string | null;
      /** Whether the report has been updated */
      reportUpdated?: boolean | null;
      /** Video wall configuration */
      videoWall?: string | null;
      /** Whether the video wall has been updated */
      videoWallUpdated?: boolean | null;
    };
    /** Response object for updating dashboard customization settings for the current user. */
    Customer_UpdateDashboardCustomizationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating frontend customization settings for the current user. */
    Customer_UpdateFrontendCustomizationsWSRequest: {
      /** Map of frontend customization settings and their values */
      customizations?: { [key: string]: string | null } | null;
    };
    /** Response object for updating frontend customization settings for the current user. */
    Customer_UpdateFrontendCustomizationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating the RhombusKey mobile app preferences for the current user. */
    Customer_UpdateRhombusKeyPreferencesForCurrentUserWSRequest: {
      /** List of favorite access controlled door UUIDs for the user */
      favoriteAccessControlledDoorUuids?: (string | null)[] | null;
      /** Whether the favorite access controlled door UUIDs have been updated */
      favoriteAccessControlledDoorUuidsUpdated?: boolean | null;
    };
    /** Response object for updating the RhombusKey mobile app preferences for the current user. */
    Customer_UpdateRhombusKeyPreferencesForCurrentUserWSResponse: {
      userRhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
    };
    DailyFirstInReset:
      | ({
          minuteOfDay?: number | null;
        } & {
          type?: components["schemas"]["FirstInResetEnum"];
        })
      | null;
    /** Dashboard customization settings for the user */
    DashboardCustomizations: {
      fullCamera?: string | null;
      halfCamera?: string | null;
      layout?: string | null;
      rememberedLocation?: string | null;
      report?: string | null;
      videoWall?: string | null;
    };
    /** Dashboard status and information for the current user */
    DashboardStatus: {
      camerasDown?: number | null;
      camerasDownByLocation?: { [key: string]: number | null } | null;
      camerasUp?: number | null;
      healthStatusIndicator?: DashboardStatusHealthStatusIndicatorEnum | null;
      healthStatusMsg?: string | null;
      locationCameraStatus?: {
        [key: string]: { [key: string]: boolean | null } | null;
      } | null;
      totalCameras?: number | null;
      totalClimateSensors?: number | null;
      totalDoorSensors?: number | null;
      totalLocations?: number | null;
      totalProximitySensors?: number | null;
    };
    /** Optional date range filter to limit search results. */
    DateRangeFilter: {
      /** End of the date range to filter local end date. This date is inclusive. */
      localEndDateRangeEnd?: string | null;
      /** Start of the date range to filter local end date. This date is inclusive. */
      localEndDateRangeStart?: string | null;
      /** End of the date range to filter local start date. This date is inclusive. */
      localStartDateRangeEnd?: string | null;
      /** Start of the date range to filter local start date. This date is inclusive. */
      localStartDateRangeStart?: string | null;
    };
    DeleteSharedLiveVideoStreamForDeviceResponse: { [key: string]: unknown };
    /** Request object for creating an event listener. */
    Developer_CreateEventListenerWSRequest: {
      eventListner?: components["schemas"]["EventListenerType"];
    };
    /** Response object for creating an event listener. */
    Developer_CreateEventListenerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      eventListenerUuid?: string | null;
    };
    /** Request object for deleting an event listener. */
    Developer_DeleteEventListenerWSRequest: {
      /** base 64 (url-safe) uuid string */
      eventListenerUuid?: string | null;
    };
    /** Response object for deleting an event listener. */
    Developer_DeleteEventListenerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving a list of all event listeners. */
    Developer_GetAllEventListenersWSRequest: { [key: string]: unknown };
    /** Response object containing a list of all event listeners. */
    Developer_GetAllEventListenersWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of all event listeners */
      eventListeners?: components["schemas"]["EventListenerType"][] | null;
    };
    /** Request object for retrieving a list of event listeners for a specific device. */
    Developer_GetEventListenersForDeviceWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    /** Response object containing a list of event listeners for a specific device. */
    Developer_GetEventListenersForDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of event listeners for the specified device */
      eventListeners?: components["schemas"]["EventListenerType"][] | null;
    };
    DeviceActivityRuleTriggerType:
      | ({
          activityEvent?: components["schemas"]["SimpleDeviceActivityEventType"];
          componentCompositeUuids?: (string | null)[] | null;
          componentUuids?: (string | null)[] | null;
          deviceLabels?: (string | null)[] | null;
          deviceUuids?: (string | null)[] | null;
          locationUuids?: (string | null)[] | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    DeviceAssignableLicenseGroupStats: {
      assignedCount?: number | null;
      deviceLicenseFamilyStats?:
        | components["schemas"]["DeviceLicenseFamilyStats"][]
        | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    DeviceCatalogItem:
      | ({
          cloudArchiveDays?: number | null;
          deviceType?: components["schemas"]["DeviceTypeEnum"];
          licenseFamily?: DeviceCatalogItemLicenseFamilyEnum | null;
          licenseType?: components["schemas"]["License"];
        } & {
          durationMonths?: number | null;
          productCode?: string | null;
          productType?: DeviceCatalogItemProductTypeEnum | null;
        })
      | null;
    DeviceEventRecordType: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      /** base 64 (url-safe) uuid string */
      componentCompositeUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      eventUuid?: string | null;
      hardwareVariation?: components["schemas"]["HardwareVariationEnum"];
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      timestampMs?: number | null;
    };
    /** facet information for media */
    DeviceFacet: DeviceFacetEnum;
    DeviceFeatureEnum: DeviceFeatureEnum;
    DeviceHealthStatusDetailsEnum: DeviceHealthStatusDetailsEnum;
    DeviceIntegrationSettings: {
      latitude?: number | null;
      longitude?: number | null;
      name?: string | null;
    } | null;
    DeviceIntegrationType:
      | ({
          deviceSettingsMap?: {
            [key: string]: components["schemas"]["DeviceIntegrationSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    DeviceLicenseFamilyStats: {
      assignedCount?: number | null;
      deviceLicenseFamily?: DeviceLicenseFamilyStatsDeviceLicenseFamilyEnum | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    /** List of device licenses available for the client organization */
    DeviceLicenseType: {
      /** base 64 (url-safe) uuid string */
      claimKeyUuid?: string | null;
      createdOn?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      features?: components["schemas"]["LicenseFeature"][] | null;
      firstAssignedDate?: string | null;
      licenseFamily?: DeviceLicenseLicenseFamilyEnum | null;
      licenseToUnassignEmailState?: DeviceLicenseLicenseToUnassignEmailStateEnum | null;
      licenseType?: components["schemas"]["License"];
      maxDeleteDate?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: DeviceLicenseProductTypeEnum | null;
      state?: DeviceLicenseStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    DeviceOrientationEnum: DeviceOrientationEnum;
    DevicePhysicalPortConfigType: {
      boardMap?: {
        [key: string]: components["schemas"]["BoardPhysicalPortConfigType"];
      } | null;
      createdAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      updatedAtMillis?: number | null;
    };
    DeviceSchedule: {
      invertSchedule?: boolean | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      unscheduledMessage?: string | null;
    };
    DeviceStatusEnum: DeviceStatusEnum;
    DeviceTargetScope: DeviceTargetScopeEnum;
    DeviceTypeEnum: DeviceTypeEnum;
    /** List of all client devices */
    DeviceTypeV2: {
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      hardwareId?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      mummified?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pending?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      serialNumber?: string | null;
      type?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Update selective video settings */
    DeviceVideoSettingsSelectiveUpdate: {
      alert_rate_limit_human_only?: components["schemas"]["BurstyRateLimit"];
      alert_rate_limit_motion_only?: components["schemas"]["BurstyRateLimit"];
      alert_rate_limit_vehicle_only?: components["schemas"]["BurstyRateLimit"];
      ir_double_tap?: boolean | null;
      ir_filter_mode?: DeviceVideoSettingsSelectiveUpdateIrFilterModeEnum | null;
      ir_leds_mode?: DeviceVideoSettingsSelectiveUpdateIrLedsModeEnum | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    /** Request object for retrieving a device's configuration. */
    Deviceconfig_GetConfigWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    /** Response object containing a device's faceted user configuration. */
    Deviceconfig_GetFacetedUserConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_ExternalReadableFacetedUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a device's faceted user configuration. */
    Deviceconfig_UpdateFacetedUserConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_ExternalUpdateableFacetedUserConfig"];
    };
    /** Update Audio settings */
    Deviceconfig_settings_ExternalAudioSettingsSelectiveUpdate: {
      audioSupported?: boolean | null;
      audio_aec_via_software?: boolean | null;
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    Deviceconfig_settings_ExternalDeviceSettingsSelectiveUpdate: {
      bandwidth_reports_disabled?: boolean | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: ExternalDeviceSettingsSelectiveUpdateLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: ExternalDeviceSettingsSelectiveUpdateLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      secondary_static_ip_v4_address?: number | null;
      snapshot_upload_target?: ExternalDeviceSettingsSelectiveUpdateSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: ExternalDeviceSettingsSelectiveUpdateThumbstripUploadTargetEnum | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      vlan_ip_v4_address?: number | null;
    };
    /** Update Door Controller settings */
    Deviceconfig_settings_ExternalDoorControllerSettingsSelectiveUpdate: {
      autocomponentize_readers?: boolean | null;
      autoregister_readers?: boolean | null;
      flip_display_orientation?: boolean | null;
      pressure_switch_tamper_normally_open?: boolean | null;
      proximity_sensor_tamper_disabled?: boolean | null;
      proximity_sensor_tamper_distance_threshold?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    Deviceconfig_settings_ExternalReadableAudioSettings: {
      audioSupported?: boolean | null;
      audio_aec_via_software?: boolean | null;
      audio_analysis_enabled?: boolean | null;
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
    };
    Deviceconfig_settings_ExternalReadableButtonSettings: {
      button_emergency_onsite_contact?: components["schemas"]["EmergencyContact"];
      button_test_mode_enabled?: boolean | null;
    };
    Deviceconfig_settings_ExternalReadableDeviceSettings: {
      bandwidth_reports_disabled?: boolean | null;
      cloud_archive_days?: number | null;
      cloud_archive_upload_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      cloud_archive_upload_schedule_inverted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      cloud_archive_upload_schedule_uuid?: string | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: ExternalReadableDeviceSettingsLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: ExternalReadableDeviceSettingsLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      max_event_duration_ms?: number | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      secondary_static_ip_v4_address?: number | null;
      snapshot_upload_target?: ExternalReadableDeviceSettingsSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: ExternalReadableDeviceSettingsThumbstripUploadTargetEnum | null;
      vlan_ip_v4_address?: number | null;
    };
    Deviceconfig_settings_ExternalReadableDeviceVideoSettings: {
      alert_rate_limit_human_only?: components["schemas"]["BurstyRateLimit"];
      alert_rate_limit_motion_only?: components["schemas"]["BurstyRateLimit"];
      alert_rate_limit_vehicle_only?: components["schemas"]["BurstyRateLimit"];
      ir_double_tap?: boolean | null;
      ir_filter_mode?: ExternalReadableDeviceVideoSettingsIrFilterModeEnum | null;
      ir_leds_mode?: ExternalReadableDeviceVideoSettingsIrLedsModeEnum | null;
    };
    Deviceconfig_settings_ExternalReadableDoorControllerSettings: {
      autocomponentize_readers?: boolean | null;
      autoregister_readers?: boolean | null;
      flip_display_orientation?: boolean | null;
      pressure_switch_tamper_normally_open?: boolean | null;
      proximity_sensor_tamper_disabled?: boolean | null;
      proximity_sensor_tamper_distance_threshold?: number | null;
    };
    Deviceconfig_settings_ExternalReadableVideoSettings: {
      ai_dewarp_config?: components["schemas"]["CameraAiDewarpConfigType"];
      behavior_detection?: boolean | null;
      blocked_debounce_time_ms?: number | null;
      blocked_threshold?: number | null;
      char_threshold?: number | null;
      color_detection?: boolean | null;
      con_human_filter?: number | null;
      con_vehicle_filter?: number | null;
      cross_counting?: boolean | null;
      cross_counting_settings?: components["schemas"]["CameraCrossCountingSettingsType"];
      dewarpMode?: ExternalReadableVideoSettingsDewarpModeEnum | null;
      disabled_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      disabled_schedule_inverted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      disabled_schedule_uuid?: string | null;
      engagement_counting?: boolean | null;
      exposure_level?: number | null;
      face_ai_threshold?: number | null;
      face_counting?: boolean | null;
      face_counting_nonunique?: boolean | null;
      face_id_ai_threshold?: number | null;
      face_match_threshold?: number | null;
      face_recognition?: boolean | null;
      fisheye_display_mode?: components["schemas"]["FisheyeDisplayMode"];
      floorplan_homography?: ((number | null)[] | null)[] | null;
      hdr_enabled?: boolean | null;
      high_res_detection?: boolean | null;
      human_detection?: boolean | null;
      human_loitering?: boolean | null;
      human_loitering_settings?: components["schemas"]["CameraHumanLoiteringSettingsType"];
      img_brightness?: number | null;
      img_contrast?: number | null;
      img_saturation?: number | null;
      img_sharpness?: number | null;
      licenseplate_detection?: boolean | null;
      lpr_ai_threshold?: number | null;
      max_detections_per_frame?: number | null;
      metering_config?: components["schemas"]["CameraMeteringConfigType"];
      motion_grid_disabled?: boolean | null;
      motion_grid_window_sec?: number | null;
      motion_lightweight_disabled?: boolean | null;
      motion_threshold?: number | null;
      motor_config?: components["schemas"]["CameraMotorConfigType"];
      mounting_direction?: ExternalReadableVideoSettingsMountingDirectionEnum | null;
      new_motion_feature_flag?: boolean | null;
      night_exposure_level?: number | null;
      night_img_brightness?: number | null;
      night_img_contrast?: number | null;
      night_img_saturation?: number | null;
      night_img_sharpness?: number | null;
      night_metering_config?: components["schemas"]["CameraMeteringConfigType"];
      night_sensor_gain_max?: number | null;
      night_shutter_time_max?: number | null;
      night_shutter_time_min?: number | null;
      obj_ai_threshold?: number | null;
      object_search?: boolean | null;
      people_counting?: boolean | null;
      person_ai_threshold?: number | null;
      pose_detection?: boolean | null;
      ppe_detection?: boolean | null;
      privacy_window_polygons?:
        | components["schemas"]["RegionPolygonType"][]
        | null;
      privacy_windows?: components["schemas"]["PermyriadRect"][] | null;
      ptz_config?: components["schemas"]["CameraPTZConfigType"];
      region_for_occupancy?: components["schemas"]["RegionConfigType"];
      region_of_interest?: components["schemas"]["RegionConfigType"];
      region_of_interest_groups?:
        | components["schemas"]["RegionOfInterestGroup"][]
        | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      rotation?: number | null;
      segment_max_bytes?: number | null;
      sensor_gain_max?: number | null;
      shutter_time_max?: number | null;
      shutter_time_min?: number | null;
      snapshot_height?: number | null;
      snapshot_interval_secs?: number | null;
      target_ai_fps?: number | null;
      thumbstrip_disabled?: boolean | null;
      tile_views?: components["schemas"]["DewarpedView"][] | null;
      timelapse?: boolean | null;
      upload_all_detections?: boolean | null;
      use_onboard_ai?: boolean | null;
      use_onboard_lpr?: boolean | null;
      use_pilot_face_id?: boolean | null;
      vehicle_ai_threshold?: number | null;
      vehicle_counting?: boolean | null;
      vehicle_detection?: boolean | null;
      video_persist_disabled?: boolean | null;
      visual_tamper_config?: components["schemas"]["CameraVisualTamperConfigType"];
      wdr_enabled?: boolean | null;
      wdr_strength?: number | null;
      zero_motion_video_bitrate_percent?: number | null;
      zero_motion_video_quality?: number | null;
    };
    Deviceconfig_settings_ExternalVideoResolution: {
      height?: number | null;
      width?: number | null;
    };
    /** Update Video Settings */
    Deviceconfig_settings_ExternalVideoSettingsSelectiveUpdate: {
      blocked_debounce_time_ms?: number | null;
      blocked_threshold?: number | null;
      char_threshold?: number | null;
      dewarpMode?: ExternalVideoSettingsSelectiveUpdateDewarpModeEnum | null;
      disabled_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      disabled_schedule_inverted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      disabled_schedule_uuid?: string | null;
      exposure_level?: number | null;
      fisheye_display_mode?: components["schemas"]["FisheyeDisplayMode"];
      floorplan_homography?: ((number | null)[] | null)[] | null;
      hdr_enabled?: boolean | null;
      high_res_detection?: boolean | null;
      human_detection?: boolean | null;
      human_loitering?: boolean | null;
      human_loitering_settings?: components["schemas"]["CameraHumanLoiteringSettingsType"];
      img_brightness?: number | null;
      img_contrast?: number | null;
      img_saturation?: number | null;
      img_sharpness?: number | null;
      max_detections_per_frame?: number | null;
      metering_config?: components["schemas"]["CameraMeteringConfigType"];
      motor_config?: components["schemas"]["CameraMotorConfigType"];
      mounting_direction?: ExternalVideoSettingsSelectiveUpdateMountingDirectionEnum | null;
      night_exposure_level?: number | null;
      night_img_brightness?: number | null;
      night_img_contrast?: number | null;
      night_img_saturation?: number | null;
      night_img_sharpness?: number | null;
      night_metering_config?: components["schemas"]["CameraMeteringConfigType"];
      night_sensor_gain_max?: number | null;
      night_shutter_time_max?: number | null;
      night_shutter_time_min?: number | null;
      object_search?: boolean | null;
      privacy_window_polygons?:
        | components["schemas"]["RegionPolygonType"][]
        | null;
      privacy_windows?: components["schemas"]["PermyriadRect"][] | null;
      ptz_config?: components["schemas"]["CameraPTZConfigType"];
      region_for_occupancy?: components["schemas"]["RegionConfigType"];
      region_of_interest?: components["schemas"]["RegionConfigType"];
      region_of_interest_groups?:
        | components["schemas"]["RegionOfInterestGroup"][]
        | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      rotation?: number | null;
      segment_max_bytes?: number | null;
      sensor_gain_max?: number | null;
      shutter_time_max?: number | null;
      shutter_time_min?: number | null;
      snapshot_height?: number | null;
      snapshot_interval_secs?: number | null;
      tile_views?: components["schemas"]["DewarpedView"][] | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      upload_all_detections?: boolean | null;
      use_onboard_lpr?: boolean | null;
      vehicle_detection?: boolean | null;
      video_persist_disabled?: boolean | null;
      wdr_enabled?: boolean | null;
      wdr_strength?: number | null;
      zero_motion_video_bitrate_percent?: number | null;
    };
    Deviceconfig_settings_IntRange: {
      max?: number | null;
      min?: number | null;
    };
    /** Map of hardware variations to default video configurations */
    Deviceconfig_settings_VideoConfigurationDefault: {
      humanDetection?: boolean | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      segmentMaxBytes?: number | null;
      sensorGainMax?: number | null;
      shutterTimeMin?: number | null;
      vehicleDetection?: boolean | null;
    };
    /** Map of hardware variations to available video configuration options */
    Deviceconfig_settings_VideoConfigurationOption: {
      maxBitrateRange?: components["schemas"]["Deviceconfig_settings_IntRange"];
      maxZoomPercent?: number | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      wdrRange?: components["schemas"]["Deviceconfig_settings_IntRange"];
    };
    /** Device's faceted user configuration */
    Deviceconfig_userconfig_ExternalReadableFacetedUserConfig: {
      audioFacetSettings?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_ExternalReadableAudioSettings"];
      } | null;
      buttonSettings?: components["schemas"]["Deviceconfig_settings_ExternalReadableButtonSettings"];
      climateSettings?: components["schemas"]["ClimateSettings"];
      deviceSettings?: components["schemas"]["Deviceconfig_settings_ExternalReadableDeviceSettings"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      deviceVideoSettings?: components["schemas"]["Deviceconfig_settings_ExternalReadableDeviceVideoSettings"];
      doorControllerSettings?: components["schemas"]["Deviceconfig_settings_ExternalReadableDoorControllerSettings"];
      doorReaderSettings?: components["schemas"]["DoorReaderSettings"];
      doorSensorSettings?: components["schemas"]["DoorSensorSettings"];
      environmentalGatewaySettings?: components["schemas"]["EnvironmentalGatewaySettings"];
      lastModified?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      tamperSettings?: components["schemas"]["TamperSettings"];
      thirdPartyCameraSettings?: components["schemas"]["ThirdPartyCameraSettings"];
      videoDoorbellSettings?: components["schemas"]["VideoDoorbellSettings"];
      videoFacetSettings?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_ExternalReadableVideoSettings"];
      } | null;
    };
    /** Configuration updates to apply to the device */
    Deviceconfig_userconfig_ExternalUpdateableFacetedUserConfig: {
      /** Update Audio settings */
      audioFacetSettings?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_ExternalAudioSettingsSelectiveUpdate"];
      } | null;
      buttonSettings?: components["schemas"]["ButtonSettingsSelectiveUpdate"];
      climateSettings?: components["schemas"]["ClimateSettingsSelectiveUpdate"];
      deviceSettings?: components["schemas"]["Deviceconfig_settings_ExternalDeviceSettingsSelectiveUpdate"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      deviceVideoSettings?: components["schemas"]["DeviceVideoSettingsSelectiveUpdate"];
      doorControllerSettings?: components["schemas"]["Deviceconfig_settings_ExternalDoorControllerSettingsSelectiveUpdate"];
      doorReaderSettings?: components["schemas"]["DoorReaderSettingsSelectiveUpdate"];
      doorSensorSettings?: components["schemas"]["DoorSensorSettingsSelectiveUpdate"];
      environmentalGatewaySettings?: components["schemas"]["EnvironmentalGatewaySettingsSelectiveUpdate"];
      tamperSettings?: components["schemas"]["TamperSettingsSelectiveUpdate"];
      videoDoorbellSettings?: components["schemas"]["VideoDoorbellSettingsSelectiveUpdate"];
      /** Update Video Settings */
      videoFacetSettings?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_ExternalVideoSettingsSelectiveUpdate"];
      } | null;
    };
    /** Doorbell camera configuration settings */
    Deviceconfig_userconfig_IExternalReadableAudioVideoUserConfig: {
      ai_dewarp_config?: components["schemas"]["CameraAiDewarpConfigType"];
      audio_aec_via_software?: boolean | null;
      audio_analysis_enabled?: boolean | null;
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      behavior_detection?: boolean | null;
      blocked_debounce_time_ms?: number | null;
      blocked_threshold?: number | null;
      char_threshold?: number | null;
      cloud_archive_days?: number | null;
      cloud_archive_upload_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      cloud_archive_upload_schedule_inverted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      cloud_archive_upload_schedule_uuid?: string | null;
      color_detection?: boolean | null;
      con_human_filter?: number | null;
      con_vehicle_filter?: number | null;
      cross_counting?: boolean | null;
      cross_counting_settings?: components["schemas"]["CameraCrossCountingSettingsType"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      dewarpMode?: IExternalReadableAudioVideoUserConfigDewarpModeEnum | null;
      disabled_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      disabled_schedule_inverted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      disabled_schedule_uuid?: string | null;
      engagement_counting?: boolean | null;
      exposure_level?: number | null;
      face_ai_threshold?: number | null;
      face_counting?: boolean | null;
      face_counting_nonunique?: boolean | null;
      face_id_ai_threshold?: number | null;
      face_match_threshold?: number | null;
      face_recognition?: boolean | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      fisheye_display_mode?: components["schemas"]["FisheyeDisplayMode"];
      floorplan_homography?: ((number | null)[] | null)[] | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      hdr_enabled?: boolean | null;
      high_res_detection?: boolean | null;
      human_detection?: boolean | null;
      human_loitering?: boolean | null;
      human_loitering_settings?: components["schemas"]["CameraHumanLoiteringSettingsType"];
      img_brightness?: number | null;
      img_contrast?: number | null;
      img_saturation?: number | null;
      img_sharpness?: number | null;
      lastModified?: number | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: IExternalReadableAudioVideoUserConfigLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: IExternalReadableAudioVideoUserConfigLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      licenseplate_detection?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      lpr_ai_threshold?: number | null;
      max_detections_per_frame?: number | null;
      max_event_duration_ms?: number | null;
      media_ttl_minutes?: number | null;
      metering_config?: components["schemas"]["CameraMeteringConfigType"];
      motion_grid_disabled?: boolean | null;
      motion_grid_window_sec?: number | null;
      motion_lightweight_disabled?: boolean | null;
      motion_threshold?: number | null;
      motor_config?: components["schemas"]["CameraMotorConfigType"];
      mounting_direction?: IExternalReadableAudioVideoUserConfigMountingDirectionEnum | null;
      new_motion_feature_flag?: boolean | null;
      night_exposure_level?: number | null;
      night_img_brightness?: number | null;
      night_img_contrast?: number | null;
      night_img_saturation?: number | null;
      night_img_sharpness?: number | null;
      night_metering_config?: components["schemas"]["CameraMeteringConfigType"];
      night_sensor_gain_max?: number | null;
      night_shutter_time_max?: number | null;
      night_shutter_time_min?: number | null;
      obj_ai_threshold?: number | null;
      object_search?: boolean | null;
      on_demand_license_invalid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      people_counting?: boolean | null;
      person_ai_threshold?: number | null;
      pose_detection?: boolean | null;
      ppe_detection?: boolean | null;
      privacy_window_polygons?:
        | components["schemas"]["RegionPolygonType"][]
        | null;
      privacy_windows?: components["schemas"]["PermyriadRect"][] | null;
      ptz_config?: components["schemas"]["CameraPTZConfigType"];
      region_for_occupancy?: components["schemas"]["RegionConfigType"];
      region_of_interest?: components["schemas"]["RegionConfigType"];
      region_of_interest_groups?:
        | components["schemas"]["RegionOfInterestGroup"][]
        | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      rotation?: number | null;
      secondary_static_ip_v4_address?: number | null;
      segment_max_bytes?: number | null;
      sensor_gain_max?: number | null;
      shutter_time_max?: number | null;
      shutter_time_min?: number | null;
      snapshot_height?: number | null;
      snapshot_interval_secs?: number | null;
      snapshot_upload_target?: IExternalReadableAudioVideoUserConfigSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      target_ai_fps?: number | null;
      thumbstrip_disabled?: boolean | null;
      thumbstrip_upload_target?: IExternalReadableAudioVideoUserConfigThumbstripUploadTargetEnum | null;
      tile_views?: components["schemas"]["DewarpedView"][] | null;
      timelapse?: boolean | null;
      upload_all_detections?: boolean | null;
      use_onboard_ai?: boolean | null;
      use_onboard_lpr?: boolean | null;
      use_pilot_face_id?: boolean | null;
      vehicle_ai_threshold?: number | null;
      vehicle_counting?: boolean | null;
      vehicle_detection?: boolean | null;
      video_persist_disabled?: boolean | null;
      visual_tamper_config?: components["schemas"]["CameraVisualTamperConfigType"];
      vlan_ip_v4_address?: number | null;
      wdr_enabled?: boolean | null;
      wdr_strength?: number | null;
      zero_motion_video_bitrate_percent?: number | null;
      zero_motion_video_quality?: number | null;
    };
    /** Door controller configuration settings */
    Deviceconfig_userconfig_IExternalReadableDoorControllerUserConfig: {
      autocomponentize_readers?: boolean | null;
      autoregister_readers?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      cloud_archive_days?: number | null;
      cloud_archive_upload_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      cloud_archive_upload_schedule_inverted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      cloud_archive_upload_schedule_uuid?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      flip_display_orientation?: boolean | null;
      lastModified?: number | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: IExternalReadableDoorControllerUserConfigLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: IExternalReadableDoorControllerUserConfigLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      max_event_duration_ms?: number | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pressure_switch_tamper_normally_open?: boolean | null;
      proximity_sensor_tamper_disabled?: boolean | null;
      proximity_sensor_tamper_distance_threshold?: number | null;
      secondary_static_ip_v4_address?: number | null;
      snapshot_upload_target?: IExternalReadableDoorControllerUserConfigSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: IExternalReadableDoorControllerUserConfigThumbstripUploadTargetEnum | null;
      vlan_ip_v4_address?: number | null;
    };
    /** Audio/video user configuration update */
    Deviceconfig_userconfig_IExternalUpdateableAudioVideoUserConfig: {
      audio_aec_via_software?: boolean | null;
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      blocked_debounce_time_ms?: number | null;
      blocked_threshold?: number | null;
      char_threshold?: number | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      dewarpMode?: IExternalUpdateableAudioVideoUserConfigDewarpModeEnum | null;
      disabled_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      disabled_schedule_inverted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      disabled_schedule_uuid?: string | null;
      exposure_level?: number | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      fisheye_display_mode?: components["schemas"]["FisheyeDisplayMode"];
      floorplan_homography?: ((number | null)[] | null)[] | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      hdr_enabled?: boolean | null;
      high_res_detection?: boolean | null;
      human_detection?: boolean | null;
      human_loitering?: boolean | null;
      human_loitering_settings?: components["schemas"]["CameraHumanLoiteringSettingsType"];
      img_brightness?: number | null;
      img_contrast?: number | null;
      img_saturation?: number | null;
      img_sharpness?: number | null;
      lastModified?: number | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: IExternalUpdateableAudioVideoUserConfigLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: IExternalUpdateableAudioVideoUserConfigLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      max_detections_per_frame?: number | null;
      media_ttl_minutes?: number | null;
      metering_config?: components["schemas"]["CameraMeteringConfigType"];
      motor_config?: components["schemas"]["CameraMotorConfigType"];
      mounting_direction?: IExternalUpdateableAudioVideoUserConfigMountingDirectionEnum | null;
      night_exposure_level?: number | null;
      night_img_brightness?: number | null;
      night_img_contrast?: number | null;
      night_img_saturation?: number | null;
      night_img_sharpness?: number | null;
      night_metering_config?: components["schemas"]["CameraMeteringConfigType"];
      night_sensor_gain_max?: number | null;
      night_shutter_time_max?: number | null;
      night_shutter_time_min?: number | null;
      object_search?: boolean | null;
      on_demand_license_invalid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      privacy_window_polygons?:
        | components["schemas"]["RegionPolygonType"][]
        | null;
      privacy_windows?: components["schemas"]["PermyriadRect"][] | null;
      ptz_config?: components["schemas"]["CameraPTZConfigType"];
      region_for_occupancy?: components["schemas"]["RegionConfigType"];
      region_of_interest?: components["schemas"]["RegionConfigType"];
      region_of_interest_groups?:
        | components["schemas"]["RegionOfInterestGroup"][]
        | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      rotation?: number | null;
      secondary_static_ip_v4_address?: number | null;
      segment_max_bytes?: number | null;
      sensor_gain_max?: number | null;
      shutter_time_max?: number | null;
      shutter_time_min?: number | null;
      snapshot_height?: number | null;
      snapshot_interval_secs?: number | null;
      snapshot_upload_target?: IExternalUpdateableAudioVideoUserConfigSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: IExternalUpdateableAudioVideoUserConfigThumbstripUploadTargetEnum | null;
      tile_views?: components["schemas"]["DewarpedView"][] | null;
      upload_all_detections?: boolean | null;
      use_onboard_lpr?: boolean | null;
      vehicle_detection?: boolean | null;
      video_persist_disabled?: boolean | null;
      vlan_ip_v4_address?: number | null;
      wdr_enabled?: boolean | null;
      wdr_strength?: number | null;
      zero_motion_video_bitrate_percent?: number | null;
    };
    /** Configuration update for the button sensor */
    Deviceconfig_userconfig_IExternalUpdateableButtonUserConfig: {
      button_emergency_onsite_contact?: components["schemas"]["EmergencyContact"];
      button_test_mode_enabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      lastModified?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Configuration update for the door controller */
    Deviceconfig_userconfig_IExternalUpdateableDoorControllerUserConfig: {
      autocomponentize_readers?: boolean | null;
      autoregister_readers?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      flip_display_orientation?: boolean | null;
      lastModified?: number | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: IExternalUpdateableDoorControllerUserConfigLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: IExternalUpdateableDoorControllerUserConfigLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pressure_switch_tamper_normally_open?: boolean | null;
      proximity_sensor_tamper_disabled?: boolean | null;
      proximity_sensor_tamper_distance_threshold?: number | null;
      secondary_static_ip_v4_address?: number | null;
      snapshot_upload_target?: IExternalUpdateableDoorControllerUserConfigSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: IExternalUpdateableDoorControllerUserConfigThumbstripUploadTargetEnum | null;
      vlan_ip_v4_address?: number | null;
    };
    DewarpedView: {
      aspectRatio?: components["schemas"]["AspectRatio"];
      pitchDegrees?: number | null;
      rollDegrees?: number | null;
      verticalFieldOfViewDegrees?: number | null;
      yawDegrees?: number | null;
    };
    /** List of diagnostic events */
    DiagnosticEventType: {
      activity?: DiagnosticEventActivityEnum | null;
      apMac?: string | null;
      asi?: string | null;
      /** base 64 (url-safe) uuid string */
      componentCompositeUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      connectionUuid?: string | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      deviceName?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      firmwareVersion?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      reportingDeviceUuid?: string | null;
      rssi?: number | null;
      ssid?: string | null;
      timestamp?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      wifiSignalStrength?: number | null;
    };
    DiagnosticRuleTriggerType:
      | ({
          deviceLabels?: (string | null)[] | null;
          deviceUuids?: (string | null)[] | null;
          diagnosticEvent?: components["schemas"]["SimpleDiagnosticEventType"];
          locationUuids?: (string | null)[] | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    DiceSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
    };
    DiceType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    } | null;
    /** The imported (discovered) third-party camera. This field is populated only if the RTSP URL specified in the import resulted in creation of a new discovery or an addition of a RTSP URL to an existing discovery. It is null, if the RTSP URL already existed or if the import was not successful. */
    DiscoveredThirdPartyCameraType: {
      codec?: string | null;
      createdOn?: string | null;
      ipAddress?: string | null;
      lastVisibleMs?: { [key: string]: number | null } | null;
      macAddress?: string | null;
      manufacturer?: string | null;
      model?: string | null;
      name?: string | null;
      onvifPassword?: string | null;
      onvifProfileToken?: string | null;
      onvifUsername?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      password?: string | null;
      rtspEndpoints?: components["schemas"]["RtspEndpoint"][] | null;
      updatedOn?: string | null;
      username?: string | null;
    };
    DoorAjarActivityEventType:
      | ({
          doorAjarThresholdSec?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    DoorAuthFirstInStateEvent:
      | ({
          /** base 64 (url-safe) uuid string */
          acuEventUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["FirstInFirmwareStatus"];
          originator?: components["schemas"]["BaseEventOriginator"];
          /** base 64 (url-safe) uuid string */
          settingsUuid?: string | null;
          source?: components["schemas"]["FirstInSourceEnum"];
          stateChangedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    /** List of door open/close events for the sensor */
    DoorEventType: {
      /** base 64 (url-safe) uuid string */
      baseStationUuid?: string | null;
      batteryPercentage?: number | null;
      /** base 64 (url-safe) uuid string */
      bleDeviceUuid?: string | null;
      bleRssi?: number | null;
      closeBaseStations?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      state?: DoorEventStateEnum | null;
      stateChanged?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      timestampMs?: number | null;
    };
    DoorFirstInStateChangeEventReference: {
      doorUuidToEventUuidMap?: { [key: string]: string | null } | null;
      newState?: components["schemas"]["FirstInFirmwareStatus"];
      /** base 64 (url-safe) uuid string */
      originatingDoorUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      originatingUserUuid?: string | null;
      originator?: components["schemas"]["BaseEventOriginator"];
      source?: components["schemas"]["FirstInSourceEnum"];
      stateChangedAtMs?: number | null;
    } | null;
    DoorLocationLockdownStateEventType:
      | ({
          activatedLockdownPlan?: components["schemas"]["LockdownPlanReference"];
          activeLockdownPlan?: components["schemas"]["LockdownPlanReference"];
          /** base 64 (url-safe) uuid string */
          acuEventUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          deactivatedLockdownPlan?: components["schemas"]["LockdownPlanReference"];
          followingTestPlan?: boolean | null;
          locationLockdownStateChangedAtMillis?: number | null;
          originator?: components["schemas"]["BaseEventOriginator"];
          state?: components["schemas"]["LocationLockdownStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    DoorLockdownStateEnumType: DoorLockdownStateEnumType;
    DoorLockdownStateEventReference: {
      activatedLockdownPlan?: components["schemas"]["LockdownPlanReference"];
      activeLockdownPlan?: components["schemas"]["LockdownPlanReference"];
      deactivatedLockdownPlan?: components["schemas"]["LockdownPlanReference"];
      /** base 64 (url-safe) uuid string */
      doorEventUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
    } | null;
    /** List of door sensor policies using the schedule */
    DoorPolicyType: {
      defaultAjarThresholdSec?: number | null;
      defaultTriggers?: components["schemas"]["ActivityEnum"][] | null;
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["DoorScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    DoorPositionIndicatorEnumType: DoorPositionIndicatorEnumType;
    DoorPositionIndicatorPhysicalPortEnumType: DoorPositionIndicatorPhysicalPortEnumType;
    DoorPositionIndicatorPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["DoorPositionIndicatorPhysicalPortEnumType"];
      supervisionConfiguration?: components["schemas"]["PortSupervisionConfigurationType"];
    };
    DoorPositionIndicatorShadowType:
      | ({
          state?: components["schemas"]["DoorPositionIndicatorStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
          supervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    DoorPositionIndicatorStateChangeEventType:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["DoorPositionIndicatorStateEnumType"];
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    DoorPositionIndicatorStateEnumType: DoorPositionIndicatorStateEnumType;
    DoorReaderEnumType: DoorReaderEnumType;
    DoorReaderSettings: {
      dr_enable_audio_feedback?: boolean | null;
      tof_max_distance?: number | null;
      tof_min_distance?: number | null;
      tof_min_signal_over_noise?: number | null;
    };
    /** Update Door Reader settings */
    DoorReaderSettingsSelectiveUpdate: {
      dr_enable_audio_feedback?: boolean | null;
      tof_max_distance?: number | null;
      tof_min_distance?: number | null;
      tof_min_signal_over_noise?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    DoorReaderShadowType:
      | ({
          state?: components["schemas"]["DoorReaderStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    DoorReaderStateChangeEventType:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["DoorReaderStateEnumType"];
          reason?: components["schemas"]["DoorReaderStateChangeReasonEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    DoorReaderStateChangeReasonEnumType: DoorReaderStateChangeReasonEnumType;
    DoorReaderStateEnumType: DoorReaderStateEnumType;
    DoorRelayEnumType: DoorRelayEnumType;
    DoorRelayPhysicalPortEnumType: DoorRelayPhysicalPortEnumType;
    DoorRelayPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["DoorRelayPhysicalPortEnumType"];
    };
    DoorRelayShadowType:
      | ({
          state?: components["schemas"]["DoorRelayStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    DoorRelayStateChangeEventType:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["DoorRelayStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    DoorRelayStateEnumType: DoorRelayStateEnumType;
    /** The door schedule exception to update. */
    DoorScheduleExceptionType: {
      /** UNIX timestamp in milliseconds when exception was created. */
      createdAtMillis?: number | null;
      defaultState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      /** Exception description */
      description?: string | null;
      doorUuids?: (string | null)[] | null;
      /** List of intervals each specifying door state during date range. List must contain at least one element */
      intervals: components["schemas"]["LocalInterval"][] | null;
      /** Exception end date in 'yyyy-MM-dd' format. End date is inclusive. */
      localEndDate: string | null;
      /** Exception start date in 'yyyy-MM-dd' format. Start date is inclusive. */
      localStartDate: string | null;
      /** Mapping of location uuid to a list of door uuids, representing the doors assigned to each location. Map must contain at least one entry with at least one door. */
      locationToDoorsMap?: { [key: string]: (string | null)[] | null } | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Exception name */
      name: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** UNIX timestamp in milliseconds when exception was modified. */
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    DoorScheduleFirstInStateEvent:
      | ({
          /** base 64 (url-safe) uuid string */
          acuEventUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["FirstInFirmwareStatus"];
          originator?: components["schemas"]["BaseEventOriginator"];
          /** base 64 (url-safe) uuid string */
          settingsUuid?: string | null;
          source?: components["schemas"]["FirstInSourceEnum"];
          stateChangedAtMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    DoorScheduledTriggerType: {
      ajarThresholdSec?: number | null;
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
    };
    DoorSensorSettings: {
      /** Option to Enabled or Disable the Ajar Threshold. Defaults to Disabled (False). */
      ajar_threshold_enabled?: boolean | null;
      /** Threshold value for Door Sensor Ajar state. Defaults to 30s. */
      ajar_threshold_sec?: number | null;
    };
    DoorSensorSettingsSelectiveUpdate: {
      /** Option to Enabled or Disable the Ajar Threshold. Defaults to Disabled (False). */
      ajar_threshold_enabled?: boolean | null;
      /** Threshold value for Door Sensor Ajar state. Defaults to 30s. */
      ajar_threshold_sec?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    DoorStateChangeEvent:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["AccessControlledDoorStateEnumType"];
          originator?: components["schemas"]["BaseEventOriginator"];
          source?: components["schemas"]["DoorStateSourceEnum"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    DoorStateOverride: {
      expireEarlyMode?: components["schemas"]["EarlyExpireModeEnum"];
      expiresAtMillis?: number | null;
      followFirstInRules?: boolean | null;
      originator?: components["schemas"]["BaseEventOriginator"];
      requestedAtMillis?: number | null;
      startDelaySeconds?: number | null;
      state?: components["schemas"]["AccessControlledDoorStateEnumType"];
      type?: components["schemas"]["ManualDoorStateChangeEnum"];
    } | null;
    DoorStateShadow: {
      source?: components["schemas"]["DoorStateSourceEnum"];
      state?: components["schemas"]["AccessControlledDoorStateEnumType"];
      stateUpdateEventTimestampMs?: number | null;
    };
    DoorStateSourceEnum: DoorStateSourceEnum;
    DoorType: {
      id?: number | null;
      name?: string | null;
    };
    /** Request object for retrieving door open/close events for a door sensor. */
    Door_GetDoorEventsForSensorWSRequest: {
      /** Timestamp in milliseconds to get events created after this time */
      createdAfterMs?: number | null;
      /** Timestamp in milliseconds to get events created before this time */
      createdBeforeMs?: number | null;
      /** Maximum number of events to return */
      limit?: number | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
      /** Filter events by door state */
      stateFilter?: GetDoorEventsForSensorWSRequestStateFilterEnum | null;
    };
    /** Response object containing door open/close events for a door sensor. */
    Door_GetDoorEventsForSensorWSResponse: {
      /** List of door open/close events for the sensor */
      doorEvents?: components["schemas"]["DoorEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving basic state information for all door sensors. */
    Door_GetMinimalDoorStatesWSRequest: { [key: string]: unknown };
    /** Response object containing basic state information for all door sensors. */
    Door_GetMinimalDoorStatesWSResponse: {
      /** List of minimal door state information for all door sensors */
      doorStates?: components["schemas"]["Door_MinimalDoorStateType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Minimal state information for a door sensor. */
    Door_MinimalDoorStateType: {
      /** List of associated camera device facet UUIDs */
      associatedCameras?: (string | null)[] | null;
      /** Battery percentage of the door sensor */
      batteryPercent?: number | null;
      /** base 64 (url-safe) uuid string */
      closestBaseStation?: string | null;
      /** Timestamp in milliseconds when the door sensor was created */
      createdAtMillis?: number | null;
      /** Firmware version of the door sensor */
      firmwareVersion?: string | null;
      /** Floor number where the door sensor is located */
      floorNumber?: number | null;
      /** Enumeration of health status for door sensors. */
      health?: MinimalDoorStateHealthEnum | null;
      /** Enumeration of specific health details for door sensors. */
      healthDetails?: MinimalDoorStateHealthDetailsEnum | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** Timestamp in seconds when the door sensor was last seen */
      lastSeenSec?: number | null;
      /** Latitude coordinate of the door sensor */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate of the door sensor */
      longitude?: number | null;
      /** Name of the door sensor */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
      /** Serial number of the door sensor */
      serialNumber?: string | null;
      /** Signal strength of the door sensor */
      signalStrength?: number | null;
      /** Current status of the door */
      status?: MinimalDoorStateStatusEnum | null;
    };
    /** Request object for updating details for a door sensor. */
    Door_UpdateDoorSensorDetailsWSRequest: {
      /** List of associated camera device facet UUIDs */
      associatedCameras?: (string | null)[] | null;
      /** Whether the associated cameras have been updated */
      associatedCamerasUpdated?: boolean | null;
      /** Whether the door sensor is deleted */
      deleted?: boolean | null;
      /** Whether the deleted status has been updated */
      deletedUpdated?: boolean | null;
      /** Description of the door sensor */
      description?: string | null;
      /** Whether the description has been updated */
      descriptionUpdated?: boolean | null;
      /** Floor number where the door sensor is located */
      floorNumber?: number | null;
      /** Whether the floor number has been updated */
      floorNumberUpdated?: boolean | null;
      /** Latitude coordinate of the door sensor */
      latitude?: number | null;
      /** Whether the latitude has been updated */
      latitudeUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Whether the location UUID has been updated */
      locationUuidUpdated?: boolean | null;
      /** Longitude coordinate of the door sensor */
      longitude?: number | null;
      /** Whether the longitude has been updated */
      longitudeUpdated?: boolean | null;
      /** Name of the door sensor */
      name?: string | null;
      /** Whether the name has been updated */
      nameUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Whether the policy UUID has been updated */
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Whether the sub-locations hierarchy key has been updated */
      subLocationsHierarchyKeyUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for updating details for a door sensor. */
    Door_UpdateDoorSensorDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    DoorbellEventType:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    /** Request object for creating a rule for a doorbell camera. */
    Doorbellcamera_CreateRuleForDoorbellCameraWSRequest: {
      rule?: components["schemas"]["Doorbellcamera_ExternalDoorbellCameraComponentRuleType"];
    };
    /** Response object for creating a rule for a doorbell camera. */
    Doorbellcamera_CreateRuleForDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Request object for creating a shared live video stream for a doorbell camera. */
    Doorbellcamera_CreateSharedLiveVideoStreamWSRequest: {
      /** RUUID with optional appended facet information */
      audioGatewayUuid?: string | null;
      /** RUUID with optional appended facet information */
      doorbellCameraUuid: string | null;
      /** Add a expiration date for accessing the stream in seconds */
      expirationTimeSecs?: number | null;
      /** If given a schedule uuid, will hide the stream during the schedule instead and show it otherwise */
      invertSchedule?: boolean | null;
      /** If not provided, will be named 'Unnamed' */
      name?: string | null;
      /** Add a password to allow access to your shared stream. If null or blank password is not set. */
      password?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      streamType: components["schemas"]["StreamTypeEnum"];
      /** Enables recording of live footage to a VOD */
      vodEnabled: boolean | null;
    };
    /** Response object for creating a shared live video stream for a doorbell camera. */
    Doorbellcamera_CreateSharedLiveVideoStreamWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** M3U8 URL for the shared live video stream */
      sharedLiveM3U8StreamUrl?: string | null;
      /** URL for the shared live video stream */
      sharedLiveVideoStreamUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      sharedLiveVideoStreamUuid?: string | null;
    };
    /** Request object for removing a doorbell camera from the organization. */
    Doorbellcamera_DeleteDoorbellCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorbellCameraUuid: string | null;
      /** Whether to mummify the doorbell camera */
      mummify: boolean | null;
    };
    /** Response object for removing a doorbell camera from the organization. */
    Doorbellcamera_DeleteDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the delete operation */
      responseStatus?: DeleteDoorbellCameraWSResponseResponseStatusEnum | null;
    };
    /** Request object for deleting a rule for a doorbell camera. */
    Doorbellcamera_DeleteRuleForDoorbellCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorbellCameraUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Response object for deleting a rule for a doorbell camera. */
    Doorbellcamera_DeleteRuleForDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Information for offline LAN streaming of doorbell camera content. */
    Doorbellcamera_DoorbellCameraOfflineLanStreamingInfo: {
      /** Access token for offline LAN streaming */
      accessToken?: string | null;
      /** List of LAN addresses for offline streaming */
      lanAddresses?: (string | null)[] | null;
    };
    /** External representation of a doorbell camera component rule. */
    Doorbellcamera_ExternalDoorbellCameraComponentRuleType: {
      action?: components["schemas"]["RuleActionType"];
      /** base 64 (url-safe) uuid string */
      doorbellCameraComponentUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      doorbellCameraUuid?: string | null;
      ruleFilters?: components["schemas"]["RuleFilterType"];
      /** Name of the rule */
      ruleName?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
      triggerActivity?: components["schemas"]["ActivityEnum"];
    };
    /** Request object for retrieving component events for a doorbell camera. */
    Doorbellcamera_FindComponentEventsForDoorbellCameraWSRequest: {
      /** Returns events created after (exclusive) the specified millisecond epoch timestamp */
      createdAfterMs?: number | null;
      /** Returns events created before (exclusive) the specified millisecond epoch timestamp */
      createdBeforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      doorbellCameraUuid: string | null;
      /** Limits the number of returned events to the latest LIMIT events. Maximum value is 100. */
      limit: number | null;
      /** Limits results to only contain the specified type of events, if applicable */
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    /** Response object containing component events for a doorbell camera. */
    Doorbellcamera_FindComponentEventsForDoorbellCameraWSResponse: {
      /** List of component events for the doorbell camera */
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving component seekpoints for a doorbell camera. */
    Doorbellcamera_FindComponentSeekPointsForDoorbellCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorbellCameraUuid?: string | null;
      /** Duration in seconds for the seekpoint query */
      durationSec?: number | null;
      /** Start time in seconds epoch (exclusive) for the seekpoint query */
      startTimeSecEpochExclusive?: number | null;
    };
    /** Response object containing component seekpoints for a doorbell camera. */
    Doorbellcamera_FindComponentSeekPointsForDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of component seekpoints for the doorbell camera */
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    /** Request object for finding shared live video streams for a doorbell camera. */
    Doorbellcamera_FindSharedLiveVideoStreamsForWSRequest: {
      /** RUUID with optional appended facet information */
      doorbellCameraUuid?: string | null;
    };
    /** Response object containing shared live video streams for a doorbell camera. */
    Doorbellcamera_FindSharedLiveVideoStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared live video streams for the doorbell camera */
      sharedLiveVideoStreams?:
        | components["schemas"]["Camera_SharedLiveVideoStreamWS"][]
        | null;
    };
    /** Response object containing doorbell camera configuration. */
    Doorbellcamera_GetDoorbellCameraConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_IExternalReadableAudioVideoUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response object containing detailed state information for a doorbell camera. */
    Doorbellcamera_GetDoorbellCameraFullStateWSResponse: {
      fullState?: components["schemas"]["FullDeviceStateType"];
    };
    /** Response object containing media URIs for doorbell camera footage and audio. */
    Doorbellcamera_GetDoorbellCameraMediaUrisWSResponse: {
      /** List of LAN check URLs to verify device availability on local network */
      lanCheckUrls?: (string | null)[] | null;
      /** List of LAN URIs for live H.264 video streams */
      lanLiveH264Uris?: (string | null)[] | null;
      /** List of LAN URIs for live MPD streams */
      lanLiveMpdUris?: (string | null)[] | null;
      /** List of LAN URIs for live Opus audio streams */
      lanLiveOpusUris?: (string | null)[] | null;
      /** List of LAN URI templates for VOD M3U8 streams */
      lanVodM3u8UrisTemplates?: (string | null)[] | null;
      /** List of LAN URI templates for VOD MPD streams */
      lanVodMpdUrisTemplates?: (string | null)[] | null;
      /** WAN URI for live H.264 video stream */
      wanLiveH264Uri?: string | null;
      /** WAN URI for live MPD stream */
      wanLiveMpdUri?: string | null;
      /** WAN URI for live Opus audio stream */
      wanLiveOpusUri?: string | null;
      /** WAN URI template for VOD M3U8 streams */
      wanVodM3u8UriTemplate?: string | null;
      /** WAN URI template for VOD MPD streams */
      wanVodMpdUriTemplate?: string | null;
    };
    /** Response object containing basic state information for all doorbell cameras. */
    Doorbellcamera_GetDoorbellCameraMinimalStateListWSResponse: {
      /** List of minimal state information for doorbell cameras */
      minimalStates?:
        | components["schemas"]["MinimalObservableDeviceStateType"][]
        | null;
    };
    /** Request object for retrieving offline LAN streaming information for doorbell cameras. */
    Doorbellcamera_GetDoorbellCameraOfflineLanStreamingInfoWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing offline LAN streaming information for doorbell cameras. */
    Doorbellcamera_GetDoorbellCameraOfflineLanStreamingInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of doorbell camera UUIDs to their offline LAN streaming information */
      info?: {
        [
          key: string
        ]: components["schemas"]["Doorbellcamera_DoorbellCameraOfflineLanStreamingInfo"];
      } | null;
    };
    /** Request object for retrieving rules for all doorbell cameras in an organization. */
    Doorbellcamera_GetDoorbellCameraRulesForOrgWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing rules for all doorbell cameras in an organization. */
    Doorbellcamera_GetDoorbellCameraRulesForOrgWSResponse: {
      /** Map of doorbell camera UUIDs to their component rules */
      doorbellCameraUuidToRulesMap?: {
        [key: string]:
          | components["schemas"]["Doorbellcamera_ExternalDoorbellCameraComponentRuleType"][]
          | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving all rules for a doorbell camera. */
    Doorbellcamera_GetRulesForDoorbellCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorbellCameraUuid?: string | null;
    };
    /** Response object containing all rules for a doorbell camera. */
    Doorbellcamera_GetRulesForDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of component rules for the doorbell camera */
      rules?:
        | components["schemas"]["Doorbellcamera_ExternalDoorbellCameraComponentRuleType"][]
        | null;
    };
    /** Request object for rebooting a doorbell camera. */
    Doorbellcamera_RebootDoorbellCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorbellCameraUuid: string | null;
    };
    /** Request object for updating doorbell camera configuration. */
    Doorbellcamera_UpdateDoorbellCameraConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableAudioVideoUserConfig"];
    };
    /** Request object for updating hardware details of a doorbell camera. */
    Doorbellcamera_UpdateDoorbellCameraDetailsWSRequest: {
      /** Optional list of associated camera device facet UUIDs */
      associatedCameras?: (string | null)[] | null;
      /** Optional description for the doorbell camera */
      description?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Optional direction in radians for the doorbell camera */
      directionRadians?: number | null;
      /** Optional floor number where the doorbell camera is located */
      floorNumber?: number | null;
      /** Optional latitude coordinate of the doorbell camera */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Optional longitude coordinate of the doorbell camera */
      longitude?: number | null;
      /** Optional name for the doorbell camera */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Request object for creating a rule owned by a door controller. */
    Doorcontroller_CreateDoorControllerRuleWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorControllerUuid?: string | null;
      rule?: components["schemas"]["RuleType"];
    };
    /** Response object for creating a rule owned by a door controller. */
    Doorcontroller_CreateDoorControllerRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rule?: components["schemas"]["RuleType"];
    };
    /** Request object for deleting a rule owned by a door controller. */
    Doorcontroller_DeleteDoorControllerRuleWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorControllerUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Response object for deleting a rule owned by a door controller. */
    Doorcontroller_DeleteDoorControllerRuleWSResponse: {
      [key: string]: unknown;
    };
    /** Request object for removing a door controller from the organization. */
    Doorcontroller_DeleteDoorControllerWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorControllerUuid: string | null;
      /** Whether to mummify the door controller */
      mummify: boolean | null;
    };
    /** Response object for removing a door controller from the organization. */
    Doorcontroller_DeleteDoorControllerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the delete operation */
      responseStatus?: DeleteDoorControllerWSResponseResponseStatusEnum | null;
    };
    /** Discovered Aperio door device information. */
    Doorcontroller_DoorControllerDiscoveredAperioDoor: {
      /** Identifier for the associated Aperio gateway */
      gatewayId?: string | null;
      /** Unique identifier for the Aperio door */
      id?: string | null;
      /** Timestamp when the door was last seen */
      lastSeenMs?: number | null;
    };
    /** Discovered Aperio gateway device information. */
    Doorcontroller_DoorControllerDiscoveredAperioGateway: {
      /** Unique identifier for the Aperio gateway */
      id?: string | null;
      /** IP address of the Aperio gateway */
      ipAddress?: string | null;
      /** Timestamp when the gateway was last seen */
      lastSeenMs?: number | null;
      /** Model of the Aperio gateway */
      model?: string | null;
      /** Protocol version of the Aperio gateway */
      protocolVersion?: string | null;
    };
    /** List of discovered readers */
    Doorcontroller_DoorControllerDiscoveredReaderType: (
      | components["schemas"]["Doorcontroller_DoorControllerDiscoveredRhombusReaderType"]
      | components["schemas"]["Doorcontroller_DoorControllerDiscoveredThirdPartyReaderType"]
    ) & {
      /** Board number for the reader connection */
      boardNum?: number | null;
      /** Timestamp when the reader was last seen */
      lastSeenMs?: number | null;
      /** Whether the reader is currently online */
      online?: boolean | null;
      /** Port number for the reader connection */
      portNum?: number | null;
      type?: components["schemas"]["Doorcontroller_DoorControllerDiscoveredReaderTypeEnum"];
    };
    /** Enumeration of discovered reader types. */
    Doorcontroller_DoorControllerDiscoveredReaderTypeEnum: Doorcontroller_DoorControllerDiscoveredReaderTypeEnum;
    /** Discovered Rhombus reader information. */
    Doorcontroller_DoorControllerDiscoveredRhombusReaderType:
      | ({
          /** Serial number of the Rhombus reader */
          serialNumber?: string | null;
        } & {
          /** Board number for the reader connection */
          boardNum?: number | null;
          /** Timestamp when the reader was last seen */
          lastSeenMs?: number | null;
          /** Whether the reader is currently online */
          online?: boolean | null;
          /** Port number for the reader connection */
          portNum?: number | null;
          type?: components["schemas"]["Doorcontroller_DoorControllerDiscoveredReaderTypeEnum"];
        })
      | null;
    /** Discovered third-party reader information. */
    Doorcontroller_DoorControllerDiscoveredThirdPartyReaderType:
      | ({
          /** Model identifier for the third-party reader */
          model?: string | null;
          /** Serial number of the third-party reader */
          serialNumber?: number | null;
          /** Vendor code for the third-party reader */
          vendorCode?: (string | null)[] | null;
        } & {
          /** Board number for the reader connection */
          boardNum?: number | null;
          /** Timestamp when the reader was last seen */
          lastSeenMs?: number | null;
          /** Whether the reader is currently online */
          online?: boolean | null;
          /** Port number for the reader connection */
          portNum?: number | null;
          type?: components["schemas"]["Doorcontroller_DoorControllerDiscoveredReaderTypeEnum"];
        })
      | null;
    /** State information for a door controller including discovered devices and configuration. */
    Doorcontroller_DoorControllerStateType: {
      /** Timestamp when configuration was last updated */
      configUpdatedAtMs?: number | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      /** Default network interface of the door controller */
      defaultInterface?: string | null;
      /** MAC address of the default interface */
      defaultInterfaceMac?: string | null;
      /** Whether the door controller is deleted */
      deleted?: boolean | null;
      /** Description of the door controller */
      description?: string | null;
      /** Direction in radians for the door controller */
      directionRadians?: number | null;
      /** List of discovered Aperio doors */
      discoveredAperioDoors?:
        | components["schemas"]["Doorcontroller_DoorControllerDiscoveredAperioDoor"][]
        | null;
      /** List of discovered Aperio gateways */
      discoveredAperioGateways?:
        | components["schemas"]["Doorcontroller_DoorControllerDiscoveredAperioGateway"][]
        | null;
      /** List of discovered readers */
      discoveredReaders?:
        | components["schemas"]["Doorcontroller_DoorControllerDiscoveredReaderType"][]
        | null;
      /** Firmware version of the door controller */
      firmwareVersion?: string | null;
      /** Floor number where the door controller is located */
      floorNumber?: number | null;
      /** Timestamp when grants were last updated */
      grantsUpdatedAtMs?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** List of LAN addresses for the door controller */
      lanAddresses?: (string | null)[] | null;
      /** Latitude coordinate of the door controller */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate of the door controller */
      longitude?: number | null;
      /** Name of the door controller */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Serial number of the door controller */
      serialNumber?: string | null;
      /** State information for the door controller */
      state?: { [key: string]: { [key: string]: unknown } | null } | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      /** WAN address of the door controller */
      wanAddress?: string | null;
    };
    /** Response object containing door controller configuration. */
    Doorcontroller_GetDoorControllerConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_IExternalReadableDoorControllerUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving a specific rule owned by a door controller. */
    Doorcontroller_GetDoorControllerRuleWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorControllerUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Response object containing a specific rule owned by a door controller. */
    Doorcontroller_GetDoorControllerRuleWSResponse: {
      rule?: components["schemas"]["RuleType"];
    };
    /** Request object for retrieving all rules owned by a door controller. */
    Doorcontroller_GetDoorControllerRulesWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorControllerUuid?: string | null;
    };
    /** Response object containing all rules owned by a door controller. */
    Doorcontroller_GetDoorControllerRulesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of rules owned by the door controller */
      rules?: components["schemas"]["RuleType"][] | null;
    };
    /** Request object for retrieving state information for all door controllers in an organization. */
    Doorcontroller_GetDoorControllerStateListWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing state information for all door controllers in an organization. */
    Doorcontroller_GetDoorControllerStateListWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of door controller state information */
      stateList?:
        | components["schemas"]["Doorcontroller_DoorControllerStateType"][]
        | null;
    };
    /** Request object for registering a Rhombus reader discovered by a door controller. */
    Doorcontroller_RegisterDiscoveredRhombusReaderWSRequest: {
      /** Board number for the reader connection */
      boardNum?: number | null;
      /** base 64 (url-safe) uuid string */
      doorControllerUuid?: string | null;
      /** Port number for the reader connection */
      portNum?: number | null;
      /** Serial number of the discovered Rhombus reader */
      serialNumber?: string | null;
    };
    /** Response object for registering a Rhombus reader discovered by a door controller. */
    Doorcontroller_RegisterDiscoveredRhombusReaderWSResponse: {
      [key: string]: unknown;
    };
    /** Request object for updating door controller configuration. */
    Doorcontroller_UpdateDoorControllerConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableDoorControllerUserConfig"];
    };
    /** Request object for updating details for a door controller. */
    Doorcontroller_UpdateDoorControllerDetailsWSRequest: {
      /** Description of the door controller */
      description?: string | null;
      /** Direction in radians for the door controller */
      directionRadians?: number | null;
      /** Floor number where the door controller is located */
      floorNumber?: number | null;
      /** Latitude coordinate of the door controller */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate of the door controller */
      longitude?: number | null;
      /** Name of the door controller */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid: string | null;
    };
    /** Response object for updating details for a door controller. */
    Doorcontroller_UpdateDoorControllerDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a rule owned by a door controller. */
    Doorcontroller_UpdateDoorControllerRuleWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorControllerUuid?: string | null;
      rule?: components["schemas"]["RuleType"];
    };
    /** Response object for updating a rule owned by a door controller. */
    Doorcontroller_UpdateDoorControllerRuleWSResponse: {
      rule?: components["schemas"]["RuleType"];
    };
    /** Dropbox integration settings to update */
    DropboxSettingsV2: {
      accessToken?: string | null;
      accountEmail?: string | null;
      accountName?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
    };
    DtcInfo: {
      code?: (string | null)[] | null;
      failing?: boolean | null;
      hasFailed?: boolean | null;
      testCompleted?: boolean | null;
      time?: number | null;
    } | null;
    /** Pagination request for retrieving similar face events */
    DynamoPageRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    /** List of climate events for the environmental gateway */
    E50ClimateEventType: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      alertTriggerThresholds?: (number | null)[] | null;
      alertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      carbonMonoSense?: components["schemas"]["COSensorType"];
      clipMetaData?: components["schemas"]["ClipMetaDataType"];
      co2Sense?: components["schemas"]["Co2SensorType"];
      derivedValues?: components["schemas"]["E50DerivedValuesType"];
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      firmwareVersion?: string | null;
      formaSense?: components["schemas"]["FormaSensorType"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      leakProbe?: components["schemas"]["LeakProbeType"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pmSense?: components["schemas"]["PmSensorType"];
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      pressSense?: components["schemas"]["PressureSensorType"];
      tempProbe?: components["schemas"]["TempProbeType"];
      timestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    E50DerivedValuesType: {
      airQualityIndex?: number | null;
      airQualityIndexPollutant?: components["schemas"]["AirQualityIndexPollutantEnum"];
      calibrating?: boolean | null;
      deviceOrientation?: components["schemas"]["DeviceOrientationEnum"];
      falsePositiveConfidencePercent?: number | null;
      heatIndexDegF?: number | null;
      heatIndexRangeWarning?: components["schemas"]["HeatIndexRangeWarningEnum"];
      indoorAirQuality?: number | null;
      malfunctioningModules?: (string | null)[] | null;
      smokeConfidencePercent?: number | null;
      smokeThcConfidencePercent?: number | null;
      smokeTobaccoConfidencePercent?: number | null;
      timestampSec?: number | null;
      tvoc?: number | null;
      vapeConfidencePercent?: number | null;
      vapeDetected?: boolean | null;
      vapeThcConfidencePercent?: number | null;
    };
    EarlyExpireModeEnum: EarlyExpireModeEnum;
    EmailSettings: {
      emailAddresses?: (string | null)[] | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
    };
    /** Returns the generated embedding or null if the embedding could not be generated. If image contains multiple faces, only the first generated embedding is returned. */
    Embedding: {
      embeddingComparisonType?: string | null;
      embeddingConfidence?: number | null;
      embeddingEncodingType?: components["schemas"]["EmbeddingEncodingType"];
      encodedEmbedding?: string | null;
    };
    EmbeddingEncodingType: EmbeddingEncodingTypeEnum;
    EmergencyContact: {
      name?: string | null;
      phoneNumber?: string | null;
    };
    EmergencyResponseContactsIntervalType: {
      emergencyContactList?: components["schemas"]["EmergencyContact"][] | null;
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
    };
    EmergencyResponseContactsScheduleType: {
      deviceUuids?: (string | null)[] | null;
      emergencyContactList?: components["schemas"]["EmergencyContact"][] | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Entity object for exposing to OpenAPI component schemas */
    Entity: EntityEnum;
    EntityTag: {
      value?: string | null;
      weak?: boolean | null;
    } | null;
    EnvironmentalGatewaySettings: {
      data_measurement_interval_sec?: number | null;
      data_upload_interval_sec?: number | null;
      false_positive_confidence_threshold?: number | null;
      leak_detection_threshold?: number | null;
      leak_detector_present?: boolean | null;
      moist_detection_threshold?: number | null;
      smoke_confidence_threshold?: number | null;
      smoke_thc_confidence_threshold?: number | null;
      smoke_tobacco_confidence_threshold?: number | null;
      vape_alert_backoff_sec?: number | null;
      vape_confidence_threshold?: number | null;
      vape_thc_confidence_threshold?: number | null;
    };
    /** Update Environmental Sensor settings */
    EnvironmentalGatewaySettingsSelectiveUpdate: {
      data_measurement_interval_sec?: number | null;
      data_upload_interval_sec?: number | null;
      false_positive_confidence_threshold?: number | null;
      leak_detection_threshold?: number | null;
      leak_detector_present?: boolean | null;
      moist_detection_threshold?: number | null;
      smoke_confidence_threshold?: number | null;
      smoke_thc_confidence_threshold?: number | null;
      smoke_tobacco_confidence_threshold?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      vape_alert_backoff_sec?: number | null;
      vape_confidence_threshold?: number | null;
      vape_thc_confidence_threshold?: number | null;
    };
    /** List of environmental gateway shadows */
    EnvironmentalGatewayShadowType: {
      activeAlertTriggers?: { [key: string]: number | null } | null;
      apMac?: string | null;
      carbonMonoSense?: components["schemas"]["COSensorType"];
      co2Sense?: components["schemas"]["Co2SensorType"];
      connected?: boolean | null;
      connectionTimestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      connectionUuid?: string | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      derivedValues?: components["schemas"]["E50DerivedValuesType"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      disconnectTimestampMs?: number | null;
      externalIPAddress?: string | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareUpdateTimeMs?: number | null;
      firmwareVersion?: string | null;
      formaSense?: components["schemas"]["FormaSensorType"];
      /** base 64 (url-safe) uuid string */
      hardwareUuid?: string | null;
      internalWanAddress?: string | null;
      /** base 64 (url-safe) uuid string */
      jumpHostUuid?: string | null;
      lanAddresses?: (string | null)[] | null;
      leakProbe?: components["schemas"]["LeakProbeType"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pmSense?: components["schemas"]["PmSensorType"];
      pressSense?: components["schemas"]["PressureSensorType"];
      prevConnected?: boolean | null;
      prevConnectedUpdateTimestampMs?: number | null;
      region?: string | null;
      secondaryLanAddresses?: (string | null)[] | null;
      ssid?: string | null;
      state?: { [key: string]: { [key: string]: unknown } | null } | null;
      stateUpdatedTimestampMs?: number | null;
      tempProbe?: components["schemas"]["TempProbeType"];
      timestampMs?: number | null;
      type?: components["schemas"]["DeviceTypeEnum"];
      wanAddress?: string | null;
      wifiSignalStrength?: number | null;
    };
    EnvoyCustomField: {
      field?: string | null;
      value?: string | null;
    };
    EnvoyDelivery: {
      carrier?: components["schemas"]["EnvoyDeliveryInfo"];
      carrierInfo?: components["schemas"]["EnvoyDeliveryInfo"];
      deliveryArea?: components["schemas"]["EnvoyDeliveryInfo"];
      deliveryAreaInfo?: components["schemas"]["EnvoyDeliveryInfo"];
      locationId?: string | null;
      pickedUpAt?: string | null;
      pickedUpBy?: components["schemas"]["EnvoyPersonInfo"];
      receivedTimestampMs?: number | null;
      recipient?: components["schemas"]["EnvoyPersonInfo"];
      status?: string | null;
    };
    EnvoyDeliveryInfo: {
      name?: string | null;
    };
    EnvoyExpectedGuest: {
      expectedArrivalAt?: string | null;
      expectedArrivalTimestampMs?: number | null;
      host?: components["schemas"]["EnvoyPersonInfo"];
      invitee?: components["schemas"]["EnvoyPersonInfo"];
      locationId?: string | null;
    };
    EnvoyGuest: {
      agreementsStatus?: string | null;
      email?: string | null;
      fullName?: string | null;
      host?: components["schemas"]["EnvoyPersonInfo"];
      locationId?: string | null;
      notes?: string | null;
      signedInAt?: string | null;
      signedInTimestampMs?: number | null;
      signedOutAt?: string | null;
      signedOutTimestampMs?: number | null;
    };
    EnvoyInvite: {
      customFields?: components["schemas"]["EnvoyCustomField"][] | null;
      expectedArrivalAt?: string | null;
      expectedDepartureAt?: string | null;
      flowId?: string | null;
      hostEmployeeId?: string | null;
      inviteId?: string | null;
      invitee?: components["schemas"]["EnvoyPersonInfo"];
      locationId?: string | null;
      notes?: string | null;
      sendEmailToInvitee?: boolean | null;
    };
    EnvoyLocation: {
      id?: number | null;
      name?: string | null;
    };
    EnvoyLocationInfoType: {
      assignedCameraList?: (string | null)[] | null;
      locationName?: string | null;
    } | null;
    EnvoyPersonInfo: {
      email?: string | null;
      id?: string | null;
      locationIds?: (string | null)[] | null;
      locations?: (string | null)[] | null;
      name?: string | null;
      type?: string | null;
    };
    /** Envoy visitor management integration settings to update */
    EnvoySettings: {
      createSeekPoints?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      envoyIntegrationInstalled?: boolean | null;
      indexFaces?: boolean | null;
      locationInfoMap?: {
        [key: string]: components["schemas"]["EnvoyLocationInfoType"];
      } | null;
      migrated?: boolean | null;
      refreshToken?: string | null;
      saveClips?: boolean | null;
    };
    EnvoyType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          envoyIntegrationInstalled?: boolean | null;
          envoyUserSettingsMap?: {
            [key: string]: components["schemas"]["EnvoyUserSettings"];
          } | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          locationInfoMap?: {
            [key: string]: components["schemas"]["EnvoyLocationInfoType"];
          } | null;
          misconfiguredDoors?: (string | null)[] | null;
          refreshToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    EnvoyUserSettings: {
      guestsEnabled?: boolean | null;
      packagesEnabled?: boolean | null;
    } | null;
    EpochSecondsProvisioner: components["schemas"]["StaticEpochSecondsProvisioner"] & {
      type: string;
    };
    /** Request object for retrieving Ethernet tester configuration. */
    Ethernettester_GetEthernetTesterConfigWSRequest: {
      /** Version of the Ethernet tester configuration */
      version?: string | null;
    };
    /** Response object containing Ethernet tester configuration. */
    Ethernettester_GetEthernetTesterConfigWSResponse: {
      /** JSON configuration for the Ethernet tester */
      configJson?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    EventCount: {
      count?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** List of event listeners for the specified device */
    EventListenerType: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      clientCertificate?: (string | null)[] | null;
      clientKey?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      hostname?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      trustedCertificate?: (string | null)[] | null;
      uri?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    EventOriginatorEnum: EventOriginatorEnum;
    EventOriginatorEnum_Minimal: EventOriginatorEnum_Minimal;
    /** Request object for creating a shared clip group. */
    Event_CreateSharedClipGroupWSRequest: {
      /** Expiration time in seconds for the shared clip group */
      expirationTimeSecs?: number | null;
      /** Optional password for accessing the shared clip group */
      plaintextPassword?: string | null;
      /** Title for the shared clip group */
      title?: string | null;
      /** List of UUIDs for clips to include in the shared group */
      uuids?: components["schemas"]["Event_RuuidWrapper"][] | null;
    };
    /** Response object for creating a shared clip group. */
    Event_CreateSharedClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** URL for accessing the shared clip group */
      shareUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for deleting alert monitoring threat cases by status. */
    Event_DeleteAlertMonitoringThreatCaseByStatusWSRequest: {
      status?: components["schemas"]["ThreatCaseStatus"];
    };
    /** Response object for deleting alert monitoring threat cases by status. */
    Event_DeleteAlertMonitoringThreatCaseByStatusWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting alert monitoring threat cases. */
    Event_DeleteAlertMonitoringThreatCaseWSRequest: {
      /** List of threat case UUIDs to delete */
      threatCaseUuids?: (string | null)[] | null;
    };
    /** Response object for deleting alert monitoring threat cases. */
    Event_DeleteAlertMonitoringThreatCaseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a saved clip. */
    Event_DeleteSavedClipWSRequest: {
      /** base 64 (url-safe) uuid string */
      savedClipUuid?: string | null;
    };
    /** Response object for deleting a saved clip. */
    Event_DeleteSavedClipWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a shared clip group. */
    Event_DeleteSharedClipGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for deleting a shared clip group. */
    Event_DeleteSharedClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for dismissing all policy alerts for specific devices. */
    Event_DismissAllPolicyAlertsForDeviceWSRequest: {
      /** List of device UUIDs to dismiss alerts for */
      deviceUuids?: (string | null)[] | null;
    };
    /** Response object for dismissing all policy alerts for specific devices. */
    Event_DismissAllPolicyAlertsForDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for dismissing all policy alerts. */
    Event_DismissAllPolicyAlertsWSRequest: { [key: string]: unknown };
    /** Response object for dismissing all policy alerts. */
    Event_DismissAllPolicyAlertsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for dismissing a policy alert. */
    Event_DismissPolicyAlertWSRequest: {
      /** base 64 (url-safe) uuid string */
      alertUuid?: string | null;
    };
    /** Response object for dismissing a policy alert. */
    Event_DismissPolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for dismissing multiple policy alerts. */
    Event_DismissPolicyAlertsWSRequest: {
      /** List of policy alert UUIDs to dismiss */
      alertUuids?: (string | null)[] | null;
    };
    /** Response object for dismissing multiple policy alerts. */
    Event_DismissPolicyAlertsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Represents a cell in the motion grid with column and row coordinates. */
    Event_FrontendCell: {
      /** Column coordinate of the cell */
      col?: number | null;
      /** Row coordinate of the cell */
      row?: number | null;
    };
    /** Request object for retrieving a specific alert monitoring threat case. */
    Event_GetAlertMonitoringThreatCaseWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object containing a specific alert monitoring threat case. */
    Event_GetAlertMonitoringThreatCaseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      threatCase?: components["schemas"]["AlertMonitoringThreatCaseType"];
    };
    /** Request object for retrieving alert monitoring threat cases with filtering and pagination options. */
    Event_GetAlertMonitoringThreatCasesWSRequest: {
      /** Filter for threat cases after this timestamp */
      afterTimestampMs?: number | null;
      /** Filter for threat cases before this timestamp */
      beforeTimestampMs?: number | null;
      /** List of device UUIDs to filter by */
      deviceFilter?: (string | null)[] | null;
      lastEvaluatedKey?: string | null;
      /** Last timestamp for pagination */
      lastTimestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUuid?: string | null;
      /** List of location UUIDs to filter by */
      locationFilter?: (string | null)[] | null;
      maxPageSize?: number | null;
      /** Maximum number of results to return */
      maxResults?: number | null;
      /** Whether to return only the most recent threat cases */
      mostRecent?: boolean | null;
      /** List of threat case statuses to filter by */
      statusFilter?: components["schemas"]["ThreatCaseStatus"][] | null;
    };
    /** Response object containing alert monitoring threat cases with pagination information. */
    Event_GetAlertMonitoringThreatCasesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lastEvaluatedKey?: string | null;
      /** List of threat cases matching the request criteria */
      threatCases?:
        | components["schemas"]["AlertMonitoringThreatCaseType"][]
        | null;
    };
    /** Request object for retrieving a specific clip with progress information. */
    Event_GetClipWithProgressWSRequest: {
      /** base 64 (url-safe) uuid string */
      clipUuid: string | null;
    };
    /** Response object containing a specific clip with progress information. */
    Event_GetClipWithProgressWSResponse: {
      clip?: components["schemas"]["Event_SavedClipWithProgressType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving clips with progress information and filtering options. */
    Event_GetClipsWithProgressWSRequest: {
      clipVisibilityFilter?: components["schemas"]["ClipVisibility"];
      /** Device uuids to filter clips by. */
      deviceUuidFilters?: (string | null)[] | null;
      /** Filter to exclude clips created for alarm monitoring verification. */
      excludeAlertMonitoringClips?: boolean | null;
      /** Location uuids to filter clips by. */
      locationUuidFilters?: (string | null)[] | null;
      /** Page size */
      pageSize: number | null;
      /** Page token received from the previous search request. */
      pageToken?: string | null;
      /** Search filter for clips */
      searchFilter?: string | null;
      /** Field to sort clips by */
      sortField?: string | null;
      /** Sort order (asc or desc) */
      sortOrder?: string | null;
      /** Timestamp to filter clips by (either clip creation date or clip footage date). */
      timestampFilterField?: string | null;
      /** Timestamp to find clips after this time. */
      timestampMsAfter?: number | null;
      /** Timestamp to find clips before this time */
      timestampMsBefore?: number | null;
    };
    /** Response object containing clips with progress information. */
    Event_GetClipsWithProgressWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Token to be supplied on the next search request to get the next page. If token is null, there is no more data available. */
      pageToken?: string | null;
      /** List of saved clips with progress information */
      savedClips?:
        | components["schemas"]["Event_SavedClipWithProgressType"][]
        | null;
    };
    /** Request object for retrieving expiring policy alerts. */
    Event_GetExpiringPolicyAlertsWSRequest: {
      /** Epoch timestamp in milliseconds. Used to find policy alerts that expire before this timestamp. */
      expiresBeforeMs: number | null;
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    /** Response object containing a list of expiring policy alerts. */
    Event_GetExpiringPolicyAlertsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Key used to resume pagination, if applicable */
      lastEvaluatedKey?: string | null;
      /** List of expiring policy alerts */
      policyAlerts?: components["schemas"]["BasePolicyAlertType"][] | null;
    };
    /** Response object containing motion grid counts for a device. */
    Event_GetMotionGridCountsWSResponse: {
      /** Matrix where each cell is a fraction of the camera's resolution and stores the total number of motion events that occurred in the given timeframe */
      countGrid?: ((number | null)[] | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving motion grid data for a device. */
    Event_GetMotionGridWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid: string | null;
      /** End time as a UNIX timestamp in seconds */
      endTimeUtcSecs: number | null;
      /** Start time as a UNIX timestamp in seconds */
      startTimeUtcSecs: number | null;
    };
    /** Response object containing motion grid data for a device. */
    Event_GetMotionGridWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of timestamps to motion grid cells */
      motionCells?: {
        [key: string]: components["schemas"]["Event_FrontendCell"][] | null;
      } | null;
    };
    /** Request object for retrieving the count of policy alerts. */
    Event_GetPolicyAlertCountWSRequest: {
      /** Maximum number of results to count */
      maxResultsSize?: number | null;
    };
    /** Response object containing the count of policy alerts. */
    Event_GetPolicyAlertCountWSResponse: {
      /** Count of policy alerts */
      count?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving detailed information about a policy alert. */
    Event_GetPolicyAlertDetailsWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyAlertUuid?: string | null;
    };
    /** Response object containing detailed information about a policy alert. */
    Event_GetPolicyAlertDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlert?: components["schemas"]["PolicyAlertWithDetailsType"];
    };
    /** Request object for retrieving policy alert groups for a specific device. */
    Event_GetPolicyAlertGroupsForDeviceWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Last timestamp for pagination (required with LastUuid) */
      lastTimestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUuid?: string | null;
      /** Maximum number of results to return */
      maxResults?: number | null;
    };
    /** Response object containing policy alert groups for a specific device. */
    Event_GetPolicyAlertGroupsForDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of policy alert groups for the device */
      policyAlertGroups?:
        | components["schemas"]["Event_PolicyAlertGroupV2"][]
        | null;
    };
    /** Request object for retrieving policy alert groups for a specific location. */
    Event_GetPolicyAlertGroupsForLocationWSRequest: {
      /** Last timestamp for pagination */
      lastTimestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Maximum number of results to return */
      maxResults?: number | null;
    };
    /** Response object containing policy alert groups for a specific location. */
    Event_GetPolicyAlertGroupsForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of policy alert groups for the location */
      policyAlertGroups?:
        | components["schemas"]["Event_PolicyAlertGroupV2"][]
        | null;
    };
    /** Request object for retrieving policy alert groups V2 with pagination options. */
    Event_GetPolicyAlertGroupsV2WSRequest: {
      /** Last timestamp for pagination */
      lastTimestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUuid?: string | null;
      /** Maximum number of results to return */
      maxResults?: number | null;
    };
    /** Response object containing policy alert groups V2. */
    Event_GetPolicyAlertGroupsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of policy alert groups V2 */
      policyAlertGroups?:
        | components["schemas"]["Event_PolicyAlertGroupV2"][]
        | null;
    };
    /** Request object for retrieving a specific policy alert V2. */
    Event_GetPolicyAlertV2WSRequest: {
      /** base 64 (url-safe) uuid string */
      policyAlertUuid?: string | null;
    };
    /** Response object containing a specific policy alert V2. */
    Event_GetPolicyAlertV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlert?: components["schemas"]["PolicyAlertV2Type"];
    };
    /** Request object for retrieving a specific policy alert. */
    Event_GetPolicyAlertWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyAlertUuid?: string | null;
    };
    /** Response object containing a specific policy alert. */
    Event_GetPolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlert?: components["schemas"]["BasePolicyAlertType"];
    };
    /** Request object for retrieving policy alerts V2 with filtering and pagination options. */
    Event_GetPolicyAlertsV2WSRequest: {
      /** Filter for alerts after this timestamp */
      afterTimestampMs?: number | null;
      /** Filter for alerts before this timestamp */
      beforeTimestampMs?: number | null;
      /** List of device UUIDs to filter by */
      deviceFilter?: (string | null)[] | null;
      /** Last timestamp for pagination */
      lastTimestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUuid?: string | null;
      /** List of location UUIDs to filter by */
      locationFilter?: (string | null)[] | null;
      /** Maximum number of results to return */
      maxResults?: number | null;
    };
    /** Response object containing policy alerts V2 with filtering and pagination options. */
    Event_GetPolicyAlertsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      oldestPolicyAlert?: components["schemas"]["PolicyAlertV2Type"];
      /** List of policy alerts V2 matching the request criteria */
      policyAlerts?: components["schemas"]["PolicyAlertV2Type"][] | null;
    };
    /** Request object for retrieving policy alerts with filtering and pagination options. */
    Event_GetPolicyAlertsWSRequest: {
      /** Filter including chosen Access Controlled Doors */
      accessControlledDoorFilter?: (string | null)[] | null;
      /** Enter starting timestamp interval in UNIX ms */
      afterTimestampMs?: number | null;
      /** Enter ending timestamp interval in UNIX ms */
      beforeTimestampMs?: number | null;
      /** Filter including chosen Devices */
      deviceFilter?: (string | null)[] | null;
      /** Search with last known TimestampMs (Required for Pagination) */
      lastTimestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUuid?: string | null;
      /** Filter any locations you would like to include */
      locationFilter?: (string | null)[] | null;
      /** Set a max result limit */
      maxResults?: number | null;
    };
    /** Response object containing a list of policy alerts. */
    Event_GetPolicyAlertsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of policy alerts matching the request criteria */
      policyAlerts?: components["schemas"]["BasePolicyAlertType"][] | null;
    };
    /** Request object for retrieving the count of saved clips with filtering options. */
    Event_GetSavedClipCountWSRequest: {
      /** List of device UUIDs to filter clips by */
      deviceFilter?: (string | null)[] | null;
      /** End time in milliseconds for filtering clips */
      endTimeMs?: number | null;
      /** List of location UUIDs to filter clips by */
      locationFilter?: (string | null)[] | null;
      /** Start time in milliseconds for filtering clips */
      startTimeMs?: number | null;
    };
    /** Response object containing the count of saved clips. */
    Event_GetSavedClipCountWSResponse: {
      /** Count of saved clips matching the filter criteria */
      count?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving detailed information about a saved clip. */
    Event_GetSavedClipDetailsWSRequest: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
    };
    /** Response object containing detailed information about a saved clip. */
    Event_GetSavedClipDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      savedClip?: components["schemas"]["SavedClipWithDetailsType"];
    };
    /** Request object for retrieving saved clips by external transaction ID. */
    Event_GetSavedClipsByExternalTransactionIdWSRequest: {
      /** External transaction ID to search for saved clips */
      externalTransactionId?: string | null;
    };
    /** Response object containing saved clips by external transaction ID. */
    Event_GetSavedClipsByExternalTransactionIdWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of saved clips matching the external transaction ID */
      savedClips?: components["schemas"]["SavedClipV2Type"][] | null;
    };
    /** Request object for retrieving saved clips with pagination. */
    Event_GetSavedClipsV2WSRequest: {
      /** Set max results returned. Note: in future this will be defaulted to 100 */
      maxPageSize?: number | null;
      /** Timestamp start to specify page of up to 100 saved clips */
      pageTimestampMs?: number | null;
    };
    /** Response object containing saved clips with pagination. */
    Event_GetSavedClipsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of saved clips */
      savedClips?: components["schemas"]["SavedClipV2Type"][] | null;
    };
    /** Request object for retrieving saved clips (deprecated). */
    Event_GetSavedClipsWSRequest: { [key: string]: unknown };
    /** Response object containing saved clips (deprecated). */
    Event_GetSavedClipsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of saved clips */
      savedClips?: components["schemas"]["SavedClipV2Type"][] | null;
    };
    /** Request object for retrieving detailed information about a shared clip group. */
    Event_GetSharedClipGroupDetailsWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object containing detailed information about a shared clip group. */
    Event_GetSharedClipGroupDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedClipGroup?: components["schemas"]["SharedClipGroupWithDetailsType"];
    };
    /** Request object for retrieving shared clip groups with date filtering. */
    Event_GetSharedClipGroupsV2WSRequest: {
      /** Filter for clip groups created after this timestamp */
      createdAfterMs?: number | null;
      /** Filter for clip groups created before this timestamp */
      createdBeforeMs?: number | null;
    };
    /** Response object containing shared clip groups with date filtering. */
    Event_GetSharedClipGroupsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared clip groups */
      sharedClipGroups?:
        | components["schemas"]["SharedClipGroupWrapperV2Type"][]
        | null;
    };
    /** Request object for retrieving shared clip groups (deprecated). */
    Event_GetSharedClipGroupsWSRequest: { [key: string]: unknown };
    /** Response object containing shared clip groups (deprecated). */
    Event_GetSharedClipGroupsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared clip groups */
      sharedClipGroups?:
        | components["schemas"]["SharedClipGroupWrapperType"][]
        | null;
    };
    /** Request object for retrieving spliced clips in progress (deprecated). */
    Event_GetSplicedClipsInProgressWSRequest: { [key: string]: unknown };
    /** Response object containing spliced clips in progress (deprecated). */
    Event_GetSplicedClipsInProgressWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of spliced clips currently in progress */
      splicedClips?: components["schemas"]["SplicedClipType"][] | null;
    };
    /** Request object for retrieving unhealthy device alerts. */
    Event_GetUnhealthyDeviceAlertsWSRequest: { [key: string]: unknown };
    /** Response object containing unhealthy device alerts. */
    Event_GetUnhealthyDeviceAlertsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of unhealthy device alerts */
      unhealthyDeviceAlerts?:
        | components["schemas"]["UnHealthyDeviceAlertType"][]
        | null;
    };
    /** Request object for muting notifications for a specific device. */
    Event_MuteNotificationsForDevicetWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Duration to mute notifications in seconds */
      durationSec?: number | null;
    };
    /** Response object for muting notifications for a specific device. */
    Event_MuteNotificationsForDevicetWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Group of policy alerts V2 with time range information. */
    Event_PolicyAlertGroupV2: {
      /** End time of the alert group (descending chronological order) */
      endTime?: number | null;
      /** List of policy alerts V2 in the group */
      policyAlerts?: components["schemas"]["PolicyAlertV2Type"][] | null;
      /** Start time of the alert group (descending chronological order) */
      startTime?: number | null;
    };
    /** Request object for reporting a bad policy alert. */
    Event_ReportBadPolicyAlertWSRequest: {
      policyAlert?: components["schemas"]["PolicyAlertV2Type"];
    };
    /** Response object for reporting a bad policy alert. */
    Event_ReportBadPolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Wrapper object containing UUIDs for alerts and events. */
    Event_RuuidWrapper: {
      /** base 64 (url-safe) uuid string */
      alertUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      eventUuid?: string | null;
    };
    /** Request object for saving a policy alert as a clip. */
    Event_SavePolicyAlertWSRequest: {
      /** base 64 (url-safe) uuid string */
      alertUuid?: string | null;
      /** Map of device UUIDs to dewarped view configurations for fisheye cameras */
      fisheyePresentationMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      /** Description for the saved clip */
      savedClipDescription?: string | null;
      /** Title for the saved clip */
      savedClipTitle?: string | null;
    };
    /** Response object for saving a policy alert as a clip. */
    Event_SavePolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Saved clip with progress information for processing operations. */
    Event_SavedClipWithProgressType: {
      accessSettings?: components["schemas"]["ClipAccessSettings"];
      alterMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      analyzed?: boolean | null;
      byteCount?: number | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      consoleDelete?: boolean | null;
      createdAtMs?: number | null;
      /** Current operation being performed on the clip */
      currentOperation?: string | null;
      description?: string | null;
      devicePresentationOrder?: (string | null)[] | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      externalTransactionId?: string | null;
      fisheyeMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      integrationUploadList?: components["schemas"]["IntegrationEnum"][] | null;
      isMonitoringClip?: boolean | null;
      isVendorClip?: boolean | null;
      /** Last update timestamp in seconds */
      lastUpdatedSec?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** Percentage of completion for the current operation */
      percentComplete?: number | null;
      sendToSharedStorage?: boolean | null;
      sha256Hex?: string | null;
      /** base 64 (url-safe) uuid string */
      sourceAlertUuid?: string | null;
      status?: SavedClipWithProgressStatusEnum | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      timestampMs?: number | null;
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      videoResolution?: components["schemas"]["Resolution"];
    };
    /** Request object for searching motion grid data. */
    Event_SearchMotionGridWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid: string | null;
      /** End time as a UNIX timestamp in seconds */
      endTimeUtcSecs: number | null;
      /** List of motion grid cells to include in the search */
      searchCells: components["schemas"]["Event_FrontendCell"][] | null;
      /** Start time as a UNIX timestamp in seconds */
      startTimeUtcSecs: number | null;
    };
    /** Response object containing motion grid search results. */
    Event_SearchMotionGridWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of timestamps where motion was detected in the specified cells */
      timeUtcSecsList?: (number | null)[] | null;
    };
    /** Request object for searching motion grid data with activity information. */
    Event_SearchMotionGridWithActivitiesWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid: string | null;
      /** End time as a UNIX timestamp in seconds */
      endTimeUtcSecs: number | null;
      /** List of motion grid cells to include in the search */
      searchCells: components["schemas"]["Event_FrontendCell"][] | null;
      /** Start time as a UNIX timestamp in seconds */
      startTimeUtcSecs: number | null;
    };
    /** Response object containing motion grid search results with activity information. */
    Event_SearchMotionGridWithActivitiesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of timestamps to motion grid activities */
      timeUtcSecsToActivityMap?: {
        [
          key: string
        ]: components["schemas"]["Event_SearchMotionGridWithActivitiesWSResponse_MotionGridActivity"];
      } | null;
    };
    /** Activity information with object ID. */
    Event_SearchMotionGridWithActivitiesWSResponse_ActivityWithId: {
      activity?: components["schemas"]["ActivityEnum"];
      /** Object ID associated with the activity */
      objectId?: number | null;
    };
    /** Motion grid activity information for a specific timestamp. */
    Event_SearchMotionGridWithActivitiesWSResponse_MotionGridActivity: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      /** List of activities with object IDs */
      activitiesWithId?:
        | components["schemas"]["Event_SearchMotionGridWithActivitiesWSResponse_ActivityWithId"][]
        | null;
      /** Best timestamp in milliseconds for the activity */
      bestTimestampMs?: number | null;
    };
    /** Request object for unsaving a policy alert (deprecated). */
    Event_UnSavePolicyAlertWSRequest: {
      /** base 64 (url-safe) uuid string */
      alertUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      savedClipUuid?: string | null;
    };
    /** Response object for unsaving a policy alert (deprecated). */
    Event_UnSavePolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating the text description of a policy alert. */
    Event_UpdatePolicyAlertTextDescriptionWSRequest: {
      /** base 64 (url-safe) uuid string */
      alertUuid?: string | null;
      /** Text description for the policy alert */
      textDescription?: string | null;
    };
    /** Response object for updating the text description of a policy alert. */
    Event_UpdatePolicyAlertTextDescriptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a saved clip. */
    Event_UpdateSavedClipWSRequest: {
      /** Description for the saved clip */
      description?: string | null;
      /** base 64 (url-safe) uuid string */
      savedClipUuid?: string | null;
      /** Title for the saved clip */
      title?: string | null;
    };
    /** Response object for updating a saved clip. */
    Event_UpdateSavedClipWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a shared clip group. */
    Event_UpdateSharedClipGroupWSRequest: {
      /** Description for the shared clip group */
      description?: string | null;
      expirationTimeSecs?: number | null;
      /** Password for accessing the shared clip group */
      plaintextPassword?: string | null;
      /** base 64 (url-safe) uuid string */
      sharedClipUuid?: string | null;
      /** Title for the shared clip group */
      title?: string | null;
    };
    /** Response object for updating a shared clip group. */
    Event_UpdateSharedClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** URL for accessing the updated shared clip group */
      shareUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for creating a clip group. */
    Event_groups_CreateClipGroupWSRequest: {
      /** Description for the clip group */
      description?: string | null;
      /** Title for the clip group */
      title?: string | null;
      /** List of UUIDs for clips to include in the group */
      uuids?: components["schemas"]["Event_RuuidWrapper"][] | null;
    };
    /** Response object for creating a clip group. */
    Event_groups_CreateClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for deleting a clip group. */
    Event_groups_DeleteClipGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for deleting a clip group. */
    Event_groups_DeleteClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving detailed information about a clip group. */
    Event_groups_GetClipGroupDetailsWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object containing detailed information about a clip group. */
    Event_groups_GetClipGroupDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      group?: components["schemas"]["ClipGroupWithDetailsType"];
    };
    /** Request object for retrieving clip groups for an organization with date filtering. */
    Event_groups_GetClipGroupsForOrgWSRequest: {
      /** Filter for clip groups created after this timestamp */
      createdAfterMs?: number | null;
      /** Filter for clip groups created before this timestamp */
      createdBeforeMs?: number | null;
    };
    /** Response object containing clip groups for an organization. */
    Event_groups_GetClipGroupsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of clip groups for the organization */
      groups?: components["schemas"]["ClipGroupType"][] | null;
    };
    /** Request object for updating a clip group. */
    Event_groups_UpdateClipGroupWSRequest: {
      /** Description for the clip group */
      description?: string | null;
      /** Title for the clip group */
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      /** List of UUIDs for clips to include in the group */
      uuids?: components["schemas"]["Event_RuuidWrapper"][] | null;
    };
    /** Response object for updating a clip group. */
    Event_groups_UpdateClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Combined seekpoint type containing information from various event sources including timestamps, activities, and metadata. */
    Eventsearch_CombinedSeekPointType: {
      activity?: components["schemas"]["ActivityEnum"];
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** Custom color for the activity display */
      customActivityColor?: CombinedSeekPointCustomActivityColorEnum | null;
      /** Custom description for the activity */
      customActivityDescription?: string | null;
      /** Custom display name for the activity */
      customActivityDisplayName?: string | null;
      /** Name of the face detected in this seekpoint */
      faceName?: string | null;
      /** License plate detected in this seekpoint */
      licensePlate?: string | null;
      /** Object ID for tracking purposes */
      objectId?: number | null;
      /** Original event object that generated this seekpoint */
      originalEvent?: { [key: string]: unknown } | null;
      /** End time in milliseconds for the seekpoint duration */
      seekpointEndTimeMs?: number | null;
      /** Start time in milliseconds for the seekpoint duration */
      seekpointStartTimeMs?: number | null;
      /** URL to the thumbnail image for this seekpoint */
      thumbnailUrl?: string | null;
      /** Timestamp in milliseconds when the seekpoint occurred */
      timestampMs?: number | null;
      /** ID for unidentified faces */
      unidentifiedFaceId?: string | null;
    };
    /** Response object containing seekpoints from camera or doorbell camera events. */
    Eventsearch_GetCameraOrDoorbellCameraSeekpointsWSResponse: {
      /** List of combined seekpoints from camera or doorbell camera events */
      combinedSeekpoints?:
        | components["schemas"]["Eventsearch_CombinedSeekPointType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving event seekpoints V2 with enhanced filtering and clustering options. */
    Eventsearch_GetEventSeekpointsV2WSRequest: {
      /** Set of access controlled door uuids to retrieve component seekpoints for. */
      accessControlledDoorUuids?: (string | null)[] | null;
      /** Optional filter to specify what activities are returned. */
      activityFilter?: components["schemas"]["ActivityEnum"][] | null;
      /** Optional filter to specify which human motion seekpoints are returned. */
      clothingColorFilter?: (GetEventSeekpointsV2WSRequestClothingColorFilterEnum | null)[] | null;
      /** An optional interval X (in seconds) that, when specified, causes this endpoint to return a smaller collection of seekpoints. These seekpoints represent clusters of activities that occur consecutively within X seconds of each other. */
      clusterIntervalSec?: number | null;
      /** Set of device facet uuids to retrieve footage seekpoints for. */
      deviceUuids?: (string | null)[] | null;
      /** Duration in seconds since the start time to retrieve seekpoints for. */
      durationSec: number | null;
      /** Determines whether or not any motion seekpoints are returned. */
      includeAnyMotion?: boolean | null;
      /** Determines whether or not to include any seekpoints from enabled integrations. */
      includeIntegrationEvents?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      /** Optional filter used to limit the seekpoint search to the region provided. */
      searchCells?: components["schemas"]["Event_FrontendCell"][] | null;
      /** UNIX timestamp in seconds for when to start retrieving seekpoints. */
      startTimeSec: number | null;
      /** Optional filter to specify which vehicle motion seekpoints are returned. */
      vehicleColorFilter?: (GetEventSeekpointsV2WSRequestVehicleColorFilterEnum | null)[] | null;
    };
    /** Request object for retrieving event seekpoints with various search criteria and filtering options. */
    Eventsearch_GetEventSeekpointsWSRequest: {
      /** Set of activity types to filter seekpoints by */
      activitySet?: components["schemas"]["ActivityEnum"][] | null;
      componentSeekPointsByAccessControlledDoorWSRequest?: components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorWSRequest"];
      componentSeekPointsByAccessControlledDoorsWSRequest?: components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorsWSRequest"];
      componentSeekPointsByOwnerDeviceWSRequest?: components["schemas"]["Component_FindComponentSeekPointsByOwnerDeviceWSRequest"];
      /** Duration in seconds for the search window */
      durationSec?: number | null;
      searchColorAndVehicleByColorWSRequest?: components["schemas"]["Eventsearch_SearchClothingAndVehicleByColorWSRequest"];
      searchMotionGridWithActivitiesWSRequest?: components["schemas"]["Event_SearchMotionGridWithActivitiesWSRequest"];
      seekpointsWSRequest?: components["schemas"]["Common_devices_GetSeekpointsWSRequest"];
      /** Start time in seconds for the search window */
      startTimeSec?: number | null;
      videoFootageWSRequest?: components["schemas"]["Eventsearch_VideoFootageWSRequest"];
    };
    /** Response object containing combined seekpoints from various event sources. */
    Eventsearch_GetEventSeekpointsWSResponse: {
      /** List of combined seekpoints from various event sources */
      combinedSeekpoints?:
        | components["schemas"]["Eventsearch_CombinedSeekPointType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for searching clothing and vehicle events by color with time and device filtering. */
    Eventsearch_SearchClothingAndVehicleByColorWSRequest: {
      /** Set of clothing colors to filter the search by */
      clothingColorFilter?: (SearchClothingAndVehicleByColorWSRequestClothingColorFilterEnum | null)[] | null;
      /** List of device UUIDs to filter the search by */
      deviceFilter?: (string | null)[] | null;
      /** End time in milliseconds for the search window */
      endTimeMs?: number | null;
      /** Start time in milliseconds for the search window */
      startTimeMs?: number | null;
      /** Set of vehicle colors to filter the search by */
      vehicleColorFilter?: (SearchClothingAndVehicleByColorWSRequestVehicleColorFilterEnum | null)[] | null;
    };
    /** Request object for video footage search with camera selection and multi-camera options. */
    Eventsearch_VideoFootageWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid?: string | null;
      /** List of camera UUIDs to search for video footage */
      cameraUuids?: (string | null)[] | null;
      /** Duration in seconds */
      duration?: number | null;
      /** Whether to include any motion events */
      includeAnyMotion?: boolean | null;
      /** Start time in seconds since epoch */
      startTime?: number | null;
      /** Whether to use multi-camera search functionality */
      useMultiCamera?: boolean | null;
    };
    /** Request object for exporting audit events to CSV format with filtering options. */
    Export_ExportAuditEventsWSRequest: {
      /** End time interval in milliseconds for filtering audit events */
      endInterval?: number | null;
      /** If not empty, events with actions specified in the list are filtered out. If both include and exclude actions are specified, exclude actions are ignored. */
      excludeActions?: (ExportAuditEventsWSRequestExcludeActionsEnum | null)[] | null;
      /** If not empty, only events with actions specified in the list are included. If both include and exclude actions are specified, exclude actions are ignored. */
      includeActions?: (ExportAuditEventsWSRequestIncludeActionsEnum | null)[] | null;
      /** Start time interval in milliseconds for filtering audit events */
      startInterval?: number | null;
    };
    /** Request object for exporting climate sensor events with time filtering. */
    Export_ExportClimateEventsWSRequest: {
      /** Start time in milliseconds for filtering climate events */
      createdAfterMs?: number | null;
      /** End time in milliseconds for filtering climate events */
      createdBeforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
    };
    /** Request object for exporting count reports with configurable intervals, scopes, and time ranges. */
    Export_ExportCountReportsWSRequest: {
      /** Enter the ending date in in ISO 8601 format */
      endDate?: string | null;
      /** End datetime as a UNIX timestamp in milliseconds */
      endTimeMs: number | null;
      /** The chosen interval time of reports */
      interval: ExportCountReportsWSRequestIntervalEnum | null;
      /** The chosen scope of report by Device, Organization, Region or Location */
      scope: ExportCountReportsWSRequestScopeEnum | null;
      /** Enter the starting date in ISO 8601 format */
      startDate?: string | null;
      /** Start datetime as a UNIX timestamp in milliseconds */
      startTimeMs: number | null;
      /** Type of alert to fetch */
      type: ExportCountReportsWSRequestTypeEnum | null;
      /** Enter the UUID of device(s) or location(s) */
      uuidList?: (string | null)[] | null;
    };
    /** Request object for exporting diagnostic events with time interval filtering. */
    Export_ExportDiagnosticEventsWSRequest: {
      /** End time interval in milliseconds for filtering diagnostic events */
      endInterval?: number | null;
      /** Start time interval in milliseconds for filtering diagnostic events */
      startInterval?: number | null;
    };
    /** Request object for exporting door sensor events with time filtering. */
    Export_ExportDoorEventsWSRequest: {
      /** Start time in milliseconds for filtering door events */
      createdAfterMs?: number | null;
      /** End time in milliseconds for filtering door events */
      createdBeforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
    };
    /** Request object for exporting environmental gateway events with time filtering. */
    Export_ExportEnvironmentalGatewayEventsWSRequest: {
      /** Start time in milliseconds for filtering environmental gateway events */
      createdAfterMs?: number | null;
      /** End time in milliseconds for filtering environmental gateway events */
      createdBeforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    /** Request object for exporting device inventory information to CSV format. */
    Export_ExportInventoryWSRequest: {
      /** List of camera UUIDs to export (deprecated, use deviceUuids instead) */
      cameraUuids?: (string | null)[] | null;
      /** List of device UUIDs to export inventory for */
      deviceUuids?: (string | null)[] | null;
    };
    /** Request object for exporting motion events from motion sensors with time filtering. */
    Export_ExportMotionEventsWSRequest: {
      /** After datetime provided as a UNIX timestamp in milliseconds */
      createdAfterMs?: number | null;
      /** Before datetime provided as a UNIX timestamp in milliseconds */
      createdBeforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid: string | null;
    };
    /** Request object for exporting people count events with time interval filtering. */
    Export_ExportPeopleCountEventsWSRequest: {
      /** End time interval in milliseconds for filtering people count events */
      endInterval?: number | null;
      /** Start time interval in milliseconds for filtering people count events */
      startInterval?: number | null;
    };
    /** Request object for exporting people detection events with time interval filtering. */
    Export_ExportPeopleEventsWSRequest: {
      /** End time interval in milliseconds for filtering people events */
      endInterval?: number | null;
      /** Start time interval in milliseconds for filtering people events */
      startInterval?: number | null;
    };
    /** Request object for exporting proximity events with time filtering and tag selection. */
    Export_ExportProximityEventsWSRequest: {
      createBeforeMs?: number | null;
      /** Start time in milliseconds for filtering proximity events */
      createdAfterMs?: number | null;
      /** End time in milliseconds for filtering proximity events */
      createdBeforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      tagUuid?: string | null;
    };
    /** Request object for exporting proximity locomotion events with time filtering and tag selection. */
    Export_ExportProximityLocomotionEventsWSRequest: {
      createBeforeMs?: number | null;
      /** Start time in milliseconds for filtering proximity locomotion events */
      createdAfterMs?: number | null;
      /** End time in milliseconds for filtering proximity locomotion events */
      createdBeforeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      tagUuid?: string | null;
    };
    /** Request object for exporting device uptime reports with configurable time ranges and granularity. */
    Export_ExportUptimeWSRequest: {
      /** Use deviceUuids instead */
      cameraUuids?: (string | null)[] | null;
      /** List of device UUIDs to export uptime reports for */
      deviceUuids?: (string | null)[] | null;
      /** End date and time for the uptime report */
      endDateTime?: string | null;
      /** Time granularity for the uptime report */
      granularity?: ExportUptimeWSRequestGranularityEnum | null;
      /** Start date and time for the uptime report */
      startDateTime?: string | null;
    };
    /** Request object for exporting user information to CSV format. */
    Export_ExportUsersWSRequest: {
      /** List of user UUIDs to export information for */
      userUuids?: (string | null)[] | null;
    };
    /** Request object for exporting vehicle events with filtering by time, devices, labels, and plate numbers. */
    Export_ExportVehicleEventsWSRequest: {
      /** List of device UUIDs to filter vehicle events by */
      deviceUuids?: (string | null)[] | null;
      /** Whether to use fuzzy search on the provided plate numbers */
      fuzzy?: boolean | null;
      interval?: components["schemas"]["TimeInterval"];
      /** List of vehicle labels to filter by */
      labels?: (string | null)[] | null;
      /** List of license plate numbers to filter by */
      plateNumbers?: (string | null)[] | null;
    };
    /** List of face upload metadata for the transaction */
    FaceUploadMetadata: {
      createdAtMillis?: number | null;
      errorMsg?: string | null;
      faceId?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      origS3Key?: string | null;
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
      success?: boolean | null;
      transactionId?: string | null;
    };
    /** Request object for deleting a face event. */
    Facerecognition_faceevent_DeleteFaceEventWSRequest: {
      /** base 64 (url-safe) uuid string */
      eventUuid?: string | null;
    };
    /** Response object for deleting a face event. */
    Facerecognition_faceevent_DeleteFaceEventWSResponse: {
      [key: string]: unknown;
    };
    /** Request object for exporting face events by organization with search filtering. */
    Facerecognition_faceevent_ExportFaceEventsByOrgWSRequest: {
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSearchFilter"];
    };
    /** External face event object containing face recognition data with person matches, embeddings, and metadata. */
    Facerecognition_faceevent_ExternalFaceEvent: {
      /** Confidence value indicating the likelihood that the detected image is a face */
      detectionConfidence?: number | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** Confidence value associated with the embedding generated for the face image */
      embeddingConfidence?: number | null;
      /** Timestamp when the face event occurred */
      eventTimestamp?: number | null;
      /** Name of the person that matched the face image. If selectedPersonMatch is not null, faceName will be equal to the name field of selectedPersonMatch. */
      faceName?: string | null;
      /** Whether the face event has an embedding */
      hasEmbedding?: boolean | null;
      /** S3 key for the face event image */
      imageS3Key?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
      /** Pitch angle of the detected face */
      pitch?: number | null;
      /** Roll angle of the detected face */
      roll?: number | null;
      selectedPersonMatch?: components["schemas"]["Facerecognition_faceevent_ExternalPersonMatch"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** S3 key for the face event thumbnail */
      thumbnailS3Key?: string | null;
      /** Top person matches found for the face image. */
      topPersonMatches?:
        | components["schemas"]["Facerecognition_faceevent_ExternalPersonMatch"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      /** Yaw angle of the detected face */
      yaw?: number | null;
    };
    /** Search filter for face events with embedding presence filtering. */
    Facerecognition_faceevent_ExternalFaceEventSearchFilter: {
      /** Optional filter by a set of devices. */
      deviceUuids?: (string | null)[] | null;
      /** Optional filter by name substring. The face event is a match if its face name contains the specified value. The search will only be performed if the provided value is at least 3 characters long after trimming leading and trailing spaces. If both faceNameContains and faceNames are specified, faceNameContains takes a precedence. */
      faceNameContains?: string | null;
      /** Optional filter by people names. */
      faceNames?: (string | null)[] | null;
      /** Optional filter by the presence or absence of an embedding. */
      hasEmbedding?: boolean | null;
      /** Optional filter by the presence or absence of a person name. */
      hasName?: boolean | null;
      /** Optional filter by labels. */
      labels?: (string | null)[] | null;
      /** Optional filter by a set of locations. */
      locationUuids?: (string | null)[] | null;
      /** Optional filter by a set of people. */
      personUuids?: (string | null)[] | null;
      timestampFilter?: components["schemas"]["TimestampFilter"];
    };
    /** Search filter for finding similar face events with similarity thresholds and confidence settings. */
    Facerecognition_faceevent_ExternalFaceEventSimilaritySearchFilter: {
      /** Optional filter by a set of devices. */
      deviceUuids?: (string | null)[] | null;
      /** Optional face embedding confidence threshold used to filter out face events with embeddingconfidence values less than the specified threshold. Valid range [0,1]. */
      embeddingConfidenceThreshold?: number | null;
      /** Optional face match distance threshold used to compare face event images. Defaults to 0.7.Valid range [0,1]. */
      faceMatchDistanceThreshold?: number | null;
      /** Optional filter by name substring. The face event is a match if its face name contains the specified value. The search will only be performed if the provided value is at least 3 characters long after trimming leading and trailing spaces. If both faceNameContains and faceNames are specified, faceNameContains takes a precedence. */
      faceNameContains?: string | null;
      /** Optional filter by people names. */
      faceNames?: (string | null)[] | null;
      /** Optional filter by the presence or absence of a person name. */
      hasName?: boolean | null;
      /** Optional filter by labels. */
      labels?: (string | null)[] | null;
      /** Optional filter by a set of locations. */
      locationUuids?: (string | null)[] | null;
      /** Optional filter by a set of people. */
      personUuids?: (string | null)[] | null;
      timestampFilter?: components["schemas"]["TimestampFilter"];
    };
    /** Person match information for face recognition events with confidence scoring. */
    Facerecognition_faceevent_ExternalPersonMatch: {
      /** Match confidence level expressed as a value in range[0,1] */
      confidence?: number | null;
      /** Face ID associated with the person match */
      faceId?: string | null;
      /** Name of the person matched */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for finding face events by device for reporting purposes with timestamp filtering and pagination. */
    Facerecognition_faceevent_FindFaceEventsByDeviceForReportingWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      timestampFilter?: components["schemas"]["Facerecognition_faceevent_ReportTimestampFilter"];
    };
    /** Response object containing face events by device for reporting purposes with pagination information. */
    Facerecognition_faceevent_FindFaceEventsByDeviceForReportingWSResponse: {
      /** List of face events by device for reporting purposes */
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      /** Pagination key for retrieving the next page of face events by device for reporting */
      lastEvaluatedKey?: string | null;
    };
    /** Request object for finding face events by location for reporting purposes with timestamp filtering and pagination. */
    Facerecognition_faceevent_FindFaceEventsByLocationForReportingWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      timestampFilter?: components["schemas"]["Facerecognition_faceevent_ReportTimestampFilter"];
    };
    /** Response object containing face events by location for reporting purposes with pagination information. */
    Facerecognition_faceevent_FindFaceEventsByLocationForReportingWSResponse: {
      /** List of face events by location for reporting purposes */
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      /** Pagination key for retrieving the next page of face events by location for reporting */
      lastEvaluatedKey?: string | null;
    };
    /** Request object for finding face events by organization for reporting purposes with timestamp filtering and pagination. */
    Facerecognition_faceevent_FindFaceEventsByOrgForReportingWSRequest: {
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      timestampFilter?: components["schemas"]["Facerecognition_faceevent_ReportTimestampFilter"];
    };
    /** Response object containing face events for reporting purposes with pagination information. */
    Facerecognition_faceevent_FindFaceEventsByOrgForReportingWSResponse: {
      /** List of face events for reporting purposes */
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      /** Pagination key for retrieving the next page of face events for reporting */
      lastEvaluatedKey?: string | null;
    };
    /** Request object for finding face events by organization with search filtering and pagination. */
    Facerecognition_faceevent_FindFaceEventsByOrgWSRequest: {
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSearchFilter"];
    };
    /** Response object containing face events for an organization with pagination information. */
    Facerecognition_faceevent_FindFaceEventsByOrgWSResponse: {
      /** List of face events matching the search criteria */
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      /** Pagination key for retrieving the next page of results */
      lastEvaluatedKey?: string | null;
    };
    /** Request object for finding face events similar to a face embedding with search filtering and pagination. */
    Facerecognition_faceevent_FindSimilarFaceEventsByEmbeddingWSRequest: {
      embedding?: components["schemas"]["Embedding"];
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSimilaritySearchFilter"];
    };
    /** Response object containing face events similar to a face embedding with pagination information. */
    Facerecognition_faceevent_FindSimilarFaceEventsByEmbeddingWSResponse: {
      /** List of face events similar to the specified face embedding */
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      /** Pagination key for retrieving the next page of similar face events */
      lastEvaluatedKey?: string | null;
    };
    /** Request object for finding face events similar to a face ID using face matchmaker with search filtering and pagination. */
    Facerecognition_faceevent_FindSimilarFaceEventsByFaceMatchmakerWSRequest: {
      /** Face ID to find similar face events for */
      faceId?: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSimilaritySearchFilter"];
    };
    /** Response object containing face events similar to a face ID using face matchmaker with pagination information. */
    Facerecognition_faceevent_FindSimilarFaceEventsByFaceMatchmakerWSResponse: {
      /** List of face events similar to the specified face ID */
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      /** Pagination key for retrieving the next page of similar face events */
      lastEvaluatedKey?: string | null;
    };
    /** Request object for finding face events similar to a specified face event with search filtering and pagination. */
    Facerecognition_faceevent_FindSimilarFaceEventsWSRequest: {
      /** base 64 (url-safe) uuid string */
      faceEventUuid?: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSimilaritySearchFilter"];
    };
    /** Response object containing face events similar to a specified face event with pagination information. */
    Facerecognition_faceevent_FindSimilarFaceEventsWSResponse: {
      /** List of face events similar to the specified face event */
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      /** Pagination key for retrieving the next page of similar face events */
      lastEvaluatedKey?: string | null;
    };
    /** Request object for retrieving a specific face event by UUID. */
    Facerecognition_faceevent_GetFaceEventWSRequest: {
      /** base 64 (url-safe) uuid string */
      eventUuid?: string | null;
    };
    /** Response object containing a specific face event. */
    Facerecognition_faceevent_GetFaceEventWSResponse: {
      faceEvent?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"];
    };
    /** Response object containing processed face search image with embedding and base64 image data. */
    Facerecognition_faceevent_ProcessFaceEventSearchImageWSResponse: {
      embedding?: components["schemas"]["Embedding"];
      /** Base64 encoded image used for embedding generation. The image in the request may have been modified(cropped) in order to generate embedding. */
      imageBase64?: string | null;
    };
    /** Filter object for reporting face events with timestamp range and interval configuration. */
    Facerecognition_faceevent_ReportTimestampFilter: {
      /** Start date for the reporting range */
      rangeStart?: string | null;
      /** Report interval for filtering face events */
      reportInterval?: ReportTimestampFilterReportIntervalEnum | null;
    };
    /** Request object for updating a face event with person association information. */
    Facerecognition_faceevent_UpdateFaceEventWSRequest: {
      /** base 64 (url-safe) uuid string */
      eventUuid?: string | null;
      /** Name of the person associated with the face event. Ignored if person UUID matches to one of the top person matches. */
      personName?: string | null;
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
    };
    /** Response object for updating a face event. */
    Facerecognition_faceevent_UpdateFaceEventWSResponse: {
      faceEvent?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"];
    };
    /** Request object for creating a face matchmaker from a face event sighting. */
    Facerecognition_matchmaker_CreateFaceMatchmakerFromSightingWSRequest: {
      /** base 64 (url-safe) uuid string */
      faceEventUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
    };
    /** Response object for creating a face matchmaker from a face event sighting. */
    Facerecognition_matchmaker_CreateFaceMatchmakerFromSightingWSResponse: {
      faceMatchmaker?: components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"];
    };
    /** Response object for creating a person and associated face matchmakers. */
    Facerecognition_matchmaker_CreatePersonAndFaceMatchmakersWSResponse: {
      /** List of created face matchmakers for the person */
      faceMatchmakers?:
        | components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"][]
        | null;
      person?: components["schemas"]["Person"];
      /** Transaction ID for tracking the creation process */
      transactionId?: string | null;
    };
    /** Request object for deleting a face matchmaker. */
    Facerecognition_matchmaker_DeleteFaceMatchmakerWSRequest: {
      /** Face ID of the matchmaker to delete */
      faceId?: string | null;
    };
    /** Response object for deleting a face matchmaker. */
    Facerecognition_matchmaker_DeleteFaceMatchmakerWSResponse: {
      [key: string]: unknown;
    };
    /** External face matchmaker object containing face recognition matchmaker data and metadata. */
    Facerecognition_matchmaker_ExternalFaceMatchmaker: {
      /** Date when the face matchmaker was created */
      createdOn?: string | null;
      /** Unique identifier for the face matchmaker */
      id?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
      /** Whether the face matchmaker has been uploaded */
      uploaded?: boolean | null;
    };
    /** Result of a file upload process for face matchmaker creation, including success status and error messages. */
    Facerecognition_matchmaker_FileUploadResult: {
      /** The name of the uploaded file. */
      fileName?: string | null;
      /** Error message that occurred during upload. */
      message?: string | null;
      /** Indicates whether the file upload was successful. Note, that even if upload was successful, subsequent operations, such as adding the uploaded file as a matchmaker, may fail. */
      success?: boolean | null;
    };
    /** Request object for finding face matchmakers by organization. */
    Facerecognition_matchmaker_FindFaceMatchmakersByOrgWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing face matchmakers for an organization. */
    Facerecognition_matchmaker_FindFaceMatchmakersByOrgWSResponse: {
      /** List of face matchmakers for the organization */
      faceMatchmakers?:
        | components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"][]
        | null;
    };
    /** Request object for finding face matchmakers by person UUID. */
    Facerecognition_matchmaker_FindFaceMatchmakersByPersonWSRequest: {
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
    };
    /** Response object containing face matchmakers for a specific person. */
    Facerecognition_matchmaker_FindFaceMatchmakersByPersonWSResponse: {
      /** List of face matchmakers for the specified person */
      faceMatchmakers?:
        | components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"][]
        | null;
    };
    /** Request object for finding face upload metadata by transaction ID. */
    Facerecognition_matchmaker_FindFaceUploadMetadataByTransactionWSRequest: {
      /** Transaction ID to find face upload metadata for */
      transactionId?: string | null;
    };
    /** Response object containing face upload metadata for a transaction. */
    Facerecognition_matchmaker_FindFaceUploadMetadataByTransactionWSResponse: {
      /** List of face upload metadata for the transaction */
      faceUploadMetadata?: components["schemas"]["FaceUploadMetadata"][] | null;
    };
    /** Request object for retrieving face matching configuration. */
    Facerecognition_matchmaker_GetFaceMatchingConfigWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing face matching configuration settings. */
    Facerecognition_matchmaker_GetFaceMatchingConfigWSResponse: {
      /** Face match confidence threshold value */
      faceMatchConfidenceThreshold?: number | null;
    };
    /** Request object for retrieving a face matchmaker by face ID. */
    Facerecognition_matchmaker_GetFaceMatchmakerWSRequest: {
      /** Face ID to retrieve the matchmaker for */
      faceId?: string | null;
    };
    /** Response object containing a face matchmaker. */
    Facerecognition_matchmaker_GetFaceMatchmakerWSResponse: {
      faceMatchmaker?: components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"];
    };
    /** Request object for updating face matching configuration settings. */
    Facerecognition_matchmaker_UpdateFaceMatchingConfigWSRequest: {
      /** Minimum confidence level required for the system to automatically assign a match. If null, the system uses the built-in default. */
      faceMatchConfidenceThreshold?: number | null;
    };
    /** Response object for updating face matching configuration settings. */
    Facerecognition_matchmaker_UpdateFaceMatchingConfigWSResponse: {
      /** Updated face match confidence threshold value */
      faceMatchConfidenceThreshold?: number | null;
    };
    /** Response object for uploading a face matchmaker for a specific person. */
    Facerecognition_matchmaker_UploadFaceMatchmakerForPersonWSResponse: {
      fileUploadResult?: components["schemas"]["Facerecognition_matchmaker_FileUploadResult"];
      /** Transaction ID to track face matchmaker upload progress */
      transactionId?: string | null;
    };
    /** Response object for uploading face matchmakers with transaction tracking and upload results. */
    Facerecognition_matchmaker_UploadFaceMatchmakersWSResponse: {
      /** List of file upload results for each uploaded face matchmaker */
      fileUploadResults?:
        | components["schemas"]["Facerecognition_matchmaker_FileUploadResult"][]
        | null;
      /** Transaction ID to track face matchmakers upload progress */
      transactionId?: string | null;
    };
    /** Response object for validating face matchmaker images with validation status and error information. */
    Facerecognition_matchmaker_ValidateFaceMatchmakerImageWSResponse: {
      /** Error message if validation failed */
      errorMessage?: string | null;
      /** Whether the face matchmaker image is valid */
      valid?: boolean | null;
    };
    /** Request object for adding a label to a person for face recognition purposes. */
    Facerecognition_person_AddPersonLabelWSRequest: {
      /** Label to add to the person */
      label?: string | null;
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
    };
    /** Response object for adding a label to a person for face recognition purposes. */
    Facerecognition_person_AddPersonLabelWSResponse: { [key: string]: unknown };
    /** Request object for creating a person for face recognition purposes. */
    Facerecognition_person_CreatePersonWSRequest: {
      /** Name of the person to create */
      name?: string | null;
    };
    /** Response object for creating a person for face recognition purposes. */
    Facerecognition_person_CreatePersonWSResponse: {
      person?: components["schemas"]["Person"];
    };
    /** Request object for deleting a person for face recognition purposes. */
    Facerecognition_person_DeletePersonWSRequest: {
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
    };
    /** Response object for deleting a person for face recognition purposes. */
    Facerecognition_person_DeletePersonWSResponse: { [key: string]: unknown };
    /** Request object for finding people by organization for face recognition purposes. */
    Facerecognition_person_FindPeopleByOrgWSRequest: { [key: string]: unknown };
    /** Response object containing people for an organization for face recognition purposes. */
    Facerecognition_person_FindPeopleByOrgWSResponse: {
      /** List of people for the organization */
      people?: components["schemas"]["Person"][] | null;
    };
    /** Request object for finding person labels by organization for face recognition purposes. */
    Facerecognition_person_FindPersonLabelsByOrgWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing person labels by organization for face recognition purposes. */
    Facerecognition_person_FindPersonLabelsByOrgWSResponse: {
      /** Map of person UUIDs to their associated labels */
      labelsByPerson?: { [key: string]: (string | null)[] | null } | null;
    };
    /** Request object for retrieving a person by UUID. */
    Facerecognition_person_GetPersonWSRequest: {
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
    };
    /** Response object containing a person. */
    Facerecognition_person_GetPersonWSResponse: {
      person?: components["schemas"]["Person"];
    };
    /** Request object for removing a label from a person for face recognition purposes. */
    Facerecognition_person_RemovePersonLabelWSRequest: {
      /** Label to remove from the person */
      label?: string | null;
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
    };
    /** Response object for removing a label from a person for face recognition purposes. */
    Facerecognition_person_RemovePersonLabelWSResponse: {
      [key: string]: unknown;
    };
    /** Request object for updating a person for face recognition purposes. */
    Facerecognition_person_UpdatePersonWSRequest: {
      personSelectiveUpdate?: components["schemas"]["PersonSelectiveUpdate"];
    };
    /** Response object for updating a person for face recognition purposes. */
    Facerecognition_person_UpdatePersonWSResponse: {
      person?: components["schemas"]["Person"];
    };
    /** List of feature compatibility information */
    FeatureCompatabilityType: {
      betaRolloutOrgFlag?: string | null;
      deviceFeatureEnablement?: components["schemas"]["DeviceFeatureEnum"];
      featureName?: string | null;
      generatedActivities?: components["schemas"]["ActivityEnum"][] | null;
      hardwareDefaultMap?: { [key: string]: boolean | null } | null;
      requiredLicenses?: components["schemas"]["License"][] | null;
      supportedHardware?:
        | components["schemas"]["HardwareVariationEnum"][]
        | null;
    };
    /** Device features configuration with feature enablement mapping. */
    Feature_DeviceFeaturesType: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** Map of device features to their enabled/disabled status */
      featureMap?: { [key: string]: boolean | null } | null;
    };
    /** Request object for retrieving possible event types for a device based on enabled features. */
    Feature_GetDeviceEventTypesWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
    };
    /** Response object containing possible event types for a device based on enabled features. */
    Feature_GetDeviceEventTypesWSResponse: {
      /** List of possible event types for the device */
      eventTypes?: components["schemas"]["ActivityEnum"][] | null;
    };
    /** Request object for retrieving enabled features for multiple devices in an organization. */
    Feature_GetDeviceFeaturesListWSRequest: {
      /** List of device UUIDs to retrieve features for */
      deviceUuids?: (string | null)[] | null;
    };
    /** Response object containing enabled features for multiple devices in an organization. */
    Feature_GetDeviceFeaturesListWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of device features for each requested device */
      featureList?:
        | components["schemas"]["Feature_DeviceFeaturesType"][]
        | null;
    };
    /** Request object for retrieving enabled features for a device. */
    Feature_GetDeviceFeaturesWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
    };
    /** Response object containing enabled features for a device. */
    Feature_GetDeviceFeaturesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      features?: components["schemas"]["Feature_DeviceFeaturesType"];
    };
    /** Request object for retrieving the feature compatibility matrix. */
    Feature_GetFeatureCompatabilityMatrixWSRequest: { [key: string]: unknown };
    /** Response object containing the feature compatibility matrix. */
    Feature_GetFeatureCompatabilityMatrixWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of feature compatibility information */
      featureCompatabilityMatrix?:
        | components["schemas"]["FeatureCompatabilityType"][]
        | null;
    };
    /** Request object for updating enabled features for a device. */
    Feature_UpdateDeviceFeaturesWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** Map of device features to their new enabled/disabled status */
      featureMap?: { [key: string]: boolean | null } | null;
    };
    /** Response object for updating enabled features for a device. */
    Feature_UpdateDeviceFeaturesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    FirmwareUpdateIntervalType: {
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
    } | null;
    /** Overrides default firmware update settings. */
    FirmwareUpdateSettingsOverrideType: {
      deviceTypes?: components["schemas"]["DeviceTypeEnum"][] | null;
      firmwareUpdateSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
    } | null;
    FirmwareUpdateSettingsType: {
      intervalsV2?:
        | components["schemas"]["FirmwareUpdateIntervalType"][]
        | null;
      mode?: FirmwareUpdateSettingsModeEnum | null;
    } | null;
    FirstInFirmwareStatus: FirstInFirmwareStatusEnum;
    FirstInResetEnum: FirstInResetEnum;
    FirstInShadow: {
      originator?: components["schemas"]["BaseEventOriginator"];
      source?: components["schemas"]["FirstInSourceEnum"];
      state?: components["schemas"]["FirstInFirmwareStatus"];
      stateUpdateEventTimestampMs?: number | null;
    };
    FirstInSourceEnum: FirstInSourceEnum;
    FirstInState: {
      originator?: components["schemas"]["BaseEventOriginator"];
      requestedAtMillis?: number | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    FirstInState_Minimal: {
      originator?: components["schemas"]["BaseEventOriginator_Minimal"];
      requestedAtMillis?: number | null;
      state?: components["schemas"]["FirstInStatus_Minimal"];
    };
    FirstInStatus: FirstInStatusEnum;
    FirstInStatus_Minimal: FirstInStatus_MinimalEnum;
    /** Fisheye display mode of the shared video wall device */
    FisheyeDisplayMode: FisheyeDisplayModeEnum;
    FlicDevice: {
      flicAction?: string | null;
      flicBatteryLevel?: string | null;
      flicHub?: components["schemas"]["FlicHub"];
      flicName?: string | null;
      flicSerialNumber?: string | null;
      flicTimestamp?: number | null;
      flicUuid?: string | null;
      lastClickedTimestamp?: string | null;
      moduleUuid?: string | null;
    };
    FlicHub: {
      flicHubName?: string | null;
      flicHubSerialNumber?: string | null;
      flicHubUuid?: string | null;
    };
    FlicType:
      | ({
          apiKey?: string | null;
          apiSecret?: string | null;
          associatedLocations?: (string | null)[] | null;
          moduleUploaded?: boolean | null;
          webhookId?: string | null;
          /** base 64 (url-safe) uuid string */
          webhookToken?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    FloorPlanType: {
      eastEdge?: number | null;
      floorLabel?: string | null;
      floorNumber?: number | null;
      imageUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      mediaUuid?: string | null;
      northEdge?: number | null;
      rotation?: number | null;
      southEdge?: number | null;
      westEdge?: number | null;
    };
    FollowUpAction: components["schemas"]["NotificationFollowUp"] & {
      type?: components["schemas"]["Action"];
    };
    /** List of shared footage bounding boxes */
    FootageBoundingBoxType: {
      a: components["schemas"]["ActivityEnum"];
      /** alerted on this? */
      al?: boolean | null;
      /** bounding box - bottom permyriad */
      b: number | null;
      /** confidence */
      c?: number | null;
      /** Custom activity display description, maximum 100 characters */
      cd?: string | null;
      /** custom activity display name */
      cdn?: string | null;
      croppedImageLocator?: string | null;
      customActivityColor?: FootageBoundingBoxCustomActivityColorEnum | null;
      /** face names */
      fn?: string | null;
      /** pose keypoints */
      kp?: { [key: string]: components["schemas"]["PointType"] } | null;
      /** bounding box - left permyriad */
      l: number | null;
      loudness?: number | null;
      /** license plate */
      lp?: string | null;
      /** object in motion? */
      m?: boolean | null;
      objectId?: number | null;
      /** pose */
      p?: string | null;
      /** bounding box - right permyriad */
      r: number | null;
      /** recognized objects */
      ro?: (string | null)[] | null;
      sensorValType?: components["schemas"]["SensorValType"];
      /** bounding box - top permyriad */
      t: number | null;
      toastOrderIdInfo?: components["schemas"]["ToastOrderIdType"];
      /** timestamp in milliseconds since epoch */
      ts: number | null;
      /** FaceId for an unidentified face */
      uf?: string | null;
      /** vehicle name */
      vn?: string | null;
    };
    /** List of shared footage seekpoints */
    FootageSeekPointType: {
      a?: components["schemas"]["ActivityEnum"];
      al?: boolean | null;
      b?: number | null;
      fn?: string | null;
      kp?: { [key: string]: components["schemas"]["PointType"] } | null;
      l?: number | null;
      lp?: string | null;
      p?: string | null;
      r?: number | null;
      ro?: (string | null)[] | null;
      t?: number | null;
      ts?: number | null;
      uf?: string | null;
      vn?: string | null;
    };
    /** List of shared footage seekpoints (deprecated) */
    FootageSeekPointV2Type: {
      a: components["schemas"]["ActivityEnum"];
      /** alerted on this? */
      al?: boolean | null;
      /** Custom activity seekpoint color */
      cc?: FootageSeekPointV2CcEnum | null;
      /** Custom activity display description, maximum 100 characters */
      cd?: string | null;
      /** Custom activity display name, maximum 32 characters */
      cdn?: string | null;
      dcao?: boolean | null;
      /** face names */
      fn?: string | null;
      id?: number | null;
      loudness?: number | null;
      /** license plate */
      lp?: string | null;
      /** object in motion? */
      m?: boolean | null;
      /** pose */
      p?: string | null;
      /** recognized objects */
      ro?: (string | null)[] | null;
      sensorValType?: components["schemas"]["SensorValType"];
      toi?: components["schemas"]["ToastOrderIdType"];
      /** timestamp */
      ts: number | null;
      tu?: string | null;
      /** FaceId for an unidentified face */
      uf?: string | null;
      /** vehicle name */
      vn?: string | null;
    };
    FormDataBodyPart: {
      content?: { [key: string]: unknown } | null;
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: { [key: string]: unknown } | null;
      fileName?: string | null;
      formDataContentDisposition?: components["schemas"]["FormDataContentDisposition"];
      headers?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      name?: string | null;
      parameterizedHeaders?:
        | ({
            empty?: boolean | null;
          } & {
            [key: string]:
              | components["schemas"]["ParameterizedHeader"][]
              | null;
          })
        | null;
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
      simple?: boolean | null;
      value?: string | null;
    } | null;
    FormDataContentDisposition: {
      creationDate?: string | null;
      fileName?: string | null;
      modificationDate?: string | null;
      name?: string | null;
      parameters?: { [key: string]: string | null } | null;
      readDate?: string | null;
      size?: number | null;
      type?: string | null;
    };
    FormDataMultiPart: {
      bodyParts?: components["schemas"]["BodyPart"][] | null;
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: { [key: string]: unknown } | null;
      fields?: {
        [key: string]: components["schemas"]["FormDataBodyPart"][] | null;
      } | null;
      headers?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parameterizedHeaders?:
        | ({
            empty?: boolean | null;
          } & {
            [key: string]:
              | components["schemas"]["ParameterizedHeader"][]
              | null;
          })
        | null;
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
    } | null;
    FormaSensorType: {
      ch2oPpb?: number | null;
      relHumid?: number | null;
      tempC?: number | null;
      timestampSec?: number | null;
    };
    Freight: {
      warehouse?: FreightWarehouseEnum | null;
    };
    FrequencyUnit: FrequencyUnitEnum;
    FrontendEqualizerSettings: {
      frequency?: number | null;
      gain?: number | null;
      q?: number | null;
    };
    /** Detailed state information for the specified NVR */
    FullDeviceStateType: {
      afSupport?: boolean | null;
      audioSupported?: boolean | null;
      baseVideoOperationUri?: string | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      connectionTimestampMs?: number | null;
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latestFirmwareVersion?: string | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      maxZoomPercent?: number | null;
      mediaRegion?: string | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      onCameraState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      onCloudState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      region?: string | null;
      secondaryLanAddresses?: (string | null)[] | null;
      serialNumber?: string | null;
      ssid?: string | null;
      stateUpdatedTimestampMs?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      versionsBehind?: number | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    Functionality: FunctionalityEnum;
    GeneaSettings: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookSignatureSecret?: string | null;
      webhookUuid?: string | null;
    };
    GeneaType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          refreshToken?: string | null;
          /** base 64 (url-safe) uuid string */
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          webhookSignatureSecret?: string | null;
          webhookUuid?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    GenericButtonShadowType:
      | ({
          state?: components["schemas"]["GenericButtonStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
          supervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    GenericButtonStateEnumType: GenericButtonStateEnumType;
    GenericDoorType: {
      id?: string | null;
      name?: string | null;
    };
    GenericInputShadowType:
      | ({
          state?: components["schemas"]["GenericInputStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
          supervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    GenericInputStateChangeEventType:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["GenericInputStateEnumType"];
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    GenericInputStateEnumType: GenericInputStateEnumType;
    GenericObjectEmbedding: {
      /** bounding box - bottom permyriad */
      b?: number | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      embedding?: (number | null)[] | null;
      embeddingId?: string | null;
      /** bounding box - left permyriad */
      l?: number | null;
      model?: components["schemas"]["ObjectSearchModelEnum"];
      objectId?: number | null;
      objectType?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** bounding box - right permyriad */
      r?: number | null;
      /** bounding box - top permyriad */
      t?: number | null;
      thumbnailUri?: string | null;
      timestamp?: number | null;
    };
    /** List of similar object embedding matches */
    GenericObjectEmbeddingMatch: {
      distance?: number | null;
      embedding?: components["schemas"]["GenericObjectEmbedding"];
      /** base 64 (url-safe) uuid string */
      matchedEmbeddingId?: string | null;
    };
    /** Collection of service area settings for this restaurant */
    GenericPosSettings: {
      /** A list of camera uuids from Rhombus that are assigned to the PoS device */
      assignedCameraList?: (string | null)[] | null;
      /** The name of the point of sale device */
      posName?: string | null;
    } | null;
    GenericPosType: {
      id?: string | null;
      name?: string | null;
    };
    GenericRelayShadowType:
      | ({
          originator?: components["schemas"]["BaseEventOriginator"];
          state?: components["schemas"]["GenericRelayStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    GenericRelayStateChangeEventType:
      | ({
          originator?: components["schemas"]["BaseEventOriginator"];
          steadyState?: components["schemas"]["GenericRelayStateEnumType"];
          steadyStateChangedAtMs?: number | null;
          transientState?: components["schemas"]["GenericRelayStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    GenericRelayStateEnumType: GenericRelayStateEnumType;
    GenericVideoEmbedding: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      embedding?: (number | null)[] | null;
      embeddingId?: string | null;
      endTimeMs?: number | null;
      model?: components["schemas"]["VideoSimilarityModelEnum"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      startTimeMs?: number | null;
    };
    /** List of similar video embedding matches */
    GenericVideoEmbeddingMatch: {
      distance?: number | null;
      embedding?: components["schemas"]["GenericVideoEmbedding"];
      matchedEmbeddingId?: string | null;
    };
    GeoIpLocationType: {
      city_name?: string | null;
      country_code?: string | null;
      country_name?: string | null;
      region_name?: string | null;
    };
    GeodeticCoordinates: {
      error?: components["schemas"]["GpsError"];
      floor?: number | null;
      lat?: number | null;
      lon?: number | null;
    };
    GetTemporaryOrgTokenResponse: {
      /** base 64 (url-safe) uuid string */
      tempOrgToken?: string | null;
    };
    /** Source of the Google reCAPTCHA (legacy or V3) */
    GoogleCaptchaSourceEnum: GoogleCaptchaSourceEnum;
    /** Google integration settings to update */
    GoogleSettings: {
      accountUser?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      folderId?: string | null;
      teamDriveId?: string | null;
    };
    GoogleSettingsV2: {
      defaultAlertFolderId?: string | null;
      defaultAlertFolderName?: string | null;
      defaultFolderId?: string | null;
      defaultFolderName?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      refreshToken?: string | null;
      saveAllAlerts?: boolean | null;
      saveClips?: boolean | null;
    };
    GoogleType:
      | ({
          allowUserStorage?: boolean | null;
          apiToken?: string | null;
          defaultAlertFolderId?: string | null;
          defaultAlertFolderName?: string | null;
          defaultFolderId?: string | null;
          defaultFolderName?: string | null;
          refreshToken?: string | null;
          saveAllAlerts?: boolean | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          userSettingsMap?: {
            [key: string]: components["schemas"]["GoogleUserSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    GoogleUserSettings: {
      defaultAlertFolderId?: string | null;
      defaultAlertFolderName?: string | null;
      defaultFolderId?: string | null;
      defaultFolderName?: string | null;
      refreshToken?: string | null;
      saveAllAlerts?: boolean | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
    } | null;
    GpsError: {
      majorAxis?: number | null;
      minorAxis?: number | null;
      rotation?: number | null;
    };
    /** Request to add users to an organization group. */
    Group_AddUsersToOrgGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
      /** List of user UUIDs to add to the group */
      userUuids?: (string | null)[] | null;
    };
    /** Response for adding users to an organization group. */
    Group_AddUsersToOrgGroupWSResponse: {
      /** Users added to the group successfully from the original request */
      groupMembers?: components["schemas"]["OrgGroupMemberType"][] | null;
    };
    /** Request to create an organization group. */
    Group_CreateOrgGroupWSRequest: {
      /** Description of the group */
      description?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Name of the group */
      name: string | null;
      /** List of user UUIDs to add to the group */
      userUuids?: (string | null)[] | null;
    };
    /** Response for organization group creation. */
    Group_CreateOrgGroupWSResponse: {
      group?: components["schemas"]["OrgGroupType"];
      /** List of group members if optionally added when creating the group */
      groupMembers?: components["schemas"]["OrgGroupMemberType"][] | null;
    };
    /** Request to delete an organization group. */
    Group_DeleteOrgGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
    };
    /** Response indicating successful deletion of an organization group. */
    Group_DeleteOrgGroupWSResponse: { [key: string]: unknown };
    /** Request to find all users for an organization group. */
    Group_FindAllUsersForOrgGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
    };
    /** Response containing all users for an organization group. */
    Group_FindAllUsersForOrgGroupWSResponse: {
      /** List of group members */
      groupMembers?: components["schemas"]["OrgGroupMemberType"][] | null;
    };
    /** Request to find organization group memberships by user. */
    Group_FindOrgGroupMembershipsByUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response containing organization group memberships for a user. */
    Group_FindOrgGroupMembershipsByUserWSResponse: {
      /** List of user group memberships */
      userGroupMemberships?:
        | components["schemas"]["OrgGroupMemberType"][]
        | null;
    };
    /** Request to find organization group memberships for current user. */
    Group_FindOrgGroupMembershipsForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    /** Response containing organization group memberships for current user. */
    Group_FindOrgGroupMembershipsForCurrentUserWSResponse: {
      /** List of current user group memberships */
      userGroupMemberships?:
        | components["schemas"]["OrgGroupMemberType"][]
        | null;
    };
    /** Request to find organization groups by exact name. */
    Group_FindOrgGroupsByExactNameWSRequest: {
      /** Case insensitive name of the group to find, if it exists */
      groupName?: string | null;
    };
    /** Response containing organization group found by exact name. */
    Group_FindOrgGroupsByExactNameWSResponse: {
      group?: components["schemas"]["OrgGroupType"];
    };
    /** Request to find organization groups by name prefix. */
    Group_FindOrgGroupsByNamePrefixWSRequest: {
      /** Name prefix to search for groups */
      groupNamePrefix?: string | null;
    };
    /** Response containing organization groups found by name prefix. */
    Group_FindOrgGroupsByNamePrefixWSResponse: {
      /** List of organization groups found by name prefix */
      groups?: components["schemas"]["OrgGroupType"][] | null;
    };
    /** Request to find organization groups by organization. */
    Group_FindOrgGroupsByOrgWSRequest: { [key: string]: unknown };
    /** Response containing organization groups found by organization. */
    Group_FindOrgGroupsByOrgWSResponse: {
      /** List of organization groups found by organization */
      groups?: components["schemas"]["OrgGroupType"][] | null;
    };
    /** Request to find organization groups by user membership. */
    Group_FindOrgGroupsByUserMembershipWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response containing organization groups found by user membership. */
    Group_FindOrgGroupsByUserMembershipWSResponse: {
      /** List of organization groups found by user membership */
      groups?: components["schemas"]["OrgGroupType"][] | null;
    };
    /** Request to remove users from an organization group. */
    Group_RemoveUsersFromOrgGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
      /** List of user UUIDs to remove from the group */
      userUuids?: (string | null)[] | null;
    };
    /** Response indicating successful removal of users from an organization group. */
    Group_RemoveUsersFromOrgGroupWSResponse: { [key: string]: unknown };
    /** Request to update an organization group. */
    Group_UpdateOrgGroupWSRequest: {
      /** New description for the group */
      description?: string | null;
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
      /** New name for the group */
      name?: string | null;
    };
    /** Response containing the updated organization group. */
    Group_UpdateOrgGroupWSResponse: {
      group?: components["schemas"]["OrgGroupType"];
    };
    /** Guest information to update */
    Guest: {
      accessEndTimeMs?: number | null;
      accessStartTimeMs?: number | null;
      address1?: string | null;
      address2?: string | null;
      backgroundCheckStatus?: GuestBackgroundCheckStatusEnum | null;
      checkedInEnum?: components["schemas"]["GuestActivityEnum"];
      city?: string | null;
      companyName?: string | null;
      countryCode?: string | null;
      crime?: string | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      faceImage?: string | null;
      firstName?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      /** base 64 (url-safe) uuid string */
      hostUserUuid?: string | null;
      lastCheckedInMs?: number | null;
      lastCheckedOutMs?: number | null;
      lastName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      meetingParticipants?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      profileImageUrl?: string | null;
      state?: string | null;
      status?: components["schemas"]["GuestStatusEnum"];
    };
    GuestActivityEnum: GuestActivityEnum;
    GuestActivityLog: {
      activity?: components["schemas"]["GuestActivityEnum"];
      agent?: string | null;
      associatedCameras?: (string | null)[] | null;
      email?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      /** base 64 (url-safe) uuid string */
      hostUserUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      timestampMs?: number | null;
    };
    /** List of guest invites */
    GuestInvite: {
      accessEndTimeMs?: number | null;
      accessStartTimeMs?: number | null;
      address1?: string | null;
      address2?: string | null;
      backgroundCheckStatus?: GuestInviteBackgroundCheckStatusEnum | null;
      checkedInEnum?: components["schemas"]["GuestActivityEnum"];
      city?: string | null;
      companyName?: string | null;
      countryCode?: string | null;
      createdAtMs?: number | null;
      crime?: string | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      faceImage?: string | null;
      firstName?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      /** base 64 (url-safe) uuid string */
      hostUserUuid?: string | null;
      lastCheckedInMs?: number | null;
      lastCheckedOutMs?: number | null;
      lastName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      meetingParticipants?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      profileImageUrl?: string | null;
      state?: string | null;
      status?: components["schemas"]["GuestStatusEnum"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Guest invite to update */
    GuestInviteSelectiveUpdateByInvocation: {
      accessEndTimeMs?: number | null;
      accessStartTimeMs?: number | null;
      address1?: string | null;
      address2?: string | null;
      backgroundCheckStatus?: GuestInviteSelectiveUpdateByInvocationBackgroundCheckStatusEnum | null;
      checkedInEnum?: components["schemas"]["GuestActivityEnum"];
      city?: string | null;
      companyName?: string | null;
      countryCode?: string | null;
      createdAtMs?: number | null;
      crime?: string | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      faceImage?: string | null;
      firstName?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      /** base 64 (url-safe) uuid string */
      hostUserUuid?: string | null;
      lastCheckedInMs?: number | null;
      lastCheckedOutMs?: number | null;
      lastName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      meetingParticipants?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      profileImageUrl?: string | null;
      state?: string | null;
      status?: components["schemas"]["GuestStatusEnum"];
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    GuestManagementOrgSettings: {
      hexIdentityColor?: string | null;
      logoImageString?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    GuestManagementSettingsSelectiveUpdate: {
      hexIdentityColor?: string | null;
      logoImageString?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    GuestManagementType:
      | ({
          locationSettingsMap?: {
            [key: string]: components["schemas"]["LocationSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    /** Guest update information */
    GuestSelectiveUpdateByInvocation: {
      accessEndTimeMs?: number | null;
      accessStartTimeMs?: number | null;
      address1?: string | null;
      address2?: string | null;
      backgroundCheckStatus?: GuestSelectiveUpdateByInvocationBackgroundCheckStatusEnum | null;
      checkedInEnum?: components["schemas"]["GuestActivityEnum"];
      city?: string | null;
      companyName?: string | null;
      countryCode?: string | null;
      crime?: string | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      faceImage?: string | null;
      firstName?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      /** base 64 (url-safe) uuid string */
      hostUserUuid?: string | null;
      lastCheckedInMs?: number | null;
      lastCheckedOutMs?: number | null;
      lastName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      meetingParticipants?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      profileImageUrl?: string | null;
      state?: string | null;
      status?: components["schemas"]["GuestStatusEnum"];
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    GuestStatusEnum: GuestStatusEnum;
    GuestTypeEnum: GuestTypeEnum;
    Guestmanagement_ActivateKioskWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    Guestmanagement_ActivateKioskWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      redirectUrl?: string | null;
    };
    /** Base request object for guest management operations. */
    Guestmanagement_BaseGuestManagementWSRequest: { [key: string]: unknown };
    /** Request object for creating a guest invite. */
    Guestmanagement_CreateGuestInviteWSRequest: {
      guestInvite: components["schemas"]["GuestInvite"];
    };
    Guestmanagement_CreateGuestManagementSettingsWSRequest: {
      settings?: components["schemas"]["GuestManagementOrgSettings"];
    };
    Guestmanagement_CreateGuestManagementSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for creating a guest with optional file attachment. */
    Guestmanagement_CreateGuestWSRequest: {
      /** Optional file name for guest attachment */
      fileName?: string | null;
      guest?: components["schemas"]["Guest"];
    };
    Guestmanagement_ExportGuestActivitiesWSRequest: {
      beginTimeMs?: number | null;
      email?: string | null;
      endTimeMs?: number | null;
      includeGuestTypes?: components["schemas"]["GuestTypeEnum"][] | null;
      includeLocations?: (string | null)[] | null;
    };
    Guestmanagement_ExportGuestsWSRequest: {
      beginTimeMs?: number | null;
      endTimeMs?: number | null;
      includeGuestTypes?: components["schemas"]["GuestTypeEnum"][] | null;
      includeLocations?: (string | null)[] | null;
    };
    Guestmanagement_GetActivityLogsForGuestWSRequest: {
      email?: string | null;
    };
    Guestmanagement_GetActivityLogsForLocationWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      dynamoPageRequest?: components["schemas"]["DynamoPageRequest"];
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response object containing all guest invites. */
    Guestmanagement_GetAllGuestInvitesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of all guest invites */
      guestInvites?: components["schemas"]["GuestInvite"][] | null;
    };
    /** Response object containing all guests. */
    Guestmanagement_GetAllGuestsWSResponse: {
      /** List of all guests */
      allGuests?: components["schemas"]["Guest"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Guestmanagement_GetGuestActivityLogsWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      dynamoPageRequest?: components["schemas"]["DynamoPageRequest"];
    };
    Guestmanagement_GetGuestActivityLogsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guestActivities?: components["schemas"]["GuestActivityLog"][] | null;
    };
    /** Response object containing guest invite information. */
    Guestmanagement_GetGuestInviteWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guestInvite?: components["schemas"]["GuestInvite"];
    };
    /** Response object containing guest invites. */
    Guestmanagement_GetGuestInvitesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of guest invites */
      guestInvites?: components["schemas"]["GuestInvite"][] | null;
    };
    Guestmanagement_GetGuestManagementSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      settings?: components["schemas"]["GuestManagementOrgSettings"];
    };
    /** Response object containing guest information. */
    Guestmanagement_GetGuestWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guest?: components["schemas"]["Guest"];
    };
    Guestmanagement_GetInvitesForOrgWSRequest: {
      invitedAfterMs?: number | null;
      invitedBeforeMs?: number | null;
      paginateRequest?: components["schemas"]["PaginateRequest"];
    };
    Guestmanagement_GetKioskInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      kiosk?: components["schemas"]["Kiosk"];
    };
    Guestmanagement_GetKiosksForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      kiosks?: components["schemas"]["Kiosk"][] | null;
    };
    Guestmanagement_GetNametagTemplateForGuestWSRequest: {
      email?: string | null;
    };
    Guestmanagement_GetNametagTemplateForGuestWSResponse: {
      badgeTemplate?: components["schemas"]["BadgeTemplate"];
      companyLogoUrl?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for finding a guest by email address. */
    Guestmanagement_GuestByEmailWSRequest: {
      /** Email address of the guest to find */
      email?: string | null;
    };
    /** Request object for guest check-in operations. */
    Guestmanagement_GuestCheckinWSRequest: {
      /** Email address of the guest checking in */
      email: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid: string | null;
    };
    /** Request object for guest invite operations. */
    Guestmanagement_GuestInviteWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid: string | null;
    };
    /** Request object for finding guest invites by email address. */
    Guestmanagement_GuestInvitesByEmailWSRequest: {
      /** Email of the guest to invite */
      email: string | null;
    };
    /** Request object containing guest information. */
    Guestmanagement_GuestWSRequest: {
      guest?: components["schemas"]["Guest"];
    };
    /** Request object for updating guest invite information. */
    Guestmanagement_UpdateGuestInviteWSRequest: {
      inviteUpdate: components["schemas"]["GuestInviteSelectiveUpdateByInvocation"];
    };
    Guestmanagement_UpdateGuestManagementSettingsWSRequest: {
      settingsUpdate?: components["schemas"]["GuestManagementSettingsSelectiveUpdate"];
    };
    Guestmanagement_UpdateGuestManagementSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating guest information. */
    Guestmanagement_UpdateGuestWSRequest: {
      /** File name for guest-related data */
      fileName?: string | null;
      guest?: components["schemas"]["Guest"];
      guestUpdate?: components["schemas"]["GuestSelectiveUpdateByInvocation"];
    };
    HaloSettings: {
      alertAgression?: boolean | null;
      alertCO?: boolean | null;
      alertCO2?: boolean | null;
      alertGunshot?: boolean | null;
      alertHelp?: boolean | null;
      alertMasking?: boolean | null;
      alertTHC?: boolean | null;
      alertTamper?: boolean | null;
      alertTemp?: boolean | null;
      alertVOC?: boolean | null;
      alertVape?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      saveClips?: boolean | null;
      savedClipDurationMs?: number | null;
      sensorName?: string | null;
      sensorToCamerasMap?: { [key: string]: (string | null)[] | null } | null;
      triggerNotification?: boolean | null;
      url?: string | null;
    };
    HardwareInvoiceSubItem: {
      count?: number | null;
      description?: string | null;
      price?: number | null;
    };
    HardwareType: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      enforcedMinFirmwareVersion?: string | null;
      firmwareUpdateTimeMs?: number | null;
      firmwareVersion?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      mac?: string | null;
      manufacturedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      pendingRegistrationDeviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      pendingRegistrationOrgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      pendingRegistrationToken?: string | null;
      sdSize?: number | null;
      serialNumber?: string | null;
      type?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Hardware variation of the Rhombus door controller */
    HardwareVariationEnum: HardwareVariationEnum;
    /** Heat index range warning status */
    HeatIndexRangeWarningEnum: HeatIndexRangeWarningEnum;
    /** Request object for creating a support ticket. */
    Help_CreateTicketWSRequest: {
      /** Body content of the support ticket */
      body?: string | null;
      /** List of collaborator email addresses */
      collaborators?: (string | null)[] | null;
      /** Whether console access has been granted for troubleshooting */
      consoleAccessGranted?: boolean | null;
      productType?: string | null;
      /** List of device serial numbers related to the issue */
      serialNumbers?: (string | null)[] | null;
      serviceType?: string | null;
      /** Subject of the support ticket */
      subject?: string | null;
    };
    /** Response object for creating a support ticket. */
    Help_CreateTicketWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Reason for failure if ticket creation was unsuccessful */
      failureReason?: string | null;
      /** Whether the ticket creation was successful */
      success?: boolean | null;
      /** ID of the created support ticket */
      ticketId?: number | null;
    };
    /** Request object for retrieving open support tickets V2 with time range filtering. */
    Help_GetOpenTicketsV2WSRequest: {
      /** End time in milliseconds for filtering tickets */
      endTimeMs?: number | null;
      /** Start time in milliseconds for filtering tickets */
      startTimeMs?: number | null;
    };
    /** Response object containing open support tickets V2 with organization and user tickets. */
    Help_GetOpenTicketsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of organization support tickets */
      tickets?: components["schemas"]["Help_TicketInformation"][] | null;
      /** List of user-specific support tickets */
      userTickets?: components["schemas"]["Help_TicketInformation"][] | null;
    };
    /** Request object for retrieving open support tickets with pagination. */
    Help_GetOpenTicketsWSRequest: {
      /** Page number used for paginated response. If empty, the search will return the first page. */
      pageNumber?: number | null;
    };
    /** Response object containing open support tickets with pagination information. */
    Help_GetOpenTicketsWSResponse: {
      /** Current page number in the paginated response */
      currentPage?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** True if there is a next page, false otherwise */
      hasNexPage?: boolean | null;
      /** List of open support tickets */
      tickets?: components["schemas"]["Help_TicketInformation"][] | null;
      /** Total number of tickets, not limited to the current page */
      totalTickets?: number | null;
    };
    /** Request object for processing a Return Merchandise Authorization (RMA). */
    Help_ProcessRMAWSRequest: {
      /** Contact name for the RMA */
      contactName?: string | null;
      /** Contact phone number for the RMA */
      contactPhoneNumber?: string | null;
      /** Name of the device for RMA */
      deviceName?: string | null;
      /** Description of the problem with the device */
      problem?: string | null;
      returnShippingAddress?: components["schemas"]["Help_ShippingAddress"];
      /** Serial number of the device */
      serialNumber?: string | null;
    };
    /** Response object for processing a Return Merchandise Authorization (RMA). */
    Help_ProcessRMAWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Reason for failure if RMA processing was unsuccessful */
      failureReason?: string | null;
      /** Whether the RMA processing was successful */
      success?: boolean | null;
      /** ID of the RMA ticket created */
      ticketId?: number | null;
    };
    /** Request object for sending system feedback. */
    Help_SendFeedbackWSRequest: {
      /** Feedback message about the system */
      feedback?: string | null;
    };
    /** Response object for sending system feedback. */
    Help_SendFeedbackWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Reason for failure if feedback sending was unsuccessful */
      failureReason?: string | null;
      /** Whether the feedback was sent successfully */
      success?: boolean | null;
    };
    /** Shipping address information for RMA returns. */
    Help_ShippingAddress: {
      /** City for return shipping */
      returnAddressCity?: string | null;
      /** Country for return shipping */
      returnAddressCountry?: string | null;
      /** Postal code for return shipping */
      returnAddressPostalCode?: string | null;
      /** State/province for return shipping */
      returnAddressState?: string | null;
      /** Street address for return shipping */
      returnAddressStreet?: string | null;
    };
    /** Information about a support ticket. */
    Help_TicketInformation: {
      /** Date when the ticket was created */
      createdAt?: string | null;
      /** Unique identifier for the support ticket */
      id?: number | null;
      /** Current status of the support ticket */
      status?: string | null;
      /** Subject of the support ticket */
      subject?: string | null;
    };
    /** Request object for triaging device connection/recording issues. */
    Help_TriageDeviceWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Start date in seconds for triage analysis */
      startDateSec?: number | null;
    };
    /** Response object containing device triage diagnostic information. */
    Help_TriageDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of firmware update diagnostic events */
      firmwareUpdates?: components["schemas"]["DiagnosticEventType"][] | null;
      /** List of hardware failure diagnostic events */
      hardwareFailureEvents?:
        | components["schemas"]["DiagnosticEventType"][]
        | null;
      /** Triage analysis message */
      message?: string | null;
      /** List of device presence time windows */
      presenceWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
      /** List of suggested help articles for the device issue */
      suggestedArticles?: (string | null)[] | null;
      /** List of device uptime time windows */
      uptimeWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
    };
    HttpHeaders:
      | ({
          accept?: components["schemas"]["MediaType"][] | null;
          acceptCharset?:
            | ({
                registered?: boolean | null;
              } | null)[]
            | null;
          acceptLanguage?:
            | ({
                range?: string | null;
                weight?: number | null;
              } | null)[]
            | null;
          acceptLanguageAsLocales?:
            | ({
                country?: string | null;
                displayCountry?: string | null;
                displayLanguage?: string | null;
                displayName?: string | null;
                displayScript?: string | null;
                displayVariant?: string | null;
                extensionKeys?: (string | null)[] | null;
                iso3Country?: string | null;
                iso3Language?: string | null;
                language?: string | null;
                script?: string | null;
                unicodeLocaleAttributes?: (string | null)[] | null;
                unicodeLocaleKeys?: (string | null)[] | null;
                variant?: string | null;
              } | null)[]
            | null;
          acceptPatch?: components["schemas"]["MediaType"][] | null;
          accessControlAllowCredentials?: boolean | null;
          accessControlAllowHeaders?: (string | null)[] | null;
          accessControlAllowMethods?:
            | components["schemas"]["HttpMethod"][]
            | null;
          accessControlAllowOrigin?: string | null;
          accessControlExposeHeaders?: (string | null)[] | null;
          accessControlMaxAge?: number | null;
          accessControlRequestHeaders?: (string | null)[] | null;
          accessControlRequestMethod?: components["schemas"]["HttpMethod"];
          all?: { [key: string]: string | null } | null;
          allow?: components["schemas"]["HttpMethod"][] | null;
          basicAuth?: string | null;
          bearerAuth?: string | null;
          cacheControl?: string | null;
          connection?: (string | null)[] | null;
          contentDisposition?: components["schemas"]["ContentDisposition"];
          contentLanguage?: {
            country?: string | null;
            displayCountry?: string | null;
            displayLanguage?: string | null;
            displayName?: string | null;
            displayScript?: string | null;
            displayVariant?: string | null;
            extensionKeys?: (string | null)[] | null;
            iso3Country?: string | null;
            iso3Language?: string | null;
            language?: string | null;
            script?: string | null;
            unicodeLocaleAttributes?: (string | null)[] | null;
            unicodeLocaleKeys?: (string | null)[] | null;
            variant?: string | null;
          } | null;
          contentLength?: number | null;
          contentType?: components["schemas"]["MediaType"];
          date?: number | null;
          empty?: boolean | null;
          etag?: string | null;
          expires?: number | null;
          host?: {
            address?: {
              address?: (string | null)[] | null;
              anyLocalAddress?: boolean | null;
              canonicalHostName?: string | null;
              hostAddress?: string | null;
              hostName?: string | null;
              linkLocalAddress?: boolean | null;
              loopbackAddress?: boolean | null;
              mcglobal?: boolean | null;
              mclinkLocal?: boolean | null;
              mcnodeLocal?: boolean | null;
              mcorgLocal?: boolean | null;
              mcsiteLocal?: boolean | null;
              multicastAddress?: boolean | null;
              siteLocalAddress?: boolean | null;
            } | null;
            hostName?: string | null;
            hostString?: string | null;
            port?: number | null;
            unresolved?: boolean | null;
          } | null;
          ifMatch?: (string | null)[] | null;
          ifModifiedSince?: number | null;
          ifNoneMatch?: (string | null)[] | null;
          ifUnmodifiedSince?: number | null;
          lastModified?: number | null;
          location?: string | null;
          origin?: string | null;
          pragma?: string | null;
          range?: components["schemas"]["HttpRange"][] | null;
          upgrade?: string | null;
          vary?: (string | null)[] | null;
        } & { [key: string]: (string | null)[] | null })
      | null;
    HttpMethod: { [key: string]: unknown };
    HttpRange: { [key: string]: unknown };
    HttpStatusCode: {
      error?: boolean | null;
      is1xxInformational?: boolean | null;
      is2xxSuccessful?: boolean | null;
      is3xxRedirection?: boolean | null;
      is4xxClientError?: boolean | null;
      is5xxServerError?: boolean | null;
    };
    /** The updated Aperio integration configuration. */
    IAperioType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Audio gateway configuration settings */
    IAudioUserConfig: {
      audio_aec_via_software?: boolean | null;
      audio_analysis_enabled?: boolean | null;
      audio_analysis_params?: components["schemas"]["AudioParamConfig"];
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      cloud_archive_days?: number | null;
      cloud_archive_target?: IAudioUserConfigCloudArchiveTargetEnum | null;
      cloud_archive_upload_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      cloud_archive_upload_schedule_inverted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      cloud_archive_upload_schedule_uuid?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      event_clip_upload_target?: IAudioUserConfigEventClipUploadTargetEnum | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      lastModified?: number | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: IAudioUserConfigLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: IAudioUserConfigLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      max_event_duration_ms?: number | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      secondary_static_ip_v4_address?: number | null;
      snapshot_upload_target?: IAudioUserConfigSnapshotUploadTargetEnum | null;
      splice_clip_upload_target?: IAudioUserConfigSpliceClipUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: IAudioUserConfigThumbstripUploadTargetEnum | null;
      vlan_ip_v4_address?: number | null;
    };
    /** Avigilon Alta V2 integration settings to update */
    IAvigilonAltaType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
      doorsValidated?: boolean | null;
      email?: string | null;
      enabled?: boolean | null;
      eventToWebhookIdMap?: { [key: string]: number | null } | null;
      eventToWebhookMap?: {
        [key: string]: components["schemas"]["WebhookMapEntry"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      password?: string | null;
      refreshToken?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      webhookId?: number | null;
    };
    IBaseIntegrationType: (
      | components["schemas"]["AperioType"]
      | components["schemas"]["AvigilonAltaType"]
      | components["schemas"]["BrivoType"]
      | components["schemas"]["ButterflyMXType"]
      | components["schemas"]["DeviceIntegrationType"]
      | components["schemas"]["DiceType"]
      | components["schemas"]["EnvoyType"]
      | components["schemas"]["FlicType"]
      | components["schemas"]["GeneaType"]
      | components["schemas"]["GoogleType"]
      | components["schemas"]["GuestManagementType"]
      | components["schemas"]["InformacastType"]
      | components["schemas"]["InnerRangeType"]
      | components["schemas"]["KisiType"]
      | components["schemas"]["LumeoType"]
      | components["schemas"]["MicrosoftTeamsType"]
      | components["schemas"]["NineOneOneCellularType"]
      | components["schemas"]["OmnialertType"]
      | components["schemas"]["OpenAIType"]
      | components["schemas"]["OpentechAllianceType"]
      | components["schemas"]["PimlocType"]
      | components["schemas"]["PlaceOsType"]
      | components["schemas"]["ProDataKeyType"]
      | components["schemas"]["RaptorType"]
      | components["schemas"]["ShellyType"]
      | components["schemas"]["ToastType"]
      | components["schemas"]["WebhooksType"]
      | components["schemas"]["ZapierType"]
    ) & {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    IBrivoType: {
      accessToken?: string | null;
      alertUnauthorizedFaces?: boolean | null;
      apiKey?: string | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      clientId?: string | null;
      clientSecret?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      password?: string | null;
      refreshToken?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      username?: string | null;
      version?: number | null;
      webhookId?: number | null;
    };
    /** ButterflyMX V2 integration settings to update */
    IButterflyMXType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      buildingWebhookIdMap?: { [key: string]: string | null } | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      panelInfoMap?: {
        [key: string]: components["schemas"]["ButterflymxPanelInfoType"];
      } | null;
      refreshToken?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Climate sensor configuration */
    IClimateUserConfig: {
      accelerometer_change_tamper_threshold?: number | null;
      accelerometer_disabled?: boolean | null;
      alert_window_minutes?: number | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      lastModified?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pressure_switch_tamper_disabled?: boolean | null;
      smoke_ai_threshold?: number | null;
      thc_ai_threshold?: number | null;
      vape_ai_threshold?: number | null;
    };
    /** Device integration settings to update */
    IDeviceIntegrationType: {
      deviceSettingsMap?: {
        [key: string]: components["schemas"]["DeviceIntegrationSettings"];
      } | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Dice access control integration settings to update */
    IDiceType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Envoy V2 integration settings to update */
    IEnvoyType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      envoyIntegrationInstalled?: boolean | null;
      envoyUserSettingsMap?: {
        [key: string]: components["schemas"]["EnvoyUserSettings"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      locationInfoMap?: {
        [key: string]: components["schemas"]["EnvoyLocationInfoType"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      refreshToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Flic smart button integration settings to update */
    IFlicType: {
      apiKey?: string | null;
      apiSecret?: string | null;
      associatedLocations?: (string | null)[] | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      moduleUploaded?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      webhookId?: string | null;
      /** base 64 (url-safe) uuid string */
      webhookToken?: string | null;
    };
    /** Genea V2 integration settings to update */
    IGeneaType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      refreshToken?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      webhookSignatureSecret?: string | null;
      webhookUuid?: string | null;
    };
    /** Google V2 integration settings to update */
    IGoogleType: {
      allowUserStorage?: boolean | null;
      apiToken?: string | null;
      defaultAlertFolderId?: string | null;
      defaultAlertFolderName?: string | null;
      defaultFolderId?: string | null;
      defaultFolderName?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      refreshToken?: string | null;
      saveAllAlerts?: boolean | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      userSettingsMap?: {
        [key: string]: components["schemas"]["GoogleUserSettings"];
      } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Guest management integration settings to update */
    IGuestManagementType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      locationSettingsMap?: {
        [key: string]: components["schemas"]["LocationSettings"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    IInformacastType: {
      apiToken?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      refreshToken?: string | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** InnerRange access control integration settings to update */
    IInnerRangeType: {
      apiToken?: string | null;
      consoleToSettingsMap?: {
        [key: string]: components["schemas"]["InnerRangeConsoleSettings"];
      } | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["InnerRangeDoorInfoType"];
      } | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      refreshToken?: string | null;
      skyTunnelSN?: string | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Kisi V2 integration settings to update */
    IKisiType: {
      apiSecretKey?: string | null;
      defaultOptions?: components["schemas"]["BadgeIntegrationDefaultOptions"];
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      placeToSettingsMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationSettings"];
      } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    ILumeoType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    IMicrosoftTeamsType: {
      adminConsent?: boolean | null;
      allowUserNotifications?: boolean | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      microsoftTeamSettingsMap?: {
        [key: string]: components["schemas"]["MicrosoftTeamsChannelSettings"];
      } | null;
      microsoftTeamsUserSettingsMap?: {
        [key: string]: components["schemas"]["MicrosoftTeamsUserSettings"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      tenantId?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** 911 Cellular emergency notification integration settings to update */
    INineOneOneCellularType: {
      bearerToken?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      saveClips?: boolean | null;
      securityZoneMap?: {
        [key: string]: components["schemas"]["SecurityZoneInfoType"];
      } | null;
      triggerNotification?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      webhookToken?: string | null;
      zonesValidated?: boolean | null;
    };
    /** Omnialert emergency notification integration settings to update */
    IOmnialertType: {
      associatedCameras?: (string | null)[] | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      saveClips?: boolean | null;
      triggerNotification?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      webhookToken?: string | null;
    };
    IOpenAIType: {
      apiToken?: string | null;
      /** The base url for any OpenAI Chat Completions compliant API. For example, to use Gemini models, set this to 'https://generativelanguage.googleapis.com/v1beta/openai/'.  If left blank, we will try to use OpenAI models. */
      baseUrl?: string | null;
      /** The model identifier to use as a default model.  This is provider specific and typically found on model card pages. For example, set to 'gemini-2.0-flash' to use the Gemini 2.0 Flash model.  Currently we require a model with vision capabilities for this integration. */
      defaultModel?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      refreshToken?: string | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** OpenTech Alliance V2 integration settings to update */
    IOpentechAllianceType: {
      apiKey?: string | null;
      apiSecret?: string | null;
      enabled?: boolean | null;
      facilityToSettingsMap?: {
        [
          key: string
        ]: components["schemas"]["OpentechAllianceFacilitySettings"];
      } | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    IPimlocType: {
      baseAPIUrl?: IPimlocBaseAPIUrlEnum | null;
      clientId?: string | null;
      clientSecret?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      validCredentials?: boolean | null;
    };
    /** PlaceOS V2 smart building management integration settings to update */
    IPlaceOsType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      apiUrl?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      refreshToken?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      triggerNotification?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      webhookSignatureSecret?: string | null;
    };
    /** Pro Data Key (PDK) V2 integration settings to update */
    IProDataKeyType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      organizationId?: string | null;
      refreshToken?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      systemId?: string | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      webhookId?: string | null;
      webhookSignatureSecret?: string | null;
    };
    IRaptorType: {
      apiToken?: string | null;
      clientId?: string | null;
      clientSecret?: string | null;
      clientUid?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      refreshToken?: string | null;
      tokenValid?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Shelly smart device integration settings to update */
    IShellyType: {
      canSendDiagnosticNotifications?: boolean | null;
      diagnosticQuietPeriodSecs?: number | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      shellyDeviceMap?: {
        [key: string]: components["schemas"]["ShellyDevice"];
      } | null;
      thirdPartyDeviceToLocationMap?: { [key: string]: string | null } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    IToastType: {
      currentToastRestaurantGuid?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      restaurantSettingsMap?: {
        [key: string]: components["schemas"]["ToastRestaurantSettings"];
      } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Updated webhook V2 integration settings */
    IWebhooksType: {
      activityWebhooks?: { [key: string]: string | null } | null;
      activityWebhooksV2?: {
        [key: string]: components["schemas"]["WebhookInfo"];
      } | null;
      diagnosticWebhooks?: { [key: string]: string | null } | null;
      diagnosticWebhooksV2?: {
        [key: string]: components["schemas"]["WebhookInfo"];
      } | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    ImmixSettings: {
      deviceList?: (string | null)[] | null;
      enabled?: boolean | null;
      serverUrl?: string | null;
    };
    InformacastScenario: {
      id?: string | null;
      name?: string | null;
      scenarioId?: string | null;
    };
    InformacastType:
      | ({
          apiToken?: string | null;
          refreshToken?: string | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    InnerRangeConsoleSettings: {
      apiKey?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["InnerRangeDoorInfoType"];
      } | null;
      skyTunnelSN?: string | null;
      tokenValid?: boolean | null;
    } | null;
    InnerRangeConsoleType: {
      doorList?: components["schemas"]["InnerRangeDoorType"][] | null;
      skyTunnelSN?: string | null;
    };
    InnerRangeDoorInfoType: {
      assignedCameraList?: (string | null)[] | null;
      clipDuration?: number | null;
      doorName?: string | null;
      leadingSeconds?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      readerIds?: (string | null)[] | null;
      remoteUnlock?: boolean | null;
    } | null;
    InnerRangeDoorType: {
      id?: string | null;
      name?: string | null;
      readerIds?: (string | null)[] | null;
    };
    InnerRangeType:
      | ({
          apiToken?: string | null;
          consoleToSettingsMap?: {
            [key: string]: components["schemas"]["InnerRangeConsoleSettings"];
          } | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [key: string]: components["schemas"]["InnerRangeDoorInfoType"];
          } | null;
          refreshToken?: string | null;
          skyTunnelSN?: string | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    IntegratedDoorPositionIndicatorType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      dpiType?: components["schemas"]["DoorPositionIndicatorEnumType"];
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["DoorPositionIndicatorPortType"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    IntegratedDoorRelayType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["DoorRelayPortType"];
      portImmutable?: boolean | null;
      rateLimitingEnabled?: boolean | null;
      relayType?: components["schemas"]["DoorRelayEnumType"];
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    IntegratedGenericButtonType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      buttonType?: components["schemas"]["ButtonEnumType"];
      createdAtMillis?: number | null;
      mode?: components["schemas"]["ButtonModeEnum"];
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["ButtonPortType"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    IntegratedGenericInputType: {
      auxType?: components["schemas"]["AuxiliaryEnumType"];
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["AuxiliaryInputPortType"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    IntegratedGenericRelayType: {
      auxType?: components["schemas"]["AuxiliaryEnumType"];
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      originator?: components["schemas"]["BaseEventOriginator"];
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["AuxiliaryRelayPortType"];
      portImmutable?: boolean | null;
      /** Deprecated, do not use. */
      relayDurationSec?: number | null;
      stateChangedAtMillis?: number | null;
      steadyState?: components["schemas"]["GenericRelayStateEnumType"];
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    IntegratedRequestToExitType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      intentOnly?: boolean | null;
      intentOnlyEvents?: boolean | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["RequestToExitPortType"];
      portImmutable?: boolean | null;
      rexType?: components["schemas"]["RequestToExitEnumType"];
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    IntegrationActionStatusEnum: IntegrationActionStatusEnum;
    IntegrationAuditEvent: {
      enabledTimestampMs?: number | null;
      integrationAuditEvent?: components["schemas"]["IntegrationAuditEventEnum"];
      user?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    IntegrationAuditEventEnum: IntegrationAuditEventEnum;
    IntegrationCommandActionType: {
      commandPayload?: string | null;
      delaySecs?: number | null;
      integration?: components["schemas"]["IntegrationEnum"];
    };
    IntegrationDiagnosticEventType: {
      activity?: IntegrationDiagnosticEventActivityEnum | null;
      integration?: components["schemas"]["IntegrationEnum"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      thirdPartyDeviceId?: string | null;
      thirdPartyDeviceName?: string | null;
      timestamp?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    IntegrationEnum: IntegrationEnum;
    IntegrationNotificationActionType: {
      integration?: components["schemas"]["IntegrationEnum"];
      notificationEntity?: string | null;
      notificationTarget?: string | null;
    };
    /** Base request object for integration operations. */
    Integration_BaseIntegrationWSRequest: { [key: string]: unknown };
    Integration_CreateEnvoyInviteWSRequest: {
      invitation?: components["schemas"]["EnvoyInvite"];
    };
    Integration_GetAccessControlIntegrationsForAlmWSResponse: {
      badDoors?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      integrations?: components["schemas"]["IntegrationEnum"][] | null;
    };
    Integration_GetAllGuestsWSResponse: {
      allGuests?: components["schemas"]["Guest"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetAllOrgIntegrationsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgIntegrationsV2?: {
        [key: string]: components["schemas"]["IBaseIntegrationType"];
      } | null;
    };
    Integration_GetAmtReadersWSRequest: {
      email?: string | null;
      password?: string | null;
    };
    /** Request object for retrieving Aperio integration configuration. */
    Integration_GetAperioIntegrationWSRequest: { [key: string]: unknown };
    /** Response object containing Aperio integration configuration and door controllers. */
    Integration_GetAperioIntegrationWSResponse: {
      aperioSettings?: components["schemas"]["IAperioType"];
      /** List of Rhombus door controllers with Aperio integration */
      doorControllers?:
        | components["schemas"]["Integration_aperio_AperioRhombusDoorControllerView"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetApiTokenApplicationsWSRequest: { [key: string]: unknown };
    Integration_GetApiTokenApplicationsWSResponse: {
      applications?: components["schemas"]["ApiTokenApplicationType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrieving API tokens. */
    Integration_GetApiTokensWSRequest: {
      /** Optional filter for API client types */
      optionalFilter?: components["schemas"]["ApiClientTypeEnum"][] | null;
    };
    /** Response object containing API tokens. */
    Integration_GetApiTokensWSResponse: {
      /** List of API tokens */
      apiTokens?: components["schemas"]["ApiTokenType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetBadgeIntegrationDoorsWSResponse: {
      authError?: boolean | null;
      doors?: components["schemas"]["DoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetBadgeIntegrationGenericDoorsWSResponse: {
      authError?: boolean | null;
      doors?: components["schemas"]["GenericDoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetBadgeIntegrationPlacesWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      places?: components["schemas"]["PlaceType"][] | null;
    };
    Integration_GetBrivoDoorsWSRequest: {
      password?: string | null;
      username?: string | null;
    };
    Integration_GetBrivoDoorsWSResponse: {
      authError?: boolean | null;
      doors?: components["schemas"]["DoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetButterflymxPanelsWSRequest: {
      email?: string | null;
      password?: string | null;
    };
    Integration_GetButterflymxPanelsWSResponse: {
      authError?: boolean | null;
      buildings?: components["schemas"]["ButterflymxBuilding"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetCalendlyEventDetailsWSRequest: {
      eventUuid?: string | null;
    };
    Integration_GetCalendlyEventDetailsWSResponse: {
      email?: string | null;
      endTimeMs?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      name?: string | null;
      startTimeMs?: number | null;
    };
    Integration_GetEnvoyDeliveriesWSRequest: {
      endTimestampMs?: number | null;
      locationIds?: (string | null)[] | null;
      startTimestampMs?: number | null;
    };
    Integration_GetEnvoyDeliveriesWSResponse: {
      collectedDeliveries?: components["schemas"]["EnvoyDelivery"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      pendingDeliveries?: components["schemas"]["EnvoyDelivery"][] | null;
    };
    Integration_GetEnvoyEmployeesWSRequest: {
      locationIds?: (string | null)[] | null;
    };
    Integration_GetEnvoyEmployeesWSResponse: {
      employees?: components["schemas"]["EnvoyPersonInfo"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetEnvoyLocationsWSRequest: { [key: string]: unknown };
    Integration_GetEnvoyLocationsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      locationList?: components["schemas"]["EnvoyLocation"][] | null;
    };
    Integration_GetEnvoyVisitorsWSRequest: {
      endTimestampMs?: number | null;
      includeSignedOutVisitors?: boolean | null;
      locationIds?: (string | null)[] | null;
      startTimestampMs?: number | null;
    };
    Integration_GetEnvoyVisitorsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      invites?: components["schemas"]["EnvoyExpectedGuest"][] | null;
      visitors?: components["schemas"]["EnvoyGuest"][] | null;
    };
    Integration_GetFlicDevicesWSRequest: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetFlicDevicesWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      flicDevices?: components["schemas"]["FlicDevice"][] | null;
      flicModule?: components["schemas"]["FlicDevice"];
    };
    Integration_GetGeneaDoorsWSRequest: {
      apiToken?: string | null;
    };
    Integration_GetGeneaDoorsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      panelList?: components["schemas"]["PanelType"][] | null;
    };
    Integration_GetGuestWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guest?: components["schemas"]["Guest"];
    };
    Integration_GetInformacastScenariosWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      scenarios?: components["schemas"]["InformacastScenario"][] | null;
    };
    Integration_GetInnerRangeConsolesWSRequest: { [key: string]: unknown };
    Integration_GetInnerRangeConsolesWSResponse: {
      consoles?: components["schemas"]["InnerRangeConsoleType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetInnerRangeDoorsWSRequest: { [key: string]: unknown };
    Integration_GetInnerRangeDoorsWSResponse: {
      doors?: components["schemas"]["InnerRangeDoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetIntegrationDiagnosticEventsWSRequest: {
      timestampMsAfter?: number | null;
      timestampMsBefore?: number | null;
    };
    Integration_GetIntegrationDiagnosticEventsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      integrationDiagnosticEvents?:
        | components["schemas"]["IntegrationDiagnosticEventType"][]
        | null;
    };
    Integration_GetKisiDoorsWSRequest: {
      apiSecretKey?: string | null;
    };
    Integration_GetKisiDoorsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      placeToDoorMap?: {
        [key: string]: components["schemas"]["DoorType"][] | null;
      } | null;
    };
    /** Response object containing Kisi integration settings. */
    Integration_GetKisiIntegrationWSResponse: {
      /** Whether an authentication error occurred during update */
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of GUIDs that failed to update */
      failedGuids?: (string | null)[] | null;
      kisiSettings?: components["schemas"]["KisiSettings"];
      /** List of door names that are assigned to multiple Rhombus locations */
      misconfiguredDoors?: (string | null)[] | null;
    };
    Integration_GetKisiPlacesWSRequest: {
      apiSecretKey?: string | null;
    };
    Integration_GetMicrosoftUsersJoinedTeamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      teamsMap?: { [key: string]: string | null } | null;
    };
    Integration_GetNineOneOneCSZonesWSRequest: { [key: string]: unknown };
    Integration_GetNineOneOneCSZonesWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      zone?: components["schemas"]["SecurityZoneInfoType"];
      zoneMap?: {
        [key: string]: components["schemas"]["SecurityZoneInfoType"];
      } | null;
    };
    /** Request object for retrieving OpenAI models. */
    Integration_GetOpenAIModelsWSRequest: {
      openAISettings?: components["schemas"]["IOpenAIType"];
    };
    /** Response object containing available OpenAI models. */
    Integration_GetOpenAIModelsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of available OpenAI models */
      models?: components["schemas"]["OpenAIModel"][] | null;
    };
    Integration_GetOpenpathDoorsWSRequest: {
      email?: string | null;
      password?: string | null;
    };
    Integration_GetOpenpathLockdownsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      lockdownPlans?: components["schemas"]["LockdownType"][] | null;
    };
    Integration_GetOpentechAllianceFacilitiesWSRequest: {
      [key: string]: unknown;
    };
    Integration_GetOpentechAllianceFacilitiesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      facilities?:
        | components["schemas"]["OpentechAllianceFacilityType"][]
        | null;
    };
    Integration_GetOrgIntegrationsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgIntegrationV2?: components["schemas"]["IBaseIntegrationType"];
    };
    /** Request object for retrieving organization integrations. */
    Integration_GetOrgIntegrationsWSRequest: { [key: string]: unknown };
    /** Response object containing organization integrations configuration. */
    Integration_GetOrgIntegrationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgIntegrations?: components["schemas"]["OrgIntegrationsType"];
    };
    Integration_GetPartnerApiTokensWSRequest: { [key: string]: unknown };
    Integration_GetPdkDoorsWSRequest: {
      ouId?: string | null;
    };
    Integration_GetPdkDoorsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      panelList?: components["schemas"]["PanelType"][] | null;
    };
    Integration_GetPdkSystemIdWSRequest: {
      configurationToken?: string | null;
    };
    Integration_GetPdkSystemIdWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      systemId?: string | null;
    };
    Integration_GetPlaceOsDoorsWSRequest: {
      apiUrl?: string | null;
    };
    Integration_GetRaptorBuildingsWSResponse: {
      buildings?: components["schemas"]["RaptorBuilding"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetRaptorTemplatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      templates?: components["schemas"]["RaptorTemplate"][] | null;
    };
    Integration_GetToastEventsTableAllLocationsWSRequest: {
      businessDate?: string | null;
    };
    Integration_GetToastEventsTableAllLocationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      eventTable?:
        | components["schemas"]["Integration_GetToastEventsTableWSResponse_EventTableRow"][]
        | null;
      failedGuids?: (string | null)[] | null;
    };
    Integration_GetToastEventsTableWSRequest: {
      businessDate?: string | null;
      restaurantGuid?: string | null;
    };
    Integration_GetToastEventsTableWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      eventTable?:
        | components["schemas"]["Integration_GetToastEventsTableWSResponse_EventTableRow"][]
        | null;
    };
    Integration_GetToastEventsTableWSResponse_EventTableRow: {
      assignedCameraList?: (string | null)[] | null;
      employeeName?: string | null;
      orderGuid?: string | null;
      paymentType?: string | null;
      restaurantName?: string | null;
      revenueCenterName?: string | null;
      serviceAreaName?: string | null;
      timestamp?: string | null;
      tipAmount?: string | null;
      totalAmount?: string | null;
      totalDiscountAmount?: string | null;
      voided?: string | null;
    };
    Integration_GetToastServiceAreasWSRequest: {
      restaurantGuid?: string | null;
    };
    Integration_GetToastServiceAreasWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      serviceAreas?: components["schemas"]["GenericPosType"][] | null;
    };
    /** Request object for guest-related operations. */
    Integration_GuestWSRequest: {
      /** Email address of the guest */
      email?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for initiating Brivo OAuth authentication flow with API key. */
    Integration_InitiateBrivoOAuthWSRequest: {
      /** Brivo Mashery API key obtained from Brivo Developer Portal */
      apiKey?: string | null;
      /** Additional OAuth parameter */
      param?: string | null;
      /** OAuth request URL */
      requestUrl?: string | null;
      /** Rhombus organization user UUID */
      rhombusOrgUserUuid?: string | null;
    };
    Integration_InitiateCallbackAuthRequest: {
      rhombusOrgUserUuid?: string | null;
    };
    Integration_InitiateCallbackAuthResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      integratorUrl?: string | null;
    };
    /** Request object for initiating OAuth authentication flow. */
    Integration_InitiateOAuthWSRequest: {
      /** Additional OAuth parameter */
      param?: string | null;
      /** OAuth request URL */
      requestUrl?: string | null;
      /** Rhombus organization user UUID */
      rhombusOrgUserUuid?: string | null;
    };
    /** Response object containing OAuth redirect URL. */
    Integration_InitiateOAuthWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** OAuth redirect URL for authentication */
      redirectUrl?: string | null;
    };
    /** Request object for refreshing Google access token. */
    Integration_RefreshGoogleAccessTokenWSRequest: {
      /** Whether to refresh the user token */
      refreshUserToken?: boolean | null;
    };
    /** Response object containing refreshed Google access token. */
    Integration_RefreshGoogleAccessTokenWSResponse: {
      /** Refreshed Google access token */
      accessToken?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for revoking an API token. */
    Integration_RevokeApiTokenWSRequest: {
      /** base 64 (url-safe) uuid string */
      tokenUuid?: string | null;
    };
    /** Response object for revoking an API token. */
    Integration_RevokeApiTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for revoking Google Drive access permissions. */
    Integration_RevokeGoogleDriveAccessWSRequest: {
      /** If set to true, revokes Rhombus Systems access to a user's Google Drive account, otherwise revokes Rhombus Systems access to the org's shared Google Drive account */
      revokeUserAccount?: boolean | null;
    };
    /** Request object for submitting an API token application. */
    Integration_SubmitApiTokenApplicationWSRequest: {
      authType?: components["schemas"]["ApiTokenAuthTypeEnum"];
      /** Certificate Signing Request (CSR) for token authentication */
      csr?: string | null;
      /** Display name for the API token */
      displayName?: string | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid: string | null;
    };
    Integration_SubmitApiTokenApplicationWSResponse: {
      /** base 64 (url-safe) uuid string */
      apiKey?: string | null;
      cert?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      validCSR?: boolean | null;
    };
    /** Request object for subscribing to Zapier webhook events. */
    Integration_SubscribeZapierWebhookWSRequest: {
      /** Backoff time in seconds */
      backoffSec?: number | null;
      /** Door state for door sensor webhooks */
      doorState?: SubscribeZapierWebhookWSRequestDoorStateEnum | null;
      /** Zapier webhook URL */
      hookUrl?: string | null;
      /** Lower humidity threshold for environmental sensors */
      humidityLowerThreshold?: number | null;
      /** Upper humidity threshold for environmental sensors */
      humidityUpperThreshold?: number | null;
      /** Lower temperature threshold for environmental sensors */
      tempLowerThreshold?: number | null;
      /** Upper temperature threshold for environmental sensors */
      tempUpperThreshold?: number | null;
      /** Set of device UUIDs to monitor */
      uuids?: (string | null)[] | null;
      zapEnum?: components["schemas"]["ZapierEnum"];
    };
    /** Response object for Zapier webhook subscription. */
    Integration_SubscribeZapierWebhookWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      webhookId?: string | null;
    };
    /** Request object for toggling device power state. */
    Integration_TogglePowerWSRequest: {
      /** Device ID to toggle power for */
      deviceId?: string | null;
      /** Target power state (0=off, 1=on) */
      targetState?: number | null;
    };
    /** Response object for device power toggle operations. */
    Integration_TogglePowerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** New power state after toggle (0=off, 1=on) */
      newState?: number | null;
    };
    /** Response object for door unlock operations. */
    Integration_UnlockDoorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for unlocking a Genea door. */
    Integration_UnlockGeneaDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** Genea door ID to unlock */
      doorId?: string | null;
    };
    Integration_UnlockIntegrationGenericDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      doorId?: string | null;
    };
    /** Request object for unlocking a Kisi door. */
    Integration_UnlockKisiDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** Kisi door ID to unlock */
      doorId?: number | null;
      /** Kisi place ID representing the physical space */
      placeId?: number | null;
    };
    /** Request object for unlocking an Openpath door. */
    Integration_UnlockOpenpathDoorWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** Openpath door ID to unlock */
      doorId?: number | null;
    };
    /** Request object for unsubscribing from a Zapier webhook. */
    Integration_UnsubscribeZapierWebhookWSRequest: {
      /** base 64 (url-safe) uuid string */
      webhookId?: string | null;
    };
    /** Request object for updating AMT access control integration settings. */
    Integration_UpdateAmtIntegrationWSRequest: {
      amtSettings?: components["schemas"]["AmtSettings"];
    };
    /** Request object for updating Aperio integration configuration. */
    Integration_UpdateAperioIntegrationWSRequest: {
      aperioSettings: components["schemas"]["IAperioType"];
    };
    /** Request object for updating API token properties. */
    Integration_UpdateApiTokenWSRequest: {
      /** New display name for the API token */
      newDisplayName?: string | null;
      /** base 64 (url-safe) uuid string */
      newPermissionGroupUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      tokenUuid?: string | null;
    };
    Integration_UpdateApiTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating Avigilon Alta V2 integration settings. */
    Integration_UpdateAvigilonAltaV2WSRequest: {
      avigilonAltaSettings?: components["schemas"]["IAvigilonAltaType"];
    };
    Integration_UpdateAwsIntegrationWSRequest: {
      awsSettings?: components["schemas"]["AwsSettings"];
    };
    /** Request object for updating Box file storage integration settings. */
    Integration_UpdateBoxIntegrationWSRequest: {
      boxSettings?: components["schemas"]["BoxSettings"];
    };
    Integration_UpdateBrivoIntegrationV2WSRequest: {
      brivoSettings?: components["schemas"]["IBrivoType"];
    };
    /** Request object for updating Brivo access control integration settings. */
    Integration_UpdateBrivoIntegrationWSRequest: {
      brivoSettings?: components["schemas"]["BrivoSettings"];
    };
    /** Request object for updating ButterflyMX V2 integration settings with enhanced intercom features. */
    Integration_UpdateButterflymxIntegrationV2WSRequest: {
      butterflymxSettings?: components["schemas"]["IButterflyMXType"];
    };
    /** Request object for updating ButterflyMX intercom integration settings. */
    Integration_UpdateButterflymxIntegrationWSRequest: {
      settings?: components["schemas"]["ButterflyMXSettings"];
    };
    /** Request object for updating device integration settings and device properties. */
    Integration_UpdateDeviceIntegrationWSRequest: {
      /** Whether to create a new device */
      createNewDevice?: boolean | null;
      deviceIntegrationSettings?: components["schemas"]["IDeviceIntegrationType"];
      /** Latitude coordinate of the device location */
      latitude?: number | null;
      /** Longitude coordinate of the device location */
      longitude?: number | null;
      /** Name of the device */
      name?: string | null;
      /** Whether to update an existing device */
      updateDevice?: boolean | null;
      /** base 64 (url-safe) uuid string */
      updateDeviceUuid?: string | null;
    };
    /** Request object for updating Dice access control integration settings. */
    Integration_UpdateDiceIntegrationWSRequest: {
      diceSettings?: components["schemas"]["IDiceType"];
    };
    /** Request object for updating Dropbox integration settings. */
    Integration_UpdateDropboxIntegrationWSRequest: {
      dropboxSettings?: components["schemas"]["DropboxSettingsV2"];
    };
    /** Request object for updating email notification integration settings. */
    Integration_UpdateEmailIntegrationWSRequest: {
      emailSettings?: components["schemas"]["EmailSettings"];
    };
    /** Request object for updating Envoy V2 integration settings with enhanced visitor management features. */
    Integration_UpdateEnvoyIntegrationV2WSRequest: {
      envoySettings?: components["schemas"]["IEnvoyType"];
    };
    /** Request object for updating Envoy visitor management integration settings. */
    Integration_UpdateEnvoyIntegrationWSRequest: {
      envoySettings?: components["schemas"]["EnvoySettings"];
    };
    /** Request object for updating Flic smart button integration settings. */
    Integration_UpdateFlicIntegrationWSRequest: {
      flicSettings?: components["schemas"]["IFlicType"];
    };
    /** Request object for updating Genea V2 integration settings with enhanced access control features. */
    Integration_UpdateGeneaIntegrationV2WSRequest: {
      geneaSettings?: components["schemas"]["IGeneaType"];
    };
    /** Request object for updating Genea access control integration settings. */
    Integration_UpdateGeneaIntegrationWSRequest: {
      geneaSettings?: components["schemas"]["GeneaSettings"];
    };
    /** Request object for updating Google V2 integration settings with enhanced features. */
    Integration_UpdateGoogleIntegrationV2WSRequest: {
      googleSettings?: components["schemas"]["IGoogleType"];
    };
    /** Request object for updating Google integration settings. */
    Integration_UpdateGoogleIntegrationWSRequest: {
      googleSettings?: components["schemas"]["GoogleSettings"];
    };
    /** Request object for updating guest information using a token. */
    Integration_UpdateGuestByTokenWSRequest: {
      /** File name for guest-related data */
      fileName?: string | null;
      guest?: components["schemas"]["Guest"];
      /** Token for guest identification and authentication */
      token?: string | null;
    };
    /** Request object for updating guest management integration settings. */
    Integration_UpdateGuestManagementIntegrationWSRequest: {
      guestManagementSettings?: components["schemas"]["IGuestManagementType"];
    };
    Integration_UpdateGuestWSRequest: {
      /** File name for guest-related data */
      fileName?: string | null;
      guest?: components["schemas"]["Guest"];
      sendGuestEmail?: boolean | null;
    };
    /** Request object for updating Halo access control integration settings. */
    Integration_UpdateHaloIntegrationWSRequest: {
      haloSettings?: components["schemas"]["HaloSettings"];
    };
    Integration_UpdateInformacastIntegrationRequest: {
      informacastSettings?: components["schemas"]["IInformacastType"];
    };
    /** Request object for updating InnerRange access control integration settings. */
    Integration_UpdateInnerRangeIntegrationWSRequest: {
      innerRangeSettings?: components["schemas"]["IInnerRangeType"];
    };
    Integration_UpdateIntuifaceIntegrationWSRequest: {
      settings?: components["schemas"]["IntuifaceSettings"];
    };
    /** Request object for updating Kisi V2 integration settings with enhanced features. */
    Integration_UpdateKisiIntegrationV2WSRequest: {
      kisiSettings?: components["schemas"]["IKisiType"];
    };
    /** Request object for updating Kisi access control integration settings. */
    Integration_UpdateKisiIntegrationWSRequest: {
      kisiSettings?: components["schemas"]["KisiSettings"];
    };
    Integration_UpdateLumeoIntegrationWSRequest: {
      lumeoSettings?: components["schemas"]["ILumeoType"];
    };
    /** Request object for updating Mattermost team communication integration settings. */
    Integration_UpdateMattermostIntegrationWSRequest: {
      mattermostSettings?: components["schemas"]["MattermostSettings"];
    };
    Integration_UpdateMicrosoftTeamsBotForTeamWSRequest: {
      teamId?: string | null;
    };
    Integration_UpdateMicrosoftTeamsIntegrationV2WSRequest: {
      microsoftTeamsSettings?: components["schemas"]["IMicrosoftTeamsType"];
      teamsToUpdate?: (string | null)[] | null;
    };
    /** Request object for updating Microsoft Teams integration settings. */
    Integration_UpdateMicrosoftTeamsIntegrationWSRequest: {
      microsoftTeamsSettings?: components["schemas"]["MicrosoftTeamsSettings"];
    };
    /** Request object for updating 911 Cellular emergency notification integration settings. */
    Integration_UpdateNineOneOneCellularIntegrationWSRequest: {
      nineOneOneCellularSettings?: components["schemas"]["INineOneOneCellularType"];
    };
    Integration_UpdateNoonlightSettingsWSRequest: {
      noonlightSettings?: components["schemas"]["NoonlightSettings"];
    };
    /** Request object for updating Office 365 integration settings. */
    Integration_UpdateOffice365IntegrationWSRequest: {
      office365Settings?: components["schemas"]["Office365Settings"];
    };
    /** Request object for updating Omnialert emergency notification integration settings. */
    Integration_UpdateOmnialertIntegrationWSRequest: {
      omnialertSettings?: components["schemas"]["IOmnialertType"];
    };
    Integration_UpdateOmnialertIntegrationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      webhookToken?: string | null;
    };
    Integration_UpdateOpenAIIntegrationRequest: {
      openAISettings?: components["schemas"]["IOpenAIType"];
    };
    /** Request object for updating Openpath access control integration settings. */
    Integration_UpdateOpenpathIntegrationWSRequest: {
      openpathSettings?: components["schemas"]["OpenpathSettings"];
    };
    /** Request object for updating OpenTech Alliance V2 integration settings with enhanced features. */
    Integration_UpdateOpentechAllianceIntegrationV2WSRequest: {
      opentechAllianceSettings?: components["schemas"]["IOpentechAllianceType"];
    };
    /** Request object for updating OpenTech Alliance integration settings. */
    Integration_UpdateOpentechAllianceIntegrationWSRequest: {
      opentechAllianceSettings?: components["schemas"]["OpentechAllianceSettings"];
    };
    /** Response object for updating organization integrations. */
    Integration_UpdateOrgIntegrationsWSResponse: {
      /** Whether an authentication error occurred during update */
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of GUIDs that failed to update */
      failedGuids?: (string | null)[] | null;
      /** List of door names that are assigned to multiple Rhombus locations */
      misconfiguredDoors?: (string | null)[] | null;
    };
    /** Request object for updating PagerDuty incident management integration settings. */
    Integration_UpdatePagerDutyIntegrationWSRequest: {
      pagerDutySettings?: components["schemas"]["PagerDutySettings"];
    };
    /** Request object for updating Pro Data Key (PDK) V2 integration settings with enhanced access control features. */
    Integration_UpdatePdkIntegrationV2WSRequest: {
      pdkSettings?: components["schemas"]["IProDataKeyType"];
    };
    /** Request object for updating Pro Data Key (PDK) integration settings. */
    Integration_UpdatePdkIntegrationWSRequest: {
      pdkSettings?: components["schemas"]["ProDataKeySettings"];
    };
    Integration_UpdatePimlocIntegrationRequest: {
      pimlocSettings?: components["schemas"]["IPimlocType"];
    };
    /** Request object for updating PlaceOS V2 integration settings for smart building management. */
    Integration_UpdatePlaceOsSettingsV2WSRequest: {
      placeOsSettings?: components["schemas"]["IPlaceOsType"];
    };
    Integration_UpdatePlaceOsSettingsWSRequest: {
      placeOsSettings?: components["schemas"]["PlaceOsSettings"];
    };
    Integration_UpdateRaptorIntegrationRequest: {
      raptorSettings?: components["schemas"]["IRaptorType"];
    };
    /** Request object for updating ServiceNow IT service management integration settings. */
    Integration_UpdateServiceNowIntegrationWSRequest: {
      serviceNowSettings?: components["schemas"]["ServiceNowSettings"];
    };
    /** Request object for updating Shelly smart device integration settings. */
    Integration_UpdateShellyIntegrationWSRequest: {
      shellySettings?: components["schemas"]["IShellyType"];
    };
    /** Request object for updating Slack integration V2 settings with enhanced user management. */
    Integration_UpdateSlackIntegrationV2WSRequest: {
      /** Whether this is an admin request */
      adminRequest?: boolean | null;
      /** Request URL for Slack OAuth */
      requestUrl: string | null;
      /** Whether to revoke user access token */
      revokeUserAccessToken?: boolean | null;
      /** Rhombus organization user UUID */
      rhombusOrgUserUuid?: string | null;
      slackSettingsV2?: components["schemas"]["SlackSettingsV2"];
      /** Whether to associate user */
      userAssociate?: boolean | null;
      /** Whether this is a user request */
      userRequest?: boolean | null;
    };
    /** Request object for updating Slack integration settings. */
    Integration_UpdateSlackIntegrationWSRequest: {
      slackSettings?: components["schemas"]["SlackSettings"];
    };
    Integration_UpdateToastIntegrationV2WSRequest: {
      restaurantGuids?: (string | null)[] | null;
      toastSettings?: components["schemas"]["IToastType"];
    };
    /** Request object for updating Toast POS integration settings. */
    Integration_UpdateToastIntegrationWSRequest: {
      toastSettings?: components["schemas"]["ToastSettings"];
    };
    /** Request object for updating webhook V2 integration settings with enhanced configuration options. */
    Integration_UpdateWebhookIntegrationV2WSRequest: {
      /** Whether the webhook is disabled */
      disabled?: boolean | null;
      /** Whether this is a diagnostic webhook */
      isDiagnostic?: boolean | null;
      updatedWebhookSettings?: components["schemas"]["IWebhooksType"];
      /** Webhook URL for receiving notifications */
      webhookUrl?: string | null;
    };
    Integration_UpdateWebhookIntegrationV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      webhookSecret?: string | null;
    };
    /** Request object for updating webhook integration settings. */
    Integration_UpdateWebhookIntegrationWSRequest: {
      webhookSettings?: components["schemas"]["WebhookSettings"];
    };
    /** Request object for validating Kisi API key. */
    Integration_ValidateKisiApiKeyWSRequest: {
      /** Kisi API key to validate */
      apiKey?: string | null;
    };
    /** View object containing Aperio device information. */
    Integration_aperio_AperioDeviceView: {
      /** Aperio device ID */
      aperioId?: (string | null)[] | null;
      /** Gateway ID associated with the device */
      gatewayId?: (string | null)[] | null;
      /** Timestamp when the device was last seen */
      lastSeenMs?: number | null;
      /** Raw device type */
      rawType?: string | null;
    };
    /** View object containing Aperio door information and status. */
    Integration_aperio_AperioDoorView: {
      /** base 64 (url-safe) uuid string */
      accessControlledDoorUuid?: string | null;
      /** Aperio door device ID */
      aperioDoorDeviceId?: string | null;
      /** Aperio gateway ID that brokers communication with this door */
      aperioGatewayId?: string | null;
      /** Aperio door ID (device group ID) for controlling the locking mechanism */
      aperioId?: string | null;
      /** Whether the Aperio door is currently connected */
      connected?: boolean | null;
      /** base 64 (url-safe) uuid string */
      doorExtensionComponentId?: string | null;
      /** List of diagnostic trouble codes (DTCs) for the door */
      dtcs?: components["schemas"]["Integration_aperio_DtcInfoView"][] | null;
      /** Timestamp when the door was last seen */
      lastSeenMs?: number | null;
      /** Name of the Aperio door */
      name?: string | null;
      rawActivatorState?: number | null;
      rawDoorMode?: number | null;
      rawHandleState?: number | null;
      rawKeyCylinderState?: number | null;
      rawTamperState?: number | null;
      /** Whether the door has been removed from the gateway */
      removed?: boolean | null;
      stateUpdateEventTimestampMs?: number | null;
      status?: components["schemas"]["Integration_aperio_AperioIntegrationStatus"];
    };
    /** View object containing Aperio gateway information and status. */
    Integration_aperio_AperioGatewayView: {
      /** Aperio gateway ID (device interface unit ID) */
      aperioGatewayId?: string | null;
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      /** Whether the Aperio gateway is currently connected */
      connected?: boolean | null;
      /** List of Aperio devices associated with this gateway */
      devices?:
        | components["schemas"]["Integration_aperio_AperioDeviceView"][]
        | null;
      /** List of Aperio doors associated with this gateway */
      doors?:
        | components["schemas"]["Integration_aperio_AperioDoorView"][]
        | null;
      /** List of diagnostic trouble codes (DTCs) for the gateway */
      dtcs?: components["schemas"]["Integration_aperio_DtcInfoView"][] | null;
      /** Expected OEM code for the gateway (only available after system configuration) */
      expectedOemCode?: string | null;
      /** Firmware version of the Aperio gateway */
      firmwareVersion?: string | null;
      hardwareModel?: string | null;
      /** Hardware version of the Aperio gateway */
      hwVersion?: (string | null)[] | null;
      /** IP address of the Aperio gateway */
      ipAddress?: string | null;
      /** Timestamp when the gateway was last seen */
      lastSeenMs?: number | null;
      /** Protocol version of the Aperio gateway */
      protocolVersion?: string | null;
      /** Raw tamper state of the Aperio gateway */
      rawTamperState?: number | null;
      /** OEM code reported by the gateway for authenticity verification */
      reportedOemCode?: string | null;
      status?: components["schemas"]["Integration_aperio_AperioIntegrationStatus"];
    };
    /** Integration status of the Aperio gateway */
    Integration_aperio_AperioIntegrationStatus: Integration_aperio_AperioIntegrationStatusEnum;
    /** View object containing Rhombus door controller information for Aperio integration. */
    Integration_aperio_AperioRhombusDoorControllerView: {
      /** List of Aperio gateways associated with this door controller */
      aperioGateways?:
        | components["schemas"]["Integration_aperio_AperioGatewayView"][]
        | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Hardware ID of the Rhombus door controller */
      hwId?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** Name of the Rhombus door controller */
      name?: string | null;
      /** Serial number of the Rhombus door controller */
      serialNumber?: string | null;
    };
    /** Request object for clearing Aperio DTC (Diagnostic Trouble Code) from a device. */
    Integration_aperio_ClearAperioDtcWSRequest: {
      /** The Aperio device id (hex string) of the device to which this command is issued. */
      aperioDeviceId: string | null;
      /** The Aperio device id (hex string) of the gateway hosting the device. */
      aperioGatewayId: string | null;
      /** base 64 (url-safe) uuid string */
      controllerUuid: string | null;
      /** base 64 (url-safe) uuid string */
      registeredComponentUuid?: string | null;
    };
    /** Response object for clearing Aperio DTC (Diagnostic Trouble Code) from a device. */
    Integration_aperio_ClearAperioDtcWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for downloading Aperio certificate. */
    Integration_aperio_DownloadCertificateWSRequest: {
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid: string | null;
    };
    /** View object containing Aperio diagnostic trouble code (DTC) information. */
    Integration_aperio_DtcInfoView: {
      /** DTC code as byte array */
      code?: (string | null)[] | null;
      /** Whether the DTC represents an error condition */
      error?: boolean | null;
      /** Whether the DTC is currently failing */
      failing?: boolean | null;
      /** Whether the DTC has failed in the past */
      hasFailed?: boolean | null;
      /** Display name of the DTC */
      name?: string | null;
      /** Whether the DTC test has completed */
      testCompleted?: boolean | null;
      /** Timestamp when the DTC was reported (seconds since 1970-01-01) */
      time?: number | null;
    };
    /** Request object for rebooting an Aperio gateway. */
    Integration_aperio_RebootAperioGatewayWSRequest: {
      /** The Aperio device id (hex string) of the gateway. */
      aperioGatewayId: string | null;
      /** base 64 (url-safe) uuid string */
      controllerUuid: string | null;
    };
    /** Response object for rebooting an Aperio gateway. */
    Integration_aperio_RebootAperioGatewayWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for acd only migration. */
    Internal_AccessControlDoorOnlyWSRequest: {
      /** Map of account data for alarm only */
      accountDataMap?: {
        [
          key: string
        ]: components["schemas"]["Internal_AccessControlDoorOnlyWSRequest_AccountData"];
      } | null;
    };
    /** Account data for alarm only. */
    Internal_AccessControlDoorOnlyWSRequest_AccountData: {
      /** Set of opportunity IDs */
      opportunityIds?: (string | null)[] | null;
      /** UUID of the organization */
      orgUuid?: string | null;
    };
    /** Response object for enterprise devices only operations. */
    Internal_AccessControlDoorOnlyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of failed account identifiers to error messages */
      failedAccounts?: { [key: string]: string | null } | null;
      /** Set of successful account identifiers */
      successfulAccounts?: (string | null)[] | null;
    };
    /** Request object for adding a partner as a super admin to an organization. */
    Internal_AddPartnerAsSuperAdminWSRequest: {
      /** Whether login access is allowed for the partner */
      loginAccessAllowed?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** Email address of the partner */
      partnerEmail?: string | null;
      /** Name of the partner */
      partnerName?: string | null;
      /** base 64 (url-safe) uuid string */
      partnerUuid?: string | null;
    };
    /** Response object for adding a partner as a super admin to an organization. */
    Internal_AddPartnerAsSuperAdminWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      superAdminGroupUuid?: string | null;
    };
    /** Request object for alarm monitoring only migration. */
    Internal_AlarmMonitoringOnlyWSRequest: {
      /** Map of account data for alarm only */
      accountDataMap?: {
        [
          key: string
        ]: components["schemas"]["Internal_AlarmMonitoringOnlyWSRequest_AccountData"];
      } | null;
    };
    /** Account data for alarm only. */
    Internal_AlarmMonitoringOnlyWSRequest_AccountData: {
      /** Set of opportunity IDs */
      opportunityIds?: (string | null)[] | null;
      /** UUID of the organization */
      orgUuid?: string | null;
    };
    /** Response object for enterprise devices only operations. */
    Internal_AlarmMonitoringOnlyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of failed account identifiers to error messages */
      failedAccounts?: { [key: string]: string | null } | null;
      /** Set of successful account identifiers */
      successfulAccounts?: (string | null)[] | null;
    };
    Internal_CreateCombinedLicensesFromV1WSRequest: {
      accountDataMap?: {
        [
          key: string
        ]: components["schemas"]["Internal_CreateCombinedLicensesFromV1WSRequest_AccountData"];
      } | null;
    };
    Internal_CreateCombinedLicensesFromV1WSRequest_AccountData: {
      opportunityIds?: (string | null)[] | null;
      orgUuid?: string | null;
    };
    Internal_CreateCombinedLicensesFromV1WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failedAccounts?: { [key: string]: string | null } | null;
      successfulAccounts?: (string | null)[] | null;
    } | null;
    /** Request object for creating a new organization with account owner and company information. */
    Internal_CreateOrgWSRequest: {
      /** Email address of the account owner */
      accountOwnerEmail?: string | null;
      /** Full name of the account owner */
      accountOwnerName?: string | null;
      /** Name of the company or organization */
      companyName?: string | null;
      /** Whether this is a development partner organization */
      developmentPartnerOrg?: boolean | null;
      /** Whether license entitlement is enabled for this organization */
      licenseEntitlementEnabled?: boolean | null;
      /** Salesforce ID for the organization (sensitive field) */
      salesforceId?: string | null;
      /** Whether to send a welcome email to the account owner */
      sendWelcomeEmail?: boolean | null;
    };
    /** Response object for creating a new organization. */
    Internal_CreateOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Request object for creating a new partner organization. */
    Internal_CreatePartnerOrgWSRequest: {
      /** Email address of the partner account owner */
      accountOwnerEmail?: string | null;
      /** Full name of the partner account owner */
      accountOwnerName?: string | null;
      /** Name of the partner company */
      companyName?: string | null;
      /** Salesforce ID for the partner organization (sensitive field) */
      salesforceId?: string | null;
      /** Whether to send a welcome email to the partner account owner */
      sendWelcomeEmail?: boolean | null;
    };
    /** Response object for creating a new partner organization. */
    Internal_CreatePartnerOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Request object for creating a returned inventory audit reservation. */
    Internal_CreateReturnedInventoryAuditReservationWSRequest: {
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
      /** Miscellaneous notes for the inventory audit (deprecated) */
      miscNotes?: string | null;
      /** base 64 (url-safe) uuid string */
      partnerOrgUuid?: string | null;
      /** Type of return for the inventory audit (deprecated) */
      returnType?: CreateReturnedInventoryAuditReservationWSRequestReturnTypeEnum | null;
      /** Salesforce opportunity ID for the inventory audit */
      salesforceOppId?: string | null;
      /** Tracking number for the returned inventory (deprecated) */
      trackingNumber?: string | null;
    };
    /** Response object for creating a returned inventory audit reservation. */
    Internal_CreateReturnedInventoryAuditReservationWSResponse: {
      /** base 64 (url-safe) uuid string */
      auditReservationUuid?: string | null;
      /** List of UUIDs for the created audit reservations */
      auditReservationUuids?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for creating a support authority. */
    Internal_CreateSupportAuthorityWSRequest: {
      supportAuthority?: components["schemas"]["SupportAuthorityType"];
    };
    /** Response object for creating a support authority. */
    Internal_CreateSupportAuthorityWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      supportAuthorityUuid?: string | null;
    };
    /** Request object for enrolling in the developer newsletter. */
    Internal_DeveloperNewsletterEnrollWSRequest: {
      /** Whether to subscribe to the developer newsletter */
      developerNewsletter?: boolean | null;
      /** Email address for newsletter subscription */
      email?: string | null;
      /** First name of the subscriber */
      firstName?: string | null;
      /** Whether the subscriber is a developer */
      isDeveloper?: boolean | null;
      /** Last name of the subscriber */
      lastName?: string | null;
      /** Name of the organization */
      orgName?: string | null;
    };
    /** Response object for developer newsletter enrollment. */
    Internal_DeveloperNewsletterEnrollWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for enterprise devices only operations. */
    Internal_EntDevicesOnlyWSRequest: {
      /** Map of account data for enterprise devices operations */
      accountDataMap?: {
        [
          key: string
        ]: components["schemas"]["Internal_EntDevicesOnlyWSRequest_AccountData"];
      } | null;
    };
    /** Account data for enterprise devices operations. */
    Internal_EntDevicesOnlyWSRequest_AccountData: {
      /** Set of opportunity IDs */
      opportunityIds?: (string | null)[] | null;
      /** UUID of the organization */
      orgUuid?: string | null;
    };
    /** Response object for enterprise devices only operations. */
    Internal_EntDevicesOnlyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of failed account identifiers to error messages */
      failedAccounts?: { [key: string]: string | null } | null;
      /** Set of successful account identifiers */
      successfulAccounts?: (string | null)[] | null;
    };
    /** Request object for getting the super admin group UUID for an organization. */
    Internal_GetSuperAdminGroupUUIDWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object for getting the super admin group UUID for an organization. */
    Internal_GetSuperAdminGroupUUIDWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      superAdminGroupUUID?: string | null;
    };
    Internal_GetWarrantyApprovedRMAsWSRequest: { [key: string]: unknown };
    Internal_GetWarrantyApprovedRMAsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      zendeskTickets?: (number | null)[] | null;
    };
    /** Request object for initiating a shipment process. */
    Internal_InitiateShipmentWSRequest: {
      rhombusShipmentInfo?: components["schemas"]["RhombusShipmentInfoType"];
      /** Salesforce opportunity ID for the shipment */
      salesforceOppId?: string | null;
      /** Category of the shipment (deprecated) */
      shipmentCategory?: InitiateShipmentWSRequestShipmentCategoryEnum | null;
      shipmentInfo?: components["schemas"]["OutgoingShipmentInfoType"];
    };
    /** Request object for listing organizations. */
    Internal_ListOrgsWSRequest: { [key: string]: unknown };
    /** Response object containing a list of organizations. */
    Internal_ListOrgsWSResponse: {
      /** List of organizations */
      orgs?: components["schemas"]["OrgV2Type"][] | null;
    };
    /** Request object for retrieving parent lifetime spend information. */
    Internal_ParentLifetimeSpendWSRequest: {
      /** Ending account index for the range */
      endAccountIdx?: number | null;
      /** Starting account index for the range */
      startAccountIdx?: number | null;
    };
    /** Response object for parent lifetime spend information. */
    Internal_ParentLifetimeSpendWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for pro devices only operations. */
    Internal_ProDevicesOnlyWSRequest: {
      /** Map of account data for pro devices operations */
      accountDataMap?: {
        [
          key: string
        ]: components["schemas"]["Internal_ProDevicesOnlyWSRequest_AccountData"];
      } | null;
    };
    /** Account data for pro devices operations. */
    Internal_ProDevicesOnlyWSRequest_AccountData: {
      /** Set of opportunity IDs */
      opportunityIds?: (string | null)[] | null;
      /** UUID of the organization */
      orgUuid?: string | null;
    };
    /** Response object for pro devices only operations. */
    Internal_ProDevicesOnlyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of failed account identifiers to error messages */
      failedAccounts?: { [key: string]: string | null } | null;
      /** Set of successful account identifiers */
      successfulAccounts?: (string | null)[] | null;
    };
    /** Request object for requesting hardware for development purposes. */
    Internal_RequestHardwareForDevelopmentWSRequest: {
      /** Street address line 1 */
      address1?: string | null;
      /** City name */
      city?: string | null;
      /** Name of the company or organization */
      companyName?: string | null;
      /** Country name */
      country?: string | null;
      /** Email address of the requester */
      email?: string | null;
      /** First name of the requester */
      firstName?: string | null;
      /** Job title of the requester */
      jobTitle?: string | null;
      /** Last name of the requester */
      lastName?: string | null;
      /** Phone number of the requester */
      phoneNumber?: string | null;
      /** Reason for requesting hardware for development */
      requestReason?: string | null;
      /** State or province */
      state?: string | null;
      /** ZIP or postal code */
      zip?: string | null;
    };
    /** Response object for hardware development request. */
    Internal_RequestHardwareForDevelopmentWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for sending shipment shipped email notification. */
    Internal_SendShipmentShippedEmailWSRequest: {
      /** Salesforce opportunity ID for the shipment email */
      salesforceOppId?: string | null;
    };
    /** Request object for setting opportunity information for a purchase order. */
    Internal_SetOpportunityForPurchaseOrderWSRequest: {
      /** Reason for cancellation if the purchase order is not accepted */
      cancellationReason?: string | null;
      /** Whether the purchase order is accepted */
      isAccepted?: boolean | null;
      /** Purchase order number */
      purchaseOrderNumber?: string | null;
      /** base 64 (url-safe) uuid string */
      purchaseOrderUuid?: string | null;
      /** Salesforce opportunity ID (sensitive field) */
      salesforceOppId?: string | null;
    };
    /** Response object for setting opportunity information for a purchase order. */
    Internal_SetOpportunityForPurchaseOrderWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response object for shipment email operations. */
    Internal_ShipmentEmailWSResponse: {
      /** State of the customer shipment email */
      customerShipmentEmailState?: ShipmentEmailWSResponseCustomerShipmentEmailStateEnum | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Legacy message for the shipment email */
      legacyMsg?: string | null;
      /** Tracking identifier for the shipment */
      trackingIdentifier?: string | null;
    };
    Internal_VerifyCanMigrateOrgFromV1WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      invalidOrgsToErrorMessages?: { [key: string]: string | null } | null;
    };
    IntuifaceSettings: {
      deviceToTriggerMap?: {
        [key: string]: components["schemas"]["TriggerContent"];
      } | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
    };
    InvalidPhysicalPortConfigType: {
      boardNum?: number | null;
      componentUuids?: (string | null)[] | null;
      portNum?: number | null;
      reason?: components["schemas"]["InvalidPhysicalPortReasonEnumType"];
    };
    InvalidPhysicalPortReasonEnumType: InvalidPhysicalPortReasonEnumType;
    /** Invoice details and information */
    InvoiceType: {
      addOnLicenseInvoices?:
        | components["schemas"]["AddOnLicenseInvoiceType"][]
        | null;
      additionalEmails?: (string | null)[] | null;
      attachCsv?: boolean | null;
      cameraPurchaseCount?: number | null;
      cameraPurchasePrice?: number | null;
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
      companyName?: string | null;
      customerAddress?: string | null;
      customerEmail?: string | null;
      customerName?: string | null;
      date?: number | null;
      domePurchaseCount?: number | null;
      domePurchasePrice?: number | null;
      domeSubItems?: components["schemas"]["HardwareInvoiceSubItem"][] | null;
      dueDate?: number | null;
      externalId?: string | null;
      installationPrice?: number | null;
      license?: components["schemas"]["License"];
      licenseCount?: number | null;
      licensePrice?: number | null;
      licenseSubItems?: components["schemas"]["LicenseInvoiceSubItem"][] | null;
      notes?: string | null;
      /** base 64 (url-safe) uuid string */
      partnerOrgUuid?: string | null;
      r1Camera1024?: components["schemas"]["HardwareInvoiceSubItem"][] | null;
      r1Camera512?: components["schemas"]["HardwareInvoiceSubItem"][] | null;
      r1CameraPurchaseCount?: number | null;
      r1CameraPurchasePrice?: number | null;
      r1CameraSubItems?:
        | components["schemas"]["HardwareInvoiceSubItem"][]
        | null;
      r1LargeCameraPurchaseCount?: number | null;
      r1LargeCameraPurchasePrice?: number | null;
      r1LargeSubItems?:
        | components["schemas"]["HardwareInvoiceSubItem"][]
        | null;
      r1MediumSubItems?:
        | components["schemas"]["HardwareInvoiceSubItem"][]
        | null;
      salespersonName?: string | null;
      shippingPrice?: number | null;
      status?: InvoiceStatusEnum | null;
      tax?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for charging an invoice. */
    Invoice_InvoiceChargeWSRequest: {
      /** base 64 (url-safe) uuid string */
      invoiceUuid?: string | null;
      /** Payment source token for charging the invoice */
      sourceToken?: string | null;
    };
    /** Response object for invoice charging operations. */
    Invoice_InvoiceChargeWSResponse: {
      /** Whether the invoice charge was successful */
      chargeSucceeded?: boolean | null;
      error?: boolean | null;
      /** Error message if the charge failed */
      errorMessage?: string | null;
      errorMsg?: string | null;
      /** Whether the invoice was previously initialized for charging */
      previouslyInitialized?: boolean | null;
    };
    /** Response object containing invoice details version 1. */
    Invoice_InvoiceDetailsV1WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      invoice?: components["schemas"]["Invoice_InvoiceV1Type"];
    };
    Invoice_InvoiceDetailsV2WSRequest: {
      netsuiteInvoiceUuid?: string | null;
    };
    Invoice_InvoiceDetailsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      invoice?: components["schemas"]["NetsuiteInvoiceDetails"];
    };
    /** Request object for retrieving invoice details. */
    Invoice_InvoiceDetailsWSRequest: {
      /** base 64 (url-safe) uuid string */
      invoiceUuid?: string | null;
    };
    /** Response object containing invoice details. */
    Invoice_InvoiceDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      invoice?: components["schemas"]["InvoiceType"];
    };
    /** Line item information for invoice version 1. */
    Invoice_InvoiceV1LineItemType: {
      /** Description of the product */
      description?: string | null;
      /** Product family category */
      family?: string | null;
      /** Name of the product */
      name?: string | null;
      /** Product code for the line item */
      productCode?: string | null;
      /** Quantity of the product */
      quantity?: number | null;
      /** Subtotal for this line item (quantity × unit price) */
      subtotal?: number | null;
      /** Unit price of the product */
      unitPrice?: number | null;
    };
    /** Invoice version 1 type containing comprehensive billing and line item information. */
    Invoice_InvoiceV1Type: {
      /** Email address of the billing contact */
      billingContactEmail?: string | null;
      /** Billing contact mailing city */
      billingContactMailingCity?: string | null;
      /** Billing contact mailing country */
      billingContactMailingCountry?: string | null;
      /** Billing contact mailing postal code */
      billingContactMailingPostalCode?: string | null;
      /** Billing contact mailing state */
      billingContactMailingState?: string | null;
      /** Billing contact mailing street address */
      billingContactMailingStreet?: string | null;
      /** Name of the billing contact */
      billingContactName?: string | null;
      /** Name of the company */
      companyName?: string | null;
      /** Due date in YYYY-MM-DD format */
      dueDate?: string | null;
      /** Grand total amount including tax and shipping */
      grandTotal?: number | null;
      /** Invoice date in YYYY-MM-DD format */
      invoiceDate?: string | null;
      /** Invoice number */
      invoiceNumber?: string | null;
      /** List of line items on the invoice */
      lineItems?:
        | components["schemas"]["Invoice_InvoiceV1LineItemType"][]
        | null;
      /** Additional notes for the invoice */
      notes?: string | null;
      /** Partner billing city */
      partnerBillingCity?: string | null;
      /** Partner billing country */
      partnerBillingCountry?: string | null;
      /** Partner billing postal code */
      partnerBillingPostalCode?: string | null;
      /** Partner billing state */
      partnerBillingState?: string | null;
      /** Partner billing street address */
      partnerBillingStreet?: string | null;
      /** Name of the partner */
      partnerName?: string | null;
      /** Name of the salesperson */
      salespersonName?: string | null;
      /** Shipping cost */
      shipping?: number | null;
      /** Status of the invoice */
      status?: string | null;
      /** Subtotal amount before tax and shipping */
      subtotal?: number | null;
      /** Tax amount */
      tax?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Command being executed with the current keypad. */
    KeypadCommand: KeypadCommandEnum;
    /** List of all registered keypads for the organization */
    KeypadConfigType: {
      armCountdownSecs?: number | null;
      buildingAdminPhoneNumber?: string | null;
      connectionState?: KeypadConfigConnectionStateEnum | null;
      floorNumber?: number | null;
      lastModified?: number | null;
      latitude?: number | null;
      locationName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      qualifiedAddress?: components["schemas"]["QualifiedAddressType"];
      showCallBuildingAdmin?: boolean | null;
      signalStrength?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tz?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      /** base 64 (url-safe) uuid string */
      videoWallUuid?: string | null;
    };
    /** Request object for authenticating a keypad PIN. */
    Keypad_AuthenticatePinRequest: {
      /** PIN code to authenticate */
      pin?: string | null;
    };
    /** Response object for keypad PIN authentication. */
    Keypad_AuthenticatePinResponse: {
      /** Whether the PIN authentication was successful */
      authenticated?: boolean | null;
    };
    /** Request object for claiming a keypad activation token to connect a keypad to Rhombus services. */
    Keypad_ClaimKeypadActivationTokenRequest: {
      /** Activation token for claiming the keypad */
      activationToken?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Name for the keypad */
      name?: string | null;
    };
    /** Response object for claiming a keypad activation token. */
    Keypad_ClaimKeypadActivationTokenResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting the current keypad information. */
    Keypad_GetCurrentKeypadWSRequest: { [key: string]: unknown };
    /** Response object containing current keypad configuration information. */
    Keypad_GetCurrentKeypadWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      keypad?: components["schemas"]["KeypadConfigType"];
    };
    /** Request object for getting all registered keypads for a specific location. */
    Keypad_GetKeypadsForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response object containing all registered keypads for a specific location. */
    Keypad_GetKeypadsForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of all registered keypads for the specified location */
      keypads?: components["schemas"]["KeypadConfigType"][] | null;
    };
    /** Request object for getting all registered keypads for an organization. */
    Keypad_GetKeypadsForOrgWSRequest: { [key: string]: unknown };
    /** Response object containing all registered keypads for an organization. */
    Keypad_GetKeypadsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of all registered keypads for the organization */
      keypads?: components["schemas"]["KeypadConfigType"][] | null;
    };
    /** Request object for keypad online/offline checkin processing. */
    Keypad_KeypadCheckinWSRequest: {
      /** Signal strength of the keypad connection */
      signalStrength?: number | null;
    };
    /** Response object for keypad checkin operations. */
    Keypad_KeypadCheckinWSResponse: { [key: string]: unknown };
    /** Request object for sending a STOMP containing a keypad command. */
    Keypad_PublishKeypadCommandWSRequest: {
      command: components["schemas"]["KeypadCommand"];
      /** Epoch timestamp (ms) when to execute the command if applicable. */
      executeAtMs?: number | null;
    };
    /** Request object for unregistering a keypad. */
    Keypad_UnregisterKeypadRequest: {
      /** base 64 (url-safe) uuid string */
      keypadUuid?: string | null;
    };
    /** Response object for unregistering a keypad. */
    Keypad_UnregisterKeypadResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating keypad settings and configuration. */
    Keypad_UpdateKeypadRequest: {
      /** Arm countdown seconds for the keypad */
      armCountdownSecs?: number | null;
      /** Phone number of the building administrator */
      buildingAdminPhoneNumber?: string | null;
      /** Floor number where the keypad is located */
      floorNumber?: number | null;
      /** base 64 (url-safe) uuid string */
      keypadUuid?: string | null;
      /** Latitude coordinate of the keypad location */
      latitude?: number | null;
      /** Name of the location where the keypad is installed */
      locationName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate of the keypad location */
      longitude?: number | null;
      /** Name of the keypad */
      name?: string | null;
      qualifiedAddress?: components["schemas"]["QualifiedAddressType"];
      /** Whether to show the call building admin option */
      showCallBuildingAdmin?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Time zone ID for the keypad location */
      timeZoneId?: string | null;
      /** base 64 (url-safe) uuid string */
      videoWallUuid?: string | null;
    };
    /** Response object for updating keypad settings. */
    Keypad_UpdateKeypadResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** List of all registered kiosks for the organization */
    Kiosk: {
      batteryLevel?: number | null;
      connectionStatus?: KioskConnectionStatusEnum | null;
      deleted?: boolean | null;
      lastUpdateTimeMs?: number | null;
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      printerIP?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Selective update information for the kiosk */
    KioskSelectiveUpdate: {
      batteryLevel?: number | null;
      connectionStatus?: KioskSelectiveUpdateConnectionStatusEnum | null;
      deleted?: boolean | null;
      lastUpdateTimeMs?: number | null;
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      printerIP?: string | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for claiming a kiosk activation token to connect a kiosk to Rhombus services. */
    Kiosk_ClaimKioskActivationTokenRequest: {
      /** Activation token for claiming the kiosk */
      activationToken?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Name for the kiosk */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
    };
    /** Response object for claiming a kiosk activation token. */
    Kiosk_ClaimKioskActivationTokenResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a kiosk. */
    Kiosk_DeleteKioskWSRequest: {
      /** base 64 (url-safe) uuid string */
      kioskUuid?: string | null;
    };
    /** Response object for deleting a kiosk. */
    Kiosk_DeleteKioskWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting the current kiosk information. */
    Kiosk_GetCurrentKioskWSRequest: { [key: string]: unknown };
    /** Response object containing current kiosk information. */
    Kiosk_GetCurrentKioskWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      kiosk?: components["schemas"]["Kiosk_KioskWithInfo"];
    };
    /** Request object for getting all registered kiosks for a specific location. */
    Kiosk_GetKiosksForLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response object containing all registered kiosks for a specific location. */
    Kiosk_GetKiosksForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of all registered kiosks for the specified location */
      kiosks?: components["schemas"]["Kiosk"][] | null;
    };
    /** Request object for getting all registered kiosks for an organization. */
    Kiosk_GetKiosksForOrgWSRequest: { [key: string]: unknown };
    /** Response object containing all registered kiosks for an organization. */
    Kiosk_GetKiosksForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of all registered kiosks for the organization */
      kiosks?: components["schemas"]["Kiosk"][] | null;
    };
    /** Request object for kiosk heartbeat and online/offline processing. */
    Kiosk_KioskCheckinWSRequest: {
      /** Battery level of the kiosk device */
      batterLevel?: number | null;
      /** Signal strength of the kiosk connection */
      signalStrength?: number | null;
    };
    /** Response object for kiosk heartbeat operations. */
    Kiosk_KioskCheckinWSResponse: { [key: string]: unknown };
    /** Kiosk information with additional location details. */
    Kiosk_KioskWithInfo: {
      batteryLevel?: number | null;
      connectionStatus?: KioskWithInfoConnectionStatusEnum | null;
      deleted?: boolean | null;
      lastUpdateTimeMs?: number | null;
      latitude?: number | null;
      /** Name of the location where the kiosk is installed */
      locationName?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      printerIP?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for unregistering a kiosk. */
    Kiosk_UnregisterKioskRequest: {
      /** base 64 (url-safe) uuid string */
      kioskUuid?: string | null;
    };
    /** Response object for unregistering a kiosk. */
    Kiosk_UnregisterKioskResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response object for updating kiosk settings. */
    Kiosk_UpdateKioskResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for selectively updating kiosk settings. */
    Kiosk_UpdateKioskSelectiveRequest: {
      kioskUpdate?: components["schemas"]["KioskSelectiveUpdate"];
    };
    KisiSettings: {
      alertUnauthorizedFaces?: boolean | null;
      apiSecretKey?: string | null;
      createSeekPoints?: boolean | null;
      defaultOptions?: components["schemas"]["BadgeIntegrationDefaultOptions"];
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      placeId?: number | null;
      placeToSettingsMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationSettings"];
      } | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: number | null;
    };
    KisiType:
      | ({
          apiSecretKey?: string | null;
          defaultOptions?: components["schemas"]["BadgeIntegrationDefaultOptions"];
          doorsValidated?: boolean | null;
          placeToSettingsMap?: {
            [key: string]: components["schemas"]["BadgeIntegrationSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    LabelIdentificationActivityEventType:
      | ({
          alertLabelSet?: (string | null)[] | null;
          alertUnidentified?: boolean | null;
          allowedLabelSet?: (string | null)[] | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    LeakProbeType: {
      adcMv?: number | null;
      adcRaw?: number | null;
      leakDetected?: boolean | null;
      moistDetected?: boolean | null;
      present?: boolean | null;
      timestampSec?: number | null;
    };
    License: LicenseEnum;
    LicenseFeature: {
      enabled?: boolean | null;
      name?: string | null;
    };
    LicenseGroupStats: {
      assignedCount?: number | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    LicenseInvoiceSubItem: {
      count?: number | null;
      description?: string | null;
      license?: components["schemas"]["License"];
      price?: number | null;
    };
    LicenseStateStats: {
      /** The number of licenses in the group that are currently in the CLAIMED state. */
      claimedCount?: number | null;
      /** The number of licenses in the group that are currently in the EXPIRED state. */
      expiredCount?: number | null;
      /** The number of licenses in the group that are currently in the NOT_RENEWED state. */
      notRenewedCount?: number | null;
      /** The number of licenses in the group that are currently in the PENDING_RETURN state. */
      pendingReturnCount?: number | null;
      /** The number of licenses in the group that are currently in the PERMANENTLY_EXPIRED state. */
      permanentlyExpiredCount?: number | null;
      /** The number of licenses in the group that are currently in the RENEWED state. */
      renewedCount?: number | null;
    };
    LicenseUsageCatalogItem:
      | ({
          addOnLicenseType?: components["schemas"]["AddOnLicense"];
          cloudArchiveDays?: number | null;
          deviceType?: components["schemas"]["DeviceTypeEnum"];
          licenseFamily?: LicenseUsageCatalogItemLicenseFamilyEnum | null;
        } & {
          durationMonths?: number | null;
          productCode?: string | null;
          productType?: LicenseUsageCatalogItemProductTypeEnum | null;
        })
      | null;
    LicenseUsageStats: {
      addOnLicenseStats?: components["schemas"]["AddOnLicenseStats"][] | null;
      assignedCount?: number | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    /** List of licenses available for the client organization */
    LicenseUsageType: {
      addOnLicenseType?: components["schemas"]["AddOnLicense"];
      additionalPerceptionFeatures?:
        | components["schemas"]["PerceptionType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      claimKeyUuid?: string | null;
      cloudArchiveDays?: number | null;
      createdOn?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      firstAssignedDate?: string | null;
      license?: components["schemas"]["AddOnLicense"];
      licenseFamily?: LicenseUsageLicenseFamilyEnum | null;
      licenseToUnassignEmailState?: LicenseUsageLicenseToUnassignEmailStateEnum | null;
      maxDeleteDate?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      perceptionTypes?: components["schemas"]["PerceptionType"][] | null;
      /** base 64 (url-safe) uuid string */
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: LicenseUsageProductTypeEnum | null;
      state?: LicenseUsageStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for assigning ACU door license. */
    License_AssignACUDoorLicenseWSRequest: {
      /** base 64 (url-safe) uuid string */
      doorUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      licenseUuid?: string | null;
    };
    /** Response object for assigning ACU door license. */
    License_AssignACUDoorLicenseWSResponse: {
      acuDoorLicense?: components["schemas"]["ACUDoorLicenseType"];
    };
    /** Request object for assigning alert monitoring license. */
    License_AssignAlertMonitoringLicenseWSRequest: {
      /** base 64 (url-safe) uuid string */
      licenseUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response object for assigning alert monitoring license. */
    License_AssignAlertMonitoringLicenseWSResponse: {
      alertMonitoringLicense?: components["schemas"]["AlertMonitoringLicenseType"];
    };
    /** Request object for assigning or unassigning a device license. */
    License_AssignDeviceLicenseWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      licenseUuid?: string | null;
    };
    /** Response object for assigning or unassigning a device license. */
    License_AssignDeviceLicenseWSResponse: {
      deviceLicense?: components["schemas"]["DeviceLicenseType"];
    };
    /** Request object for assigning an add-on license to a device. */
    License_AssignLicenseWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      licenseUuid?: string | null;
    };
    /** Response object for assigning an add-on license to a device. */
    License_AssignLicenseWSResponse: {
      licenseUsage?: components["schemas"]["LicenseUsageType"];
    };
    /** Request object for calculating license statistics for client organization. */
    License_CalculateLicensesStatsForClientOrgWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object containing license statistics for client organization. */
    License_CalculateLicensesStatsForClientOrgWSResponse: {
      orgLicenseStats?: components["schemas"]["OrgLicenseStats"];
    };
    /** Request object for calculating license statistics for organization. */
    License_CalculateLicensesStatsForOrgWSRequest: {
      /** Whether to exclude trial licenses from expired count */
      excludeTrialLicensesFromExpiredCount?: boolean | null;
    };
    /** Response object containing license statistics for organization. */
    License_CalculateLicensesStatsForOrgWSResponse: {
      orgLicenseStats?: components["schemas"]["OrgLicenseStats"];
    };
    /** Request object for creating ACU door license. */
    License_CreateACUDoorLicenseWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object for creating ACU door license. */
    License_CreateACUDoorLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for creating alert monitoring license. */
    License_CreateAlertMonitoringLicenseWSRequest: {
      allowedDeviceCount?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    License_CreateAlertMonitoringLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_CreateDeviceLicenseWSRequest: {
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      licenseFamily?: CreateDeviceLicenseWSRequestLicenseFamilyEnum | null;
      licenseType?: components["schemas"]["License"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    License_CreateDeviceLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      licenseUuid?: string | null;
    };
    License_CreateLicenseWSRequest: {
      cloudArchiveDays?: number | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      license?: components["schemas"]["AddOnLicense"];
      licenseFamily?: CreateLicenseWSRequestLicenseFamilyEnum | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    License_CreateLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      licenseUuid?: string | null;
    };
    /** Request object for deleting alert monitoring license. */
    License_DeleteAlertMonitoringLicenseWSRequest: {
      /** base 64 (url-safe) uuid string */
      licenseUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object for deleting alert monitoring license. */
    License_DeleteAlertMonitoringLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting an unassigned device license from an organization. */
    License_DeleteDeviceLicenseWSRequest: {
      /** base 64 (url-safe) uuid string */
      licenseUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object for deleting an unassigned device license from an organization. */
    License_DeleteDeviceLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting an unassigned add-on license from an organization. */
    License_DeleteLicenseWSRequest: {
      /** base 64 (url-safe) uuid string */
      licenseUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object for deleting an unassigned add-on license from an organization. */
    License_DeleteLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for finding licenses by claim key. */
    License_FindLicensesByClaimKeyWSRequest: {
      /** base 64 (url-safe) uuid string */
      claimKeyUuid?: string | null;
    };
    /** Response object containing licenses found by claim key. */
    License_FindLicensesByClaimKeyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of licenses found by claim key */
      licenses?: components["schemas"]["BaseLicenseType"][] | null;
    };
    /** Request object for getting list of access controlled door licenses available for a client organization. */
    License_GetACUDoorLicensesForClientOrgWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object containing list of access controlled door licenses available for a client organization. */
    License_GetACUDoorLicensesForClientOrgWSResponse: {
      /** List of access controlled door licenses available for the client organization */
      acuDoorLicenses?: components["schemas"]["ACUDoorLicenseType"][] | null;
    };
    /** Request object for getting list of access controlled door licenses available in organization. */
    License_GetACUDoorLicensesWSRequest: { [key: string]: unknown };
    /** Response object containing list of access controlled door licenses available in organization. */
    License_GetACUDoorLicensesWSResponse: {
      /** List of access controlled door licenses available in the organization */
      acuDoorLicenses?: components["schemas"]["ACUDoorLicenseType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting list of alert monitoring licenses available for a client organization. */
    License_GetAlertMonitoringLicensesForClientOrgWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object containing list of alert monitoring licenses available for a client organization. */
    License_GetAlertMonitoringLicensesForClientOrgWSResponse: {
      /** List of alert monitoring licenses available for the client organization */
      alertMonitoringLicenses?:
        | components["schemas"]["AlertMonitoringLicenseType"][]
        | null;
    };
    /** Request object for getting list of alert monitoring licenses available in organization. */
    License_GetAlertMonitoringLicensesWSRequest: { [key: string]: unknown };
    /** Response object containing list of alert monitoring licenses available in organization. */
    License_GetAlertMonitoringLicensesWSResponse: {
      /** List of alert monitoring licenses available in the organization */
      alertMonitoringLicenses?:
        | components["schemas"]["AlertMonitoringLicenseType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting list of device licenses available for a client organization. */
    License_GetDeviceLicensesForClientOrgWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object containing list of device licenses available for a client organization. */
    License_GetDeviceLicensesForClientOrgWSResponse: {
      /** List of device licenses available for the client organization */
      deviceLicenses?: components["schemas"]["DeviceLicenseType"][] | null;
    };
    /** Request object for getting list of device licenses available in organization. */
    License_GetDeviceLicensesWSRequest: {
      optionalDeviceTypeFilter?: components["schemas"]["DeviceTypeEnum"];
    };
    /** Response object containing list of device licenses available in organization. */
    License_GetDeviceLicensesWSResponse: {
      /** List of device licenses available in the organization */
      deviceLicenses?: components["schemas"]["DeviceLicenseType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting list of licenses available for a client organization. */
    License_GetLicensesForClientOrgWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object containing list of licenses available for a client organization. */
    License_GetLicensesForClientOrgWSResponse: {
      /** List of licenses available for the client organization */
      licenses?: components["schemas"]["LicenseUsageType"][] | null;
    };
    /** Request object for getting list of add-on licenses available in organization. */
    License_GetLicensesWSRequest: {
      optionalDeviceTypeFilter?: components["schemas"]["DeviceTypeEnum"];
    };
    /** Response object containing list of add-on licenses available in organization. */
    License_GetLicensesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of add-on licenses available in the organization */
      licenses?: components["schemas"]["LicenseUsageType"][] | null;
    };
    License_catalog_FindCatalogItemsWSRequest: {
      /** The product type used to filter license catalog items. If not specified, no filtering by product type is done. */
      productType?: FindCatalogItemsWSRequestProductTypeEnum | null;
    };
    License_catalog_FindCatalogItemsWSResponse: {
      catalogItems?: components["schemas"]["BaseCatalogItem"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_catalog_GetCatalogItemByProductCodeWSRequest: {
      productCode?: string | null;
    };
    License_catalog_GetCatalogItemByProductCodeWSResponse: {
      catalogItem?: components["schemas"]["BaseCatalogItem"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_claimkey_ClaimLicensesForClientOrgWSRequest: {
      claimCode?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    License_claimkey_ClaimLicensesForClientOrgWSResponse: {
      /** base 64 (url-safe) uuid string */
      claimKeyUuid?: string | null;
    };
    License_claimkey_ClaimLicensesWSRequest: {
      claimCode?: string | null;
    };
    License_claimkey_ClaimLicensesWSResponse: {
      /** base 64 (url-safe) uuid string */
      claimKeyUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_claimkey_CreateClaimKeyWSRequest: {
      endDate?: string | null;
      entry?: components["schemas"]["ClaimKeyEntry"];
      requestId?: string | null;
      startDate?: string | null;
      trial?: boolean | null;
    };
    License_claimkey_CreateClaimKeyWSResponse: {
      claimCode?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    License_claimkey_CreateRenewalClaimKeyWSRequest: {
      endDate?: string | null;
      entries?: {
        [key: string]: components["schemas"]["ClaimKeyEntry"];
      } | null;
      requestId?: string | null;
    };
    License_claimkey_CreateRenewalClaimKeyWSResponse: {
      claimCode?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    License_claimkey_FindClaimKeysByOrgWSRequest: {
      claimKeySearchFilter?: components["schemas"]["ClaimKeySearchFilter"];
    };
    License_claimkey_FindClaimKeysByOrgWSResponse: {
      claimKeys?: components["schemas"]["BaseClaimKey"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_claimkey_GetClaimKeyByCodeForClientOrgWSRequest: {
      claimCode?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    License_claimkey_GetClaimKeyByCodeForClientWSResponse: {
      claimKey?: components["schemas"]["BaseClaimKey"];
    };
    License_claimkey_GetClaimKeyByCodeWSRequest: {
      claimCode?: string | null;
    };
    License_claimkey_GetClaimKeyByCodeWSResponse: {
      claimKey?: components["schemas"]["BaseClaimKey"];
    };
    License_claimkey_GetClaimKeyWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    License_claimkey_GetClaimKeyWSResponse: {
      claimKey?: components["schemas"]["BaseClaimKey"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_claimkey_ReturnClaimKeyProductQuantitiesWSRequest: {
      productQuantities?: { [key: string]: number | null } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    License_claimkey_ReturnClaimKeyProductQuantitiesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    LineItems: {
      description?: string | null;
      productCode?: string | null;
      productcode?: string | null;
      quantity?: number | null;
      subtotal?: number | null;
      unitPrice?: number | null;
      unitprice?: number | null;
    };
    Link: {
      params?: { [key: string]: string | null } | null;
      rel?: string | null;
      rels?: (string | null)[] | null;
      title?: string | null;
      type?: string | null;
      uri?: string | null;
      uriBuilder?: components["schemas"]["UriBuilder"];
    } | null;
    LiveNotificationActionRecordType: {
      status?: components["schemas"]["LiveNotificationActionStatusEnum"];
    };
    LiveNotificationActionStatusEnum: LiveNotificationActionStatusEnum;
    LocalDateTimeIntervalType: {
      /** Interval end time in 'yyyy-MM-ddTHH:mm:ss' format. Interval end time is exclusive. */
      localEndDateTime: string | null;
      /** Interval start time in 'yyyy-MM-ddTHH:mm:ss' format. Interval start time is inclusive. */
      localStartDateTime: string | null;
    } | null;
    /** List of intervals each specifying door state during date range. List must contain at least one element */
    LocalInterval: {
      /** Interval end time in 'yyyy-MM-ddTHH:mm:ss' format. Interval end time is exclusive. */
      localEndDateTime: string | null;
      /** Interval start time in 'yyyy-MM-ddTHH:mm:ss' format. Interval start time is inclusive. */
      localStartDateTime: string | null;
      state: components["schemas"]["AccessControlledDoorStateEnumType"];
    };
    /** The access grant to update */
    LocationAccessGrantType: {
      accessControlledDoorUuids?: (string | null)[] | null;
      createdAtMillis?: number | null;
      doorLabelIds?: (string | null)[] | null;
      groupUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      sortKey?: string | null;
      storedInS3?: boolean | null;
      updatedAtMillis?: number | null;
      userUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** The access revocation to update */
    LocationAccessRevocationType: {
      accessControlledDoorUuids?: (string | null)[] | null;
      createdAtMillis?: number | null;
      doorLabelIds?: (string | null)[] | null;
      groupUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      sortKey?: string | null;
      storedInS3?: boolean | null;
      updatedAtMillis?: number | null;
      userUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** The updated location first-in settings. */
    LocationFirstInSettings: {
      createdAtMillis?: number | null;
      description?: string | null;
      doorAuthFirstInOutOfSync?: boolean | null;
      doorAuthFirstInState?: components["schemas"]["FirstInState"];
      doorAuthRequirementEnabled?: boolean | null;
      doorScheduleFirstInOutOfSync?: boolean | null;
      doorScheduleFirstInState?: components["schemas"]["FirstInState"];
      doorScheduleRequirementEnabled?: boolean | null;
      doorUuids?: (string | null)[] | null;
      groupUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      resets?: components["schemas"]["BaseFirstInReset"][] | null;
      /** base 64 (url-safe) uuid string */
      settingsUuid?: string | null;
      updatedAtMillis?: number | null;
      userUuids?: (string | null)[] | null;
    };
    /** Location functionality enum for exposing to OpenAPI component schemas */
    LocationFunctionality: LocationFunctionalityEnum;
    LocationLockdownActivatedRuleTriggerType:
      | ({
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    LocationLockdownDeactivatedRuleTriggerType:
      | ({
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    /** The updated location lockdown plan. */
    LocationLockdownPlanType: {
      activationPlan?: components["schemas"]["LockdownActivationPlanType"];
      createdAtMillis?: number | null;
      deactivationPlan?: components["schemas"]["LockdownDeactivationPlanType"];
      defaultLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
      doorLockdownStateMap?: {
        [key: string]: components["schemas"]["DoorLockdownStateEnumType"];
      } | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      physicalAccess?: components["schemas"]["LockdownPhysicalAccessType"];
      /** base 64 (url-safe) uuid string */
      scopeUuid?: string | null;
      testPlan?: components["schemas"]["LockdownTestPlanType"];
      type?: components["schemas"]["LockdownPlanScopeEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    LocationLockdownStateEnumType: LocationLockdownStateEnumType;
    /** The lockdown state for the location. */
    LocationLockdownStateType: {
      activeLockdownPlans?:
        | components["schemas"]["LockdownPlanReference"][]
        | null;
      createdAtMillis?: number | null;
      followingTestPlan?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      state?: components["schemas"]["LocationLockdownStateEnumType"];
      stateChangedAtMillis?: number | null;
      updatedAtMillis?: number | null;
    };
    LocationSettings: {
      associatedCameras?: (string | null)[] | null;
      printBadge?: boolean | null;
    } | null;
    /** Location information to update */
    LocationType: {
      address1?: string | null;
      address2?: string | null;
      countryCode?: string | null;
      floorPlans?: components["schemas"]["FloorPlanType"][] | null;
      /** Labels offer a way to perform operations across multiple locations if they have the same label */
      labels?: (string | null)[] | null;
      latitude?: number | null;
      longitude?: number | null;
      /** Name of this location */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      postalCode?: string | null;
      qualifiedAddress?: components["schemas"]["QualifiedAddressType"];
      subLocations?: components["schemas"]["LocationType"][] | null;
      /** Timezone for this location */
      tz?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for adding a label to a location. */
    Location_AddLocationLabelWSRequest: {
      /** Label to add to the location */
      label?: string | null;
      /** Location identifier (name or ID) */
      locationIdentifier?: string | null;
    };
    /** Response object for adding a label to a location. */
    Location_AddLocationLabelWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for creating a location. */
    Location_CreateLocationWSRequest: {
      location?: components["schemas"]["LocationType"];
      /** base 64 (url-safe) uuid string */
      parentLocationUuid?: string | null;
    };
    /** Response object for creating a location. */
    Location_CreateLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for removing a location. */
    Location_DeleteLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for removing a location. */
    Location_DeleteLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting the latitude and longitude of an address. */
    Location_GeoCodeWSRequest: {
      /** Address to geocode */
      address?: string | null;
    };
    /** Response object containing the latitude and longitude of an address. */
    Location_GeoCodeWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Latitude coordinate of the address */
      latitude?: number | null;
      /** Longitude coordinate of the address */
      longitude?: number | null;
    };
    /** Request object for getting all location labels for an organization. */
    Location_GetLocationLabelsForOrgWSRequest: { [key: string]: unknown };
    /** Response object containing all location labels for an organization. */
    Location_GetLocationLabelsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of location name or location id to label set */
      locationLabels?: { [key: string]: (string | null)[] | null } | null;
    };
    /** Request object for getting location by ID. */
    Location_GetLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid: string | null;
      /** Whether sub-locations are required in the response */
      subLocationsRequired?: boolean | null;
    };
    /** Response object containing location information. */
    Location_GetLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      location?: components["schemas"]["LocationType"];
    };
    /** Request object for getting list of locations given latitude and longitude. */
    Location_GetLocationsByGeoRequest: {
      /** Latitude coordinate */
      latitude?: number | null;
      /** Longitude coordinate */
      longitude?: number | null;
    };
    /** Response object containing list of locations given latitude and longitude. */
    Location_GetLocationsByGeoResponse: {
      /** Collection of locations found at the specified coordinates */
      locations?: components["schemas"]["LocationType"][] | null;
    };
    /** Request object for getting nested locations by subLocationHierarchyKey. */
    Location_GetLocationsBySubLocationsHierarchyKeyWSRequest: {
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
    };
    /** Response object containing nested locations by subLocationHierarchyKey. */
    Location_GetLocationsBySubLocationsHierarchyKeyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      location?: components["schemas"]["LocationType"];
    };
    /** Request object for getting list of locations in organization with pagination support. */
    Location_GetLocationsV2WSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
      nameBeginsWithFilter?: string | null;
    };
    /** Response object containing list of locations in organization with pagination support. */
    Location_GetLocationsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lastEvaluatedKey?: string | null;
      /** List of locations in the organization */
      locations?: components["schemas"]["LocationType"][] | null;
    };
    /** Request object for getting list of locations in organization. */
    Location_GetLocationsWSRequest: {
      /** Whether to include sub-locations in the response */
      subLocationsIncluded?: boolean | null;
    };
    /** Response object containing list of locations in organization. */
    Location_GetLocationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of locations in the organization */
      locations?: components["schemas"]["LocationType"][] | null;
    };
    /** Qualified address with validation information */
    Location_QualifiedAddressTypeWithValidation: {
      addressComplete?: boolean | null;
      /** apt, suite, or unit */
      addressLine2?: string | null;
      /** street address */
      addressline1?: string | null;
      /** state */
      administrativeArea?: string | null;
      /** city */
      locality?: string | null;
      /** zip code */
      postalCode?: string | null;
      /** country */
      regionCode?: string | null;
      validatedAddressline1?: boolean | null;
      validatedAdminestrativeArea?: boolean | null;
      validatedLocality?: boolean | null;
      validatedPostalCode?: boolean | null;
      validatedRegionCode?: boolean | null;
      validatedSubpremise?: boolean | null;
    };
    /** Request object for removing a label from a location. */
    Location_RemoveLocationLabelWSRequest: {
      /** Label to remove from the location */
      label?: string | null;
      /** Location identifier (name or ID) */
      locationIdentifier?: string | null;
    };
    /** Response object for removing a label from a location. */
    Location_RemoveLocationLabelWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for selectively updating a location. */
    Location_SelectiveUpdateLocationWSRequest: {
      /** First line of the address */
      address1?: string | null;
      /** Second line of the address */
      address2?: string | null;
      /** Country code of the location */
      countryCode?: string | null;
      /** Floor plans for the location */
      floorPlans?: components["schemas"]["FloorPlanType"][] | null;
      /** Labels offer a way to perform operations across multiple locations if they have the same label */
      labels?: (string | null)[] | null;
      /** Latitude coordinate of the location */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid: string | null;
      /** Longitude coordinate of the location */
      longitude?: number | null;
      /** Name of this location */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Postal code of the location */
      postalCode?: string | null;
      /** Timezone identifier, e.g. America/Los_Angeles, EST, GMT+0, etc. */
      timezoneId?: string | null;
      /** Use timezoneId field instead */
      tz?: {
        displayName?: string | null;
        dstsavings?: number | null;
        id?: string | null;
        rawOffset?: number | null;
      } | null;
    };
    /** Response object for selectively updating a location. */
    Location_SelectiveUpdateLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a location. NOTE: This will replace old settings meaning if you leave a field blank it will be overrode to blank. For selective field updates use the endpoint /selectiveUpdateLocation. */
    Location_UpdateLocationWSRequest: {
      location?: components["schemas"]["LocationType"];
    };
    /** Response object for updating a location. */
    Location_UpdateLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for validating a location address for Alarm Monitoring. */
    Location_ValidateLocationWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
    };
    /** Response object for validating a location address for Alarm Monitoring. */
    Location_ValidateLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      qualifiedAddress?: components["schemas"]["Location_QualifiedAddressTypeWithValidation"];
    };
    LockdownActivatedStateEventType:
      | ({
          activatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          activeLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          deactivatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
        } & {
          createdAtMillis?: number | null;
          followingTestPlan?: boolean | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          originator?: components["schemas"]["BaseLocationLockdownEventOriginator"];
          stateChangedAtMillis?: number | null;
          type?: components["schemas"]["LockdownStateEventEnumType"];
        })
      | null;
    LockdownActivationPlanType: {
      groupUuids?: (string | null)[] | null;
      rhombusKeyNotificationMessage?: string | null;
      userUuids?: (string | null)[] | null;
    };
    /** The result of the lockdown activation operation. */
    LockdownActivationResultEnumType: LockdownActivationResultEnumType;
    LockdownDeactivatedStateEventType:
      | ({
          deactivatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
        } & {
          createdAtMillis?: number | null;
          followingTestPlan?: boolean | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          originator?: components["schemas"]["BaseLocationLockdownEventOriginator"];
          stateChangedAtMillis?: number | null;
          type?: components["schemas"]["LockdownStateEventEnumType"];
        })
      | null;
    LockdownDeactivationPlanType: {
      groupUuids?: (string | null)[] | null;
      rhombusKeyNotificationMessage?: string | null;
      userUuids?: (string | null)[] | null;
    };
    /** The result of the lockdown deactivation operation. */
    LockdownDeactivationResultEnumType: LockdownDeactivationResultEnumType;
    LockdownEventOriginatorEnumType: LockdownEventOriginatorEnumType;
    LockdownPhysicalAccessType: {
      groupUuids?: (string | null)[] | null;
      userUuids?: (string | null)[] | null;
    };
    LockdownPlanReference: {
      /** base 64 (url-safe) uuid string */
      lockdownPlanUuid?: string | null;
      scope?: components["schemas"]["LockdownPlanScopeEnumType"];
      /** base 64 (url-safe) uuid string */
      scopeUuid?: string | null;
    };
    LockdownPlanScopeEnumType: LockdownPlanScopeEnumType;
    LockdownStateEventEnumType: LockdownStateEventEnumType;
    LockdownTestPlanType: {
      doorStateOverrideEnabled?: boolean | null;
      userAccessOverrideEnabled?: boolean | null;
    };
    LockdownType: {
      id?: number | null;
      isActive?: boolean | null;
      name?: string | null;
    };
    /** Request object for getting RMAs (Return Merchandise Authorizations). */
    Logistics_GetRMAsWSRequest: { [key: string]: unknown };
    /** Response object containing RMAs (Return Merchandise Authorizations). */
    Logistics_GetRMAsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of RMAs (Return Merchandise Authorizations) */
      rmaList?: components["schemas"]["RMAType"][] | null;
    };
    /** Request object for getting shipments within a time range. */
    Logistics_GetShipmentsWSRequest: {
      /** End time in seconds (Unix timestamp) */
      endTimeSec?: number | null;
      /** Start time in seconds (Unix timestamp) */
      startTimeSec?: number | null;
    };
    /** Response object containing shipments within the specified time range. */
    Logistics_GetShipmentsWSResponse: {
      /** List of customer shipments within the specified time range */
      customerShipmentList?:
        | components["schemas"]["CustomerShipmentType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    LumeoSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
    };
    LumeoType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    } | null;
    ManualDoorStateChangeEnum: ManualDoorStateChangeEnum;
    ManualDoorStateChangeEnum_Minimal: ManualDoorStateChangeEnum_Minimal;
    /** Request object for generating a map URL. */
    Maps_GenerateMapUrlWSRequest: {
      /** Base URL for the map */
      baseUrl?: string | null;
    };
    /** Response object containing the generated map URL. */
    Maps_GenerateMapUrlWSResponse: {
      /** Signed URL for the map */
      signedUrl?: string | null;
    };
    MattermostSettings: {
      channel?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      webhookUrl?: string | null;
    };
    MediaType: {
      charset?: {
        registered?: boolean | null;
      } | null;
      concrete?: boolean | null;
      parameters?: { [key: string]: string | null } | null;
      qualityValue?: number | null;
      subtype?: string | null;
      subtypeSuffix?: string | null;
      type?: string | null;
      wildcardSubtype?: boolean | null;
      wildcardType?: boolean | null;
    };
    /** Request object for getting media information of any video-supporting media device. */
    Mediadevice_GetBulkMediaDeviceDetailsWSRequest: {
      /** Set of device facet UUIDs to get media details for */
      devices?: (string | null)[] | null;
    };
    /** Response object containing media information for video-supporting media devices. */
    Mediadevice_GetBulkMediaDeviceDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of device facet UUIDs to their media device details */
      mediaDeviceDetails?: {
        [
          key: string
        ]: components["schemas"]["Mediadevice_MediaDeviceDetailsType"];
      } | null;
    };
    /** Detailed information about a media device including streaming URLs and device characteristics. */
    Mediadevice_MediaDeviceDetailsType: {
      /** List of audio gateway UUIDs associated with the device */
      audioGateways?: (string | null)[] | null;
      /** RUUID with optional appended facet information */
      deviceFacetUuid?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** URLs to check if the device is available on LAN */
      lanCheckUrls?: (string | null)[] | null;
      /** LAN live H264 streaming URIs */
      lanLiveH264Uris?: (string | null)[] | null;
      /** LAN live M3U8 streaming URIs */
      lanLiveM3u8Uris?: (string | null)[] | null;
      /** LAN live MPD streaming URIs */
      lanLiveMpdUris?: (string | null)[] | null;
      /** LAN VOD M3U8 URI templates */
      lanVodM3u8UrisTemplates?: (string | null)[] | null;
      /** LAN VOD MPD URI templates */
      lanVodMpdUrisTemplates?: (string | null)[] | null;
      /** Name of the device */
      name?: string | null;
      /** Region where the device is located */
      region?: string | null;
      /** Timezone of the device */
      timezone?: {
        displayName?: string | null;
        dstsavings?: number | null;
        id?: string | null;
        rawOffset?: number | null;
      } | null;
      /** URI of the device */
      uri?: string | null;
      /** WAN live H264 streaming URI */
      wanLiveH264Uri?: string | null;
      /** WAN live M3U8 streaming URI */
      wanLiveM3u8Uri?: string | null;
      /** WAN live MPD streaming URI */
      wanLiveMpdUri?: string | null;
      /** WAN VOD H264 URI template */
      wanVodH264UriTemplate?: string | null;
      /** WAN VOD M3U8 URI template */
      wanVodM3u8UriTemplate?: string | null;
      /** WAN VOD MPD URI template */
      wanVodMpdUriTemplate?: string | null;
    };
    MessageBodyWorkers: { [key: string]: unknown } | null;
    MetaDataLocationType: {
      region?: string | null;
    };
    /** Request object for logging events. */
    Metric_LogEventWSRequest: {
      /** Map containing log event data */
      logMap?: { [key: string]: { [key: string]: unknown } | null } | null;
    };
    /** Response object for logging events. */
    Metric_LogEventWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for reporting errors. */
    Metric_ReportErrorWSRequest: {
      /** Map containing error information */
      errorMap?: { [key: string]: { [key: string]: unknown } | null } | null;
    };
    /** Response object for reporting errors. */
    Metric_ReportErrorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    MicrosoftTeamsChannelSettings: {
      botInstallationId?: string | null;
      channelId?: string | null;
      /** base 64 (url-safe) uuid string */
      installingUserUuid?: string | null;
      sendChannelNotifications?: boolean | null;
    } | null;
    MicrosoftTeamsSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      webhookUrl?: string | null;
    };
    MicrosoftTeamsType:
      | ({
          adminConsent?: boolean | null;
          allowUserNotifications?: boolean | null;
          microsoftTeamSettingsMap?: {
            [
              key: string
            ]: components["schemas"]["MicrosoftTeamsChannelSettings"];
          } | null;
          microsoftTeamsUserSettingsMap?: {
            [key: string]: components["schemas"]["MicrosoftTeamsUserSettings"];
          } | null;
          tenantId?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    MicrosoftTeamsUserSettings: {
      botInstallationId?: string | null;
      chatId?: string | null;
      refreshToken?: string | null;
      sendUserNotifications?: boolean | null;
      teamIds?: (string | null)[] | null;
      userId?: string | null;
    } | null;
    /** List of minimal audio gateway state information */
    MinimalAudioGatewayStateType: {
      associatedCameras?: (string | null)[] | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      mediaRegion?: string | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      region?: string | null;
      secondaryLanAddresses?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    /** List of minimal camera state information */
    MinimalDeviceStateType: {
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      mediaRegion?: string | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      region?: string | null;
      secondaryLanAddresses?: (string | null)[] | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    /** List of minimal NVR state information for all NVRs in the organization */
    MinimalNVRStateType: {
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      mediaRegion?: string | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      numThirdPartyCamerasAssigned?: number | null;
      numThirdPartyCamerasSupported?: number | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      region?: string | null;
      secondaryLanAddresses?: (string | null)[] | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    /** List of minimal state information for doorbell cameras */
    MinimalObservableDeviceStateType: {
      associatedCameras?: (string | null)[] | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      mediaRegion?: string | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      region?: string | null;
      secondaryLanAddresses?: (string | null)[] | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    /** List of threshold crossing events for the device */
    MinimalThresholdEventType: {
      crossingObject?: MinimalThresholdEventCrossingObjectEnum | null;
      direction?: MinimalThresholdEventDirectionEnum | null;
      objectId?: number | null;
      timestampMs?: number | null;
    };
    MinuteOfDayIntervalType: {
      dayOfWeek?: number | null;
      minuteOfDayStartInclusive?: number | null;
      minuteOfDayStopExclusive?: number | null;
    };
    MobileTokenOSEnum: MobileTokenOSEnum;
    /** Login to organization response indicating two-factor authentication is required. */
    Mobile_LoginToOrg2FARequiredResponse:
      | ({
          /** base 64 (url-safe) uuid string */
          get2FAIdentifier?: string | null;
          /** Type of MFA token required for 2FA */
          get2FAType?: LoginToOrg2FARequiredResponseGet2FATypeEnum | null;
          /** Number of days to skip 2FA for trusted devices */
          numDaysSkip2FAForTrustedDevices?: number | null;
        } & {
          type?: string;
        })
      | null;
    /** Base response object for login to organization operations with polymorphic response types. */
    Mobile_LoginToOrgBaseResponse: (
      | components["schemas"]["Mobile_LoginToOrgSuccessResponse"]
      | components["schemas"]["Mobile_LoginToOrgSsoRequiredResponse"]
      | components["schemas"]["Mobile_LoginToOrg2FARequiredResponse"]
    ) & {
      type: string;
    };
    /** Request object for allowing a multi-org user on mobile to login to a different org they are able to access. */
    Mobile_LoginToOrgRequest: {
      /** Certificate Signing Request (CSR) data */
      csr?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Login to organization response indicating SSO authentication is required. */
    Mobile_LoginToOrgSsoRequiredResponse:
      | ({
          /** Redirect URI for SSO authentication */
          redirectUri?: string | null;
        } & {
          type?: string;
        })
      | null;
    /** Successful login to organization response containing session information. */
    Mobile_LoginToOrgSuccessResponse:
      | ({
          /** Certificate data for the successful login session */
          cert?: (string | null)[] | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        } & {
          type?: string;
        })
      | null;
    /** Request object for mobile login of partner to client org as verified support authority. */
    Mobile_LoginVerifiedSupportAuthorityMobileRequest: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
      /** Type of session client */
      clientType?: LoginVerifiedSupportAuthorityMobileRequestClientTypeEnum | null;
    };
    /** Response object for mobile login of partner to client org as verified support authority. */
    Mobile_LoginVerifiedSupportAuthorityMobileResponse: {
      /** base 64 (url-safe) uuid string */
      supportAuthoritySessionUuid?: string | null;
      /** Whether the support authority login is valid */
      valid?: boolean | null;
    };
    /** Request object for logging out a mobile user. */
    Mobile_LogoutMobileUserRequest: { [key: string]: unknown };
    /** Response object for logging out a mobile user. */
    Mobile_LogoutMobileUserResponse: { [key: string]: unknown };
    /** Request object for refreshing a mobile session. */
    Mobile_RefreshMobileSessionRequest: {
      /** Certificate Signing Request (CSR) data */
      csr?: (string | null)[] | null;
    };
    /** Response object for refreshing a mobile session. */
    Mobile_RefreshMobileSessionResponse: {
      /** Certificate data for the refreshed session */
      cert?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Request object for updating mobile notification token for Console app. */
    Mobile_UpdateMobileNotificationTokenRequest: {
      /** Mobile notification token */
      token?: string | null;
    };
    /** Response object for updating mobile notification token for Console app. */
    Mobile_UpdateMobileNotificationTokenResponse: { [key: string]: unknown };
    /** Request object for updating mobile notification token for Rhombus Key app. */
    Mobile_UpdateRhombusKeyMobileNotificationTokenRequest: {
      /** Rhombus Key mobile notification token */
      token?: string | null;
    };
    /** Response object for updating mobile notification token for Rhombus Key app. */
    Mobile_UpdateRhombusKeyMobileNotificationTokenResponse: {
      [key: string]: unknown;
    };
    ModelStatusEnum: ModelStatusEnum;
    /** List of modular AI models added to the device */
    ModularAIConfig: {
      description?: string | null;
      modelParams?: components["schemas"]["ModularAIModelParams"];
      modelQuantizedBinaryContentLocator?: string | null;
      modelStatus?: components["schemas"]["ModelStatusEnum"];
      modelUploadZipContentLocator?: string | null;
      name?: string | null;
      pipeline?: components["schemas"]["PipelineComponent"][] | null;
      /** base 64 (url-safe) uuid string */
      restrictedOrgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Selective update configuration for the modular AI model */
    ModularAIConfigSelectiveUpdate: {
      description?: string | null;
      modelParams?: components["schemas"]["ModularAIModelParams"];
      modelQuantizedBinaryContentLocator?: string | null;
      modelStatus?: components["schemas"]["ModelStatusEnum"];
      modelUploadZipContentLocator?: string | null;
      name?: string | null;
      pipeline?: components["schemas"]["PipelineComponent"][] | null;
      /** base 64 (url-safe) uuid string */
      restrictedOrgUuid?: string | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ModularAIModelParams: {
      classOutputMap?: { [key: string]: string | null } | null;
      inputHeight?: number | null;
      inputWidth?: number | null;
    };
    /** Request object for adding a modular AI model to a device. */
    Modularai_AddModelToDeviceWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      modelUuid?: string | null;
    };
    /** Response object for adding a modular AI model to a device. */
    Modularai_AddModelToDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting devices running a modular AI model. */
    Modularai_GetDevicesForModelWSRequest: {
      /** base 64 (url-safe) uuid string */
      modelUuid?: string | null;
    };
    /** Response object containing devices running a modular AI model. */
    Modularai_GetDevicesForModelWSResponse: {
      /** List of device facet UUIDs running the modular AI model */
      devices?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting modular AI models added to a device. */
    Modularai_GetModelsAddedToDeviceWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
    };
    /** Response object containing modular AI models added to a device. */
    Modularai_GetModelsAddedToDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of modular AI models added to the device */
      models?: components["schemas"]["ModularAIConfig"][] | null;
    };
    /** Request object for getting available modular AI models. */
    Modularai_GetModelsWSRequest: { [key: string]: unknown };
    /** Response object containing available modular AI models. */
    Modularai_GetModelsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of available modular AI models */
      models?: components["schemas"]["ModularAIConfig"][] | null;
    };
    /** Request object for removing a modular AI model from a device. */
    Modularai_RemoveModelFromDeviceWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      modelUuid?: string | null;
    };
    /** Response object for removing a modular AI model from a device. */
    Modularai_RemoveModelFromDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating modular AI model configuration. */
    Modularai_UpdateModelWSRequest: {
      update?: components["schemas"]["ModularAIConfigSelectiveUpdate"];
    };
    /** Response object for updating modular AI model configuration. */
    Modularai_UpdateModelWSResponse: { [key: string]: unknown };
    /** Map of location UUIDs to their monitoring enable status */
    MonitoringEnableStatus: {
      devicesWithActiveSirens?: { [key: string]: number | null } | null;
      disabledOnMs?: number | null;
      enabled?: boolean | null;
      enabledOnMs?: number | null;
      noNextTimestampReason?: string | null;
      notEnabledReason?: string | null;
      recentlyActivatedSirensTimestampMs?: {
        [key: string]: number | null;
      } | null;
    };
    MultiPart: {
      bodyParts?: components["schemas"]["BodyPart"][] | null;
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: { [key: string]: unknown } | null;
      headers?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parameterizedHeaders?:
        | ({
            empty?: boolean | null;
          } & {
            [key: string]:
              | components["schemas"]["ParameterizedHeader"][]
              | null;
          })
        | null;
      providers?: components["schemas"]["Providers"];
    } | null;
    MultivaluedMapStringObject:
      | ({
          empty?: boolean | null;
        } & { [key: string]: ({ [key: string]: unknown } | null)[] | null })
      | null;
    MultivaluedMapStringParameterizedHeader:
      | ({
          empty?: boolean | null;
        } & {
          [key: string]: components["schemas"]["ParameterizedHeader"][] | null;
        })
      | null;
    MultivaluedMapStringString:
      | ({
          empty?: boolean | null;
        } & { [key: string]: (string | null)[] | null })
      | null;
    NetsuiteInvoiceDetails: {
      billingContactEmail?: string | null;
      billingContactName?: string | null;
      billingcontactemail?: string | null;
      billingcontactname?: string | null;
      clientOrgName?: string | null;
      clientorgname?: string | null;
      dueDate?: string | null;
      duedate?: string | null;
      invoiceDate?: string | null;
      invoiceUuid?: string | null;
      invoicedate?: string | null;
      invoiceuuid?: string | null;
      lineItems?: components["schemas"]["LineItems"][] | null;
      lineitems?: components["schemas"]["LineItems"][] | null;
      partnerOrgName?: string | null;
      partnerorgname?: string | null;
      status?: string | null;
      totalBalance?: number | null;
      totalbalance?: number | null;
      transactionId?: string | null;
      transactionid?: string | null;
      unpaidBalance?: number | null;
      unpaidbalance?: number | null;
    };
    Network_GetDeviceNetworkConfigurationWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    Network_GetDeviceNetworkConfigurationWSResponse: {
      ipConfigurations?:
        | components["schemas"]["Network_IpConfiguration"][]
        | null;
    };
    Network_IpConfiguration: {
      /** Primary DNS server. Will only be set if mode is STATIC. */
      dnsServer1?: string | null;
      /** Secondary DNS server. Will only be set if mode is STATIC. */
      dnsServer2?: string | null;
      /** Gateway address. Will only be set if mode is STATIC. */
      gateway?: string | null;
      /** IP address. Will only be set if mode is STATIC. */
      ipAddress?: string | null;
      /** Indicates whether this IP configuration is secondary. Default is false (primary). */
      isSecondary?: boolean | null;
      mode?: components["schemas"]["Network_NetworkConfigurationModeEnum"];
      /** Subnet mask. Will only be set if mode is STATIC. */
      netmask?: string | null;
    };
    /** Network configuration mode for devices. */
    Network_NetworkConfigurationModeEnum: Network_NetworkConfigurationModeEnum;
    Network_UpdateDeviceIpConfigurationWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      ipConfiguration?: components["schemas"]["Network_IpConfiguration"];
    };
    Network_UpdateDeviceIpConfigurationWSResponse: {
      ipConfiguration?: components["schemas"]["Network_IpConfiguration"];
    };
    NewCookie: {
      comment?: string | null;
      domain?: string | null;
      expiry?: string | null;
      httpOnly?: boolean | null;
      maxAge?: number | null;
      name?: string | null;
      path?: string | null;
      sameSite?: NewCookieSameSiteEnum | null;
      secure?: boolean | null;
      value?: string | null;
      version?: number | null;
    } | null;
    NineOneOneCellularType:
      | ({
          bearerToken?: string | null;
          saveClips?: boolean | null;
          securityZoneMap?: {
            [key: string]: components["schemas"]["SecurityZoneInfoType"];
          } | null;
          triggerNotification?: boolean | null;
          /** base 64 (url-safe) uuid string */
          webhookToken?: string | null;
          zonesValidated?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    NoonlightPromptSelection: {
      mutable?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      reasons?: (NoonlightPromptSelectionReasonsEnum | null)[] | null;
      title?: string | null;
    };
    NoonlightPromptTheme: NoonlightPromptThemeEnum;
    NoonlightScheduleType: {
      audioGateways?: (string | null)[] | null;
      escalationDelayMinutes?: number | null;
      monitoredDevices?: (string | null)[] | null;
      promptTheme?: components["schemas"]["NoonlightPromptTheme"];
      promptTitle?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      sirenSettings?: {
        [key: string]: components["schemas"]["AMSirenSettingsType"];
      } | null;
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
      tripwire?: components["schemas"]["TripwireSettingsType"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      verifiedThreatSiren?: components["schemas"]["AMSirenSettingsType"];
    };
    NoonlightSettings: {
      acceptedTermsOfService?: boolean | null;
      defaultContactsByLocationMap?: {
        [key: string]: components["schemas"]["EmergencyContact"];
      } | null;
      defaultDelayByLocationsMap?: { [key: string]: number | null } | null;
      defaultPromptByLocationsMap?: {
        [key: string]: components["schemas"]["NoonlightPromptTheme"];
      } | null;
      emergencyContactsByLocationsMap?: {
        [key: string]:
          | components["schemas"]["EmergencyResponseContactsIntervalType"][]
          | null;
      } | null;
      enabled?: boolean | null;
      escalationSettingsByLocationsMap?: {
        [key: string]:
          | components["schemas"]["AlertMonitoringSubmissionDelayIntervalType"][]
          | null;
      } | null;
      locationEntryInstructionsMap?: { [key: string]: string | null } | null;
      pinsByLocationMap?: {
        [key: string]: components["schemas"]["AlertMonitoringPinType"][] | null;
      } | null;
      verificationPrompt?: string | null;
    };
    /** Updated alert monitoring settings configuration for the location */
    NoonlightVersionedSettingsType: {
      acceptedTermsOfService?: boolean | null;
      badgeAuthDisablesMonitoring?: boolean | null;
      defaultDelay?: number | null;
      defaultEmergencyContact?: components["schemas"]["EmergencyContact"];
      defaultPromptTheme?: components["schemas"]["NoonlightPromptTheme"];
      deleted?: boolean | null;
      emergencyContacts?:
        | components["schemas"]["EmergencyResponseContactsScheduleType"][]
        | null;
      enabled?: boolean | null;
      entryInstructions?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      manualEscalationSettings?: components["schemas"]["NoonlightScheduleType"];
      modifiedByEmail?: string | null;
      modifiedByIntegration?: boolean | null;
      modifiedByMetadata?: string | null;
      /** base 64 (url-safe) uuid string */
      modifiedByUuid?: string | null;
      modifiedTimeMs?: number | null;
      monitoringMode?: NoonlightVersionedSettingsMonitoringModeEnum | null;
      oneTimePauses?: components["schemas"]["NoonlightScheduleType"][] | null;
      oneTimeSchedules?:
        | components["schemas"]["NoonlightScheduleType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pins?: components["schemas"]["AlertMonitoringPinType"][] | null;
      rules?: (string | null)[] | null;
      schedules?: components["schemas"]["NoonlightScheduleType"][] | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      talkdownEnabled?: boolean | null;
    };
    NormalStateEnumType: NormalStateEnumType;
    NotificationEnumType: NotificationEnumType;
    NotificationFollowUp:
      | ({
          userUuids?: (string | null)[] | null;
        } & {
          type?: components["schemas"]["Action"];
        })
      | null;
    NotificationIntervalV2Type: {
      activityTriggerMap?: {
        [key: string]: components["schemas"]["NotificationEnumType"][] | null;
      } | null;
      deviceFilterSet?: (string | null)[] | null;
      diagnosticTriggerMap?: {
        [key: string]: components["schemas"]["NotificationEnumType"][] | null;
      } | null;
      locationActivityTriggerMap?: {
        [key: string]: components["schemas"]["NotificationEnumType"][] | null;
      } | null;
      locationDiagnosticTriggerMap?: {
        [key: string]: components["schemas"]["NotificationEnumType"][] | null;
      } | null;
      locationFilterSet?: (string | null)[] | null;
      locationOnlyFilterSet?: (string | null)[] | null;
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
    };
    NotificationSettingsType: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      slackChannel?: string | null;
      slackEnabled?: boolean | null;
      slackWebhookUrl?: string | null;
    };
    NotificationTimeFrame: {
      days?: (NotificationTimeFrameDaysEnum | null)[] | null;
      interval?: components["schemas"]["MinuteOfDayIntervalType"];
      mediums?: components["schemas"]["NotificationEnumType"][] | null;
      rows?: components["schemas"]["NotificationTimeFrameRow"][] | null;
    };
    NotificationTimeFrameRow: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      devices?: (string | null)[] | null;
      diagnostics?: (NotificationTimeFrameRowDiagnosticsEnum | null)[] | null;
      locationOnly?: (string | null)[] | null;
      locationOnlyActivities?: components["schemas"]["ActivityEnum"][] | null;
      locationOnlyDiagnostics?: (NotificationTimeFrameRowLocationOnlyDiagnosticsEnum | null)[] | null;
      locations?: (string | null)[] | null;
      promptUuids?: (string | null)[] | null;
    };
    /** Map of numeric count reports */
    NumericAggregationValue: {
      average?: number | null;
      eventCount?: number | null;
      localDate?: string | null;
      max?: number | null;
      maxValueTimestampMs?: number | null;
      min?: number | null;
      minValueTimestampMs?: number | null;
      sum?: number | null;
      timestampMs?: number | null;
      utcDate?: string | null;
    } | null;
    /** OAuth application details */
    OAuthApplication: {
      /** base 64 (url-safe) uuid string */
      clientId?: string | null;
      clientSecretHash?: string | null;
      contactEmail?: string | null;
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      redirectUri?: string | null;
    };
    /** Request object for getting all OAuth applications for an organization. */
    Oauth_GetAllApplicationsForOrgWSRequest: { [key: string]: unknown };
    /** Response object containing all OAuth applications for an organization. */
    Oauth_GetAllApplicationsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of OAuth applications for the organization */
      oauthApplications?: components["schemas"]["OAuthApplication"][] | null;
    };
    /** Request object for getting OAuth application by client ID. */
    Oauth_GetApplicationByClientIdWSRequest: {
      /** base 64 (url-safe) uuid string */
      clientId?: string | null;
    };
    /** Response object containing OAuth application details. */
    Oauth_GetApplicationByClientIdWSResponse: {
      application?: components["schemas"]["OAuthApplication"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for OAuth application management. */
    Oauth_OAuthApplicationWSRequest: {
      /** base 64 (url-safe) uuid string */
      clientId?: string | null;
      /** Contact email for the OAuth application */
      contactEmail?: string | null;
      /** Description of the OAuth application */
      description?: string | null;
      /** Name of the OAuth application */
      name?: string | null;
      /** OAuth redirect URI */
      redirectUri?: string | null;
    };
    /** Response object containing OAuth application credentials. */
    Oauth_OAuthApplicationWSResponse: {
      /** base 64 (url-safe) uuid string */
      clientId?: string | null;
      /** OAuth client secret */
      clientSecret?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Object search model to use for embeddings */
    ObjectSearchModelEnum: ObjectSearchModelEnum;
    /** List of occupancy events for the sensor */
    OccupancyEventType: {
      /** base 64 (url-safe) uuid string */
      baseStationUuid?: string | null;
      batteryPercentage?: number | null;
      /** base 64 (url-safe) uuid string */
      bleDeviceUuid?: string | null;
      bleRssi?: number | null;
      closeBaseStations?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      lux?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      state?: OccupancyEventStateEnum | null;
      stateChanged?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tampered?: boolean | null;
      timestampMs?: number | null;
    };
    /** List of occupancy policies using the schedule */
    OccupancyPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["OccupancyScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    OccupancyScheduledTriggerType: {
      occupancyThresholdSec?: number | null;
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
      vacancyThresholdSec?: number | null;
    };
    /** Request object for getting minimal occupancy sensor states for all sensors in organization. */
    Occupancysensor_GetMinimalOccupancySensorStatesWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing minimal occupancy sensor states for all sensors in organization. */
    Occupancysensor_GetMinimalOccupancySensorStatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of minimal occupancy sensor states */
      occupancySensorStates?:
        | components["schemas"]["Occupancysensor_MinimalOccupancySensorStateType"][]
        | null;
    };
    /** Request object for getting occupancy events for a specific sensor. */
    Occupancysensor_GetOccupancyEventsForSensorWSRequest: {
      /** Filter events created after this timestamp (milliseconds since epoch) */
      createdAfterMs?: number | null;
      /** Filter events created before this timestamp (milliseconds since epoch) */
      createdBeforeMs?: number | null;
      /** Maximum number of events to return */
      limit?: number | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
    };
    /** Response object containing occupancy events for a specific sensor. */
    Occupancysensor_GetOccupancyEventsForSensorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of occupancy events for the sensor */
      events?: components["schemas"]["OccupancyEventType"][] | null;
    };
    /** Minimal state information for occupancy sensors including health, location, and sensor data. */
    Occupancysensor_MinimalOccupancySensorStateType: {
      /** List of associated camera device facet UUIDs */
      associatedCameras?: (string | null)[] | null;
      /** Battery percentage of the sensor */
      batteryPercent?: number | null;
      /** base 64 (url-safe) uuid string */
      closestBaseStation?: string | null;
      /** Firmware version of the sensor */
      firmwareVersion?: string | null;
      /** Floor number where the sensor is located */
      floorNumber?: number | null;
      health?: components["schemas"]["Occupancysensor_MotionSensorHealthEnum"];
      healthDetails?: components["schemas"]["Occupancysensor_MotionSensorHealthDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** Timestamp when the sensor was last seen (seconds since epoch) */
      lastSeenSec?: number | null;
      /** Latitude coordinate of the sensor location */
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Longitude coordinate of the sensor location */
      longitude?: number | null;
      /** Name of the occupancy sensor */
      name?: string | null;
      /** Normalized lux value (0-1) matching human perception of lighting transitions */
      normalizedLux?: number | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Raw lux value from the sensor */
      rawLux?: number | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
      /** Serial number of the occupancy sensor */
      serialNumber?: string | null;
      /** Signal strength of the sensor */
      signalStrength?: number | null;
      /** Current occupancy status of the sensor */
      status?: MinimalOccupancySensorStateStatusEnum | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
    };
    /** Detailed motion sensor health status. */
    Occupancysensor_MotionSensorHealthDetailsEnum: Occupancysensor_MotionSensorHealthDetailsEnum;
    /** Motion sensor health status. */
    Occupancysensor_MotionSensorHealthEnum: Occupancysensor_MotionSensorHealthEnum;
    /** Request object for updating occupancy sensor details with selective update flags. */
    Occupancysensor_UpdateOccupancySensorDetailsWSRequest: {
      /** List of associated camera device facet UUIDs */
      associatedCameras?: (string | null)[] | null;
      /** Whether the associated cameras should be updated */
      associatedCamerasUpdated?: boolean | null;
      /** Whether the sensor is marked as deleted */
      deleted?: boolean | null;
      /** Whether the deleted status should be updated */
      deletedUpdated?: boolean | null;
      /** Description of the occupancy sensor */
      description?: string | null;
      /** Whether the description should be updated */
      descriptionUpdated?: boolean | null;
      /** Floor number where the sensor is located */
      floorNumber?: number | null;
      /** Whether the floor number should be updated */
      floorNumberUpdated?: boolean | null;
      /** Latitude coordinate of the sensor location */
      latitude?: number | null;
      /** Whether the latitude should be updated */
      latitudeUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Whether the location UUID should be updated */
      locationUuidUpdated?: boolean | null;
      /** Longitude coordinate of the sensor location */
      longitude?: number | null;
      /** Whether the longitude should be updated */
      longitudeUpdated?: boolean | null;
      /** Name of the occupancy sensor */
      name?: string | null;
      /** Whether the name should be updated */
      nameUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Whether the policy UUID should be updated */
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Whether the sub-locations hierarchy key should be updated */
      subLocationsHierarchyKeyUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for updating occupancy sensor details. */
    Occupancysensor_UpdateOccupancySensorDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    OccupiedActivityEventType:
      | ({
          occupancyThresholdSec?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    /** Office 365 integration settings to update */
    Office365Settings: {
      driveId?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      tenantId?: string | null;
    };
    OmnialertType:
      | ({
          associatedCameras?: (string | null)[] | null;
          saveClips?: boolean | null;
          triggerNotification?: boolean | null;
          /** base 64 (url-safe) uuid string */
          webhookToken?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    /** List of available OpenAI models */
    OpenAIModel: {
      created?: string | null;
      id?: string | null;
      object?: string | null;
      ownedBy?: string | null;
      owned_by?: string | null;
    };
    OpenAIType:
      | ({
          apiToken?: string | null;
          /** The base url for any OpenAI Chat Completions compliant API. For example, to use Gemini models, set this to 'https://generativelanguage.googleapis.com/v1beta/openai/'.  If left blank, we will try to use OpenAI models. */
          baseUrl?: string | null;
          /** The model identifier to use as a default model.  This is provider specific and typically found on model card pages. For example, set to 'gemini-2.0-flash' to use the Gemini 2.0 Flash model.  Currently we require a model with vision capabilities for this integration. */
          defaultModel?: string | null;
          refreshToken?: string | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    /** Request object for exposing custom objects and enums to OpenAPI component schemas. */
    Openapi_GetOpenApiComponentSchemasWSRequest: {
      changeType?: components["schemas"]["ChangeType"];
      entity?: components["schemas"]["Entity"];
      locationFunctionality?: components["schemas"]["LocationFunctionality"];
    };
    OpenpathSettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
      email?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      eventToWebhookIdMap?: { [key: string]: number | null } | null;
      eventToWebhookMap?: {
        [key: string]: components["schemas"]["WebhookMapEntry"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      password?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: number | null;
    };
    OpentechAllianceActionGroupType: {
      actionGroupId?: string | null;
      deviceId?: string | null;
      locationName?: string | null;
      name?: string | null;
    };
    OpentechAllianceDoorInfoType: {
      actionGroupId?: string | null;
      assignedCameraList?: (string | null)[] | null;
      clipDuration?: number | null;
      doorName?: string | null;
      leadingSeconds?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      remoteUnlock?: boolean | null;
    } | null;
    OpentechAllianceFacilitySettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["OpentechAllianceDoorInfoType"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      saveClips?: boolean | null;
    } | null;
    OpentechAllianceFacilityType: {
      actionGroups?:
        | components["schemas"]["OpentechAllianceActionGroupType"][]
        | null;
      deviceList?: components["schemas"]["DoorType"][] | null;
      id?: string | null;
      name?: string | null;
    };
    OpentechAllianceSettings: {
      apiKey?: string | null;
      apiSecret?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      facilityToSettingsMap?: {
        [
          key: string
        ]: components["schemas"]["OpentechAllianceFacilitySettings"];
      } | null;
      migrated?: boolean | null;
    };
    OpentechAllianceType:
      | ({
          apiKey?: string | null;
          apiSecret?: string | null;
          facilityToSettingsMap?: {
            [
              key: string
            ]: components["schemas"]["OpentechAllianceFacilitySettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    /** Map of device serial numbers to their reassignment operation status */
    OperationStatus: {
      message?: string | null;
      status?: OperationStatusStatusEnum | null;
    };
    /** List of user group memberships */
    OrgGroupMemberType: {
      createdAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      type?: OrgGroupMemberTypeEnum | null;
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Updated organization group details */
    OrgGroupType: {
      createdAtMillis?: number | null;
      description?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      type?: OrgGroupTypeEnum | null;
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Organization integrations configuration and settings */
    OrgIntegrationsType: {
      amtSettings?: components["schemas"]["AmtSettings"];
      awsSettings?: components["schemas"]["AwsSettings"];
      backblazeSettings?: components["schemas"]["BackblazeSettings"];
      boxSettings?: components["schemas"]["BoxSettings"];
      brivoSettings?: components["schemas"]["BrivoSettings"];
      butterflymxSettings?: components["schemas"]["ButterflyMXSettings"];
      diceSettings?: components["schemas"]["DiceSettings"];
      dropboxSettingsV2?: components["schemas"]["DropboxSettingsV2"];
      emailSettings?: components["schemas"]["EmailSettings"];
      envoySettings?: components["schemas"]["EnvoySettings"];
      geneaSettings?: components["schemas"]["GeneaSettings"];
      googleSettings?: components["schemas"]["GoogleSettings"];
      googleSettingsV2?: components["schemas"]["GoogleSettingsV2"];
      haloSettings?: components["schemas"]["HaloSettings"];
      immixSettings?: components["schemas"]["ImmixSettings"];
      intuifaceSettings?: components["schemas"]["IntuifaceSettings"];
      kisiSettings?: components["schemas"]["KisiSettings"];
      lumeoSettings?: components["schemas"]["LumeoSettings"];
      mattermostSettings?: components["schemas"]["MattermostSettings"];
      microsoftTeamsSettings?: components["schemas"]["MicrosoftTeamsSettings"];
      noonlightSettings?: components["schemas"]["NoonlightSettings"];
      office365Settings?: components["schemas"]["Office365Settings"];
      openpathSettings?: components["schemas"]["OpenpathSettings"];
      opentechAllianceSettings?: components["schemas"]["OpentechAllianceSettings"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      pagerDutySettings?: components["schemas"]["PagerDutySettings"];
      placeOsSettings?: components["schemas"]["PlaceOsSettings"];
      proDataKeySettings?: components["schemas"]["ProDataKeySettings"];
      saltoSettings?: components["schemas"]["SaltoSettings"];
      serviceNowSettings?: components["schemas"]["ServiceNowSettings"];
      slackSettings?: components["schemas"]["SlackSettings"];
      slackSettingsV2?: components["schemas"]["SlackSettingsV2"];
      squareSettings?: components["schemas"]["SquareSettings"];
      toastSettings?: components["schemas"]["ToastSettings"];
      tpLinkSettings?: components["schemas"]["TPLinkSettings"];
      twilioSettings?: components["schemas"]["TwilioSettings"];
      webhookSettings?: components["schemas"]["WebhookSettings"];
    };
    /** License statistics for the organization */
    OrgLicenseStats: {
      acuDoorLicenseStats?: components["schemas"]["LicenseGroupStats"];
      alertMonitoringLicenseStats?: components["schemas"]["LicenseGroupStats"];
      assignedCount?: number | null;
      deviceLicenseStats?: components["schemas"]["DeviceAssignableLicenseGroupStats"];
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      licenseUsageStats?: components["schemas"]["LicenseUsageStats"];
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    OrgLockdownPlanType: {
      activationPlan?: components["schemas"]["LockdownActivationPlanType"];
      createdAtMillis?: number | null;
      deactivationPlan?: components["schemas"]["LockdownDeactivationPlanType"];
      defaultLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
      doorLockdownStateMap?: {
        [key: string]: components["schemas"]["DoorLockdownStateEnumType"];
      } | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      physicalAccess?: components["schemas"]["LockdownPhysicalAccessType"];
      /** base 64 (url-safe) uuid string */
      scopeUuid?: string | null;
      testPlan?: components["schemas"]["LockdownTestPlanType"];
      type?: components["schemas"]["LockdownPlanScopeEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    } | null;
    /** List of SAML settings to update */
    OrgSamlSettingsType: {
      addUsersOnRoleMismatch?: boolean | null;
      enabled?: boolean | null;
      enabledForRhombusKey?: boolean | null;
      idpMetaDataXml?: string | null;
      justInTimeAccountProvisioningEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      registrationUuid?: string | null;
      rhombusKeyAppSettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      teamName?: string | null;
    };
    /** Organization information to update */
    OrgType: {
      accountOwnerEmail?: string | null;
      address1?: string | null;
      address2?: string | null;
      countryCode?: string | null;
      createdAtMillis?: number | null;
      firmwareUpdateSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
      itemizedInvoice?: boolean | null;
      mfaEnabled?: boolean | null;
      name?: string | null;
      newCameraFramerateMap?: { [key: string]: number | null } | null;
      newCameraResolutionMap?: { [key: string]: number | null } | null;
      newCameraSegmentMaxBytesMap?: { [key: string]: number | null } | null;
      newCameraVideoTargetQualityMap?: { [key: string]: number | null } | null;
      notificationSettings?: components["schemas"]["NotificationSettingsType"];
      partnerAccessAllowedUntil?: number | null;
      planType?: OrgPlanTypeEnum | null;
      postalCode?: string | null;
      rbacSettings?: components["schemas"]["RBACSettingsType"];
      samlSettings?: components["schemas"]["SAMLSettingsType"];
      subscriptionEndDate?: number | null;
      subscriptionStatus?: OrgSubscriptionStatusEnum | null;
      subscriptionType?: OrgSubscriptionTypeEnum | null;
      supportAccessAllowedUntil?: number | null;
      teamName?: string | null;
      type?: OrgTypeEnum | null;
      uapSettings?: components["schemas"]["UAPSettingsType"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** List of Rhombus organizations the user has access to */
    OrgV2Type: {
      accountBillingContactEmail?: string | null;
      accountOwnerEmail?: string | null;
      accountTechnicalContactEmail?: string | null;
      accountTechnicalContacts?: (string | null)[] | null;
      address1?: string | null;
      address2?: string | null;
      audioAnalysisEnabled?: boolean | null;
      audioRecordingEnabled?: boolean | null;
      bandwidthReportsDisabled?: boolean | null;
      companyLogoUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      companyLogoUuid?: string | null;
      countryCode?: string | null;
      createdAtMillis?: number | null;
      criticalStatusEnabled?: boolean | null;
      defaultPlayerViewLiveType?: components["schemas"]["PlayerViewLiveTypeEnum"];
      deleted?: boolean | null;
      deletedAtMillis?: number | null;
      developmentPartnerOrg?: boolean | null;
      firmwareUpdateSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
      /** Overrides default firmware update settings. */
      firmwareUpdateSettingsOverrides?:
        | components["schemas"]["FirmwareUpdateSettingsOverrideType"][]
        | null;
      inactivityTimeout?: number | null;
      itemizedInvoice?: boolean | null;
      keypadLogoUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      keypadLogoUuid?: string | null;
      llmUsageEnabled?: boolean | null;
      maxAllowedSegmentMaxBytesMap?: { [key: string]: number | null } | null;
      mfaEnabled?: boolean | null;
      motionGridDisabled?: boolean | null;
      motionLightweightDisabled?: boolean | null;
      name?: string | null;
      newCameraFramerateMap?: { [key: string]: number | null } | null;
      newCameraResolutionMap?: { [key: string]: number | null } | null;
      newCameraSegmentMaxBytesMap?: { [key: string]: number | null } | null;
      newCameraVideoTargetQualityMap?: { [key: string]: number | null } | null;
      newCameraZeroMotionVideoQualityMap?: {
        [key: string]: number | null;
      } | null;
      notifyForHardwareFailureTickets?: boolean | null;
      partnerAccessAllowedUntil?: number | null;
      postalCode?: string | null;
      rhombusKeyLogoUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusKeyLogoUuid?: string | null;
      salesforceAccountId?: string | null;
      shareAiTrainingMediaWithRhombus?: boolean | null;
      subscriptionEndDate?: number | null;
      subscriptionStatus?: OrgV2SubscriptionStatusEnum | null;
      subscriptionType?: OrgV2SubscriptionTypeEnum | null;
      supportAccessAllowedUntil?: number | null;
      tenantUrl?: string | null;
      thumbstripDisabled?: boolean | null;
      type?: OrgV2TypeEnum | null;
      uapSettings?: components["schemas"]["UAPSettingsType"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      v3AuthNumDaysSkip2FAForTrustedDevices?: number | null;
    } | null;
    Org_ClaimActivationTokenWSRequest: {
      activationToken?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
    };
    Org_ClaimActivationTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_ClaimShipmentRegistrationTokenWSRequest: {
      claimList?:
        | components["schemas"]["Org_DeviceRegistrationClaimType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      tokenUuid?: string | null;
    };
    Org_ClaimShipmentRegistrationTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for creating pending hardware registration. */
    Org_CreatePendingRegistrationRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** Serial number of the hardware device */
      serialNumber?: string | null;
      /** WiFi pre-shared key for the device */
      wifiPsk?: (string | null)[] | null;
      /** WiFi SSID for the device */
      wifiSsid?: string | null;
    };
    /** Response object for creating pending hardware registration. */
    Org_CreatePendingRegistrationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting cloud archiving configuration. */
    Org_DeleteCloudArchivingConfigWSRequest: {
      scope?: components["schemas"]["DeviceTargetScope"];
      /** base 64 (url-safe) uuid string */
      targetUuid?: string | null;
    };
    /** Response object for deleting cloud archiving configuration. */
    Org_DeleteCloudArchivingConfigWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting keypad logo. */
    Org_DeleteKeypadLogoWSRequest: { [key: string]: unknown };
    /** Response object for deleting keypad logo. */
    Org_DeleteKeypadLogoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting Rhombus Key logo. */
    Org_DeleteRhombusKeyLogoWSRequest: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response object for deleting Rhombus Key logo. */
    Org_DeleteRhombusKeyLogoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_DeviceRegistrationClaimType: {
      deviceName?: string | null;
      /** base 64 (url-safe) uuid string */
      hardwareUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    Org_FindAllHardwareWithPendingRegistrationRequest: {
      [key: string]: unknown;
    };
    Org_FindAllHardwareWithPendingRegistrationResponse: {
      /** Use hardwareWithPendingRegistrationInfoList instead */
      hardwareList?: components["schemas"]["HardwareType"][] | null;
      hardwareWithPendingRegistrationInfoList?:
        | components["schemas"]["Org_HardwareWithPendingRegistrationInfoType"][]
        | null;
    };
    Org_FindHardwareAvailableForPendingRegistrationRequest: {
      [key: string]: unknown;
    };
    Org_FindHardwareAvailableForPendingRegistrationResponse: {
      hardwareList?: components["schemas"]["HardwareType"][] | null;
    };
    /** Request object for checking if a team name is available. */
    Org_FindIfTeamNameAvailableRequest: {
      /** Team name to check availability for */
      teamName?: string | null;
    };
    /** Response object indicating if a team name is available. */
    Org_FindIfTeamNameAvailableResponse: {
      /** Whether the team name is available */
      available?: boolean | null;
    };
    /** Request object for finding SCIM settings for organization. */
    Org_FindSCIMSettingsForOrgWSRequest: { [key: string]: unknown };
    /** Response object containing SCIM settings for organization. */
    Org_FindSCIMSettingsForOrgWSResponse: {
      scimSettings?: components["schemas"]["SCIMSettingsType"];
    };
    /** Request object for generating a federated session token. */
    Org_GenerateFederatedSessionTokenRequest: {
      /** The domain that is allowed to use the federated token. The token should begin with a 'dot' and end with a domain suffix. The validation will perform an 'endsWith' operation of the domain supplied by the Referrer header */
      domain?: string | null;
      /** Duration of the federated session token in seconds */
      durationSec?: number | null;
    };
    /** Response object containing the generated federated session token. */
    Org_GenerateFederatedSessionTokenResponse: {
      /** base 64 (url-safe) uuid string */
      federatedSessionToken?: string | null;
    };
    /** Request object for getting AWS CloudFormation file. */
    Org_GetAwsIntCloudformationFileRequest: { [key: string]: unknown };
    /** Response object containing AWS CloudFormation file. */
    Org_GetAwsIntCloudformationFileResponse: {
      /** Base64 encoded CloudFormation file content */
      fileBase64?: string | null;
    };
    /** Request object for getting client organization details. */
    Org_GetClientOrgWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object containing client organization details. */
    Org_GetClientOrgWSResponse: {
      /** Map of feature flags for the client organization */
      featureFlags?: { [key: string]: string | null } | null;
      org?: components["schemas"]["OrgV2Type"];
      partnerOrgPermissionGroup?: components["schemas"]["UserPermissionGroupType"];
    };
    /** Request object for getting cloud archiving configurations. */
    Org_GetCloudArchivingConfigsWSRequest: { [key: string]: unknown };
    /** Response object containing cloud archiving configurations. */
    Org_GetCloudArchivingConfigsWSResponse: {
      /** List of cloud archiving configurations */
      archivingConfigs?:
        | components["schemas"]["ScopedCloudArchivingConfig"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting device flags. */
    Org_GetDeviceFlagsWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    /** Response object containing device flags. */
    Org_GetDeviceFlagsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of device flags */
      flags?: { [key: string]: string | null } | null;
    };
    /** Request object for getting organization features. */
    Org_GetFeaturesWSRequest: { [key: string]: unknown };
    /** Response object containing organization feature flags. */
    Org_GetFeaturesWSResponse: {
      /** Whether behavior detection is enabled */
      behaviorDetection?: boolean | null;
      /** Whether cloud archiving is enabled */
      cloudArchiving?: boolean | null;
      /** Whether engagement counting is enabled */
      engagementCounting?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Whether face counting is enabled */
      faceCounting?: boolean | null;
      /** Whether non-unique face counting is enabled */
      faceCountingNonUnique?: boolean | null;
      /** Whether face recognition is enabled */
      faceRecognition?: boolean | null;
      /** Whether license plate recognition is enabled */
      licensePlateRecognition?: boolean | null;
      /** Whether people counting is enabled */
      peopleCounting?: boolean | null;
      /** Whether PPE detection is enabled */
      ppeDetection?: boolean | null;
      /** Whether rules engine is enabled (deprecated) */
      rulesEngine?: boolean | null;
      /** Whether vehicle counting is enabled */
      vehicleCounting?: boolean | null;
    };
    /** Request object for getting location flags. */
    Org_GetLocationFlagsWSRequest: { [key: string]: unknown };
    /** Response object containing location flags for all locations. */
    Org_GetLocationFlagsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of location UUIDs to their flags */
      flagsMap?: {
        [key: string]: { [key: string]: string | null } | null;
      } | null;
    };
    /** Request object for getting organization integrations (deprecated, use integration package). */
    Org_GetOrgIntegrationsWSRequest: { [key: string]: unknown };
    /** Response object containing organization integrations (deprecated, use integration package). */
    Org_GetOrgIntegrationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgIntegrations?: components["schemas"]["OrgIntegrationsType"];
    };
    /** Response object containing organization notification template V2. */
    Org_GetOrgNotificationTemplateV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      notificationSettings?: components["schemas"]["UserNotificationSettingsV4Type"];
    };
    /** Request object for getting organization notification template. */
    Org_GetOrgNotificationTemplateWSRequest: { [key: string]: unknown };
    /** Response object containing organization notification template. */
    Org_GetOrgNotificationTemplateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      notificationSettings?: components["schemas"]["UserNotificationSettingsV3Type"];
    };
    /** Request object for getting organization details V2. */
    Org_GetOrgV2WSRequest: { [key: string]: unknown };
    /** Response object containing organization details V2 with camera configuration options. */
    Org_GetOrgV2WSResponse: {
      /** Map of hardware variations to default video configurations */
      cameraConfigDefaults?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_VideoConfigurationDefault"];
      } | null;
      /** Map of hardware variations to available video configuration options */
      cameraConfigOptions?: {
        [key: string]:
          | components["schemas"]["Deviceconfig_settings_VideoConfigurationOption"][]
          | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of feature flags for the organization */
      featureFlags?: { [key: string]: string | null } | null;
      org?: components["schemas"]["OrgV2Type"];
    };
    /** Request object for getting organization details (deprecated). */
    Org_GetOrgWSRequest: { [key: string]: unknown };
    /** Response object containing organization details (deprecated). */
    Org_GetOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of feature flags for the organization */
      featureFlags?: { [key: string]: string | null } | null;
      org?: components["schemas"]["OrgType"];
    };
    /** Request object for getting SAML settings V2. */
    Org_GetSAMLSettingsV2WSRequest: { [key: string]: unknown };
    /** Response object containing SAML settings V2. */
    Org_GetSAMLSettingsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of SAML settings for the organization */
      samlSettings?: components["schemas"]["OrgSamlSettingsType"][] | null;
    };
    /** Request object for getting SAML settings (deprecated). */
    Org_GetSAMLSettingsWSRequest: { [key: string]: unknown };
    /** Response object containing SAML settings (deprecated). */
    Org_GetSAMLSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      samlSettings?: components["schemas"]["OrgSamlSettingsType"];
    };
    /** Response object containing SCIM display information. */
    Org_GetScimDisplayInfoResponse: {
      /** Azure SCIM endpoint URL */
      azureScimEndpointUrl?: string | null;
      /** SCIM endpoint URL */
      scimEndpointUrl?: string | null;
    };
    /** Request object for getting temporary organization token. */
    Org_GetTemporaryOrgTokenWSRequest: { [key: string]: unknown };
    Org_HardwareWithPendingRegistrationInfoType: {
      hardware?: components["schemas"]["HardwareType"];
      /** base 64 (url-safe) uuid string */
      hwUuid?: string | null;
      pendingRegistrationInfo?: components["schemas"]["Org_PendingRegistrationInfoType"];
    };
    Org_PeekShipmentRegistrationTokenWSRequest: {
      /** base 64 (url-safe) uuid string */
      tokenUuid?: string | null;
    };
    Org_PeekShipmentRegistrationTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      hardwareUuidList?: (string | null)[] | null;
    };
    Org_PendingRegistrationInfoType: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    Org_RemovePendingRegistrationRequest: {
      serialNumber?: string | null;
    };
    Org_RemovePendingRegistrationResponse: { [key: string]: unknown };
    /** Request object for revoking SCIM access for organization. */
    Org_RevokeSCIMAccessForOrgWSRequest: { [key: string]: unknown };
    /** Response object for revoking SCIM access for organization. */
    Org_RevokeSCIMAccessForOrgWSResponse: { [key: string]: unknown };
    /** Request object for setting organization flags. */
    Org_SetFlagWSRequest: {
      /** Name of the flag to set */
      flagName?: string | null;
      /** Value of the flag to set */
      flagValue?: string | null;
    };
    /** Response object for setting organization flags. */
    Org_SetFlagWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for setting up SCIM access for organization. */
    Org_SetupSCIMAccessForOrgWSRequest: {
      /** Whether to add users on role mismatch */
      addUsersOnRoleMismatch?: boolean | null;
      rhombusKeyAppSettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      /** Whether to send welcome email to new Rhombus Key users */
      sendWelcomeEmailToNewRhombusKeyUsers?: boolean | null;
      /** Whether to send welcome email to new users */
      sendWelcomeEmailToNewUsers?: boolean | null;
    };
    /** Response object for setting up SCIM access for organization. */
    Org_SetupSCIMAccessForOrgWSResponse: {
      scimAccessAlreadySetupFailure?: boolean | null;
      token?: string | null;
    };
    /** Request object for updating AI training settings. */
    Org_UpdateAiTrainingSettingsWSRequest: {
      /** Whether to share AI training media with Rhombus */
      shareAiTrainingMediaWithRhombus?: boolean | null;
    };
    /** Response object for updating AI training settings. */
    Org_UpdateAiTrainingSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating cloud archiving configuration. */
    Org_UpdateCloudArchivingConfigWSRequest: {
      archivingConfig?: components["schemas"]["ScopedCloudArchivingConfig"];
    };
    /** Response object for updating cloud archiving configuration. */
    Org_UpdateCloudArchivingConfigWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating firmware settings. */
    Org_UpdateFirmwareSettingsWSRequest: {
      firmwareSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
      firmwareUpdateSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
      /** Overrides default firmware update settings. */
      firmwareUpdateSettingsOverrides?:
        | components["schemas"]["FirmwareUpdateSettingsOverrideType"][]
        | null;
    };
    /** Response object for updating firmware settings. */
    Org_UpdateFirmwareSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating general organization settings. */
    Org_UpdateGeneralSettingsWSRequest: {
      /** Email of the account billing contact */
      accountBillingContactEmail?: string | null;
      /** Email of the account owner */
      accountOwnerEmail?: string | null;
      /** Email of the account technical contact */
      accountTechnicalContactEmail?: string | null;
      /** List of account technical contact emails */
      accountTechnicalContacts?: (string | null)[] | null;
      defaultPlayerViewLiveType?: components["schemas"]["PlayerViewLiveTypeEnum"];
      /** Inactivity timeout in minutes */
      inactivityTimeout?: number | null;
      /** Name of the organization */
      name?: string | null;
      uapSettings?: components["schemas"]["UAPSettingsType"];
    };
    /** Response object for updating general organization settings. */
    Org_UpdateGeneralSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating MFA settings. */
    Org_UpdateMFASettingsWSRequest: {
      /** Whether MFA is enabled for the organization */
      mfaEnabled?: boolean | null;
      /** Number of days to skip 2FA for trusted devices (< 0 = forever, 0 = always require 2FA, > 0 = days to skip) */
      v3AuthNumDaysSkip2FAForTrustedDevices?: number | null;
    };
    /** Response object for updating MFA settings. */
    Org_UpdateMFASettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      org?: components["schemas"]["OrgV2Type"];
    };
    /** Request object for updating organization audio analysis policy. */
    Org_UpdateOrgAudioAnalysisPolicyWSRequest: {
      /** Whether audio analysis is enabled for the organization */
      audioAnalysisEnabled?: boolean | null;
    };
    /** Response object for updating organization audio analysis policy. */
    Org_UpdateOrgAudioAnalysisPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating organization audio recording policy. */
    Org_UpdateOrgAudioRecordingPolicyWSRequest: {
      /** Whether audio recording is enabled for the organization */
      audioRecordingEnabled?: boolean | null;
    };
    /** Response object for updating organization audio recording policy. */
    Org_UpdateOrgAudioRecordingPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating organization integrations (deprecated, use integration package). */
    Org_UpdateOrgIntegrationsWSRequest: {
      orgIntegrations?: components["schemas"]["OrgIntegrationsType"];
    };
    /** Response object for updating organization integrations (deprecated, use integration package). */
    Org_UpdateOrgIntegrationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating organization LLM usage opt-in policy. */
    Org_UpdateOrgLLMUsagePolicyWSRequest: {
      /** Whether the org is opting in to use LLMs */
      llmUsageEnabled?: boolean | null;
    };
    /** Response object for updating organization LLM usage opt-in policy. */
    Org_UpdateOrgLLMUsagePolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating organization notification template V2. */
    Org_UpdateOrgNotificationTemplateV2WSRequest: {
      /** Whether summary email is enabled */
      summaryEmailEnabled?: boolean | null;
      templateUpdate?: components["schemas"]["UserNotificationSelectiveUpdateV2"];
    };
    Org_UpdateOrgNotificationTemplateV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating organization notification template. */
    Org_UpdateOrgNotificationTemplateWSRequest: {
      /** List of notification intervals V2 */
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      /** Whether summary email is enabled */
      summaryEmailEnabled?: boolean | null;
    };
    /** Response object for updating organization notification template. */
    Org_UpdateOrgNotificationTemplateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating organization details (deprecated). */
    Org_UpdateOrgWSRequest: {
      org?: components["schemas"]["OrgType"];
    };
    /** Response object for updating organization details (deprecated). */
    Org_UpdateOrgWSResponse: {
      samlEntityIdUniquenessConstraintFailure?: boolean | null;
      teamNameNotAssignedFailure?: boolean | null;
      teamNameUniquenessConstraintFailure?: boolean | null;
    };
    Org_UpdatePendingRegistrationRequest: {
      /** base 64 (url-safe) uuid string */
      hardwareUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    Org_UpdatePendingRegistrationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating SAML settings V2. */
    Org_UpdateSAMLSettingsV2WSRequest: {
      /** List of SAML settings to update */
      samlSettings?: components["schemas"]["OrgSamlSettingsType"][] | null;
    };
    /** Response object for updating SAML settings V2. */
    Org_UpdateSAMLSettingsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating SAML settings (deprecated). */
    Org_UpdateSAMLSettingsWSRequest: {
      samlSettings?: components["schemas"]["OrgSamlSettingsType"];
    };
    /** Response object for updating SAML settings (deprecated). */
    Org_UpdateSAMLSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating SCIM settings for organization. */
    Org_UpdateSCIMSettingsForOrgWSRequest: {
      /** Whether to add users on role mismatch */
      addUsersOnRoleMismatch?: boolean | null;
      rhombusKeyAppSettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      /** Whether to send welcome email to new Rhombus Key users */
      sendWelcomeEmailToNewRhombusKeyUsers?: boolean | null;
      /** Whether to send welcome email to new users */
      sendWelcomeEmailToNewUsers?: boolean | null;
    };
    /** Response object for updating SCIM settings for organization. */
    Org_UpdateSCIMSettingsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    OsdpDoorReaderType: {
      allowUnencrypted?: boolean | null;
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      osdpAddress?: number | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["OsdpReaderPortType"];
      portImmutable?: boolean | null;
      readerType?: components["schemas"]["DoorReaderEnumType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    OsdpPhysicalPortEnumType: OsdpPhysicalPortEnumType;
    OsdpReaderPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["OsdpPhysicalPortEnumType"];
    };
    /** Outgoing shipment information (deprecated) */
    OutgoingShipmentInfoType: {
      buyer?: components["schemas"]["Buyer"];
      consignee?: components["schemas"]["Consignee"];
      depositorOrderNumber?: string | null;
      freight?: components["schemas"]["Freight"];
      interchangeControlNumber?: string | null;
      product?: components["schemas"]["Product"][] | null;
      purchaseOrderNumber?: string | null;
      shipment?: components["schemas"]["Shipment"];
      shipper?: components["schemas"]["Shipper"];
    };
    PagerDutySettings: {
      allLocationIntegrationKeys?: (string | null)[] | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      integrationKey?: string | null;
      locationToIntegrationKeysMap?: {
        [key: string]: (string | null)[] | null;
      } | null;
    };
    /** Request object for retrieving a resource with optional pagination. */
    PaginateRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    PanelType: {
      id?: string | null;
      name?: string | null;
    };
    PanicButtonEventType:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    ParameterizedHeader: {
      parameters?: { [key: string]: string | null } | null;
      value?: string | null;
    } | null;
    PartnerFunctionality: PartnerFunctionalityEnum;
    PartnerNotificationClientSection: {
      clientUuids?: (string | null)[] | null;
      rows?:
        | components["schemas"]["PartnerNotificationClientSectionRow"][]
        | null;
    };
    PartnerNotificationClientSectionRow: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      days?: (PartnerNotificationClientSectionRowDaysEnum | null)[] | null;
      diagnostics?: (PartnerNotificationClientSectionRowDiagnosticsEnum | null)[] | null;
      interval?: components["schemas"]["MinuteOfDayIntervalType"];
      mediums?: components["schemas"]["NotificationEnumType"][] | null;
    };
    PartnerNotificationSettingsType: {
      allClientsSelected?: boolean | null;
      clientNotificationIntervalsMap?: {
        [key: string]:
          | components["schemas"]["NotificationIntervalV2Type"][]
          | null;
      } | null;
      notificationIntervalsForAllClients?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    PartnerNotificationSettingsV2: {
      allClientsSelected?: boolean | null;
      clientNotificationIntervalsMap?: {
        [key: string]:
          | components["schemas"]["PartnerNotificationClientSection"][]
          | null;
      } | null;
      notificationIntervalsForAllClients?:
        | components["schemas"]["PartnerNotificationClientSection"][]
        | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    PartnerPermission: PartnerPermissionEnum;
    /** List of partner permissions */
    PartnerPermissionType: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Updated partner permission group configuration */
    PartnerUserPermissionGroupType: {
      assignablePermissionGroups?: (string | null)[] | null;
      clientAssignablePermissionGroupsMap?: {
        [key: string]: (string | null)[] | null;
      } | null;
      clientFunctionalityList?: components["schemas"]["Functionality"][] | null;
      clientPermissionMap?: {
        [key: string]: components["schemas"]["PartnerPermission"];
      } | null;
      description?: string | null;
      functionalityList?:
        | components["schemas"]["PartnerFunctionality"][]
        | null;
      mutable?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      superAdmin?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Client-specific customization settings for partner management. */
    Partner_ClientCustomizationsType: {
      /** Whether to force low bandwidth on all cameras */
      forceLowBandwidthOnAllCameras?: boolean | null;
      /** Inactivity timeout in minutes */
      inactivityTimeout?: number | null;
    };
    /** Client device-specific customization settings for partner management. */
    Partner_ClientDeviceCustomizationsType: {
      /** Whether to force low bandwidth on all cameras */
      forceLowBandwidthOnAllCameras?: boolean | null;
      /** Inactivity timeout in minutes */
      inactivityTimeout?: number | null;
    };
    /** Device connection count information for partner clients. */
    Partner_ConnectionCountType: {
      /** Number of connected devices */
      connectedCount?: number | null;
      /** Number of operational devices */
      operationalCount?: number | null;
      /** Total number of devices */
      totalCount?: number | null;
    };
    /** Request object for creating a new partner client account. */
    Partner_CreatePartnerClientWSRequest: {
      /** Email address of the client contact person */
      clientContactEmail?: string | null;
      /** Name of the client contact person */
      clientContactName?: string | null;
      /** Name of the client organization */
      clientOrgName?: string | null;
      /** Whether to suppress sending welcome email to the client */
      suppressWelcomeEmail?: boolean | null;
    };
    /** Response object containing the result of creating a partner client account. */
    Partner_CreatePartnerClientWSResponse: {
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: components["schemas"]["Partner_PartnerWebResponseStatusEnum"];
    };
    /** Request object for customizing client device settings and configurations. */
    Partner_CustomizeClientDeviceWSRequest: {
      /** base 64 (url-safe) uuid string */
      clientDeviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableAudioVideoUserConfig"];
      customizations?: components["schemas"]["Partner_ClientDeviceCustomizationsType"];
    };
    /** Response object containing the applied client device customization settings. */
    Partner_CustomizeClientDeviceWSResponse: {
      customizations?: components["schemas"]["Partner_ClientCustomizationsType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for customizing client settings and configurations. */
    Partner_CustomizeClientWSRequest: {
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
      customizations?: components["schemas"]["Partner_ClientCustomizationsType"];
    };
    /** Response object containing the applied client customization settings. */
    Partner_CustomizeClientWSResponse: {
      customizations?: components["schemas"]["Partner_ClientCustomizationsType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a partner client account. */
    Partner_DeleteClientWebRequest: {
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
    };
    /** Response object for deleting a partner client account. */
    Partner_DeleteClientWebResponse: { [key: string]: unknown };
    /** Device information with partner-specific details including control and reassignment status. */
    Partner_DeviceWithPartnerDetailsType: {
      device?: components["schemas"]["DeviceTypeV2"];
      /** Whether the hardware is controlled by the partner */
      partnerControlledHardware?: boolean | null;
      /** Whether the device can be reassigned to another organization */
      reassignable?: boolean | null;
    };
    /** Request object for getting devices for a specific client organization. */
    Partner_GetClientDevicesWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object containing devices for a specific client organization. */
    Partner_GetClientDevicesWSResponse: {
      /** List of devices with partner-specific details */
      devices?:
        | components["schemas"]["Partner_DeviceWithPartnerDetailsType"][]
        | null;
    };
    /** Base response for getting client Rhombus organization users for partner activation token V2 */
    Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSBaseResponse: (
      | components["schemas"]["Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSFailureResponse"]
      | components["schemas"]["Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSSuccessResponse"]
    ) & {
      type: string;
    };
    /** Failure response for getting client Rhombus organization users for partner activation token V2. */
    Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSFailureResponse:
      | ({
          /** Reason for the failure */
          failureReason?: string | null;
        } & {
          type?: string;
        })
      | null;
    /** Request object for getting client Rhombus organization users for partner activation token V2. */
    Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSRequest: {
      /** base 64 (url-safe) uuid string */
      token?: string | null;
    };
    /** Success response for getting client Rhombus organization users for partner activation token V2. */
    Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSSuccessResponse:
      | ({
          /** List of Rhombus organizations the user has access to */
          orgs?: components["schemas"]["OrgV2Type"][] | null;
        } & {
          type?: string;
        })
      | null;
    /** Request object for getting client summary information. */
    Partner_GetClientSummaryInfoWSRequest: {
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
    };
    /** Response object containing client summary information including account owner, device status, and settings. */
    Partner_GetClientSummaryInfoWSResponse: {
      accountOwner?: components["schemas"]["WrappedRhombusOrgUserType"];
      /** Map of device types to their connection status counts */
      clientDeviceStatusMap?: {
        [key: string]: components["schemas"]["Partner_ConnectionCountType"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Whether license V2 is enabled for the client */
      licenseV2Enabled?: boolean | null;
      /** Number of locations for the client */
      locationCount?: number | null;
      /** Whether manual license expiration email sending is enabled */
      manuallySendLicenseExpirationEmailEnabled?: boolean | null;
      /** Number of recent policy alerts */
      recentPolicyAlertCount?: number | null;
    };
    /** Request object for getting list of all client devices. */
    Partner_GetListOfAllClientDevicesRequest: { [key: string]: unknown };
    /** Response object containing list of all client devices. */
    Partner_GetListOfAllClientDevicesResponse: {
      /** List of all client devices */
      listOfAllClientDevices?: components["schemas"]["DeviceTypeV2"][] | null;
    };
    /** Request object for getting list of controlled hardware. */
    Partner_GetListOfControlledHardwareRequest: { [key: string]: unknown };
    /** Response object containing list of controlled hardware. */
    Partner_GetListOfControlledHardwareResponse: {
      /** List of controlled hardware */
      controlledHardwareList?:
        | components["schemas"]["Partner_UnregisteredControlledHardwareType"][]
        | null;
    };
    /** Request object for getting partner client mobile account access. */
    Partner_GetPartnerClientMobileAccountAccessRequest: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
    };
    /** Response object containing partner client mobile account access session. */
    Partner_GetPartnerClientMobileAccountAccessResponse: {
      /** base 64 (url-safe) uuid string */
      clientAccountAccessSessionId?: string | null;
    };
    /** Request object for getting partner clients status map. */
    Partner_GetPartnerClientsStatusMapWSRequest: { [key: string]: unknown };
    /** Response object containing partner clients status map with device connection counts. */
    Partner_GetPartnerClientsStatusMapWSResponse: {
      /** Map of client UUIDs to device type connection counts */
      clientDeviceStatusMap?: {
        [key: string]: {
          [key: string]: components["schemas"]["Partner_ConnectionCountType"];
        } | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting all partner clients. */
    Partner_GetPartnerClientsWSRequest: { [key: string]: unknown };
    /** Response object containing list of partner clients. */
    Partner_GetPartnerClientsWSResponse: {
      /** List of partner clients */
      clients?: components["schemas"]["Partner_PartnerClientWebType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting partner users in organization. */
    Partner_GetPartnerUsersInOrgWSRequest: { [key: string]: unknown };
    /** Response object containing partner users in organization with notification settings and permissions. */
    Partner_GetPartnerUsersInOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of partner notification settings */
      notificationSettings?:
        | components["schemas"]["PartnerNotificationSettingsType"][]
        | null;
      /** List of partner notification settings V2 */
      notificationSettingsV2?:
        | components["schemas"]["PartnerNotificationSettingsV2"][]
        | null;
      /** List of partner permissions */
      partnerPermissions?:
        | components["schemas"]["PartnerPermissionType"][]
        | null;
      /** List of partner users in the organization */
      partnerUsers?:
        | components["schemas"]["WrappedRhombusOrgUserType"][]
        | null;
    };
    /** Request object for getting client shipments within a time range. */
    Partner_GetShipmentsWSRequest: {
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
      /** End time for shipment search (seconds since epoch) */
      endTimeSec?: number | null;
      /** Start time for shipment search (seconds since epoch) */
      startTimeSec?: number | null;
    };
    /** Response object containing client shipments within the specified time range. */
    Partner_GetShipmentsWSResponse: {
      /** List of customer shipments */
      customerShipmentList?:
        | components["schemas"]["CustomerShipmentType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for granting support access to a client account. */
    Partner_GrantSupportAccessToClientWSRequest: {
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
    };
    /** Response object for granting support access to a client account. */
    Partner_GrantSupportAccessToClientWSResponse: {
      /** Error message if support access grant failed */
      errMessage?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Partner client information including organization details and device counts. */
    Partner_PartnerClientWebType: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
      /** Whether client access is allowed (duplicate getter) */
      clientAccessAllowed?: boolean | null;
      /** URL for accessing the client account */
      clientAccountAccessUrl?: string | null;
      /** Name of the client organization */
      clientOrgName?: string | null;
      /** base 64 (url-safe) uuid string */
      clientOrgUuid?: string | null;
      /** Timestamp when the client was created (milliseconds since epoch) */
      createdAtMillis?: number | null;
      /** Total number of audio gateways */
      totalAudioGateways?: number | null;
      /** Total number of badge readers */
      totalBadgeReaders?: number | null;
      /** Total number of cameras */
      totalCameras?: number | null;
      /** Total number of climate sensors */
      totalClimateSensors?: number | null;
      /** Total number of door sensors */
      totalDoorSensors?: number | null;
      /** Total number of locations */
      totalLocations?: number | null;
      /** Total number of occupancy sensors */
      totalOccupancySensors?: number | null;
      /** Total number of proximity sensors */
      totalProximitySensors?: number | null;
    };
    /** Status responses for partner web operations. */
    Partner_PartnerWebResponseStatusEnum: Partner_PartnerWebResponseStatusEnum;
    /** Request object for reassigning devices from one organization to another. */
    Partner_ReassignDeviceOrgWSRequest: {
      /** Serial numbers of the devices that should be reassigned to target organization */
      serialNumbers?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      sourceOrgUuid: string | null;
      /** base 64 (url-safe) uuid string */
      targetOrgUuid: string | null;
    };
    /** Response object containing the status of device reassignment operations. */
    Partner_ReassignDeviceOrgWSResponse: {
      /** Map of device serial numbers to their reassignment operation status */
      statuses?: {
        [key: string]: components["schemas"]["OperationStatus"];
      } | null;
    };
    /** Request object for registering a deal with partner details. */
    Partner_RegisterDealWSRequest: {
      /** Map of deal details with key-value pairs */
      details?: { [key: string]: string | null } | null;
    };
    /** Response object containing the result of registering a deal. */
    Partner_RegisterDealWSResponse: {
      /** List of partner clients associated with the registered deal */
      clients?: components["schemas"]["Partner_PartnerClientWebType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for requesting access to a client account (deprecated, use V2). */
    Partner_RequestAccessToClientAccountRequest: {
      /** Email address of the client to request access for */
      clientEmail?: string | null;
    };
    /** Response object for requesting access to a client account (deprecated, use V2). */
    Partner_RequestAccessToClientAccountResponse: {
      /** Whether the access request was successful */
      success?: boolean | null;
    };
    /** Request object for requesting access to a client account V2. */
    Partner_RequestAccessToClientAccountV2Request: {
      /** Email address of the client to request access for */
      clientEmail?: string | null;
    };
    /** Response object for requesting access to a client account V2. */
    Partner_RequestAccessToClientAccountV2Response: {
      /** Whether the access request was successful */
      success?: boolean | null;
    };
    /** Base response for submitting support access decision for partner activation token V2 */
    Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSBaseResponse: (
      | components["schemas"]["Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSFailureResponse"]
      | components["schemas"]["Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSSuccessResponse"]
    ) & {
      type: string;
    };
    /** Failure response for submitting support access decision for partner activation token V2. */
    Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSFailureResponse:
      | ({
          /** Reason for the failure */
          failureReason?: string | null;
        } & {
          type?: string;
        })
      | null;
    /** Request object for submitting support access decision for partner activation token V2. */
    Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSRequest: {
      /** Whether access was granted by the client */
      accessGrantedByClient?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      token?: string | null;
    };
    /** Success response for submitting support access decision for partner activation token V2. */
    Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSSuccessResponse: {
      type?: string;
    } | null;
    /** Information about unregistered controlled hardware available for partner registration. */
    Partner_UnregisteredControlledHardwareType: {
      deviceModel?: components["schemas"]["HardwareVariationEnum"];
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      /** MAC address of the hardware device */
      macAddress?: string | null;
      /** Serial number of the hardware device */
      serialNumber?: string | null;
    };
    /** Request object for updating manual license expiration email settings for an organization. */
    Partner_UpdateManuallySendLicenseExpirationEmailWSRequest: {
      /** Whether to manually send license expiration emails */
      manuallySendLicenseExpirationEmail?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object for updating manual license expiration email settings. */
    Partner_UpdateManuallySendLicenseExpirationEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for initiating a forgot password flow with captcha verification. */
    Password_ForgotPasswordWSRequest: {
      /** Email address of the user requesting password reset */
      email?: string | null;
      googleCaptchaSource?: components["schemas"]["GoogleCaptchaSourceEnum"];
      /** Google reCAPTCHA response token for verification */
      googlesCaptchaResponse?: string | null;
    };
    /** Response object for forgot password request containing success status and failure details. */
    Password_ForgotPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Reason for failure if the request was unsuccessful */
      failureReason?: string | null;
      /** Whether the forgot password request was successful */
      success?: boolean | null;
    };
    /** Request object for resetting user password using a reset token. */
    Password_ResetPasswordWSRequest: {
      /** New password for the user account */
      password?: string | null;
      /** Password reset token received via email */
      token?: string | null;
    };
    /** Response object for password reset containing success status and detailed failure information. */
    Password_ResetPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Human-readable reason for failure if the reset was unsuccessful */
      failureReason?: string | null;
      /** Structured failure reason type for programmatic handling */
      failureReasonType?: ResetPasswordWSResponseFailureReasonTypeEnum | null;
      /** Whether the password reset was successful */
      success?: boolean | null;
    };
    /** Request object for user signup with invitation token, password, and EULA acceptance. */
    Password_UserSignupWSRequest: {
      /** Whether the user has accepted the End User License Agreement */
      eulaAccepted?: boolean | null;
      /** Password for the new user account */
      password?: string | null;
      /** base 64 (url-safe) uuid string */
      token?: string | null;
    };
    /** Response object for user signup containing success status and failure details. */
    Password_UserSignupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Reason for failure if the signup was unsuccessful */
      failureReason?: string | null;
      /** Whether the user signup was successful */
      success?: boolean | null;
    };
    /** List of people count events */
    PeopleCountEventType: {
      boundingBoxes?: components["schemas"]["BoundingBoxType"][] | null;
      deviceLabels?: (string | null)[] | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      eventTimestamp?: number | null;
      imageS3Key?: string | null;
      locationLabels?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      peopleCount?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    PerceptionType: PerceptionTypeEnum;
    Permission: PermissionEnum;
    /** Request object for assigning user permissions (deprecated, use Permission Group endpoints instead). */
    Permission_AssignUserPermissionWSRequest: {
      userPermission?: components["schemas"]["UserPermissionType"];
    };
    /** Response object for assigning user permissions (deprecated, use Permission Group endpoints instead). */
    Permission_AssignUserPermissionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for creating a new partner permission group. */
    Permission_CreatePartnerPermissionGroupWSRequest: {
      partnerPermissionGroup?: components["schemas"]["PartnerUserPermissionGroupType"];
    };
    /** Response object containing the UUID of the created partner permission group. */
    Permission_CreatePartnerPermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for creating a new permission group. */
    Permission_CreatePermissionGroupWSRequest: {
      userPermissionGroup?: components["schemas"]["UserPermissionGroupType"];
    };
    /** Response object containing the UUID of the created permission group. */
    Permission_CreatePermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for deleting a partner permission group. */
    Permission_DeletePartnerPermissionGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
    };
    /** Response object for deleting a partner permission group. */
    Permission_DeletePartnerPermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a permission group. */
    Permission_DeletePermissionGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
    };
    /** Response object for deleting a permission group. */
    Permission_DeletePermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response object containing partner permission groups and client permission group mappings. */
    Permission_GetPartnerPermissionGroupWSResponse: {
      /** Map of client UUIDs to their permission group types */
      clientPermissionGroupMap?: {
        [key: string]: components["schemas"]["UserPermissionGroupType"];
      } | null;
      clientPermissionsGroupMap?: {
        [key: string]: components["schemas"]["UserPermissionGroupType"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of permission group UUIDs to list of user UUIDs in each group */
      groupMembership?: { [key: string]: (string | null)[] | null } | null;
      /** List of partner permission groups */
      permissionGroups?:
        | components["schemas"]["PartnerUserPermissionGroupType"][]
        | null;
    };
    /** Request object for getting partner permission groups for the organization. */
    Permission_GetPartnerPermissionGroupsWSRequest: { [key: string]: unknown };
    /** Request object for getting permission groups for a specific organization. */
    Permission_GetPermissionGroupsForOrgWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
    };
    /** Response object containing permission groups for a specific organization. */
    Permission_GetPermissionGroupsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of permission groups in the organization */
      permissionGroups?:
        | components["schemas"]["UserPermissionGroupType"][]
        | null;
    };
    /** Request object for getting all permission groups in the organization. */
    Permission_GetPermissionGroupsWSRequest: { [key: string]: unknown };
    /** Response object containing permission groups and membership information for the organization. */
    Permission_GetPermissionGroupsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of permission group UUIDs to list of user UUIDs in each group */
      groupMembership?: { [key: string]: (string | null)[] | null } | null;
      /** Map of partner UUIDs to list of user UUIDs in each partner organization */
      partnerMembership?: { [key: string]: (string | null)[] | null } | null;
      /** List of permission groups in the organization */
      permissionGroups?:
        | components["schemas"]["UserPermissionGroupType"][]
        | null;
    };
    /** Request object for getting permissions for the current partner user. */
    Permission_GetPermissionsForCurrentPartnerWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing partner permission information including functionality lists, client permissions, and group details. */
    Permission_GetPermissionsForCurrentPartnerWSResponse: {
      /** Set of partner permission group UUIDs the user can assign to other users */
      assignablePermissionGroups?: (string | null)[] | null;
      /** List of client functionalities the user has access to */
      clientFunctionalityList?: components["schemas"]["Functionality"][] | null;
      /** Map of client UUIDs to partner permission levels */
      clientPermissionMap?: {
        [key: string]: components["schemas"]["PartnerPermission"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of partner functionalities the user has access to */
      functionalityList?:
        | components["schemas"]["PartnerFunctionality"][]
        | null;
      /** Name of the partner user's permission group */
      permissionGroupName?: string | null;
      /** Whether the partner user has super admin privileges */
      superAdmin?: boolean | null;
    };
    /** Request object for getting permissions for the current user. */
    Permission_GetPermissionsForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing comprehensive permission information for the current user including functionality, device, location, and granular access maps. */
    Permission_GetPermissionsForCurrentUserWSResponse: {
      /** Map of access control location UUIDs to permission levels */
      accessControlLocationAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      /** Deprecated: Map of device UUIDs to permission levels (use deviceAccessMap instead) */
      accessMap?: { [key: string]: components["schemas"]["Permission"] } | null;
      /** Set of permission group UUIDs the user can assign to other users */
      assignablePermissionGroups?: (string | null)[] | null;
      /** Map of device UUIDs to permission levels */
      deviceAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of functionalities the user has access to */
      functionalityList?: components["schemas"]["Functionality"][] | null;
      /** Whether the user has installer privileges */
      installer?: boolean | null;
      /** Map of location UUIDs to permission levels */
      locationAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      /** Map of location UUIDs to granular functionality permission maps */
      locationGranularAccessMap?: {
        [key: string]: {
          [key: string]: components["schemas"]["Permission"];
        } | null;
      } | null;
      /** Name of the user's permission group */
      permissionGroupName?: string | null;
      /** Whether the user has super admin privileges */
      superAdmin?: boolean | null;
    };
    /** Request object for updating an existing partner permission group. */
    Permission_UpdatePartnerPermissionGroupWSRequest: {
      partnerPermissionGroup?: components["schemas"]["PartnerUserPermissionGroupType"];
    };
    /** Response object for updating a partner permission group. */
    Permission_UpdatePartnerPermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating an existing permission group. */
    Permission_UpdatePermissionGroupWSRequest: {
      userPermissionGroup?: components["schemas"]["UserPermissionGroupType"];
    };
    /** Response object for updating a permission group. */
    Permission_UpdatePermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    PermyriadRect: {
      h?: number | null;
      size?: number | null;
      w?: number | null;
      x?: number | null;
      y?: number | null;
    };
    /** The updated person */
    Person: {
      createdOn?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      updatedOn?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Selective update information for the person */
    PersonSelectiveUpdate: {
      createdOn?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      updatedOn?: string | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    PhysicalPortEnumType: PhysicalPortEnumType;
    PhysicalPortType: {
      boardNum?: number | null;
      componentPortTypeUsageMap?: {
        [key: string]: (string | null)[] | null;
      } | null;
      label?: string | null;
      portNum?: number | null;
      supportedPortTypes?:
        | components["schemas"]["PhysicalPortEnumType"][]
        | null;
    };
    PimlocType:
      | ({
          baseAPIUrl?: PimlocBaseAPIUrlEnum | null;
          clientId?: string | null;
          clientSecret?: string | null;
          /** base 64 (url-safe) uuid string */
          rhombusToken?: string | null;
          validCredentials?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    PinCredential: {
      createdAtMillis?: number | null;
      endDateEpochSecExclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUsedAccessControlledDoorUuid?: string | null;
      lastUsedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUsedLocationUuid?: string | null;
      lowercaseHexValue?: string | null;
      /** base 64 (url-safe) uuid string */
      managedCredUuid?: string | null;
      note?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      startDateEpochSecInclusive?: number | null;
      type?: components["schemas"]["AccessControlCredentialEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      value?: string | null;
      workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
    } | null;
    /** Applies a filter on PINs retrieved. If a filter is not provided or if filter fields are left empty, no filtering will be applied. If used with pageRequest, the paginated result will be retrieved first then the filter will be applied. */
    PinQueryFilter: {
      statusFilter?: components["schemas"]["PinStatus"][] | null;
    };
    PinStatus: PinStatusEnum;
    PipelineComponent: {
      arg_json?: { [key: string]: { [key: string]: unknown } | null } | null;
      name?: components["schemas"]["PipelineComponentType"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    PipelineComponentType: PipelineComponentTypeEnum;
    PlaceOsSettings: {
      alertUnauthorizedFaces?: boolean | null;
      apiUrl?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookSignatureSecret?: string | null;
    };
    PlaceOsType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          apiUrl?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          refreshToken?: string | null;
          /** base 64 (url-safe) uuid string */
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          triggerNotification?: boolean | null;
          webhookSignatureSecret?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    PlaceType: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      id?: number | null;
      identifyFacesFromBadge?: boolean | null;
      name?: string | null;
      saveClips?: boolean | null;
    };
    PlayerViewLiveTypeEnum: PlayerViewLiveTypeEnum;
    PmSensorType: {
      nc0p5?: number | null;
      nc10p0?: number | null;
      nc1p0?: number | null;
      nc2p5?: number | null;
      nc4p0?: number | null;
      noxIdx?: number | null;
      pm10p0?: number | null;
      pm1p0?: number | null;
      pm2p5?: number | null;
      pm4p0?: number | null;
      relHumid?: number | null;
      tempC?: number | null;
      timestampSec?: number | null;
      typPartSize?: number | null;
      vocIdx?: number | null;
    };
    PointType: {
      x?: number | null;
      y?: number | null;
    };
    /** Policy alert V2 to report as bad */
    PolicyAlertV2Type: {
      airQualityIndex?: number | null;
      airQualityIndexThreshold?: number | null;
      /** base 64 (url-safe) uuid string */
      alertMonitoringThreatCaseUuid?: string | null;
      alertMonitoringVerified?: boolean | null;
      alertingEventFaces?:
        | components["schemas"]["PolicyEventFaceType"][]
        | null;
      alertingEventVehicles?:
        | components["schemas"]["PolicyEventVehicleType"][]
        | null;
      /** Custom activity display description, maximum 100 characters */
      cd?: string | null;
      /** Custom activity display name, maximum 32 characters */
      cdn?: string | null;
      ch2oPpb?: number | null;
      ch2oPpbThreshold?: number | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      clipLocationMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      clipLocationMapV2?: { [key: string]: string | null } | null;
      cllmBooleanValue?: boolean | null;
      cllmCheckCondition?: components["schemas"]["CheckCondition"];
      cllmIntegerValue?: number | null;
      cllmPromptTypeEnum?: PolicyAlertV2CllmPromptTypeEnum | null;
      /** base 64 (url-safe) uuid string */
      cllmPromptUuid?: string | null;
      co2?: number | null;
      co2Ppm?: number | null;
      co2PpmThreshold?: number | null;
      co2Threshold?: number | null;
      coConcentration?: number | null;
      coConcentrationThreshold?: number | null;
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      delayedProcessing?: boolean | null;
      deleted?: boolean | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      durationSec?: number | null;
      egressBoundaryDevices?: (string | null)[] | null;
      ethanol?: number | null;
      ethanolThreshold?: number | null;
      finalized?: boolean | null;
      heatIndexDegF?: number | null;
      heatIndexDegFThreshold?: number | null;
      humidityPercent1616?: number | null;
      humidityPercentThreshold1616?: number | null;
      humidityPermyriad?: number | null;
      humidityThresholdPermyriad?: number | null;
      iaq?: number | null;
      iaqThreshold?: number | null;
      ingressBoundaryDevices?: (string | null)[] | null;
      leakDetected?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      maxLuf?: number | null;
      notificationSent?: boolean | null;
      noxIdx?: number | null;
      noxIdxThreshold?: number | null;
      numHumans?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      peopleCountHighThreshold?: number | null;
      peopleCountLowThreshold?: number | null;
      pm10p0?: number | null;
      pm10p0Threshold?: number | null;
      pm1p0?: number | null;
      pm1p0Threshold?: number | null;
      pm25?: number | null;
      pm25Threshold?: number | null;
      pm4p0?: number | null;
      pm4p0Threshold?: number | null;
      policyAlertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      pressure?: number | null;
      pressureThreshold?: number | null;
      probeTempC?: number | null;
      probeTempCThreshold?: number | null;
      probeTempThreshold?: number | null;
      relHumid?: number | null;
      relHumidThreshold?: number | null;
      saved?: boolean | null;
      shared?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tamperByMovementChange?: number | null;
      tampered?: boolean | null;
      tempC?: number | null;
      tempCThreshold?: number | null;
      tempProbePresent?: boolean | null;
      temperatureCelsius1616?: number | null;
      temperatureCelsiusThreshold1616?: number | null;
      temperaturePermyriad?: number | null;
      temperatureThresholdPermyriad?: number | null;
      /** Natural language description of the alert */
      textDescription?: string | null;
      thcPercent?: number | null;
      thcPercentThreshold?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      thumbnailLocationV2?: string | null;
      timestampMs?: number | null;
      tvoc?: number | null;
      tvocThreshold?: number | null;
      type?: PolicyAlertV2TypeEnum | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      vapeDetected?: boolean | null;
      vapeSmokePercent?: number | null;
      vapeSmokePercentThreshold?: number | null;
      vocIdx?: number | null;
      vocIdxThreshold?: number | null;
    };
    /** Detailed information about the policy alert */
    PolicyAlertWithDetailsType: (
      | components["schemas"]["PolicyAlertV2Type"]
      | components["schemas"]["AccessControlledDoorPolicyAlertType"]
    ) & {
      /** base 64 (url-safe) uuid string */
      alertMonitoringThreatCaseUuid?: string | null;
      alertMonitoringVerified?: boolean | null;
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      boundingBoxesMap?: {
        [key: string]: components["schemas"]["ClipBoundingBoxType"][] | null;
      } | null;
      clientType?: components["schemas"]["ApiClientTypeEnum"];
      clipLocationMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      clipLocationMapV2?: { [key: string]: string | null } | null;
      componentCompositeSeekPointsMap?: {
        [key: string]: components["schemas"]["ClipSeekPointV2Type"][] | null;
      } | null;
      delayedProcessing?: boolean | null;
      deleted?: boolean | null;
      durationSec?: number | null;
      finalized?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      notificationSent?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      policyAlertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      recognizedEventFaces?:
        | components["schemas"]["PolicyEventFaceType"][]
        | null;
      recognizedEventVehicles?:
        | components["schemas"]["PolicyEventVehicleType"][]
        | null;
      saved?: boolean | null;
      seekPoints?: components["schemas"]["ClipSeekPointV2Type"][] | null;
      seekPointsMap?: {
        [key: string]: components["schemas"]["ClipSeekPointV2Type"][] | null;
      } | null;
      shared?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Natural language description of the alert */
      textDescription?: string | null;
      thirdPartyDeviceName?: string | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      thumbnailLocationV2?: string | null;
      timestampMs?: number | null;
      type?: PolicyAlertWithDetailsTypeEnum | null;
      unrecognizedEventFaces?:
        | components["schemas"]["PolicyEventFaceType"][]
        | null;
      unrecognizedEventVehicles?:
        | components["schemas"]["PolicyEventVehicleType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    PolicyEventFaceType: {
      faceId?: string | null;
      faceName?: string | null;
      imageS3Bucket?: string | null;
      imageS3Key?: string | null;
      imageS3Region?: string | null;
      labels?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      personUuid?: string | null;
    };
    PolicyEventVehicleType: {
      imageS3Bucket?: string | null;
      imageS3Key?: string | null;
      imageS3Region?: string | null;
      labels?: (string | null)[] | null;
      licensePlateNumber?: string | null;
      vehicleName?: string | null;
    };
    Policy_CreateAccessControlledDoorPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalAccessControlledDoorPolicyType"];
    };
    Policy_CreateAccessControlledDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Request object for creating an audio policy. */
    Policy_CreateAudioPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalAudioPolicyType"];
    };
    /** Response object containing the UUID of the created audio policy. */
    Policy_CreateAudioPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Request object for creating a camera policy. */
    Policy_CreateCameraPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalCameraPolicyV2Type"];
    };
    /** Response object containing the UUID of the created camera policy. */
    Policy_CreateCameraPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Request object for creating a climate policy. */
    Policy_CreateClimatePolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalClimatePolicyType"];
    };
    /** Response object containing the UUID of the created climate policy. */
    Policy_CreateClimatePolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Request object for creating a door sensor policy. */
    Policy_CreateDoorPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalDoorPolicyType"];
    };
    /** Response object containing the UUID of the created door sensor policy. */
    Policy_CreateDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    Policy_CreateOccupancyPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalOccupancyPolicyType"];
    };
    Policy_CreateOccupancyPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Request object for creating a policy addendum for a location. */
    Policy_CreatePolicyAddendumForLocationRequest: {
      /** Set of activities to include in the policy addendum */
      activities?: components["schemas"]["ActivityEnum"][] | null;
      /** Duration in seconds for the policy addendum */
      durationSec?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Scheduled timestamp in seconds for the policy addendum */
      scheduledTimestampSec?: number | null;
    };
    /** Response object for creating a policy addendum for a location. */
    Policy_CreatePolicyAddendumForLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for creating policy addendums for multiple devices. */
    Policy_CreatePolicyAddendumsForDevicesRequest: {
      /** Set of activities to include in the policy addendums */
      activities?: components["schemas"]["ActivityEnum"][] | null;
      /** List of device UUIDs to create policy addendums for */
      deviceUuids?: (string | null)[] | null;
      /** Duration in seconds for the policy addendums */
      durationSec?: number | null;
      /** Scheduled timestamp in seconds for the policy addendums */
      scheduledTimestampSec?: number | null;
    };
    /** Response object for creating policy addendums for multiple devices. */
    Policy_CreatePolicyAddendumsForDevicesResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_CreateProximityPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalProximityPolicyType"];
    };
    Policy_CreateProximityPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Request object for creating a schedule to be used for policy creation. */
    Policy_CreateScheduleWSRequest: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
    };
    /** Response object containing the UUID of the created schedule. */
    Policy_CreateScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    Policy_CreateVideoIntercomPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalVideoIntercomPolicyType"];
    };
    Policy_CreateVideoIntercomPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Request object for deleting an access controlled door policy. */
    Policy_DeleteAccessControlledDoorPolicyWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Response object for deleting an access controlled door policy. */
    Policy_DeleteAccessControlledDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting an audio policy. */
    Policy_DeleteAudioPolicyWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Response object for deleting an audio policy. */
    Policy_DeleteAudioPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a camera policy. */
    Policy_DeleteCameraPolicyWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Response object for deleting a camera policy. */
    Policy_DeleteCameraPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a climate policy. */
    Policy_DeleteClimatePolicyWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Response object for deleting a climate policy. */
    Policy_DeleteClimatePolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting device policy addendums. */
    Policy_DeleteDevicePolicyAddendumsWSRequest: {
      /** List of device policy addendum UUIDs to delete */
      uuids?: (string | null)[] | null;
    };
    /** Response object for deleting device policy addendums. */
    Policy_DeleteDevicePolicyAddendumsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a door sensor policy. */
    Policy_DeleteDoorPolicyWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Response object for deleting a door sensor policy. */
    Policy_DeleteDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a location policy addendum. */
    Policy_DeleteLocationPolicyAddendumWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for deleting a location policy addendum. */
    Policy_DeleteLocationPolicyAddendumWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting an occupancy policy. */
    Policy_DeleteOccupancyPolicyWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Response object for deleting an occupancy policy. */
    Policy_DeleteOccupancyPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a policy pause setting. */
    Policy_DeletePolicyPauseSettingWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for deleting a policy pause setting. */
    Policy_DeletePolicyPauseSettingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a proximity policy. */
    Policy_DeleteProximityPolicyWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Response object for deleting a proximity policy. */
    Policy_DeleteProximityPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a schedule used for policy creation. */
    Policy_DeleteScheduleWSRequest: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Response object for deleting a schedule. */
    Policy_DeleteScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a video intercom policy. */
    Policy_DeleteVideoIntercomPolicyWSRequest: {
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** Response object for deleting a video intercom policy. */
    Policy_DeleteVideoIntercomPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
    };
    /** List of audio policies in the organization */
    Policy_ExternalAudioPolicyType: {
      defaultTriggers?:
        | components["schemas"]["Policy_ExternalAudioTriggerType"][]
        | null;
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_ExternalAudioScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_ExternalAudioScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?:
        | components["schemas"]["Policy_ExternalAudioTriggerType"][]
        | null;
    };
    Policy_ExternalAudioTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      threshold?: number | null;
    };
    /** List of video intercom policies in the organization */
    Policy_ExternalVideoIntercomPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_ExternalVideoIntercomScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_ExternalVideoIntercomScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?:
        | components["schemas"]["Policy_ExternalVideoIntercomTriggerType"][]
        | null;
    };
    Policy_ExternalVideoIntercomTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      faceAlertLabelSet?: (string | null)[] | null;
      faceAlertUnidentified?: boolean | null;
      faceAllowedLabelSet?: (string | null)[] | null;
      lufsThreshold?: number | null;
      peopleCountThreshold?: number | null;
      vehicleAlertLabelSet?: (string | null)[] | null;
      vehicleAlertUnidentified?: boolean | null;
      vehicleAllowedLabelSet?: (string | null)[] | null;
    };
    /** Request object for finding all schedules in the organization. */
    Policy_FindSchedulesWSRequest: { [key: string]: unknown };
    /** Response object containing all schedules in the organization. */
    Policy_FindSchedulesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of schedules in the organization */
      schedules?: components["schemas"]["WeeklyRepeatingScheduleType"][] | null;
    };
    /** Request object for getting all access controlled door policies in the organization. */
    Policy_GetAccessControlledDoorPoliciesWSRequest: { [key: string]: unknown };
    /** Response object containing all access controlled door policies in the organization. */
    Policy_GetAccessControlledDoorPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of access controlled door policies in the organization */
      policies?:
        | components["schemas"]["AccessControlledDoorPolicyType"][]
        | null;
    };
    /** Request object for getting all audio policies in the organization. */
    Policy_GetAudioPoliciesWSRequest: { [key: string]: unknown };
    /** Response object containing all audio policies in the organization. */
    Policy_GetAudioPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of audio policies in the organization */
      policies?:
        | components["schemas"]["Policy_ExternalAudioPolicyType"][]
        | null;
    };
    /** Request object for getting all camera policies in the organization. */
    Policy_GetCameraPoliciesWSRequest: { [key: string]: unknown };
    /** Response object containing all camera policies in the organization. */
    Policy_GetCameraPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of camera policies in the organization */
      policies?: components["schemas"]["CameraPolicyV2Type"][] | null;
    };
    /** Request object for getting all climate policies in the organization. */
    Policy_GetClimatePoliciesWSRequest: { [key: string]: unknown };
    /** Response object containing all climate policies in the organization. */
    Policy_GetClimatePoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of climate policies in the organization */
      policies?: components["schemas"]["ClimatePolicyType"][] | null;
    };
    /** Request object for getting all door sensor policies in the organization. */
    Policy_GetDoorPoliciesWSRequest: { [key: string]: unknown };
    /** Response object containing all door sensor policies in the organization. */
    Policy_GetDoorPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of door sensor policies in the organization */
      policies?: components["schemas"]["DoorPolicyType"][] | null;
    };
    /** Request object for getting all occupancy policies in the organization. */
    Policy_GetOccupancyPoliciesWSRequest: { [key: string]: unknown };
    /** Response object containing all occupancy policies in the organization. */
    Policy_GetOccupancyPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of occupancy policies in the organization */
      policies?: components["schemas"]["OccupancyPolicyType"][] | null;
    };
    /** Request object for getting all policies that use a specific schedule. */
    Policy_GetPoliciesUsingScheduleWSRequest: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Response object containing all policies that use a specific schedule, organized by policy type. */
    Policy_GetPoliciesUsingScheduleWSResponse: {
      /** List of access controlled door policies using the schedule */
      accessControlledDoorPolicyList?:
        | components["schemas"]["AccessControlledDoorPolicyType"][]
        | null;
      /** List of audio policies using the schedule */
      audioPolicyList?: components["schemas"]["AudioPolicyType"][] | null;
      /** List of camera policies using the schedule */
      cameraPolicyList?: components["schemas"]["CameraPolicyV2Type"][] | null;
      /** List of climate policies using the schedule */
      climatePolicyList?: components["schemas"]["ClimatePolicyType"][] | null;
      /** List of door sensor policies using the schedule */
      doorPolicyList?: components["schemas"]["DoorPolicyType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of occupancy policies using the schedule */
      occupancyPolicyList?:
        | components["schemas"]["OccupancyPolicyType"][]
        | null;
      /** List of proximity policies using the schedule */
      proximityPolicyList?:
        | components["schemas"]["ProximityPolicyType"][]
        | null;
      /** List of video intercom policies using the schedule */
      videoIntercomPolicyList?:
        | components["schemas"]["VideoIntercomPolicyType"][]
        | null;
    };
    /** Request object for getting policy addendums. */
    Policy_GetPolicyAddendumsWSRequest: { [key: string]: unknown };
    /** Response object containing policy addendums for devices and locations. */
    Policy_GetPolicyAddendumsWSResponse: {
      /** Map of device UUIDs to their policy addendum scheduled intervals */
      deviceAddendumsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of location UUIDs to their policy addendum scheduled intervals */
      locationAddendumsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
    };
    /** Request object for getting policy pause settings. */
    Policy_GetPolicyPauseSettingsWSRequest: { [key: string]: unknown };
    /** Response object containing policy pause settings for locations, devices, and component composites. */
    Policy_GetPolicyPauseSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of component composite UUIDs to their paused policy scheduled intervals */
      policiesPausedForComponentCompositesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      /** Map of device UUIDs to their paused policy scheduled intervals */
      policiesPausedForDevicesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      /** Map of location UUIDs to their paused policy scheduled intervals */
      policiesPausedForLocationsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
    };
    /** Request object for getting all proximity policies in the organization. */
    Policy_GetProximityPoliciesWSRequest: { [key: string]: unknown };
    /** Response object containing all proximity policies in the organization. */
    Policy_GetProximityPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of proximity policies in the organization */
      policies?: components["schemas"]["ProximityPolicyType"][] | null;
    };
    /** Request object for getting all video intercom policies in the organization. */
    Policy_GetVideoIntercomPoliciesWSRequest: { [key: string]: unknown };
    /** Response object containing all video intercom policies in the organization. */
    Policy_GetVideoIntercomPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of video intercom policies in the organization */
      policies?:
        | components["schemas"]["Policy_ExternalVideoIntercomPolicyType"][]
        | null;
    };
    /** Updated access controlled door policy configuration */
    Policy_MinimalAccessControlledDoorPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalAccessControlledDoorScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_MinimalAccessControlledDoorScheduledTriggerType: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
    };
    /** Updated audio policy configuration */
    Policy_MinimalAudioPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalAudioScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_MinimalAudioScheduledTriggerType: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      triggerSet?:
        | components["schemas"]["Policy_ExternalAudioTriggerType"][]
        | null;
    };
    /** Updated camera policy configuration */
    Policy_MinimalCameraPolicyV2Type: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalCameraScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_MinimalCameraScheduledTriggerType: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["CameraTriggerType"][] | null;
    };
    /** Updated climate policy configuration */
    Policy_MinimalClimatePolicyType: {
      backoffAlertSecs?: { [key: string]: number | null } | null;
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalClimateScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_MinimalClimateScheduledTriggerType: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ClimateTriggerType"][] | null;
    };
    /** Updated door sensor policy configuration */
    Policy_MinimalDoorPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalDoorScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_MinimalDoorScheduledTriggerType: {
      ajarThresholdSec?: number | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
    };
    /** Updated occupancy policy configuration */
    Policy_MinimalOccupancyPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalOccupancyScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_MinimalOccupancyScheduledTriggerType: {
      occupancyThresholdSec?: number | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
      vacancyThresholdSec?: number | null;
    };
    /** Updated proximity policy configuration */
    Policy_MinimalProximityPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalProximityScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_MinimalProximityScheduledTriggerType: {
      departureThresholdSec?: number | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ProximityTriggerType"][] | null;
    };
    /** Updated video intercom policy configuration */
    Policy_MinimalVideoIntercomPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalVideoIntercomScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    Policy_MinimalVideoIntercomScheduledTriggerType: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      triggerSet?:
        | components["schemas"]["Policy_ExternalVideoIntercomTriggerType"][]
        | null;
    };
    /** Request object for pausing alert policies for specified locations, devices, and components. */
    Policy_PauseAlertPolicyWSRequest: {
      /** List of component composite UUIDs to pause alert policies for */
      componentCompositeUuids?: (string | null)[] | null;
      /** List of device UUIDs to pause alert policies for */
      deviceUuids?: (string | null)[] | null;
      /** Duration in seconds to pause alert policies */
      durationSec?: number | null;
      /** List of location UUIDs to pause alert policies for */
      locationUuids?: (string | null)[] | null;
      /** Scheduled timestamp in seconds for when to pause alert policies */
      scheduledTimestampSec?: number | null;
    };
    /** Response object for pausing alert policies. */
    Policy_PauseAlertPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating an access controlled door policy. */
    Policy_UpdateAccessControlledDoorPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalAccessControlledDoorPolicyType"];
    };
    /** Response object for updating an access controlled door policy. */
    Policy_UpdateAccessControlledDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating an audio policy. */
    Policy_UpdateAudioPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalAudioPolicyType"];
    };
    /** Response object for updating an audio policy. */
    Policy_UpdateAudioPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a camera policy. */
    Policy_UpdateCameraPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalCameraPolicyV2Type"];
    };
    /** Response object for updating a camera policy. */
    Policy_UpdateCameraPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a climate policy. */
    Policy_UpdateClimatePolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalClimatePolicyType"];
    };
    /** Response object for updating a climate policy. */
    Policy_UpdateClimatePolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a door sensor policy. */
    Policy_UpdateDoorPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalDoorPolicyType"];
    };
    /** Response object for updating a door sensor policy. */
    Policy_UpdateDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating an occupancy policy. */
    Policy_UpdateOccupancyPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalOccupancyPolicyType"];
    };
    /** Response object for updating an occupancy policy. */
    Policy_UpdateOccupancyPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a proximity policy. */
    Policy_UpdateProximityPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalProximityPolicyType"];
    };
    /** Response object for updating a proximity policy. */
    Policy_UpdateProximityPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a schedule used for policy creation. */
    Policy_UpdateScheduleWSRequest: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
    };
    /** Response object for updating a schedule. */
    Policy_UpdateScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a video intercom policy. */
    Policy_UpdateVideoIntercomPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalVideoIntercomPolicyType"];
    };
    /** Response object for updating a video intercom policy. */
    Policy_UpdateVideoIntercomPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    PortSupervisionConfigurationType: {
      mode?: components["schemas"]["SupervisionModeEnumType"];
    };
    /** A HashMap of <Service Area Guid, PosIntegrationInfoType>. This stores the Pos Information and assigned cameras. */
    PosIntegrationInfoType: {
      /** A list of camera guids from Rhombus that are assigned to the Pos device. */
      assignedCameraList?: (string | null)[] | null;
      /** The name of the Pos device. */
      posName?: string | null;
    };
    PressureSensorType: {
      pressure?: number | null;
      tempC?: number | null;
      timestampSec?: number | null;
    };
    ProDataKeySettings: {
      alertUnauthorizedFaces?: boolean | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      misconfiguredDoors?: (string | null)[] | null;
      ouId?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: string | null;
      webhookSignatureSecret?: string | null;
    };
    ProDataKeyType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          organizationId?: string | null;
          refreshToken?: string | null;
          /** base 64 (url-safe) uuid string */
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          systemId?: string | null;
          tokenValid?: boolean | null;
          webhookId?: string | null;
          webhookSignatureSecret?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    Product: {
      description?: string | null;
      productId?: string | null;
      productIdQualifier?: string | null;
      quantity?: number | null;
    };
    /** Updated prompt configuration */
    PromptConfigurationType: {
      active?: boolean | null;
      cameraConfigurations?:
        | components["schemas"]["CameraConfiguration"][]
        | null;
      checkCondition?: components["schemas"]["CheckCondition"];
      description?: string | null;
      generateAlertForActionNewlyAddedCameras?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      prompt?: string | null;
      promptType?: PromptConfigurationPromptTypeEnum | null;
      reportsEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      shortName?: string | null;
      trigger?: components["schemas"]["Trigger"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    PromptFrequency: {
      frequency?: number | null;
      unit?: components["schemas"]["FrequencyUnit"];
    };
    Providers: { [key: string]: unknown } | null;
    ProximityArrivedActivityEventType:
      | ({
          proximityTagLocationUuids?: (string | null)[] | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    ProximityDepartedActivityEventType:
      | ({
          departureThresholdSecs?: number | null;
          proximityTagLocationUuids?: (string | null)[] | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    /** List of proximity events for the specified tag */
    ProximityEventType: {
      /** base 64 (url-safe) uuid string */
      baseStationUuid?: string | null;
      batteryPercentage?: number | null;
      /** base 64 (url-safe) uuid string */
      bleDeviceUuid?: string | null;
      bleRssi?: number | null;
      closeBaseStations?: (string | null)[] | null;
      endTimeMs?: number | null;
      gpsLocation?: components["schemas"]["GeodeticCoordinates"];
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      startTimeMs?: number | null;
      status?: ProximityEventStatusEnum | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
    };
    /** List of proximity policies in the organization */
    ProximityPolicyType: {
      defaultDepartureThresholdSec?: number | null;
      defaultTriggers?: components["schemas"]["ProximityTriggerType"][] | null;
      description?: string | null;
      egressThresholdMetersMap?: { [key: string]: number | null } | null;
      ingressThresholdMetersMap?: { [key: string]: number | null } | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["ProximityScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ProximityScheduledTriggerType: {
      departureThresholdSec?: number | null;
      egressThresholdMetersMap?: { [key: string]: number | null } | null;
      ingressThresholdMetersMap?: { [key: string]: number | null } | null;
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ProximityTriggerType"][] | null;
    };
    /** List of locomotion events for the specified tag */
    ProximityTagLocomotionEventType: {
      /** base 64 (url-safe) uuid string */
      baseStationUuid?: string | null;
      gpsLocation?: components["schemas"]["GeodeticCoordinates"];
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      movement?: ProximityTagLocomotionEventMovementEnum | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** base 64 (url-safe) uuid string */
      tagUuid?: string | null;
      timestampMs?: number | null;
    };
    /** List of proximity tag time series data points */
    ProximityTagTimeSeriesDataPointType: {
      dateLocal?: string | null;
      /** base 64 (url-safe) uuid string */
      tagUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ProximityTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      locationUuids?: (string | null)[] | null;
    };
    ProximityUnlockSettingsType: {
      credCooldownSec?: number | null;
      enabled?: boolean | null;
      exitResetsCooldown?: boolean | null;
      holdUnlocked?: boolean | null;
      holdUnlockedEventIntervalSec?: number | null;
      maxHoldUnlockedTimeSec?: number | null;
      minHoldUnlockedTimeSec?: number | null;
      minRSSIThreshold?: number | null;
    };
    ProximityUnlockSettingsType_Minimal: {
      enabled?: boolean | null;
      minRSSIThreshold?: number | null;
    };
    /** Request object for getting locomotion events for a specified proximity tag with filtering options. */
    Proximity_GetLocomotionEventsForTagWSRequest: {
      /** Filter events created after this timestamp in milliseconds */
      createdAfterMs?: number | null;
      /** Filter events created before this timestamp in milliseconds */
      createdBeforeMs?: number | null;
      /** Maximum number of events to return */
      limit?: number | null;
      /** Filter events by locomotion movement type */
      movementFilter?: GetLocomotionEventsForTagWSRequestMovementFilterEnum | null;
      /** base 64 (url-safe) uuid string */
      tagUuid?: string | null;
    };
    /** Response object containing locomotion events for a specified proximity tag. */
    Proximity_GetLocomotionEventsForTagWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of locomotion events for the specified tag */
      locomotionEvents?:
        | components["schemas"]["ProximityTagLocomotionEventType"][]
        | null;
    };
    /** Request object for getting basic state information about all proximity tags in the organization. */
    Proximity_GetMinimalProximityStatesWSRequest: { [key: string]: unknown };
    /** Response object containing basic state information about all proximity tags in the organization. */
    Proximity_GetMinimalProximityStatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of minimal proximity state information for all tags in the organization */
      proximityStates?:
        | components["schemas"]["Proximity_MinimalProximityStateType"][]
        | null;
    };
    /** Request object for getting recent events for a specified proximity tag with filtering options. */
    Proximity_GetProximityEventsForTagWSRequest: {
      /** Filter events created after this timestamp in milliseconds */
      createdAfterMs?: number | null;
      /** Filter events created before this timestamp in milliseconds */
      createdBeforeMs?: number | null;
      /** Maximum number of events to return */
      limit?: number | null;
      /** Filter events by proximity status */
      statusFilter?: GetProximityEventsForTagWSRequestStatusFilterEnum | null;
      /** base 64 (url-safe) uuid string */
      tagUuid?: string | null;
    };
    /** Response object containing recent events for a specified proximity tag. */
    Proximity_GetProximityEventsForTagWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of proximity events for the specified tag */
      proximityEvents?: components["schemas"]["ProximityEventType"][] | null;
    };
    /** Minimal proximity state information for a proximity tag. */
    Proximity_MinimalProximityStateType: {
      /** Battery percentage of the proximity tag */
      batteryPercent?: number | null;
      /** Timestamp when the proximity tag was created in milliseconds */
      createdAtMillis?: number | null;
      /** Firmware version of the proximity tag */
      firmwareVersion?: string | null;
      gpsLocation?: components["schemas"]["GeodeticCoordinates"];
      health?: components["schemas"]["Proximity_ProximityHealthEnum"];
      healthDetails?: components["schemas"]["Proximity_ProximityHealthDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** URL of the image for the proximity tag */
      imageUrl?: string | null;
      /** Timestamp when the proximity tag was last seen in seconds */
      lastSeenSec?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Name of the proximity tag */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Serial number of the proximity tag */
      serialNumber?: string | null;
      /** Signal strength of the proximity tag */
      signalStrength?: number | null;
      /** Current status of the proximity tag */
      status?: MinimalProximityStateStatusEnum | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** base 64 (url-safe) uuid string */
      tagUuid?: string | null;
    };
    /** Detailed health information for the proximity tag */
    Proximity_ProximityHealthDetailsEnum: Proximity_ProximityHealthDetailsEnum;
    /** Health status of the proximity tag */
    Proximity_ProximityHealthEnum: Proximity_ProximityHealthEnum;
    /** Request object for updating details for a proximity tag. */
    Proximity_UpdateProximitySensorDetailsWSRequest: {
      /** Whether the deleted status has been updated */
      deletedUpdated?: boolean | null;
      /** Description of the proximity tag */
      description?: string | null;
      /** Whether the description has been updated */
      descriptionUpdated?: boolean | null;
      /** URL of the image for the proximity tag */
      imageUrl?: string | null;
      /** Whether the image URL has been updated */
      imageUrlUpdated?: boolean | null;
      /** Name of the proximity tag */
      name?: string | null;
      /** Whether the name has been updated */
      nameUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      /** Whether the policy UUID has been updated */
      policyUuidUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for updating details for a proximity tag. */
    Proximity_UpdateProximitySensorDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Optionally present qualified address after some validation.  Used for Alarm Monitoring if available. */
    QualifiedAddressType: {
      /** apt, suite, or unit */
      addressLine2?: string | null;
      /** street address */
      addressline1?: string | null;
      /** state */
      administrativeArea?: string | null;
      /** city */
      locality?: string | null;
      /** zip code */
      postalCode?: string | null;
      /** country */
      regionCode?: string | null;
    };
    QueryStatus: QueryStatusEnum;
    QueryTimelineEvent: {
      status?: components["schemas"]["QueryStatus"];
      timestampMs?: number | null;
    };
    QueryTool: {
      content?: string | null;
      contentType?: string | null;
      extra?: string | null;
      role?: string | null;
      timestampMs?: number | null;
      tool?: string | null;
    };
    RBACSettingsType: {
      enabled?: boolean | null;
    };
    RMARequest: {
      formSubmitted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      requestUuid?: string | null;
      rmaOpportunityId?: string | null;
      salesforceAccountId?: string | null;
      salesforcePartnerContactId?: string | null;
      salesforcePartnerId?: string | null;
    };
    /** List of RMAs (Return Merchandise Authorizations) */
    RMAType: {
      address?: string | null;
      advancedRMAs?: components["schemas"]["AdvancedRMAType"];
      briefDescription?: string | null;
      city?: string | null;
      costInDollars?: number | null;
      country?: string | null;
      customerUnresponsive?: boolean | null;
      deleted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      errorCode?: RMAErrorCodeEnum | null;
      failureDiagnostics?: (string | null)[] | null;
      fedExReturnLabelSent?: boolean | null;
      finalNotes?: string | null;
      /** base 64 (url-safe) uuid string */
      hardwareUuid?: string | null;
      initialFirmwareVersion?: string | null;
      initiatedBy?: string | null;
      inventoryNeeded?: string | null;
      inventoryNeededMap?: { [key: string]: string | null } | null;
      isRefurbished?: boolean | null;
      knownIssue?: boolean | null;
      lastRecordedFirmwareVersion?: string | null;
      lastUpdatedAtSec?: number | null;
      lastUpdatedBy?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      postalCode?: string | null;
      prevShippingInfoUsedBy?: string | null;
      prevShippingInfoUsedByAtSec?: number | null;
      proactiveReplacement?: boolean | null;
      recipientName?: string | null;
      recipientPhoneNumber?: string | null;
      replacementCourier?: string | null;
      /** base 64 (url-safe) uuid string */
      replacementHardwareUuid?: string | null;
      replacementTrackingNumber?: string | null;
      requesterEmailAddress?: string | null;
      returnLabelRequestedUpdatedAtSec?: number | null;
      returnLabelSent?: boolean | null;
      returnLabelSentUpdatedAtSec?: number | null;
      returnTrackingNumber?: string | null;
      rmaRequest?: components["schemas"]["RMARequest"];
      /** base 64 (url-safe) uuid string */
      rmaRequestUuid?: string | null;
      sdCardReplaced?: boolean | null;
      shipmentMethod?: RMAShipmentMethodEnum | null;
      shipmentRequested?: boolean | null;
      shipmentRequestedBy?: string | null;
      shipmentRequestedUpdatedAtSec?: number | null;
      shipmentSent?: boolean | null;
      shipmentSentUpdatedAtSec?: number | null;
      skipAutoRegistration?: boolean | null;
      state?: string | null;
      status?: RMAStatusEnum | null;
      storageCid?: string | null;
      street?: string | null;
      timestampSec?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      warehouseInventoryNeeded?: boolean | null;
      zenDeskTicketAssigneeEmail?: string | null;
      zenDeskTicketSubject?: string | null;
      zendeskTicket?: number | null;
    };
    /** Request object for getting the closest 10 feeds by latitude and longitude. */
    Rapidsos_GetNearbyFeedsRequest: {
      /** Latitude coordinate for finding nearby feeds */
      latitude?: number | null;
      /** Longitude coordinate for finding nearby feeds */
      longitude?: number | null;
      /** Width parameter for the search area */
      width?: number | null;
    };
    /** Response object containing the closest 10 feed stream URLs by latitude and longitude. */
    Rapidsos_GetNearbyFeedsResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of stream URLs for the closest 10 feeds */
      streamUrls?: (string | null)[] | null;
    };
    RaptorBuilding: {
      name?: string | null;
      uid?: string | null;
    };
    RaptorTemplate: {
      name?: string | null;
      uId?: string | null;
      uid?: string | null;
    };
    RaptorType:
      | ({
          apiToken?: string | null;
          clientId?: string | null;
          clientSecret?: string | null;
          clientUid?: string | null;
          refreshToken?: string | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    RealtimeRelativeSecondsScheduleType:
      | ({
          pastSeconds?: number | null;
        } & {
          mutable?: boolean | null;
          name?: string | null;
          oneTimeUse?: boolean | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          strategy?: RealtimeRelativeSecondsScheduleStrategyEnum | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    RecurringRuleTriggerType:
      | ({
          /** Optional list of locations to specify timezones for evaluation. Note that if not specified, then we rely on the Actions to derive timezones. */
          locationUuids?: (string | null)[] | null;
          /** Interval of timeUnit to re-occur at. i.e. trigger every 5 minutes, repeatInerval would be 5 */
          repeatInterval?: number | null;
          timeUnit?: components["schemas"]["RecurringTimeUnit"];
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    /** Time unit of recurrence. i.e. trigger every 5 minutes, timeUnit would be MINUTES */
    RecurringTimeUnit: RecurringTimeUnitEnum;
    RegionConfigType: {
      inverted?: boolean | null;
      polygons?: components["schemas"]["RegionPolygonType"][] | null;
    };
    RegionCoordinateType: {
      x?: number | null;
      y?: number | null;
    };
    RegionCrossingActivityEventType: {
      activityEvent?: components["schemas"]["ActivityEnum"];
    } | null;
    /** Regions of interest that belong to the group. Group must have at least one region specified. */
    RegionOfInterest: {
      /** Region of allowed or disallowed activities. Activities are allowed if region group is inclusive. Activities are disallowed if region group is exclusive. Region must have at least one activity specified. */
      activities?: components["schemas"]["ActivityEnum"][] | null;
      name?: string | null;
      polygon?: components["schemas"]["RegionPolygonType"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    RegionOfInterestGroup: {
      /** If true, regions in this group include specified activities. If false, regions in this group exclude specified activities. */
      inclusive?: boolean | null;
      /** Regions of interest that belong to the group. Group must have at least one region specified. */
      regionsOfInterest?: components["schemas"]["RegionOfInterest"][] | null;
      /** Represents type of activity regions in the group. Defaults to 'Activity'. */
      type?: RegionOfInterestGroupTypeEnum | null;
    };
    RegionPolygonType: {
      coordinates?: components["schemas"]["RegionCoordinateType"][] | null;
    };
    RelativeDateTimeIntervalsScheduleType:
      | ({
          intervals?:
            | components["schemas"]["LocalDateTimeIntervalType"][]
            | null;
        } & {
          mutable?: boolean | null;
          name?: string | null;
          oneTimeUse?: boolean | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          strategy?: RelativeDateTimeIntervalsScheduleStrategyEnum | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    /** Request object for assigning a third-party camera to an NVR. */
    Relay_AssignThirdPartyCameraToNVRWSRequest: {
      /** MAC address of the discovered camera to assign */
      discoveredCameraMacAddress?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Name for the third-party camera */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      nvruuid?: string | null;
      /** RTSP URL for the camera stream */
      rtspUrl?: string | null;
    };
    /** Response object for assigning a third-party camera to an NVR. */
    Relay_AssignThirdPartyCameraToNVRWSResponse: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for assigning a third-party camera to a relay camera. */
    Relay_AssignThirdPartyCameraToRelayCameraWSRequest: {
      /** MAC address of the discovered camera to assign */
      discoveredCameraMacAddress?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Name for the third-party camera */
      name?: string | null;
      /** RTSP URL for the camera stream */
      rtspUrl?: string | null;
    };
    /** Response object for assigning a third-party camera to a relay camera. */
    Relay_AssignThirdPartyCameraToRelayCameraWSResponse: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for authenticating a third-party camera with RTSP URL. */
    Relay_AuthenticateThirdPartyCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Password to access the RTSP URL. This field MUST be non-empty if trySavedCredentials is false */
      password?: string | null;
      /** The RTSP URL of the third-party camera. This RTSP URL should reference a stream that provides H.264 encoded video */
      rtspUrl?: string | null;
      /** The MAC address of the third-party camera this request is operating on */
      thirdPartyCameraMacAddress?: string | null;
      /** Whether the third-party credentials saved in the account should be used when trying to validate whether the provided RTSP URL is valid */
      trySavedCredentials?: boolean | null;
      /** Username to access the RTSP URL. This field MUST be non-empty if trySavedCredentials is false */
      username?: string | null;
    };
    /** Response object for authenticating a third-party camera with RTSP URL. */
    Relay_AuthenticateThirdPartyCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      result?: components["schemas"]["DiscoveredThirdPartyCameraType"];
      /** Status of the RTSP URL validation */
      rtspUrlStatus?: AuthenticateThirdPartyCameraWSResponseRtspUrlStatusEnum | null;
    };
    /** Request object for creating a third-party camera password. */
    Relay_CreateThirdPartyCameraPasswordWSRequest: {
      /** Notes for the password entry */
      notes?: string | null;
      /** Password for the third-party camera */
      password?: string | null;
      /** Username for the third-party camera */
      username?: string | null;
    };
    /** Response object for creating a third-party camera password. */
    Relay_CreateThirdPartyCameraPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      passwordUuid?: string | null;
    };
    /** Request object for deleting a third-party camera password. */
    Relay_DeleteThirdPartyCameraPasswordWSRequest: {
      /** base 64 (url-safe) uuid string */
      passwordUuid?: string | null;
    };
    /** Response object for deleting a third-party camera password. */
    Relay_DeleteThirdPartyCameraPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Discovery information with unassigned RTSP endpoints available for assignment. */
    Relay_DiscoveryWithUnassignedRtspEndpoints: {
      /** Codec of the discovered device */
      codec?: string | null;
      /** IP address of the discovered device */
      ipAddress?: string | null;
      /** MAC address of the discovered device */
      macAddress?: string | null;
      /** Manufacturer of the discovered device */
      manufacturer?: string | null;
      /** Model of the discovered device */
      model?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** List of unassigned RTSP endpoints that are available for assignment. Contains only endpoints with status GOOD and that are not currently assigned. */
      unassignedRtspEndpoints?:
        | components["schemas"]["Relay_ExternalRtspEndpoint"][]
        | null;
    };
    /** Request object for executing third-party camera discovery. */
    Relay_ExecuteThirdPartyCameraDiscoveryWSRequest: {
      /** Set of device UUIDs to filter discovery by */
      deviceFilter?: (string | null)[] | null;
      /** Set of location UUIDs to filter discovery by */
      locationFilter?: (string | null)[] | null;
    };
    /** Response object for executing third-party camera discovery. */
    Relay_ExecuteThirdPartyCameraDiscoveryWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** External RTSP endpoint configuration for camera streams. */
    Relay_ExternalRtspEndpoint: {
      /** Last known status of the RTSP URL */
      lastRtspUrlStatus?: ExternalRtspEndpointLastRtspUrlStatusEnum | null;
      /** Password for RTSP authentication */
      password?: string | null;
      /** RTSP URL for the camera stream */
      rtspUrl?: string | null;
      source?: components["schemas"]["RtspEndpointSource"];
      /** Username for RTSP authentication */
      username?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for finding default RTSP URLs by camera manufacturer and model. */
    Relay_FindDefaultRtspUrlsByManufacturerWSRequest: {
      /** Required manufacturer filter for finding default RTSP URLs */
      manufacturer?: string | null;
      /** Optional model filter for finding default RTSP URLs */
      model?: string | null;
    };
    /** Response object containing default RTSP URLs and paths for a camera manufacturer and model. */
    Relay_FindDefaultRtspUrlsByManufacturerWSResponse: {
      /** List of path components extracted from the default RTSP URLs */
      defaultPaths?: (string | null)[] | null;
      /** List of default RTSP URLs for the manufacturer and model */
      defaultUrls?: (string | null)[] | null;
    };
    /** Request object for finding discoveries with unassigned RTSP endpoints. */
    Relay_FindDiscoveriesWithUnassignedRtspEndpointsWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing discoveries with unassigned RTSP endpoints. */
    Relay_FindDiscoveriesWithUnassignedRtspEndpointsWSResponse: {
      /** List of discoveries with unassigned RTSP endpoints */
      discoveries?:
        | components["schemas"]["Relay_DiscoveryWithUnassignedRtspEndpoints"][]
        | null;
    };
    /** Request object for getting third-party cameras assigned to a specific NVR. */
    Relay_GetAssignedThirdPartyCamerasWSRequest: {
      /** base 64 (url-safe) uuid string */
      nvruuid?: string | null;
    };
    /** Response object containing third-party cameras assigned to a specific NVR. */
    Relay_GetAssignedThirdPartyCamerasWSResponse: {
      /** List of third-party cameras assigned to the specified NVR */
      assignedCameras?: components["schemas"]["CameraType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting detailed information about the state of a specified NVR. */
    Relay_GetFullNVRStateWSRequest: {
      /** Whether to force refresh the NVR state */
      force?: boolean | null;
      /** RUUID with optional appended facet information */
      nvruuid?: string | null;
    };
    /** Response object containing detailed information about the state of a specified NVR. */
    Relay_GetFullNVRStateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      fullNVRState?: components["schemas"]["FullDeviceStateType"];
    };
    /** Response object for getting the import format for third-party cameras. */
    Relay_GetImportThirdPartyCamerasFormatWSResponse: {
      /** Example of the import format */
      example?: string | null;
      /** Explanation of the import format */
      explanation?: string | null;
    };
    /** Request object for getting basic state information about all NVRs in the organization. */
    Relay_GetMinimalNVRStateListWSRequest: { [key: string]: unknown };
    /** Response object containing basic state information about all NVRs in the organization. */
    Relay_GetMinimalNVRStateListWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of minimal NVR state information for all NVRs in the organization */
      nvrstates?: components["schemas"]["MinimalNVRStateType"][] | null;
    };
    /** Request object for getting basic state information about all third-party cameras in the organization. */
    Relay_GetMinimalThirdPartyCameraStateListWSRequest: {
      [key: string]: unknown;
    };
    /** Response object containing basic state information about all third-party cameras in the organization. */
    Relay_GetMinimalThirdPartyCameraStateListWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of minimal third-party camera state information for all cameras in the organization */
      thirdPartyCameraStateList?:
        | components["schemas"]["Relay_MinimalThirdPartyCameraStateType"][]
        | null;
    };
    /** Request object for getting details for specified NVRs. */
    Relay_GetNVRDetailsWSRequest: {
      /** List of NVR UUIDs to get details for */
      nvruuids?: (string | null)[] | null;
    };
    /** Response object containing details for specified NVRs. */
    Relay_GetNVRDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of NVR details for the specified NVRs */
      nvrs?: components["schemas"]["Relay_NVRExternalType"][] | null;
    };
    /** Request object for getting RTSP endpoints for a device with the specified MAC address. */
    Relay_GetRtspEndpointsWSRequest: {
      /** MAC address of the discovered camera to get RTSP endpoints for */
      discoveredCameraMacAddress?: string | null;
    };
    /** Response object containing RTSP endpoints for a device with the specified MAC address. */
    Relay_GetRtspEndpointsWSResponse: {
      /** List of RTSP endpoints for the discovered camera */
      rtspEndpoints?:
        | components["schemas"]["Relay_ExternalRtspEndpoint"][]
        | null;
    };
    /** Request object for getting third-party camera passwords. */
    Relay_GetThirdPartyCameraPasswordsWSRequest: { [key: string]: unknown };
    /** Response object containing third-party camera passwords. */
    Relay_GetThirdPartyCameraPasswordsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of third-party camera passwords */
      passwords?:
        | components["schemas"]["ThirdPartyCameraPasswordType"][]
        | null;
    };
    /** Response object for importing third-party cameras. */
    Relay_ImportThirdPartyCamerasWSResponse: {
      /** List of import results for third-party cameras */
      importResults?:
        | components["schemas"]["Relay_ThirdPartyCameraImportResult"][]
        | null;
      /** List of messages from the import operation */
      messages?: (string | null)[] | null;
    };
    /** Request object for manually discovering a third-party camera with RTSP URL. */
    Relay_ManualDiscoverThirdPartyCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Password to access the RTSP URL. This field MUST be non-empty if trySavedCredentials is false */
      password?: string | null;
      /** The RTSP URL of the third-party camera being manually added. This RTSP URL should reference a stream that provides H.264 encoded video */
      rtspUrl?: string | null;
      /** Whether the third-party credentials saved in the account should be used when trying to validate whether the provided RTSP URL is valid */
      trySavedCredentials?: boolean | null;
      /** Username to access the RTSP URL. This field MUST be non-empty if trySavedCredentials is false */
      username?: string | null;
    };
    /** Response object for manually discovering a third-party camera with RTSP URL. */
    Relay_ManualDiscoverThirdPartyCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      result?: components["schemas"]["DiscoveredThirdPartyCameraType"];
      /** Status of the RTSP URL validation */
      rtspUrlStatus?: ManualDiscoverThirdPartyCameraWSResponseRtspUrlStatusEnum | null;
    };
    /** Minimal third-party camera state information. */
    Relay_MinimalThirdPartyCameraStateType: {
      /** RUUID with optional appended facet information */
      assignedNVRUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      assignedRelayCameraUuid?: string | null;
      /** Codec used by the third-party camera */
      codec?: string | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      /** base 64 (url-safe) uuid string */
      discoveredByDeviceUuid?: string | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      /** Last known status of the RTSP URL */
      lastRtspUrlStatus?: MinimalThirdPartyCameraStateLastRtspUrlStatusEnum | null;
      /** Map of location UUID to last time this third-party device was known to be visible */
      lastVisibleLocationMs?: { [key: string]: number | null } | null;
      /** Map of device UUID to last time this third-party device was known to be visible */
      lastVisibleMs?: { [key: string]: number | null } | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      /** Manufacturer of the third-party camera */
      manufacturer?: string | null;
      mediaRegion?: string | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      /** Model of the third-party camera */
      model?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      region?: string | null;
      /** RTSP URL for the third-party camera stream */
      rtspUrl?: string | null;
      secondaryLanAddresses?: (string | null)[] | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    /** External NVR type with secondary static IP address support. */
    Relay_NVRExternalType: {
      archiveRegion?: string | null;
      cameraFramerate?: number | null;
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      deviceFacetRadians?: { [key: string]: number | null } | null;
      directionRadians?: number | null;
      facetNameMap?: { [key: string]: string | null } | null;
      floorNumber?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      latitude?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      longitude?: number | null;
      /** RUUID with optional appended facet information */
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      pending?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      serialNumber?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      type?: components["schemas"]["DeviceTypeEnum"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for moving a PTZ camera. */
    Relay_PTZMoveWSRequest: {
      /** base 64 (url-safe) uuid string */
      thirdPartyCameraUuid?: string | null;
      /** X-axis movement in permyriad units */
      xmovementPermyriad?: number | null;
      /** Y-axis movement in permyriad units */
      ymovementPermyriad?: number | null;
      /** Z-axis movement in permyriad units */
      zmovementPermyriad?: number | null;
    };
    /** Response object for moving a PTZ camera. */
    Relay_PTZMoveWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting PTZ status of a camera. */
    Relay_PTZStatusWSRequest: {
      /** base 64 (url-safe) uuid string */
      thirdPartyCameraUuid?: string | null;
    };
    /** Response object containing PTZ status of a camera. */
    Relay_PTZStatusWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Current X-axis position in permyriad units */
      xpositionPermyriad?: number | null;
      /** Current Y-axis position in permyriad units */
      ypositionPermyriad?: number | null;
      /** Current Z-axis position in permyriad units */
      zpositionPermyriad?: number | null;
    };
    /** Request object for rebooting an NVR. */
    Relay_RebootNVRVWSRequest: {
      /** base 64 (url-safe) uuid string */
      nvrUuid?: string | null;
    };
    /** Response object for rebooting an NVR. */
    Relay_RebootNVRVWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Result of the reboot operation */
      result?: RebootNVRVWSResponseResultEnum | null;
    };
    /** Result of importing a third-party camera. */
    Relay_ThirdPartyCameraImportResult: {
      discoveredThirdPartyCamera?: components["schemas"]["DiscoveredThirdPartyCameraType"];
      /** Message describing the import result */
      message?: string | null;
      /** RTSP URL that was imported */
      rtspUrl?: string | null;
      /** Status of the RTSP URL validation */
      urlStatus?: ThirdPartyCameraImportResultUrlStatusEnum | null;
    };
    /** Request object for unassigning a third-party camera from an NVR. */
    Relay_UnassignThirdPartyCameraWSRequest: {
      /** RUUID with optional appended facet information */
      nvruuid?: string | null;
      /** RTSP URL of the camera to unassign */
      rtspUrl?: string | null;
      /** MAC address of the third-party camera to unassign */
      thirdPartyCameraMacAddress?: string | null;
    };
    /** Response object for unassigning a third-party camera from an NVR. */
    Relay_UnassignThirdPartyCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for unregistering an NVR from the system. */
    Relay_UnregisterNVRWSRequest: {
      /** base 64 (url-safe) uuid string */
      nvruuid?: string | null;
    };
    /** Response object for unregistering an NVR from the system. */
    Relay_UnregisterNVRWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the unregister operation */
      responseStatus?: UnregisterNVRWSResponseResponseStatusEnum | null;
    };
    /** Status enumeration for firmware update web service responses. */
    Relay_UpdateFirmwareWSStatus: Relay_UpdateFirmwareWSStatusEnum;
    /** Request object for updating NVR firmware. */
    Relay_UpdateNVRFirmwareWSRequest: {
      /** base 64 (url-safe) uuid string */
      nvruuid?: string | null;
    };
    /** Response object for updating NVR firmware. */
    Relay_UpdateNVRFirmwareWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      status?: components["schemas"]["Relay_UpdateFirmwareWSStatus"];
    };
    /** Request object for updating NVR details. */
    Relay_UpdateNVRVWSRequest: {
      customData?: string | null;
      customDataUpdated?: boolean | null;
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      /** Description of the NVR */
      description?: string | null;
      descriptionUpdated?: boolean | null;
      directionRadians?: number | null;
      directionRadiansUpdated?: boolean | null;
      /** Map of device facets to their names */
      facetNameMap?: { [key: string]: string | null } | null;
      facetNameMapUpdated?: boolean | null;
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      mummified?: boolean | null;
      mummifiedUpdated?: boolean | null;
      /** Name of the NVR */
      name?: string | null;
      nameUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for updating NVR details. */
    Relay_UpdateNVRVWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    RemoteDoorUnlockActionType: {
      doorId?: string | null;
      placeId?: string | null;
      system?: components["schemas"]["RemoteDoorUnlockSystemEnum"];
    };
    RemoteDoorUnlockSystemEnum: RemoteDoorUnlockSystemEnum;
    RenewalClaimKey:
      | ({
          entries?: {
            [key: string]: components["schemas"]["ClaimKeyEntry"];
          } | null;
        } & {
          /** Date/time when claiming of licenses represented by this claim key ended successfully. */
          claimEndDate?: string | null;
          /** Date/time when claiming of licenses represented by this claim key started. */
          claimStartDate?: string | null;
          createdOn?: string | null;
          endDate?: string | null;
          expirationEmailState?: RenewalClaimKeyExpirationEmailStateEnum | null;
          gracePeriodEndDate?: string | null;
          /** Masked claim code for redeemed claim keys. This field can be used for reference purposes. */
          maskedClaimCode?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          renewedByClaimKeyUuid?: string | null;
          /** Externally supplied request id to prevent creation of unnecessary claim keys due to reprocessing or bugs. Unnecessary claim keys are claim keys that are not tied to anything in the external system.  This property is unique for all claim keys. */
          requestId?: string | null;
          returnHistory?: components["schemas"]["ClaimKeyReturnEvent"][] | null;
          state?: RenewalClaimKeyStateEnum | null;
          trial?: boolean | null;
          type?: RenewalClaimKeyTypeEnum | null;
          updatedOn?: string | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    /** Web representation of an audit event. */
    Report_AuditEventWeb: {
      FOOBAR?: string | null;
      action?: AuditEventWebActionEnum | null;
      asi?: string | null;
      clientType?: components["schemas"]["Client"];
      /** Display text for the audit event */
      displayText?: string | null;
      /** Whether the audit event represents a failure */
      failure?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      principalName?: string | null;
      principalType?: AuditEventWebPrincipalTypeEnum | null;
      /** base 64 (url-safe) uuid string */
      principalUuid?: string | null;
      selectiveUpdateStr?: string | null;
      sourceCity?: string | null;
      sourceCountry?: string | null;
      sourceIp?: string | null;
      sourceState?: string | null;
      targetName?: string | null;
      /** base 64 (url-safe) uuid string */
      targetUuid?: string | null;
      timestamp?: string | null;
      userAgent?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for getting audit feed for a specific target. */
    Report_GetAuditFeedForTargetWSRequest: {
      /** Max number of audit records to retrieve */
      maxResults?: number | null;
      /** base 64 (url-safe) uuid string */
      targetUuid: string | null;
    };
    /** Response object for getting audit feed for a specific target. */
    Report_GetAuditFeedForTargetWSResponse: {
      /** List of audit events for the target */
      auditEvents?: components["schemas"]["Report_AuditEventWeb"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting audit feed. */
    Report_GetAuditFeedWSRequest: {
      /** If not empty, events with actions specified in the list are filtered out. If both include and exclude actions are specified, exclude actions are ignored. */
      excludeActions?: (GetAuditFeedWSRequestExcludeActionsEnum | null)[] | null;
      /** If not empty, only events with actions specified in the list are returned. If both include and exclude actions are specified, exclude actions are ignored. */
      includeActions?: (GetAuditFeedWSRequestIncludeActionsEnum | null)[] | null;
      /** Timestamp in milliseconds after which to get audit events */
      timestampMsAfter?: number | null;
      /** Timestamp in milliseconds before which to get audit events */
      timestampMsBefore?: number | null;
    };
    /** Response object for getting audit feed. */
    Report_GetAuditFeedWSResponse: {
      /** List of audit events */
      auditEvents?: components["schemas"]["Report_AuditEventWeb"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting average reports. */
    Report_GetAverageReportWSRequest: {
      /** End date for the report */
      endDate?: string | null;
      /** Time interval for the report */
      interval?: GetAverageReportWSRequestIntervalEnum | null;
      /** Scope of the report */
      scope?: GetAverageReportWSRequestScopeEnum | null;
      /** Start date for the report */
      startDate?: string | null;
      /** Type of report to get */
      type?: GetAverageReportWSRequestTypeEnum | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for getting average reports. */
    Report_GetAverageReportWSResponse: {
      /** Overall average value */
      average?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of group IDs to their average values */
      groupAverageMap?: { [key: string]: number | null } | null;
    };
    /** Request object for getting average reports. */
    Report_GetAverageReportsWSRequest: {
      /** End date for the report */
      endDate?: string | null;
      /** Time interval for the report */
      interval?: GetAverageReportsWSRequestIntervalEnum | null;
      /** Scope of the report */
      scope?: GetAverageReportsWSRequestScopeEnum | null;
      /** Start date for the report */
      startDate?: string | null;
      /** Type of report to get */
      type?: GetAverageReportsWSRequestTypeEnum | null;
    };
    /** Response object for getting average reports. */
    Report_GetAverageReportsWSResponse: {
      /** Map of UUIDs to their average values */
      averageMap?: { [key: string]: number | null } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of UUIDs to their group average maps */
      groupAverageMap?: {
        [key: string]: { [key: string]: number | null } | null;
      } | null;
    };
    /** Request object for getting count reports V2. */
    Report_GetCountReportV2WSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDate?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Time intervals to get reports for */
      interval: GetCountReportV2WSRequestIntervalEnum | null;
      /** Level of granularity to get reports for */
      scope: GetCountReportV2WSRequestScopeEnum | null;
      /** Deprecated input, use startTimeMs instead */
      startDate?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** Types of reports to receive */
      types: (GetCountReportV2WSRequestTypesEnum | null)[] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for getting count reports. */
    Report_GetCountReportWSRequest: {
      /** End date for the report */
      endDate?: string | null;
      /** Time interval for the report */
      interval?: GetCountReportWSRequestIntervalEnum | null;
      /** Scope of the report */
      scope?: GetCountReportWSRequestScopeEnum | null;
      /** Start date for the report */
      startDate?: string | null;
      /** Type of report to get */
      type?: GetCountReportWSRequestTypeEnum | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for getting count reports. */
    Report_GetCountReportWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of time series data points for count report */
      timeSeriesDataPoints?:
        | components["schemas"]["TimeSeriesDataPointV2Type"][]
        | null;
    };
    /** Request object for getting count reports for devices at a specific location. */
    Report_GetCountReportsForDevicesAtLocationWSRequest: {
      /** End timestamp in epoch milliseconds. */
      endTimeMs: number | null;
      /** Level of granularity with which event counts are grouped. */
      interval: GetCountReportsForDevicesAtLocationWSRequestIntervalEnum | null;
      /** base 64 (url-safe) uuid string */
      locationUuid: string | null;
      /** Start timestamp in epoch milliseconds. */
      startTimeMs: number | null;
      /** Type of event to get counts for. */
      type: GetCountReportsForDevicesAtLocationWSRequestTypeEnum | null;
    };
    /** Request object for getting count reports. */
    Report_GetCountReportsWSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDate?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Time intervals to get reports for */
      interval: GetCountReportsWSRequestIntervalEnum | null;
      /** Level of granularity to get reports for, supports DEVICE and LOCATION */
      scope: GetCountReportsWSRequestScopeEnum | null;
      /** Deprecated input, use startTimeMs instead */
      startDate?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** Type of reports to receive */
      type: GetCountReportsWSRequestTypeEnum | null;
    };
    /** Response object for getting count reports. */
    Report_GetCountReportsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of UUIDs to their time series data points */
      timeSeriesDataPointsMap?: {
        [key: string]:
          | components["schemas"]["TimeSeriesDataPointV2Type"][]
          | null;
      } | null;
    };
    /** Response object for custom LLM numeric reports. */
    Report_GetCustomLLMNumericWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of numeric count reports */
      reports?: {
        [key: string]:
          | components["schemas"]["NumericAggregationValue"][]
          | null;
      } | null;
    } | null;
    /** Request object for custom LLM reports. */
    Report_GetCustomLLMReportWSRequest: {
      /** Uuids of the selected devices */
      deviceFacetUuids?: (string | null)[] | null;
      /** The end timestamp (in Unix epoch milliseconds) of the selected interval */
      endTimeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      promptUuid?: string | null;
      /** The start timestamp (in Unix epoch milliseconds) of the selected interval */
      startTimeMs?: number | null;
    };
    /** Response object for custom LLM reports. */
    Report_GetCustomLLMReportWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of time series data points */
      timeSeriesDataPoints?: components["schemas"]["SceneQueryReport"][] | null;
    };
    /** Response object for custom LLM binary reports. */
    Report_GetCustomLLMWBinaryWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of binary count reports */
      reports?: {
        [key: string]: components["schemas"]["BinaryAggregationValue"][] | null;
      } | null;
    };
    /** Request object for custom LLM reports. */
    Report_GetCustomLLMWSRequest: {
      /** The end timestamp (in Unix epoch milliseconds) of the selected interval */
      endTimeMs?: number | null;
      /** The interval defines the granularity at which the results will be reported */
      interval?: GetCustomLLMWSRequestIntervalEnum | null;
      /** base 64 (url-safe) uuid string */
      promptUuid?: string | null;
      /** The start timestamp (in Unix epoch milliseconds) of the selected interval */
      startTimeMs?: number | null;
    };
    /** Request object for getting diagnostic feed. */
    Report_GetDiagnosticFeedWSRequest: {
      /** Timestamp in milliseconds after which to get diagnostic events */
      timestampMsAfter?: number | null;
      /** Timestamp in milliseconds before which to get diagnostic events */
      timestampMsBefore?: number | null;
    };
    /** Response object for getting diagnostic feed. */
    Report_GetDiagnosticFeedWSResponse: {
      /** List of diagnostic events */
      diagnosticEvents?: components["schemas"]["DiagnosticEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting license plates by device. */
    Report_GetLicensePlatesByDeviceWSRequest: {
      /** Deprecated input, use timestampMs instead */
      dateLocal?: string | null;
      /** RUUID with optional appended facet information */
      deviceUuid: string | null;
      /** Supports HOURLY, DAILY, WEEKLY, and MONTHLY */
      interval: GetLicensePlatesByDeviceWSRequestIntervalEnum | null;
      /** Datetime provided as a UNIX timestamp in milliseconds */
      timestampMs?: number | null;
    };
    /** Response object for getting license plates by device. */
    Report_GetLicensePlatesByDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of license plate events */
      licensePlateEvents?:
        | components["schemas"]["VehicleEventIndexType"][]
        | null;
    };
    /** Request object for getting most recent people count. */
    Report_GetMostRecentPeopleCountWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** Number of most recent people counts to retrieve */
      numMostRecent?: number | null;
    };
    /** Response object for getting most recent people count. */
    Report_GetMostRecentPeopleCountWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of people count events */
      events?: components["schemas"]["PeopleCountEventType"][] | null;
    };
    /** Request object for getting occupancy count from a device. */
    Report_GetOccupancyCountWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** End time in milliseconds */
      endMs?: number | null;
      /** Start time in milliseconds */
      startMs?: number | null;
    };
    /** Response object for getting occupancy count from a device. */
    Report_GetOccupancyCountWSResponse: {
      /** Approximate timestamp in milliseconds when the count was estimated */
      approximateTimestampMs?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Estimated occupancy count */
      estimatedCount?: number | null;
    };
    /** Request object for getting occupancy counts from a device. */
    Report_GetOccupancyCountsWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** The end timestamp (in Unix epoch milliseconds) of the selected interval */
      endTimeMs?: number | null;
      /** The interval defines the granularity at which the results will be reported */
      interval?: GetOccupancyCountsWSRequestIntervalEnum | null;
      /** The start timestamp (in Unix epoch milliseconds) of the selected interval */
      startTimeMs?: number | null;
    };
    /** Response object for getting occupancy counts from a device. */
    Report_GetOccupancyCountsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of time series data points with occupancy counts */
      timeSeriesDataPoints?:
        | components["schemas"]["Report_TimeSeriesDataPointV2ExtendedType"][]
        | null;
    };
    /** Request object for getting proximity tag locations by date. */
    Report_GetProximityTagLocationsByDateWSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDateStr?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Deprecated input, use startTimeMs instead */
      startDateStr?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      tagUuid: string | null;
    };
    /** Response object for getting proximity tag locations by date. */
    Report_GetProximityTagLocationsByDateWSResponse: {
      /** List of proximity tag time series data points */
      dataPoints?:
        | components["schemas"]["ProximityTagTimeSeriesDataPointType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting running average statistics. */
    Report_GetRunningAverageWSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDate?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Supports HOURLY, DAILY, WEEKLY, and MONTHLY, returns averages for hours of the interval selected */
      interval: GetRunningAverageWSRequestIntervalEnum | null;
      /** Level of granularity to get statistics for */
      scope: GetRunningAverageWSRequestScopeEnum | null;
      /** Deprecated input, use startTimeMs instead */
      startDate?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for getting running average statistics. */
    Report_GetRunningAverageWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of weekly statistics data points */
      statsDataPoints?:
        | components["schemas"]["WeeklyStatisticsDataPoint"][]
        | null;
    };
    /** Request object for getting summary count reports. */
    Report_GetSummaryCountReportWSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDate?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Time interval to get data for */
      interval: GetSummaryCountReportWSRequestIntervalEnum | null;
      /** Level of granularity to get reports for */
      scope: GetSummaryCountReportWSRequestScopeEnum | null;
      /** Deprecated input, use startTimeMs instead */
      startDate?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** Type of report to receive */
      type: GetSummaryCountReportWSRequestTypeEnum | null;
    };
    /** Response object for getting summary count reports. */
    Report_GetSummaryCountReportWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of summary count time series data points */
      timeSeriesDataPoints?:
        | components["schemas"]["SummaryCountTimeSeriesDataPointType"][]
        | null;
    };
    /** Request object for getting threshold crossing count reports. */
    Report_GetThresholdCrossingCountReportWSRequest: {
      /** Size of the report buckets */
      bucketSize?: GetThresholdCrossingCountReportWSRequestBucketSizeEnum | null;
      /** Type of crossing object to count */
      crossingObject?: GetThresholdCrossingCountReportWSRequestCrossingObjectEnum | null;
      /** Whether to deduplicate the results */
      dedupe?: boolean | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** End time in milliseconds */
      endTimeMs?: number | null;
      /** Start time in milliseconds */
      startTimeMs?: number | null;
    };
    /** Response object for getting threshold crossing count reports. */
    Report_GetThresholdCrossingCountReportWSResponse: {
      /** List of crossing counts */
      crossingCounts?: components["schemas"]["CrossingCountsType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting threshold crossing counts. */
    Report_GetThresholdCrossingCountsWSRequest: {
      /** Type of crossing object to count */
      crossingObject?: GetThresholdCrossingCountsWSRequestCrossingObjectEnum | null;
      /** Daily reset time in minutes */
      dailyResetTimeMinute?: number | null;
      /** List of device UUIDs to get threshold crossing counts for */
      devices?: (string | null)[] | null;
      /** End time in milliseconds */
      endTimeMs?: number | null;
      /** Start time in milliseconds */
      startTimeMs?: number | null;
    };
    /** Response object for getting threshold crossing counts. */
    Report_GetThresholdCrossingCountsWSResponse: {
      /** List of threshold crossing counts */
      counts?:
        | components["schemas"]["Report_GetThresholdCrossingCountsWSResponse_ThresholdCrossingCountType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Threshold crossing count data point. */
    Report_GetThresholdCrossingCountsWSResponse_ThresholdCrossingCountType: {
      /** Count of threshold crossings */
      count?: number | null;
      /** Timestamp in milliseconds */
      timestampMs?: number | null;
    };
    /** Request object for getting threshold crossing events for a specific device. */
    Report_GetThresholdCrossingEventsForDeviceWSRequest: {
      /** Type of crossing object for events returned, ie HUMAN/VEHICLE, defaults to all types if null */
      crossingObject?: GetThresholdCrossingEventsForDeviceWSRequestCrossingObjectEnum | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** End timestamp of query period in epoch MS */
      endTimeMs?: number | null;
      /** Should be null on first request and populated on subsequent requests if provided in the response to retrieve the next page */
      lastEvaluatedKey?: string | null;
      /** Max number of results to return. Response's lastEvaluatedKey will be null if no additional results are available */
      maxPageSize?: number | null;
      /** Start timestamp of query period in epoch MS */
      startTimeMs?: number | null;
    };
    /** Response object for getting threshold crossing events for a specific device. */
    Report_GetThresholdCrossingEventsForDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** If a max page size was specified and there are additional results that can be retrieved this will be non-null and should be supplied in the next request to retrieve the next page of results */
      lastEvaluatedKey?: string | null;
      /** List of threshold crossing events for the device */
      thresholdCrossingEvents?:
        | components["schemas"]["MinimalThresholdEventType"][]
        | null;
    };
    /** Request object for getting threshold crossing events. */
    Report_GetThresholdCrossingEventsWSRequest: {
      /** Type of crossing object to get events for */
      crossingObject?: GetThresholdCrossingEventsWSRequestCrossingObjectEnum | null;
      /** List of device UUIDs to get threshold crossing events for */
      devices?: (string | null)[] | null;
      /** End time in milliseconds */
      endTimeMs?: number | null;
      /** Start time in milliseconds */
      startTimeMs?: number | null;
    };
    /** Response object for getting threshold crossing events. */
    Report_GetThresholdCrossingEventsWSResponse: {
      /** Map of device UUIDs to their threshold crossing events */
      deviceToThresholdCrossingEventMap?: {
        [key: string]:
          | components["schemas"]["MinimalThresholdEventType"][]
          | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for resetting running average. */
    Report_ResetRunningAverageWSRequest: {
      /** Scope of the report to reset */
      scope?: ResetRunningAverageWSRequestScopeEnum | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for resetting running average. */
    Report_ResetRunningAverageWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Extended time series data point with additional timestamp information. */
    Report_TimeSeriesDataPointV2ExtendedType: {
      /** A mapping of timestamps (in Unix epoch milliseconds) that indicate, for each type and interval, the point in time where the aggregated occupancy count is closest to the occupancy observed in the corresponding video segment */
      approximateTimestampMsMap?: { [key: string]: number | null } | null;
      dateLocal?: string | null;
      dateUtc?: string | null;
      eventCountMap?: { [key: string]: number | null } | null;
      /** The representative timestamp (in Unix epoch milliseconds) for the interval */
      timestampMs?: number | null;
    };
    RequestToExitEnumType: RequestToExitEnumType;
    RequestToExitPhysicalPortEnumType: RequestToExitPhysicalPortEnumType;
    RequestToExitPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["RequestToExitPhysicalPortEnumType"];
      supervisionConfiguration?: components["schemas"]["PortSupervisionConfigurationType"];
    };
    RequestToExitShadowType:
      | ({
          state?: components["schemas"]["RequestToExitStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
          supervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    RequestToExitStateChangeEventType:
      | ({
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          intentOnly?: boolean | null;
          newState?: components["schemas"]["RequestToExitStateEnumType"];
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    RequestToExitStateEnumType: RequestToExitStateEnumType;
    Resolution: {
      height?: number | null;
      width?: number | null;
    };
    Response: {
      allowedMethods?: (string | null)[] | null;
      closed?: boolean | null;
      cookies?: { [key: string]: components["schemas"]["NewCookie"] } | null;
      date?: string | null;
      entity?: { [key: string]: unknown } | null;
      entityTag?: components["schemas"]["EntityTag"];
      headers?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: ({ [key: string]: unknown } | null)[] | null })
        | null;
      language?: {
        country?: string | null;
        displayCountry?: string | null;
        displayLanguage?: string | null;
        displayName?: string | null;
        displayScript?: string | null;
        displayVariant?: string | null;
        extensionKeys?: (string | null)[] | null;
        iso3Country?: string | null;
        iso3Language?: string | null;
        language?: string | null;
        script?: string | null;
        unicodeLocaleAttributes?: (string | null)[] | null;
        unicodeLocaleKeys?: (string | null)[] | null;
        variant?: string | null;
      } | null;
      lastModified?: string | null;
      length?: number | null;
      links?: components["schemas"]["Link"][] | null;
      location?: string | null;
      mediaType?: components["schemas"]["MediaType"];
      metadata?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: ({ [key: string]: unknown } | null)[] | null })
        | null;
      status?: number | null;
      statusInfo?: components["schemas"]["StatusType"];
      stringHeaders?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
    } | null;
    ResponseEntity: {
      body?: { [key: string]: unknown } | null;
      headers?:
        | ({
            accept?: components["schemas"]["MediaType"][] | null;
            acceptCharset?:
              | ({
                  registered?: boolean | null;
                } | null)[]
              | null;
            acceptLanguage?:
              | ({
                  range?: string | null;
                  weight?: number | null;
                } | null)[]
              | null;
            acceptLanguageAsLocales?:
              | ({
                  country?: string | null;
                  displayCountry?: string | null;
                  displayLanguage?: string | null;
                  displayName?: string | null;
                  displayScript?: string | null;
                  displayVariant?: string | null;
                  extensionKeys?: (string | null)[] | null;
                  iso3Country?: string | null;
                  iso3Language?: string | null;
                  language?: string | null;
                  script?: string | null;
                  unicodeLocaleAttributes?: (string | null)[] | null;
                  unicodeLocaleKeys?: (string | null)[] | null;
                  variant?: string | null;
                } | null)[]
              | null;
            acceptPatch?: components["schemas"]["MediaType"][] | null;
            accessControlAllowCredentials?: boolean | null;
            accessControlAllowHeaders?: (string | null)[] | null;
            accessControlAllowMethods?:
              | components["schemas"]["HttpMethod"][]
              | null;
            accessControlAllowOrigin?: string | null;
            accessControlExposeHeaders?: (string | null)[] | null;
            accessControlMaxAge?: number | null;
            accessControlRequestHeaders?: (string | null)[] | null;
            accessControlRequestMethod?: components["schemas"]["HttpMethod"];
            all?: { [key: string]: string | null } | null;
            allow?: components["schemas"]["HttpMethod"][] | null;
            basicAuth?: string | null;
            bearerAuth?: string | null;
            cacheControl?: string | null;
            connection?: (string | null)[] | null;
            contentDisposition?: components["schemas"]["ContentDisposition"];
            contentLanguage?: {
              country?: string | null;
              displayCountry?: string | null;
              displayLanguage?: string | null;
              displayName?: string | null;
              displayScript?: string | null;
              displayVariant?: string | null;
              extensionKeys?: (string | null)[] | null;
              iso3Country?: string | null;
              iso3Language?: string | null;
              language?: string | null;
              script?: string | null;
              unicodeLocaleAttributes?: (string | null)[] | null;
              unicodeLocaleKeys?: (string | null)[] | null;
              variant?: string | null;
            } | null;
            contentLength?: number | null;
            contentType?: components["schemas"]["MediaType"];
            date?: number | null;
            empty?: boolean | null;
            etag?: string | null;
            expires?: number | null;
            host?: {
              address?: {
                address?: (string | null)[] | null;
                anyLocalAddress?: boolean | null;
                canonicalHostName?: string | null;
                hostAddress?: string | null;
                hostName?: string | null;
                linkLocalAddress?: boolean | null;
                loopbackAddress?: boolean | null;
                mcglobal?: boolean | null;
                mclinkLocal?: boolean | null;
                mcnodeLocal?: boolean | null;
                mcorgLocal?: boolean | null;
                mcsiteLocal?: boolean | null;
                multicastAddress?: boolean | null;
                siteLocalAddress?: boolean | null;
              } | null;
              hostName?: string | null;
              hostString?: string | null;
              port?: number | null;
              unresolved?: boolean | null;
            } | null;
            ifMatch?: (string | null)[] | null;
            ifModifiedSince?: number | null;
            ifNoneMatch?: (string | null)[] | null;
            ifUnmodifiedSince?: number | null;
            lastModified?: number | null;
            location?: string | null;
            origin?: string | null;
            pragma?: string | null;
            range?: components["schemas"]["HttpRange"][] | null;
            upgrade?: string | null;
            vary?: (string | null)[] | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      statusCode?: components["schemas"]["HttpStatusCode"];
      statusCodeValue?: number | null;
    };
    ResponseEntityString: {
      body?: string | null;
      headers?:
        | ({
            accept?: components["schemas"]["MediaType"][] | null;
            acceptCharset?:
              | ({
                  registered?: boolean | null;
                } | null)[]
              | null;
            acceptLanguage?:
              | ({
                  range?: string | null;
                  weight?: number | null;
                } | null)[]
              | null;
            acceptLanguageAsLocales?:
              | ({
                  country?: string | null;
                  displayCountry?: string | null;
                  displayLanguage?: string | null;
                  displayName?: string | null;
                  displayScript?: string | null;
                  displayVariant?: string | null;
                  extensionKeys?: (string | null)[] | null;
                  iso3Country?: string | null;
                  iso3Language?: string | null;
                  language?: string | null;
                  script?: string | null;
                  unicodeLocaleAttributes?: (string | null)[] | null;
                  unicodeLocaleKeys?: (string | null)[] | null;
                  variant?: string | null;
                } | null)[]
              | null;
            acceptPatch?: components["schemas"]["MediaType"][] | null;
            accessControlAllowCredentials?: boolean | null;
            accessControlAllowHeaders?: (string | null)[] | null;
            accessControlAllowMethods?:
              | components["schemas"]["HttpMethod"][]
              | null;
            accessControlAllowOrigin?: string | null;
            accessControlExposeHeaders?: (string | null)[] | null;
            accessControlMaxAge?: number | null;
            accessControlRequestHeaders?: (string | null)[] | null;
            accessControlRequestMethod?: components["schemas"]["HttpMethod"];
            all?: { [key: string]: string | null } | null;
            allow?: components["schemas"]["HttpMethod"][] | null;
            basicAuth?: string | null;
            bearerAuth?: string | null;
            cacheControl?: string | null;
            connection?: (string | null)[] | null;
            contentDisposition?: components["schemas"]["ContentDisposition"];
            contentLanguage?: {
              country?: string | null;
              displayCountry?: string | null;
              displayLanguage?: string | null;
              displayName?: string | null;
              displayScript?: string | null;
              displayVariant?: string | null;
              extensionKeys?: (string | null)[] | null;
              iso3Country?: string | null;
              iso3Language?: string | null;
              language?: string | null;
              script?: string | null;
              unicodeLocaleAttributes?: (string | null)[] | null;
              unicodeLocaleKeys?: (string | null)[] | null;
              variant?: string | null;
            } | null;
            contentLength?: number | null;
            contentType?: components["schemas"]["MediaType"];
            date?: number | null;
            empty?: boolean | null;
            etag?: string | null;
            expires?: number | null;
            host?: {
              address?: {
                address?: (string | null)[] | null;
                anyLocalAddress?: boolean | null;
                canonicalHostName?: string | null;
                hostAddress?: string | null;
                hostName?: string | null;
                linkLocalAddress?: boolean | null;
                loopbackAddress?: boolean | null;
                mcglobal?: boolean | null;
                mclinkLocal?: boolean | null;
                mcnodeLocal?: boolean | null;
                mcorgLocal?: boolean | null;
                mcsiteLocal?: boolean | null;
                multicastAddress?: boolean | null;
                siteLocalAddress?: boolean | null;
              } | null;
              hostName?: string | null;
              hostString?: string | null;
              port?: number | null;
              unresolved?: boolean | null;
            } | null;
            ifMatch?: (string | null)[] | null;
            ifModifiedSince?: number | null;
            ifNoneMatch?: (string | null)[] | null;
            ifUnmodifiedSince?: number | null;
            lastModified?: number | null;
            location?: string | null;
            origin?: string | null;
            pragma?: string | null;
            range?: components["schemas"]["HttpRange"][] | null;
            upgrade?: string | null;
            vary?: (string | null)[] | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      statusCode?: components["schemas"]["HttpStatusCode"];
      statusCodeValue?: number | null;
    };
    ResponseType: ResponseTypeEnum;
    RhombusKeyAppConfigType: {
      createdAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      preferences?: components["schemas"]["RhombusKeyAppPreferencesType"];
      /** base 64 (url-safe) uuid string */
      rhombusOrgUserUuid?: string | null;
      settings?: components["schemas"]["RhombusKeyAppSettingsType"];
      updatedAtMillis?: number | null;
    };
    RhombusKeyAppPreferencesType: {
      favoriteAccessControlledDoorUuids?: (string | null)[] | null;
    };
    RhombusKeyAppSettingsType: {
      bypassSaml?: boolean | null;
      credentialProvisioningRules?: components["schemas"]["RhombusSecureMobileCredentialProvisioningRulesType"];
      remoteUnlockEnabled?: boolean | null;
      rhombusKeyAccessEnabled?: boolean | null;
    };
    /** List of users in the organization for reports */
    RhombusOrgUserType: {
      accessibleRhombusApps?: (RhombusOrgUserAccessibleRhombusAppsEnum | null)[] | null;
      accountOwner?: boolean | null;
      bypassSaml?: boolean | null;
      createdAtMillis?: number | null;
      deleted?: boolean | null;
      firstName?: string | null;
      lastName?: string | null;
      name?: string | null;
      orgUserCustomizationFlags?: { [key: string]: string | null } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      rhombusUserUuid?: string | null;
      status?: RhombusOrgUserStatusEnum | null;
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    RhombusOsdpDoorReaderType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      /** base 64 (url-safe) uuid string */
      hardwareUuid?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      osdpAddress?: number | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["OsdpReaderPortType"];
      portImmutable?: boolean | null;
      readerType?: components["schemas"]["DoorReaderEnumType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      serialNumber?: string | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    RhombusSecureCsnType:
      | ({
          algorithm?: components["schemas"]["SecureTokenAlgorithm"];
          baseKeyIdentifier?: number | null;
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          /** base 64 (url-safe) uuid string */
          managedCredUuid?: string | null;
          note?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    /** Updated mobile app state */
    RhombusSecureMobileAppState: {
      appName?: string | null;
      appNotifications?: components["schemas"]["RhombusSecureMobileFeature"];
      appOS?: string | null;
      appStatusUpdatedAtMillis?: number | null;
      appVersion?: string | null;
      clientType?: components["schemas"]["MobileTokenOSEnum"];
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      deviceModel?: string | null;
      installationId?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      tapToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
      userAgent?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      waveToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
    };
    /** Mobile app state statistics */
    RhombusSecureMobileAppStateStats: {
      tapToUnlockStats?: components["schemas"]["RhombusSecureMobileCredStatRhombusSecureMobileFeatureStatus"];
      versionStats?: components["schemas"]["RhombusSecureMobileCredStatString"];
      waveToUnlockStats?: components["schemas"]["RhombusSecureMobileCredStatRhombusSecureMobileFeatureStatus"];
    };
    RhombusSecureMobileCredStatRhombusSecureMobileFeatureStatus: {
      androidCredRefMap?: {
        [key: string]:
          | components["schemas"]["StatsCredentialReference"][]
          | null;
      } | null;
      androidTotal?: number | null;
      androidTotalMap?: { [key: string]: number | null } | null;
      iphoneCredRefMap?: {
        [key: string]:
          | components["schemas"]["StatsCredentialReference"][]
          | null;
      } | null;
      iphoneTotal?: number | null;
      iphoneTotalMap?: { [key: string]: number | null } | null;
      total?: number | null;
    };
    RhombusSecureMobileCredStatString: {
      androidCredRefMap?: {
        [key: string]:
          | components["schemas"]["StatsCredentialReference"][]
          | null;
      } | null;
      androidTotal?: number | null;
      androidTotalMap?: { [key: string]: number | null } | null;
      iphoneCredRefMap?: {
        [key: string]:
          | components["schemas"]["StatsCredentialReference"][]
          | null;
      } | null;
      iphoneTotal?: number | null;
      iphoneTotalMap?: { [key: string]: number | null } | null;
      total?: number | null;
    };
    RhombusSecureMobileCredentialProvisioningRulesType: {
      endDateProvisioner?: components["schemas"]["EpochSecondsProvisioner"];
      maxMobileCredsAllowed?: number | null;
      startDateProvisioner?: components["schemas"]["EpochSecondsProvisioner"];
    };
    RhombusSecureMobileFeature: {
      settings?:
        | components["schemas"]["RhombusSecureMobileFeatureSetting"][]
        | null;
      status?: components["schemas"]["RhombusSecureMobileFeatureStatus"];
    } | null;
    RhombusSecureMobileFeatureSetting: {
      name?: string | null;
      status?: components["schemas"]["RhombusSecureMobileFeatureSettingStatus"];
      value?: string | null;
    } | null;
    RhombusSecureMobileFeatureSettingStatus: RhombusSecureMobileFeatureSettingStatusEnum;
    RhombusSecureMobileFeatureStatus: RhombusSecureMobileFeatureStatusEnum;
    RhombusSecureMobileType:
      | ({
          algorithm?: components["schemas"]["SecureTokenAlgorithm"];
          appName?: string | null;
          appNotifications?: components["schemas"]["RhombusSecureMobileFeature"];
          appOS?: string | null;
          appStatusUpdatedAtMillis?: number | null;
          appVersion?: string | null;
          baseKeyIdentifier?: number | null;
          clientType?: components["schemas"]["MobileTokenOSEnum"];
          deviceModel?: string | null;
          installationId?: string | null;
          tapToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
          userAgent?: string | null;
          waveToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          /** base 64 (url-safe) uuid string */
          managedCredUuid?: string | null;
          note?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    RhombusShipmentInfoType: {
      additionalEmails?: string | null;
      chosenCarrierName?: string | null;
      claimKeyToLicenseMap?: { [key: string]: (string | null)[] | null } | null;
      claimKeyToLicenseMapV2?: {
        [key: string]: {
          [
            key: string
          ]: components["schemas"]["SalesforceLicenseStartDateTimeAndEndDateTime"];
        } | null;
      } | null;
      customerEmails?: string | null;
      customerName?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      partnerOrgUuid?: string | null;
      purchaseOrderNumber?: string | null;
      rmaReturnTrackingNumber?: string | null;
      /** base 64 (url-safe) uuid string */
      rmaUuid?: string | null;
      rmaUuids?: (string | null)[] | null;
      salesForceOpportunityId?: string | null;
      zendeskTicketNumber?: string | null;
    } | null;
    RtspEndpoint: {
      audioSupported?: boolean | null;
      lastRtspUrlStatus?: RtspEndpointLastRtspUrlStatusEnum | null;
      onvifProfileToken?: string | null;
      rtspUrl?: string | null;
      source?: components["schemas"]["RtspEndpointSource"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    RtspEndpointSource: RtspEndpointSourceEnum;
    /** The action to take when this lockdown rule is triggered. */
    RuleActionType: {
      activateLocationLockdown?: components["schemas"]["ActivateLocationLockdownActionType"];
      alertAction?: boolean | null;
      audioPlaybackActions?:
        | components["schemas"]["AudioPlaybackActionType"][]
        | null;
      cancelLoopingAudioPlaybackAction?: components["schemas"]["CancelLoopingAudioPlaybackActionType"];
      connectAudioDeviceToPhoneNumberAction?: components["schemas"]["ConnectAudioDeviceToPhoneNumberActionType"];
      customLLMActions?: components["schemas"]["CustomLLMActionType"][] | null;
      integrationCommandActions?:
        | components["schemas"]["IntegrationCommandActionType"][]
        | null;
      integrationNotificationActions?:
        | components["schemas"]["IntegrationNotificationActionType"][]
        | null;
      liveNotificationAction?: boolean | null;
      remoteDoorUnlockActions?:
        | components["schemas"]["RemoteDoorUnlockActionType"][]
        | null;
      triggerComponentRelayActions?:
        | components["schemas"]["TriggerComponentRelayActionType"][]
        | null;
      webhookActions?: components["schemas"]["WebhookActionType"][] | null;
    };
    RuleEventOriginator:
      | ({
          ruleName?: string | null;
          /** base 64 (url-safe) uuid string */
          ruleUuid?: string | null;
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    /** Optional filters to apply to this lockdown rule. */
    RuleFilterType: {
      /** List of schedules that apply to the rule. at least one schedule must be met to trigger this rule. If null, then this rule is enabled all the time. */
      scheduleUuids?: (string | null)[] | null;
      /** Number of seconds to back off after rule is triggered before triggering again. I.e. this rule will only trigger once every X seconds regardless of how many triggering events occur within that window */
      triggerBackoffSecs?: number | null;
    };
    RuleLockdownEventOriginator:
      | ({
          ruleName?: string | null;
          /** base 64 (url-safe) uuid string */
          ruleUuid?: string | null;
        } & {
          type?: components["schemas"]["LockdownEventOriginatorEnumType"];
        })
      | null;
    RuleTriggerConjunctionEnum: RuleTriggerConjunctionEnum;
    RuleTriggerTypeEnum: RuleTriggerTypeEnum;
    /** Updated rule data */
    RuleType: {
      action?: components["schemas"]["RuleActionType"];
      conjunction?: components["schemas"]["RuleTriggerConjunctionEnum"];
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ownerUuid?: string | null;
      ruleFilters?: components["schemas"]["RuleFilterType"];
      ruleType?: components["schemas"]["RuleTypeEnum"];
      triggers?: components["schemas"]["BaseRuleTriggerType"][] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    RuleTypeEnum: RuleTypeEnum;
    /** List of rules event records */
    RulesEventRecordType: {
      activatedLocationLockdownRecord?: components["schemas"]["ActivateLocationLockdownActionRecordType"];
      alertActionRecord?: components["schemas"]["AlertActionRecordType"];
      alertMonitoringEventRecords?:
        | components["schemas"]["AlertMonitoringEventRecordType"][]
        | null;
      audioPlaybackActionRecords?:
        | components["schemas"]["AudioPlaybackActionRecordType"][]
        | null;
      cancelLoopingAudioPlaybackActionRecordType?: components["schemas"]["CancelLoopingAudioPlaybackActionRecordType"];
      deviceEventRecords?:
        | components["schemas"]["DeviceEventRecordType"][]
        | null;
      integrationActionStatuses?: {
        [key: string]: components["schemas"]["IntegrationActionStatusEnum"];
      } | null;
      liveNotificationActionRecord?: components["schemas"]["LiveNotificationActionRecordType"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
      scheduledEventRecords?:
        | components["schemas"]["ScheduledEventRecordType"][]
        | null;
      triggerComponentRelayRecords?:
        | components["schemas"]["TriggerComponentRelayActionRecordType"][]
        | null;
      triggeredTimestampMs?: number | null;
      unlockDoorActionRecords?:
        | components["schemas"]["UnlockDoorActionRecordType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      visionLLMEventRecords?:
        | components["schemas"]["VisionLLMEventRecordType"][]
        | null;
      webhookActionStatuses?: { [key: string]: boolean | null } | null;
    };
    /** Request object for creating a rule. */
    Rules_CreateRuleWSRequest: {
      rule?: components["schemas"]["RuleType"];
    };
    /** Response object for creating a rule. */
    Rules_CreateRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Request object for deleting a rule pause setting. */
    Rules_DeleteRulePauseSettingWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for deleting a rule pause setting. */
    Rules_DeleteRulePauseSettingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a rule. */
    Rules_DeleteRuleWSRequest: {
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Response object for deleting a rule. */
    Rules_DeleteRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Response object for getting rule pause settings. */
    Rules_GetRulePauseSettingsResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of rule UUIDs to their pause settings */
      rulesPausedMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
    };
    /** Request object for getting rule pause settings. */
    Rules_GetRulePauseSettingsWSRequest: { [key: string]: unknown };
    /** Request object for getting rules for an organization. */
    Rules_GetRulesForOrgWSRequest: { [key: string]: unknown };
    /** Response object for getting rules for an organization. */
    Rules_GetRulesForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of rules for the organization */
      rules?: components["schemas"]["RuleType"][] | null;
    };
    /** Request object for pausing a rule. */
    Rules_PauseRuleWSRequest: {
      /** Duration to pause the rule in seconds */
      durationSec?: number | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
      /** Scheduled timestamp in seconds when the pause should take effect */
      scheduledTimestampSec?: number | null;
    };
    /** Response object for pausing a rule. */
    Rules_PauseRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a rule. */
    Rules_UpdateRuleWSRequest: {
      ruleUpdate?: components["schemas"]["RuleType"];
    };
    /** Response object for updating a rule. */
    Rules_UpdateRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a rules event record. */
    Rules_records_DeleteRulesEventRecordWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for deleting a rules event record. */
    Rules_records_DeleteRulesEventRecordWSResponse: { [key: string]: unknown };
    /** Request object for getting latest rules event records. */
    Rules_records_GetLatestRulesEventRecordsWSRequest: {
      /** List of associated UUIDs to filter by */
      associatedUuids?: (string | null)[] | null;
      /** Number of latest records to retrieve */
      n?: number | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
    };
    /** Response object for getting latest rules event records. */
    Rules_records_GetLatestRulesEventRecordsWSResponse: {
      /** List of latest rules event records */
      rulesEventRecords?:
        | components["schemas"]["RulesEventRecordType"][]
        | null;
    };
    /** Request object for getting rules event records. */
    Rules_records_GetRulesEventRecordsWSRequest: {
      /** Associated uuids for devices, components, locations and componenet composites. **Optional, can be null. */
      associatedUuids?: (string | null)[] | null;
      /** End time for the query period */
      endTime?: number | null;
      /** Start time for the query period */
      startTime?: number | null;
    };
    /** Response object for getting rules event records. */
    Rules_records_GetRulesEventRecordsWSResponse: {
      /** List of rules event records */
      rulesEventRecords?:
        | components["schemas"]["RulesEventRecordType"][]
        | null;
    };
    /** Request object for getting filtered rules. */
    Rules_records_GetRulesFilteredWSRequest: {
      /** List of associated UUIDs to filter by */
      associatedUuids?: (string | null)[] | null;
      /** List of rule types to filter by */
      ruleTypeFilter?: components["schemas"]["RuleTypeEnum"][] | null;
    };
    SAMLSettingsType: {
      addUsersOnRoleMismatch?: boolean | null;
      enabled?: boolean | null;
      idpMetaDataXml?: string | null;
      justInTimeAccountProvisioningEnabled?: boolean | null;
    };
    SCIMSettingsType: {
      addUsersOnRoleMismatch?: boolean | null;
      createdAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      rhombusKeyAppSettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      sendWelcomeEmailToNewRhombusKeyUsers?: boolean | null;
      sendWelcomeEmailToNewUsers?: boolean | null;
      updatedAtMillis?: number | null;
    };
    SalesforceLicenseStartDateTimeAndEndDateTime: {
      contractEndDateTime?: string | null;
      contractStartDateTime?: string | null;
    } | null;
    SaltoSettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      saveClips?: boolean | null;
      tokenToCamerasMap?: { [key: string]: (string | null)[] | null } | null;
    };
    /** List of saved clips */
    SavedClipV2Type: {
      accessSettings?: components["schemas"]["ClipAccessSettings"];
      alterMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      analyzed?: boolean | null;
      byteCount?: number | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      consoleDelete?: boolean | null;
      createdAtMs?: number | null;
      description?: string | null;
      devicePresentationOrder?: (string | null)[] | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      externalTransactionId?: string | null;
      fisheyeMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      integrationUploadList?: components["schemas"]["IntegrationEnum"][] | null;
      isMonitoringClip?: boolean | null;
      isVendorClip?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      sendToSharedStorage?: boolean | null;
      sha256Hex?: string | null;
      /** base 64 (url-safe) uuid string */
      sourceAlertUuid?: string | null;
      status?: SavedClipV2StatusEnum | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      timestampMs?: number | null;
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      videoResolution?: components["schemas"]["Resolution"];
    };
    /** Detailed information about the saved clip */
    SavedClipWithDetailsType: {
      accessSettings?: components["schemas"]["ClipAccessSettings"];
      alterMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      analyzed?: boolean | null;
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      byteCount?: number | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      consoleDelete?: boolean | null;
      createdAtMs?: number | null;
      description?: string | null;
      devicePresentationOrder?: (string | null)[] | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      externalTransactionId?: string | null;
      fisheyeMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      integrationUploadList?: components["schemas"]["IntegrationEnum"][] | null;
      isMonitoringClip?: boolean | null;
      isVendorClip?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      seekPoints?: components["schemas"]["ClipSeekPointV2Type"][] | null;
      sendToSharedStorage?: boolean | null;
      sha256Hex?: string | null;
      /** base 64 (url-safe) uuid string */
      sourceAlertUuid?: string | null;
      status?: SavedClipWithDetailsStatusEnum | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      timestampMs?: number | null;
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      videoResolution?: components["schemas"]["Resolution"];
    };
    /** List of time series data points */
    SceneQueryReport: {
      /** RUUID with optional appended facet information */
      deviceFacetUuid?: string | null;
      events?: components["schemas"]["SceneQueryReportEvent"][] | null;
      promptType?: SceneQueryReportPromptTypeEnum | null;
      /** base 64 (url-safe) uuid string */
      promptUuid?: string | null;
    };
    /** Scene query report event from the triggered prompt */
    SceneQueryReportEvent: {
      checkCondition?: boolean | null;
      timestampMs?: number | null;
      value?: string | null;
    };
    /** Request object for creating a prompt configuration. */
    Scenequery_CreatePromptConfigurationWSRequest: {
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    /** Response object for creating a prompt configuration. */
    Scenequery_CreatePromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    /** Request object for deleting a prompt configuration. */
    Scenequery_DeletePromptConfigurationWSRequest: {
      /** base 64 (url-safe) uuid string */
      promptUuid?: string | null;
    };
    /** Response object for deleting a prompt configuration. */
    Scenequery_DeletePromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for finding all prompt configurations. */
    Scenequery_FindAllPromptConfigurationsWSRequest: { [key: string]: unknown };
    /** Response object for finding all prompt configurations. */
    Scenequery_FindAllPromptConfigurationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of all prompt configurations */
      promptConfigurations?:
        | components["schemas"]["PromptConfigurationType"][]
        | null;
    };
    /** Request object for getting a prompt configuration. */
    Scenequery_GetPromptConfigurationWSRequest: {
      /** base 64 (url-safe) uuid string */
      promptUuid?: string | null;
    };
    /** Response object for getting a prompt configuration. */
    Scenequery_GetPromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    /** Request object for selectively updating a prompt configuration. */
    Scenequery_SelectiveUpdatePromptConfigurationWSRequest: {
      /** Optional active status for the prompt configuration */
      active?: boolean | null;
      /** List of camera configurations for the prompt */
      cameraConfigurations?:
        | components["schemas"]["CameraConfiguration"][]
        | null;
      checkCondition?: components["schemas"]["CheckCondition"];
      /** Optional description for the prompt configuration */
      description?: string | null;
      /** Optional minute trigger rate for the configuration */
      minuteTriggerRate?: number | null;
      /** Optional name for the prompt configuration */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** Optional prompt text for the configuration */
      prompt?: string | null;
      /** Optional prompt type for the configuration */
      promptType?: SelectiveUpdatePromptConfigurationWSRequestPromptTypeEnum | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      /** Optional short name for the prompt configuration */
      shortName?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for selectively updating a prompt configuration. */
    Scenequery_SelectiveUpdatePromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for triggering a prompt. */
    Scenequery_TriggerPromptWSRequest: {
      /** RUUID with optional appended facet information */
      deviceFacetUuid?: string | null;
      /** Prompt text to trigger */
      prompt?: string | null;
      /** Type of prompt to trigger */
      promptType?: TriggerPromptWSRequestPromptTypeEnum | null;
      region?: components["schemas"]["RegionPolygonType"];
      /** Timestamp in milliseconds for the trigger */
      timestampMs?: number | null;
    };
    /** Response object for triggering a prompt. */
    Scenequery_TriggerPromptWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      event?: components["schemas"]["SceneQueryReportEvent"];
    };
    /** Request object for updating a prompt configuration. */
    Scenequery_UpdatePromptConfigurationWSRequest: {
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    /** Response object for updating a prompt configuration. */
    Scenequery_UpdatePromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    /** Information about the next nearest schedule for access controlled doors. */
    Schedule_AccessControlledDoorNextNearestSchedule: {
      /** Whether the schedule is currently active */
      currentlyActive?: boolean | null;
      doorState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
      source?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      /** Start time in milliseconds (inclusive) */
      startsAtMillisInclusive?: number | null;
      /** Stop time in milliseconds (inclusive) */
      stopsAtMillisInclusive?: number | null;
    };
    /** Source of the door state */
    Schedule_AccessControlledDoorStateSourceEnum: Schedule_AccessControlledDoorStateSourceEnum;
    /** Request object for creating an absolute schedule. */
    Schedule_CreateAbsoluteScheduleWSRequest: {
      schedule?: components["schemas"]["AbsoluteSecondsScheduleType"];
    };
    /** Response object for creating an absolute schedule. */
    Schedule_CreateAbsoluteScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Request object for creating a relative datetime intervals schedule. */
    Schedule_CreateRelativeDateTimeIntervalsScheduleWSRequest: {
      schedule?: components["schemas"]["RelativeDateTimeIntervalsScheduleType"];
    };
    /** Response object for creating a relative datetime intervals schedule. */
    Schedule_CreateRelativeDateTimeIntervalsScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Request object for creating a relative schedule. */
    Schedule_CreateRelativeScheduleWSRequest: {
      schedule?: components["schemas"]["RealtimeRelativeSecondsScheduleType"];
    };
    /** Response object for creating a relative schedule. */
    Schedule_CreateRelativeScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Request object for creating a weekly schedule. */
    Schedule_CreateWeeklyScheduleWSRequest: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
    };
    /** Response object for creating a weekly schedule. */
    Schedule_CreateWeeklyScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Request object for finding an absolute schedule. */
    Schedule_FindAbsoluteScheduleWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for finding an absolute schedule. */
    Schedule_FindAbsoluteScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      schedule?: components["schemas"]["AbsoluteSecondsScheduleType"];
    };
    /** Request object for finding a relative datetime intervals schedule. */
    Schedule_FindRelativeDateTimeIntervalsScheduleWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for finding a relative datetime intervals schedule. */
    Schedule_FindRelativeDateTimeIntervalsScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      schedule?: components["schemas"]["RelativeDateTimeIntervalsScheduleType"];
    };
    /** Request object for finding a relative schedule. */
    Schedule_FindRelativeScheduleWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for finding a relative schedule. */
    Schedule_FindRelativeScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      schedule?: components["schemas"]["RealtimeRelativeSecondsScheduleType"];
    };
    /** Request object for finding a weekly schedule. */
    Schedule_FindWeeklyScheduleWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for finding a weekly schedule. */
    Schedule_FindWeeklyScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
    };
    /** Request object for getting schedule data v2. */
    Schedule_GetScheduleDataV2WSRequest: {
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    /** Response object for getting schedule data v2. */
    Schedule_GetScheduleDataV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      weeklyScheduleData?: components["schemas"]["Schedule_WeeklyRepeatingScheduleDataType"];
    };
    /** Response object for getting schedule data. */
    Schedule_GetScheduleDataWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of weekly schedule data */
      weeklyScheduleData?:
        | components["schemas"]["Schedule_WeeklyRepeatingScheduleDataType"][]
        | null;
    };
    /** Request object for getting all schedules. */
    Schedule_GetSchedulesWSRequest: { [key: string]: unknown };
    /** Response object for getting all schedules. */
    Schedule_GetSchedulesWSResponse: {
      /** List of absolute schedules */
      absoluteSchedules?:
        | components["schemas"]["AbsoluteSecondsScheduleType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of relative datetime intervals schedules */
      relativeDatetimeSchedules?:
        | components["schemas"]["RelativeDateTimeIntervalsScheduleType"][]
        | null;
      /** List of relative schedules */
      relativeSchedules?:
        | components["schemas"]["RealtimeRelativeSecondsScheduleType"][]
        | null;
      /** List of weekly repeating schedules */
      weeklySchedules?:
        | components["schemas"]["WeeklyRepeatingScheduleType"][]
        | null;
    };
    /** Weekly repeating schedule data type with usage information. */
    Schedule_WeeklyRepeatingScheduleDataType: {
      /** Set of access grant UUIDs using this schedule */
      accessGrantUuids?: (string | null)[] | null;
      /** Set of alarm monitoring UUIDs using this schedule */
      alarmMonitoringUuids?: (string | null)[] | null;
      /** Set of alert policy UUIDs using this schedule */
      alertPolicyUuids?: (string | null)[] | null;
      /** Set of custom event UUIDs using this schedule */
      customEventUuids?: (string | null)[] | null;
      /** Set of door setting UUIDs using this schedule */
      doorSettingUuids?: (string | null)[] | null;
      intervalList?: components["schemas"]["WeeklyMinuteIntervalType"][] | null;
      /** Set of location UUIDs where this schedule is used */
      locationsUsedIn?: (string | null)[] | null;
      mutable?: boolean | null;
      name?: string | null;
      oneTimeUse?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** Set of rule UUIDs using this schedule */
      ruleUuids?: (string | null)[] | null;
      /** Set of shared stream UUIDs using this schedule */
      sharedStreamUuids?: (string | null)[] | null;
      strategy?: WeeklyRepeatingScheduleDataStrategyEnum | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ScheduledAction: {
      action?: components["schemas"]["RuleActionType"];
      backoffMinutes?: number | null;
      backoffSeconds?: number | null;
      /** base 64 (url-safe) uuid string */
      ruleUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      scheduleUuid?: string | null;
    };
    ScheduledEventRecordType: {
      timestampMs?: number | null;
    };
    /** Map of location UUIDs to snooze intervals */
    ScheduledIntervalType: {
      durationSecs?: number | null;
      timestampSec?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ScheduledRuleTriggerType:
      | ({
          /** List of locations to use for timezone evaluation and for display purposes */
          locationUuids?: (string | null)[] | null;
          /** minute of the day for this trigger. note that it is dependent on the timezone of the devices in the rule actions or the timezone of the specified locations. */
          minOfDay?: number | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    /** Cloud archiving configuration to update */
    ScopedCloudArchivingConfig: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scope?: components["schemas"]["DeviceTargetScope"];
      /** base 64 (url-safe) uuid string */
      targetUuid?: string | null;
      uploadScheduleInverted?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uploadScheduleUuid?: string | null;
      uploadStrategy?: components["schemas"]["CloudArchivingStrategy"];
    };
    /** Request object for deleting video embeddings. */
    Search_DeleteVideoEmbeddingWSRequest: {
      embedding?: components["schemas"]["GenericVideoEmbedding"];
    };
    /** Response object for deleting video embeddings. */
    Search_DeleteVideoEmbeddingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for indexing video embeddings. */
    Search_IndexVideoEmbeddingWSRequest: {
      embedding?: components["schemas"]["GenericVideoEmbedding"];
    };
    /** Response object for indexing video embeddings. */
    Search_IndexVideoEmbeddingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for searching license plates. */
    Search_SearchLicensePlatesWSRequest: {
      /** List of device facet UUIDs to search in */
      deviceUuids?: (string | null)[] | null;
      /** End time in milliseconds for the search period */
      endTime?: number | null;
      /** Forced fuzziness level for the search (deprecated) */
      forcedFuzziness?: number | null;
      /** Whether to use fuzzy search */
      fuzzy?: boolean | null;
      /** License plate number to search for */
      licensePlate?: string | null;
      /** Start time in milliseconds for the search period */
      startTime?: number | null;
    };
    /** Response object for searching license plates. */
    Search_SearchLicensePlatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of vehicle events matching the search criteria */
      vehicleEvents?:
        | components["schemas"]["VehicleEventSearchHitType"][]
        | null;
    };
    /** Request object for searching objects by color. */
    Search_SearchObjectsByColorWSRequest: {
      /** Set of colors to filter by */
      colorFilter?: (SearchObjectsByColorWSRequestColorFilterEnum | null)[] | null;
      /** List of device facet UUIDs to filter by */
      deviceFilter?: (string | null)[] | null;
      /** End time in milliseconds for the search period */
      endTimeMs?: number | null;
      /** Set of activity types to filter by */
      objectTypeFilter?: components["schemas"]["ActivityEnum"][] | null;
      /** Start time in milliseconds for the search period */
      startTimeMs?: number | null;
    };
    /** Response object for searching objects by color. */
    Search_SearchObjectsByColorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of objects matching the color search criteria */
      objects?: components["schemas"]["FootageBoundingBoxType"][] | null;
    };
    /** Request object for searching similar object embeddings by text. */
    Search_SearchSimilarObjectEmbeddingsByTextWSRequest: {
      /** Optional number of results to return. Setting to larger numbers will increase latency. */
      maxNumResults?: number | null;
      model: components["schemas"]["ObjectSearchModelEnum"];
      /** Optional object type filter to narrow results to only vehicles or only humans. */
      objectTypeFilter?: (SearchSimilarObjectEmbeddingsByTextWSRequestObjectTypeFilterEnum | null)[] | null;
      /** Optional list of device uuids to filter result set on. */
      queryDeviceUuids?: (string | null)[] | null;
      /** End time in epoch milliseconds. Results returned will have occurred before this time. */
      queryEndTimeMs: number | null;
      /** Start time in epoch milliseconds. Results returned will have occurred after this time. */
      queryStartTimeMs: number | null;
      /** Optional region filter to return results only if they overlap with the supplied region. This is a list of perymyriad points defining a polygon. The first and last elements must be the same to make a connected polygon. For example, a triangle should have 4 points defined in this list. */
      regionFilter?: ((number | null)[] | null)[] | null;
      /** The search text to find similar objects to. Phrases like "red sedan", "person in yellow shirt", etc. */
      searchText: string | null;
      /** Optional threshold applied to filter returned results, set as a float in [0.0, 1.0]. */
      similarityThreshold?: number | null;
    };
    /** Request object for searching similar object embeddings by vector. */
    Search_SearchSimilarObjectEmbeddingsByVectorWSRequest: {
      /** Maximum number of results to return */
      maxNumResults?: number | null;
      model?: components["schemas"]["ObjectSearchModelEnum"];
      /** List of object types to filter by */
      objectTypeFilter?: (string | null)[] | null;
      /** List of device facet UUIDs to search in */
      queryDeviceUuids?: (string | null)[] | null;
      /** Query end time in milliseconds */
      queryEndTimeMs?: number | null;
      /** Query start time in milliseconds */
      queryStartTimeMs?: number | null;
      /** List of perymyriad points defining a polygon region filter */
      regionFilter?: ((number | null)[] | null)[] | null;
      /** Search embedding vector */
      searchEmbedding?: (number | null)[] | null;
      /** Similarity threshold for search results */
      similarityThreshold?: number | null;
    };
    /** Request object for searching similar object embeddings. */
    Search_SearchSimilarObjectEmbeddingsWSRequest: {
      /** Optional number of results to return. Setting to larger numbers will increase latency. */
      maxNumResults?: number | null;
      model: components["schemas"]["ObjectSearchModelEnum"];
      /** Optional object type filter to narrow results to only vehicles or only humans. */
      objectTypeFilter?: (SearchSimilarObjectEmbeddingsWSRequestObjectTypeFilterEnum | null)[] | null;
      /** Optional list of device uuids to filter result set on. */
      queryDeviceUuids?: (string | null)[] | null;
      /** End time in epoch milliseconds. Results returned will have occurred before this time. */
      queryEndTimeMs: number | null;
      /** Start time in epoch milliseconds. Results returned will have occurred after this time. */
      queryStartTimeMs: number | null;
      /** Optional region filter to return results only if they overlap with the supplied region. This is a list of perymyriad points defining a polygon. The first and last elements must be the same to make a connected polygon. For example, a triangle should have 4 points defined in this list. */
      regionFilter?: ((number | null)[] | null)[] | null;
      /** The id of the embedding event you want to find similar objects to. Typically this is obtained from a previous text search result. */
      searchEmbeddingId: string | null;
      /** Optional threshold applied to filter returned results, set as a float in [0.0, 1.0]. */
      similarityThreshold?: number | null;
    };
    /** Response object for searching similar object embeddings. */
    Search_SearchSimilarObjectEmbeddingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Reason for moderation if query is not allowed */
      moderationReason?: string | null;
      /** Whether the query is allowed */
      queryAllowed?: boolean | null;
      /** List of similar object embedding matches */
      similarEmbeddings?:
        | components["schemas"]["GenericObjectEmbeddingMatch"][]
        | null;
    };
    /** Request object for searching similar video embeddings by time window. */
    Search_SearchSimilarVideoEmbeddingsByTimeWindowWSRequest: {
      /** Maximum number of results to return */
      maxNumResults?: number | null;
      model?: components["schemas"]["VideoSimilarityModelEnum"];
      /** List of device facet UUIDs to search in */
      queryDeviceUuids?: (string | null)[] | null;
      /** Query end time in milliseconds */
      queryEndTimeMs?: number | null;
      /** Query start time in milliseconds */
      queryStartTimeMs?: number | null;
      /** RUUID with optional appended facet information */
      searchEventDeviceUuid?: string | null;
      /** Search event end time in milliseconds */
      searchEventEndTimeMs?: number | null;
      /** Search event start time in milliseconds */
      searchEventStartTimeMs?: number | null;
      /** Similarity threshold for search results */
      similarityThreshold?: number | null;
    };
    /** Response object for searching similar video embeddings by time window. */
    Search_SearchSimilarVideoEmbeddingsByTimeWindowWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of search embeddings */
      searchEmbeddings?:
        | components["schemas"]["GenericVideoEmbedding"][]
        | null;
      /** List of similar video embedding matches */
      similarEmbeddings?:
        | components["schemas"]["GenericVideoEmbeddingMatch"][]
        | null;
    };
    /** Request object for searching similar video embeddings. */
    Search_SearchSimilarVideoEmbeddingsWSRequest: {
      /** Maximum number of results to return */
      maxNumResults?: number | null;
      model?: components["schemas"]["VideoSimilarityModelEnum"];
      /** List of device facet UUIDs to search in */
      queryDeviceUuids?: (string | null)[] | null;
      /** Query end time in milliseconds */
      queryEndTimeMs?: number | null;
      /** Query start time in milliseconds */
      queryStartTimeMs?: number | null;
      /** Search embedding vector */
      searchEmbedding?: (number | null)[] | null;
      /** Similarity threshold for search results */
      similarityThreshold?: number | null;
    };
    /** Response object for searching similar video embeddings. */
    Search_SearchSimilarVideoEmbeddingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of similar video embedding matches */
      similarEmbeddings?:
        | components["schemas"]["GenericVideoEmbeddingMatch"][]
        | null;
    };
    SecureTokenAlgorithm: SecureTokenAlgorithmEnum;
    SecurityZoneInfoType: {
      assignedCameraList?: (string | null)[] | null;
      isParentZone?: boolean | null;
      securityZoneName?: string | null;
      zoneAddress?: string | null;
      zoneId?: string | null;
      zoneParentId?: string | null;
    } | null;
    /** List of custom footage seek points V2 */
    SeekpointIndexType: {
      /** base 64 (url-safe) uuid string */
      compositComponentUuid?: string | null;
      customDescription?: string | null;
      customDisplayName?: string | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      objectType?: components["schemas"]["ActivityEnum"];
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      seekPointType?: components["schemas"]["SeekpointType"];
      seekpointType?: components["schemas"]["SeekpointType"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      timestampMs?: number | null;
    };
    SeekpointType: SeekpointTypeEnum;
    SensorValType: {
      sensorBoolean?: boolean | null;
      sensorDouble?: number | null;
      sensorLong?: number | null;
    };
    /** Display type for sensor seekpoints with sensor name information. */
    Sensor_FootageSensorSeekPointDisplayType: {
      a: components["schemas"]["ActivityEnum"];
      /** alerted on this? */
      al?: boolean | null;
      /** Custom activity display description, maximum 100 characters */
      cd?: string | null;
      /** custom activity display name */
      cdn?: string | null;
      co2?: number | null;
      cu?: (string | null)[] | null;
      ethanol?: number | null;
      /** humidity */
      h?: number | null;
      heatIndexDegF?: number | null;
      /** humidity percent in 16.16 fixed point */
      hp?: number | null;
      iaq?: number | null;
      /** base 64 (url-safe) uuid string */
      lu?: string | null;
      pm25?: number | null;
      probeTempC?: number | null;
      /** Name of the sensor */
      sn?: string | null;
      /** base 64 (url-safe) uuid string */
      su?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** temperature */
      t?: number | null;
      /** temperature in Celsius in 16.16 fixed point */
      tc?: number | null;
      thcPercent?: number | null;
      /** timestamp in milliseconds since epoch */
      ts: number | null;
      tvoc?: number | null;
      vapeSmokePercent?: number | null;
    };
    /** Request object for getting sensor seekpoints for a camera. */
    Sensor_GetFootageSensorSeekpointsForCameraWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** Duration in seconds for the query period */
      durationSec?: number | null;
      /** Start time in seconds for the query period */
      startTimeSec?: number | null;
    };
    /** Response object for getting sensor seekpoints for a camera. */
    Sensor_GetFootageSensorSeekpointsForCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of sensor seekpoints for the camera */
      seekPoints?:
        | components["schemas"]["Sensor_FootageSensorSeekPointDisplayType"][]
        | null;
    };
    /** Request object for getting sensor seekpoints for a location. */
    Sensor_GetFootageSensorSeekpointsForLocationWSRequest: {
      /** Duration in seconds for the query period */
      durationSec?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Start time in seconds for the query period */
      startTimeSec?: number | null;
    };
    /** Response object for getting sensor seekpoints for a location. */
    Sensor_GetFootageSensorSeekpointsForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of sensor seekpoints for the location */
      seekPoints?:
        | components["schemas"]["Sensor_FootageSensorSeekPointDisplayType"][]
        | null;
    };
    /** Request object for getting sensor seekpoints for a specific sensor. */
    Sensor_GetFootageSensorSeekpointsForSensorWSRequest: {
      /** Duration in seconds for the query period */
      durationSec?: number | null;
      /** base 64 (url-safe) uuid string */
      sensorUuid?: string | null;
      /** Start time in seconds for the query period */
      startTimeSec?: number | null;
    };
    /** Response object for getting sensor seekpoints for a specific sensor. */
    Sensor_GetFootageSensorSeekpointsForSensorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of footage seekpoints for the sensor */
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
      /** List of sensor seekpoints for the sensor */
      seekPoints?:
        | components["schemas"]["Sensor_FootageSensorSeekPointDisplayType"][]
        | null;
    };
    /** Request object for retrieving stored video information for a sensor. */
    Sensor_GetSensorPresenceWindowsWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Duration in seconds for the presence window query */
      durationSec?: number | null;
      /** Start time in seconds for the presence window query */
      startTimeSec?: number | null;
    };
    /** Response object containing stored video information for a sensor. */
    Sensor_GetSensorPresenceWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of presence windows for the sensor */
      presenceWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
    };
    ServiceNowSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      instanceUrl?: string | null;
      password?: string | null;
      username?: string | null;
    };
    SessionClientInfoType: {
      appName?: string | null;
      appOs?: string | null;
      appVersion?: string | null;
      userAgent?: string | null;
    };
    /** List of support authority sessions */
    SessionInfoWSType: {
      clientInfo?: components["schemas"]["SessionClientInfoType"];
      clientType?: SessionInfoWSClientTypeEnum | null;
      currentSession?: boolean | null;
      lastActivityTimeMs?: number | null;
      lastIpAccessedFrom?: string | null;
      lastIpAccessedFromGeoLocation?: components["schemas"]["GeoIpLocationType"];
    };
    /** Request object for getting shared clip data. */
    Share_GetSharedClipDataWSRequest: { [key: string]: unknown };
    /** Response object containing shared clip data. */
    Share_GetSharedClipDataWSResponse: {
      /** Description of the shared clip */
      description?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Name of the organization */
      orgName?: string | null;
      /** List of shared web clips */
      sharedWebClips?:
        | components["schemas"]["Share_SharedClipPublicType"][]
        | null;
      /** Title of the shared clip */
      title?: string | null;
    };
    /** Request object for getting shared footage bounding boxes. */
    Share_GetSharedFootageBoundingBoxesWSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** Duration in seconds for the bounding boxes query */
      duration?: number | null;
      /** Start time in milliseconds for the bounding boxes query */
      startTime?: number | null;
    };
    /** Response object containing shared footage bounding boxes. */
    Share_GetSharedFootageBoundingBoxesWSResponse: {
      /** List of shared footage bounding boxes */
      boundingBoxes?: components["schemas"]["FootageBoundingBoxType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting shared footage seekpoints V2. */
    Share_GetSharedFootageSeekpointsV2WSRequest: {
      /** base 64 (url-safe) uuid string */
      cameraUuid?: string | null;
      /** Duration in seconds for the seekpoints query */
      duration?: number | null;
      /** Start time in milliseconds for the seekpoints query */
      startTime?: number | null;
    };
    /** Response object containing shared footage seekpoints V2. */
    Share_GetSharedFootageSeekpointsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared footage seekpoints V2 */
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
      /** List of shared footage seekpoints (deprecated) */
      seekPoints?: components["schemas"]["FootageSeekPointV2Type"][] | null;
    };
    /** Request object for getting shared footage seekpoints. */
    Share_GetSharedFootageSeekpointsWSRequest: {
      /** Duration in seconds for the footage seekpoints query */
      duration?: number | null;
      /** Start time in milliseconds for the footage seekpoints query */
      startTime?: number | null;
    };
    /** Response object containing shared footage seekpoints. */
    Share_GetSharedFootageSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared footage seekpoints */
      seekPoints?: components["schemas"]["FootageSeekPointType"][] | null;
    };
    /** Request object for getting shared footage sensor seekpoints for a camera. */
    Share_GetSharedFootageSensorSeekpointsForCameraWSRequest: {
      /** Duration in seconds for the sensor seekpoints query */
      durationSec?: number | null;
      /** Start time in seconds for the sensor seekpoints query */
      startTimeSec?: number | null;
    };
    /** Response object containing shared footage sensor seekpoints for a camera. */
    Share_GetSharedFootageSensorSeekpointsForCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared footage sensor seekpoints for the camera */
      seekPoints?:
        | components["schemas"]["Sensor_FootageSensorSeekPointDisplayType"][]
        | null;
    };
    /** Response object containing shared live stream information. */
    Share_GetSharedLiveStreamInfoWSResponse: {
      /** Whether AEC is enabled for the shared live stream */
      aecEnabled?: boolean | null;
      /** Whether audio push-to-talk is enabled for the shared live stream */
      audioPushToTalkEnabled?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      fisheyeDisplayMode?: components["schemas"]["FisheyeDisplayMode"];
      /** Whether overlay is hidden for the shared live stream */
      hideOverlay?: boolean | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** Name of the location */
      locationName?: string | null;
      /** Camera mounting direction of the shared live stream */
      mountingDirection?: GetSharedLiveStreamInfoWSResponseMountingDirectionEnum | null;
      /** Name of the shared live stream */
      name?: string | null;
      /** Oldest segment time in seconds for the shared live stream */
      oldestSegmentSeconds?: number | null;
      schedule?: components["schemas"]["BaseSavedScheduleType"];
      /** Whether the shared live stream is shared with monitoring service */
      sharedWithMonitoringService?: boolean | null;
      /** List of dewarped tile views for the shared live stream */
      tileViews?: components["schemas"]["DewarpedView"][] | null;
      /** Time zone of the shared live stream */
      tz?: {
        displayName?: string | null;
        dstsavings?: number | null;
        id?: string | null;
        rawOffset?: number | null;
      } | null;
      /** Whether VOD is enabled for the shared live stream */
      vodEnabled?: boolean | null;
    };
    /** Request object for getting shared media URIs. */
    Share_GetSharedMediaUrisWSRequest: { [key: string]: unknown };
    /** Response object containing shared media URIs. */
    Share_GetSharedMediaUrisWSResponse: {
      /** WAN live MPD audio URI for the shared media */
      audioWanLiveMpdUri?: string | null;
      /** WAN live Opus audio URI for the shared media */
      audioWanLiveOpusUri?: string | null;
      /** WAN VOD MPD audio URI template for the shared media */
      audioWanVodMpdUriTemplate?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** WAN live H.264 URI for the shared media */
      wanLiveH264Uri?: string | null;
      /** WAN live M3U8 URI for the shared media */
      wanLiveM3u8Uri?: string | null;
      /** WAN live MPD URI for the shared media */
      wanLiveMpdUri?: string | null;
      /** WAN VOD M3U8 URI template for the shared media */
      wanVodM3u8UriTemplate?: string | null;
      /** WAN VOD MPD URI template for the shared media */
      wanVodMpdUriTemplate?: string | null;
    };
    /** Request object for getting shared presence windows. */
    Share_GetSharedPresenceWindowsWSRequest: {
      /** Duration in seconds for the presence window query */
      durationSec?: number | null;
      /** Start time in seconds for the presence window query */
      startTimeSec?: number | null;
    };
    /** Response object containing shared presence windows. */
    Share_GetSharedPresenceWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of presence types to their time windows */
      presenceWindows?: {
        [key: string]: components["schemas"]["TimeWindowSeconds"][] | null;
      } | null;
    };
    /** Response object containing shared timelapse data V2. */
    Share_GetSharedTimelapseDataV2WSResponse: {
      /** Description of the shared timelapse */
      description?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Name of the organization */
      orgName?: string | null;
      /** List of public timelapse UUIDs */
      publicTimelapseUuids?: (string | null)[] | null;
      /** Title of the shared timelapse */
      title?: string | null;
    };
    /** Request object for getting shared timelapse data. */
    Share_GetSharedTimelapseDataWSRequest: { [key: string]: unknown };
    /** Response object containing shared timelapse data. */
    Share_GetSharedTimelapseDataWSResponse: {
      /** Description of the shared timelapse */
      description?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Name of the organization */
      orgName?: string | null;
    };
    /** Response object containing shared video wall information. */
    Share_GetSharedVideoWallInfoWSResponse: {
      /** List of devices in the shared video wall */
      deviceList?:
        | components["schemas"]["Share_SharedVideoWallDeviceType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Name of the shared video wall */
      name?: string | null;
      /** Settings for the shared video wall */
      settings?: { [key: string]: { [key: string]: unknown } | null } | null;
      /** Whether VOD is enabled for the video wall */
      vodEnabled?: boolean | null;
    };
    /** Request object for getting shared video wall media URIs. */
    Share_GetSharedVideoWallMediaUrisWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object containing shared video wall media URIs. */
    Share_GetSharedVideoWallMediaUrisWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** WAN live H.264 URI for the shared video wall */
      wanLiveH264Uri?: string | null;
      /** WAN live M3U8 URI for the shared video wall */
      wanLiveM3u8Uri?: string | null;
      /** WAN live MPD URI for the shared video wall */
      wanLiveMpdUri?: string | null;
      /** WAN VOD M3U8 URI template for the shared video wall */
      wanVodM3u8UriTemplate?: string | null;
      /** WAN VOD MPD URI template for the shared video wall */
      wanVodMpdUriTemplate?: string | null;
    };
    /** Request object for sharing a link via phone numbers and email addresses. */
    Share_ShareLinkWSRequest: {
      /** List of email addresses to share the link with */
      emailAddresses?: (string | null)[] | null;
      /** The link to be shared */
      link?: string | null;
      /** List of phone numbers to share the link with */
      phoneNumbers?: (string | null)[] | null;
    };
    /** Response object for sharing a link. */
    Share_ShareLinkWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Public type for shared clips with comprehensive metadata. */
    Share_SharedClipPublicType: {
      /** List of bounding boxes for the clip */
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      /** Description of the shared clip */
      description?: string | null;
      /** Map of device UUIDs to their bounding boxes */
      deviceBoundingBoxMap?: {
        [key: string]: components["schemas"]["ClipBoundingBoxType"][] | null;
      } | null;
      /** Map of device UUIDs to their metadata locations */
      deviceMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      /** Map of device UUIDs to their seek points */
      deviceSeekPointMap?: {
        [key: string]: components["schemas"]["ClipSeekPointV2Type"][] | null;
      } | null;
      /** Duration in seconds of the clip */
      durationSec?: number | null;
      /** Map of location UUIDs to their names */
      locationNameMap?: { [key: string]: string | null } | null;
      /** Map of location UUIDs to their time zones */
      locationTimeZoneMap?: {
        [key: string]: {
          displayName?: string | null;
          dstsavings?: number | null;
          id?: string | null;
          rawOffset?: number | null;
        } | null;
      } | null;
      /** base 64 (url-safe) uuid string */
      publicClipUuid?: string | null;
      /** List of seek points for the clip */
      seekPoints?: components["schemas"]["ClipSeekPointV2Type"][] | null;
      /** Start time in milliseconds of the clip */
      startTime?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
    };
    /** Device type for shared video walls. */
    Share_SharedVideoWallDeviceType: {
      fisheyeDisplayMode?: components["schemas"]["FisheyeDisplayMode"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      /** Name of the location for the shared video wall device */
      locationName?: string | null;
      /** Camera mounting direction of the shared video wall device */
      mountingDirection?: SharedVideoWallDeviceMountingDirectionEnum | null;
      /** Name of the shared video wall device */
      name?: string | null;
      /** List of dewarped tile views for the shared video wall device */
      tileViews?: components["schemas"]["DewarpedView"][] | null;
      /** Time zone of the shared video wall device */
      tz?: {
        displayName?: string | null;
        dstsavings?: number | null;
        id?: string | null;
        rawOffset?: number | null;
      } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Detailed information about the shared clip group */
    SharedClipGroupWithDetailsType: {
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimeSecs?: number | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      sharedClips?: components["schemas"]["SharedClipWithDetailsType"][] | null;
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** List of shared clip groups */
    SharedClipGroupWrapperType: {
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTime?: number | null;
      isSecured?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      sharedClips?: components["schemas"]["SharedClipType"][] | null;
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** List of shared clip groups */
    SharedClipGroupWrapperV2Type: {
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimeSecs?: number | null;
      isSecured?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      sharedClips?: components["schemas"]["SharedClipV2Type"][] | null;
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    SharedClipType: {
      clipMetaData?: components["schemas"]["ClipMetaDataType"];
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      deviceUuids?: (string | null)[] | null;
      timestampMs?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    SharedClipV2Type: {
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      durationSec?: number | null;
      startTime?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    SharedClipWithDetailsType: {
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      description?: string | null;
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      durationSec?: number | null;
      seekPoints?: components["schemas"]["ClipSeekPointV2Type"][] | null;
      startTime?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    SharedTimelapseClipType: {
      clipDuration?: number | null;
      clipFormat?: SharedTimelapseClipClipFormatEnum | null;
      sources?: components["schemas"]["TimelapseSource"][] | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      videoStartTime?: number | null;
      videoStopTime?: number | null;
    };
    /** List of shared timelapse groups for the organization */
    SharedTimelapseGroupWrapperType: {
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimeSecs?: number | null;
      isSecured?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      sharedTimelapses?:
        | components["schemas"]["SharedTimelapseClipType"][]
        | null;
      title?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ShellyDevice: {
      canSendCommands?: ShellyDeviceCanSendCommandsEnum | null;
      channels?: (string | null)[] | null;
      deviceType?: ShellyDeviceDeviceTypeEnum | null;
      hostUrl?: string | null;
      isOnline?: boolean | null;
      temperature?: number | null;
      timestampMs?: number | null;
      voltage?: number | null;
    } | null;
    ShellyType:
      | ({
          canSendDiagnosticNotifications?: boolean | null;
          diagnosticQuietPeriodSecs?: number | null;
          shellyDeviceMap?: {
            [key: string]: components["schemas"]["ShellyDevice"];
          } | null;
          thirdPartyDeviceToLocationMap?: {
            [key: string]: string | null;
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    Shipment: {
      methodOfPaymentCode?: string | null;
      notes?: (string | null)[] | null;
      serviceLevel?: ShipmentServiceLevelEnum | null;
      shipDateMs?: number | null;
      shippingMethod?: string | null;
    };
    ShippedItemType: {
      partNumber?: string | null;
      quantityShipped?: number | null;
      serialNumber?: string | null;
    } | null;
    Shipper: {
      address1?: string | null;
      address2?: string | null;
      address3?: string | null;
      city?: string | null;
      companyName?: string | null;
      contactName?: string | null;
      country?: string | null;
      postalCode?: string | null;
      referenceId?: string | null;
      state?: string | null;
    };
    SimpleAuditEventType: {
      auditEvent?: SimpleAuditEventAuditEventEnum | null;
    } | null;
    SimpleDeviceActivityEventType: {
      activityEvent?: components["schemas"]["ActivityEnum"];
    } | null;
    SimpleDiagnosticEventType: {
      diagnosticEvent?: SimpleDiagnosticEventDiagnosticEventEnum | null;
    } | null;
    SlackSettings: {
      accessToken?: string | null;
      channel?: string | null;
      enabled?: boolean | null;
      webhookUrl?: string | null;
    };
    SlackSettingsV2: {
      channelId?: string | null;
      channelName?: string | null;
      code?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      orgAccessToken?: string | null;
      sendChannelNotifications?: boolean | null;
      sendUserNotifications?: boolean | null;
      /** A HashMap of <RhombusOrgUser uuid : Slack user uuid, user access token>. This stores the information for each Slack user. */
      userMap?: { [key: string]: components["schemas"]["UserInfo"] } | null;
      webhookUrl?: string | null;
    };
    SplicedClipProgress: {
      region?: string | null;
      segmentsUploaded?: number | null;
      totalSegments?: number | null;
    };
    /** List of spliced clips currently in progress */
    SplicedClipType: {
      accessSettings?: components["schemas"]["ClipAccessSettings"];
      analyzeClip?: boolean | null;
      clipTargetLocation?: components["schemas"]["MetaDataLocationType"];
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      consoleDelete?: boolean | null;
      deleted?: boolean | null;
      description?: string | null;
      deviceMap?: {
        [key: string]: components["schemas"]["SplicedClipProgress"];
      } | null;
      devicePresentationOrder?: (string | null)[] | null;
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      deviceUuidMap?: {
        [key: string]: components["schemas"]["SplicedClipProgress"];
      } | null;
      deviceUuidToAlteredViewMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      deviceUuidToFisheyePresentationMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      duration?: number | null;
      integrationUploadList?: components["schemas"]["IntegrationEnum"][] | null;
      isPolicyEvent?: boolean | null;
      metadataBucketRegion?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      saveClip?: boolean | null;
      saveFrame?: boolean | null;
      segmentsUploaded?: number | null;
      sendToSharedStorage?: boolean | null;
      startTime?: number | null;
      status?: SplicedClipStatusEnum | null;
      thumbnailRelativeSecond?: number | null;
      timestampMs?: number | null;
      title?: string | null;
      totalSegments?: number | null;
      /** base 64 (url-safe) uuid string */
      transactionUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    SquareSettings: {
      enabled?: boolean | null;
      locationIdToDeviceUuidsMap?: {
        [key: string]: (string | null)[] | null;
      } | null;
    };
    StandardCsnType: {
      createdAtMillis?: number | null;
      endDateEpochSecExclusive?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUsedAccessControlledDoorUuid?: string | null;
      lastUsedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      lastUsedLocationUuid?: string | null;
      lowercaseHexValue?: string | null;
      /** base 64 (url-safe) uuid string */
      managedCredUuid?: string | null;
      note?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      startDateEpochSecInclusive?: number | null;
      type?: components["schemas"]["AccessControlCredentialEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      value?: string | null;
      workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
    } | null;
    StaticEpochSecondsProvisioner:
      | ({
          value?: number | null;
        } & {
          type?: string;
        })
      | null;
    Stats: {
      avg?: number | null;
      stddev?: number | null;
    };
    StatsCredentialReference: {
      /** base 64 (url-safe) uuid string */
      credentialUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    StatusType: {
      family?: StatusFamilyEnum | null;
      reasonPhrase?: string | null;
      statusCode?: number | null;
    } | null;
    StreamTypeEnum: StreamTypeEnum;
    StreamingOutput: { [key: string]: unknown } | null;
    /** A sequence of one or more base 64 (url-safe) uuid substrings. These substrings are separated by dots (.). */
    SubLocationsHierarchyKey: {
      locationUuids?: (string | null)[] | null;
    };
    /** List of summary count time series data points */
    SummaryCountTimeSeriesDataPointType: {
      avgEventCountMap?: {
        [key: string]: components["schemas"]["EventCount"];
      } | null;
      dateLocal?: string | null;
      dateUtc?: string | null;
      maxEventCountMap?: {
        [key: string]: components["schemas"]["EventCount"];
      } | null;
      minEventCountMap?: {
        [key: string]: components["schemas"]["EventCount"];
      } | null;
    };
    SupervisionModeEnumType: SupervisionModeEnumType;
    SupervisionStateEnumType: SupervisionStateEnumType;
    SupportAuthorityEventOriginator:
      | ({
          /** base 64 (url-safe) uuid string */
          grantedToInternalEntityUuid?: string | null;
          grantedToName?: string | null;
          /** base 64 (url-safe) uuid string */
          supportAuthorityUuid?: string | null;
          supportUserEmail?: string | null;
          supportUsername?: string | null;
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    SupportAuthorityLockdownEventOriginator:
      | ({
          /** base 64 (url-safe) uuid string */
          grantedToInternalEntityUuid?: string | null;
          grantedToName?: string | null;
          /** base 64 (url-safe) uuid string */
          supportAuthorityUuid?: string | null;
          supportUserEmail?: string | null;
          supportUsername?: string | null;
        } & {
          type?: components["schemas"]["LockdownEventOriginatorEnumType"];
        })
      | null;
    /** Support authority configuration to add */
    SupportAuthorityType: {
      authorityType?: SupportAuthorityAuthorityTypeEnum | null;
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimestamp?: number | null;
      grantedByUsername?: string | null;
      grantedToEmail?: string | null;
      /** base 64 (url-safe) uuid string */
      grantedToInternalEntityUuid?: string | null;
      grantedToName?: string | null;
      loginAccessAllowed?: boolean | null;
      managedByMsp?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
    };
    /** Request object for adding a support authority to the organization. */
    Support_AddSupportAuthorityWSRequest: {
      authority?: components["schemas"]["SupportAuthorityType"];
      /** Whether this is a certified partner requiring internal entity UUID */
      isCertifiedPartner?: boolean | null;
    };
    /** Response object for adding a support authority to the organization. */
    Support_AddSupportAuthorityWSResponse: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for allowing support authority access. */
    Support_AlllowSupportAuthorityAccessWSRequest: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
    };
    /** Response object for allowing support authority access. */
    Support_AlllowSupportAuthorityAccessWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for finding support authority sessions. */
    Support_FindSupportAuthoritySessionsWSRequest: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
    };
    /** Response object containing support authority sessions. */
    Support_FindSupportAuthoritySessionsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of support authority sessions */
      sessions?: components["schemas"]["SessionInfoWSType"][] | null;
    };
    /** Request object for getting support authorities. */
    Support_GetSupportAuthoritiesWSRequest: { [key: string]: unknown };
    /** Response object containing support authorities. */
    Support_GetSupportAuthoritiesWSResponse: {
      /** List of support authorities */
      authorities?:
        | components["schemas"]["Support_SupportAuthorityWSType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for logging out all support authority sessions. */
    Support_LogoutAllSupportAuthoritySessionsWSRequest: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
    };
    /** Response object for logging out all support authority sessions. */
    Support_LogoutAllSupportAuthoritySessionsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for looking up support partner authorities. */
    Support_LookupSupportPartnerAuthoritiesWSRequest: {
      /** Keyword to search for support partner authorities */
      lookupKeyword?: string | null;
    };
    /** Response object containing support partner authorities. */
    Support_LookupSupportPartnerAuthoritiesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of support partner authorities */
      supportPartnerAuthorities?:
        | components["schemas"]["Support_SupportPartnerAuthorityWSType"][]
        | null;
    };
    /** Request object for removing a support authority from the organization. */
    Support_RemoveSupportAuthorityWSRequest: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
    };
    /** Response object for removing a support authority from the organization. */
    Support_RemoveSupportAuthorityWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for revoking support authority access. */
    Support_RevokeSupportAuthorityAccessWSRequest: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
    };
    /** Response object for revoking support authority access. */
    Support_RevokeSupportAuthorityAccessWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Selective update type for support authority with optional fields. */
    Support_SupportAuthoritySelectiveUpdateWSType: {
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
      /** Optional description of the support authority */
      description?: string | null;
      /** Optional expiration timestamp for the support authority */
      expirationTimestamp?: number | null;
      /** Optional email of the person granted access */
      grantedToEmail?: string | null;
      /** Optional name of the person granted access */
      grantedToName?: string | null;
      /** Optional flag indicating if login access is allowed */
      loginAccessAllowed?: boolean | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
    };
    /** Webservice type for support authority with access URLs. */
    Support_SupportAuthorityWSType: {
      authorityType?: SupportAuthorityWSAuthorityTypeEnum | null;
      /** base 64 (url-safe) uuid string */
      authorityUuid?: string | null;
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimestamp?: number | null;
      grantedByUsername?: string | null;
      grantedToEmail?: string | null;
      /** base 64 (url-safe) uuid string */
      grantedToInternalEntityUuid?: string | null;
      grantedToName?: string | null;
      loginAccessAllowed?: boolean | null;
      managedByMsp?: boolean | null;
      /** Mobile access URL for the support authority */
      mobileAccessUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      /** Web access URL for the support authority */
      webAccessUrl?: string | null;
    };
    /** Webservice type for support partner authority information. */
    Support_SupportPartnerAuthorityWSType: {
      /** Contact email for the support partner authority */
      contactEmail?: string | null;
      /** Contact name for the support partner authority */
      contactName?: string | null;
      /** Name of the support partner authority */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for updating a support authority. */
    Support_UpdateSupportAuthorityWSRequest: {
      update?: components["schemas"]["Support_SupportAuthoritySelectiveUpdateWSType"];
    };
    /** Response object for updating a support authority. */
    Support_UpdateSupportAuthorityWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    TPLinkSettings: {
      cameraToSwitchMap?: { [key: string]: string | null } | null;
      enabled?: boolean | null;
      password?: string | null;
      targetState?: number | null;
      url?: string | null;
      username?: string | null;
    };
    TamperSettings: {
      accelerometer_change_tamper_threshold?: number | null;
      accelerometer_disabled?: boolean | null;
      pressure_switch_tamper_disabled?: boolean | null;
    };
    /** Update Tamper detection settings */
    TamperSettingsSelectiveUpdate: {
      accelerometer_change_tamper_threshold?: number | null;
      accelerometer_disabled?: boolean | null;
      pressure_switch_tamper_disabled?: boolean | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    TempProbeType: {
      adcMv?: number | null;
      adcRaw?: number | null;
      present?: boolean | null;
      tempC?: number | null;
      timestampSec?: number | null;
    };
    /** List of third-party camera passwords */
    ThirdPartyCameraPasswordType: {
      notes?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      password?: string | null;
      username?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    ThirdPartyCameraSettings: {
      onvif_ip?: string | null;
      onvif_password?: string | null;
      onvif_profiletoken?: string | null;
      onvif_ptz_servicepath?: string | null;
      onvif_username?: string | null;
      ptz_engine?: ThirdPartyCameraSettingsPtzEngineEnum | null;
      ptz_movement?: ThirdPartyCameraSettingsPtzMovementEnum | null;
      ptz_translation_space?: ThirdPartyCameraSettingsPtzTranslationSpaceEnum | null;
    };
    ThreatCaseStatus: ThreatCaseStatusEnum;
    ThreatCaseTimelineEventType: {
      /** base 64 (url-safe) uuid string */
      alertUuid?: string | null;
      message?: string | null;
      noonlightVerificationId?: string | null;
      timestampSec?: number | null;
      type?: components["schemas"]["ThreatCaseTimelineEventTypeEnum"];
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    ThreatCaseTimelineEventTypeEnum: ThreatCaseTimelineEventTypeEnum;
    /** Time interval for filtering vehicle events */
    TimeInterval: {
      endMs?: number | null;
      startMs?: number | null;
    };
    /** Map of UUIDs to their time series data points */
    TimeSeriesDataPointV2Type: {
      dateLocal?: string | null;
      dateUtc?: string | null;
      eventCountMap?: { [key: string]: number | null } | null;
    };
    /** Map of presence types to their time windows */
    TimeWindowSeconds: {
      durationSeconds?: number | null;
      startSeconds?: number | null;
    };
    /** Updated timelapse clip information */
    TimelapseClipType: {
      clipCreationTime?: number | null;
      clipDuration?: number | null;
      clipFormat?: TimelapseClipClipFormatEnum | null;
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      description?: string | null;
      drawCameraDetails?: boolean | null;
      drawTimestamp?: boolean | null;
      drawWatermark?: boolean | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      passwordDigest?: string | null;
      shared?: boolean | null;
      skipNights?: boolean | null;
      skipNonBusinessHours?: boolean | null;
      skipWeekends?: boolean | null;
      sources?: components["schemas"]["TimelapseSource"][] | null;
      status?: components["schemas"]["TimelapseStatus"];
      title?: string | null;
      videoStartTime?: number | null;
      videoStopTime?: number | null;
    };
    TimelapseSource: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
    };
    TimelapseStatus: {
      percentComplete?: number | null;
      state?: TimelapseStatusStateEnum | null;
    };
    /** Optional filter by an event timestamp. If not specified, the filter defaults to the last 7 days. */
    TimestampFilter: {
      /** End of the date range (inclusive). */
      rangeEnd?: string | null;
      /** Start of the date range (inclusive). */
      rangeStart?: string | null;
    };
    ToastCheckInfo: {
      totalAmount?: number | null;
    };
    ToastOrderIdType: {
      employeeName?: string | null;
      guid?: string | null;
      locationName?: string | null;
      restaurantName?: string | null;
      toastCheckInfo?: components["schemas"]["ToastCheckInfo"];
    };
    /** A HashMap of <Restaurant Guid, ToastRestaurantInfo>. This stores the information for each restaurant. */
    ToastRestaurantInfo: {
      /** The location name of the restaurant from Toast */
      locationName?: string | null;
      /** The name of the restaurant from Toast. e.g., COFFEE CAN */
      restaurantName?: string | null;
    };
    ToastRestaurantSettings: {
      /** The location name of the restaurant from Toast */
      locationName?: string | null;
      /** The name of the restaurant from Toast, e.g. COFFEE CAN */
      restaurantName?: string | null;
      /** Collection of service area settings for this restaurant */
      serviceAreaSettingsMap?: {
        [key: string]: components["schemas"]["GenericPosSettings"];
      } | null;
    } | null;
    /** Toast POS integration settings to update */
    ToastSettings: {
      /** The current restaurant guid you want to use */
      currentToastRestaurantGuid?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      migrated?: boolean | null;
      /** A HashMap of <Service Area Guid, PosIntegrationInfoType>. This stores the Pos Information and assigned cameras. */
      posInfoMap?: {
        [key: string]: components["schemas"]["PosIntegrationInfoType"];
      } | null;
      /** A HashMap of <Restaurant Guid, ToastRestaurantInfo>. This stores the information for each restaurant. */
      toastRestaurantInfoMap?: {
        [key: string]: components["schemas"]["ToastRestaurantInfo"];
      } | null;
    };
    ToastType:
      | ({
          currentToastRestaurantGuid?: string | null;
          restaurantSettingsMap?: {
            [key: string]: components["schemas"]["ToastRestaurantSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    Trigger: {
      activity?: TriggerActivityEnum | null;
      value?: string | null;
    };
    TriggerComponentRelayActionRecordType: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      outputType?: components["schemas"]["ComponentRelayOutputType"];
      overrideRelayDurationMs?: number | null;
      overrideRelayDurationSec?: number | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      state?: components["schemas"]["GenericRelayStateEnumType"];
      succeeded?: boolean | null;
    };
    TriggerComponentRelayActionType: {
      /** base 64 (url-safe) uuid string */
      componentUuid?: string | null;
      outputType?: components["schemas"]["ComponentRelayOutputType"];
      overrideRelayDurationMs?: number | null;
      overrideRelayDurationSec?: number | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      state?: components["schemas"]["GenericRelayStateEnumType"];
      version?: number | null;
    };
    TriggerContent: {
      apiKey?: string | null;
      experienceIds?: (string | null)[] | null;
      experienceNames?: (string | null)[] | null;
      message?: string | null;
      parameter1?: string | null;
      parameter2?: string | null;
      parameter3?: string | null;
      playerDeviceNames?: (string | null)[] | null;
      playerIds?: (string | null)[] | null;
      playerTags?: (string | null)[] | null;
    };
    TripwireSettingsType: {
      intervalSeconds?: number | null;
      threshold?: number | null;
    };
    /** tvOs configuration to update */
    TvOsConfigType: {
      limitedVideoWallUuids?: (string | null)[] | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for getting a specific tvOs configuration. */
    Tvos_GetTvOsConfigWsRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object containing a specific tvOs configuration. */
    Tvos_GetTvOsConfigWsResponse: {
      config?: components["schemas"]["TvOsConfigType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting all tvOs configurations for the organization. */
    Tvos_GetTvOsConfigsForOrgWsRequest: { [key: string]: unknown };
    /** Response object containing all tvOs configurations for the organization. */
    Tvos_GetTvOsConfigsForOrgWsResponse: {
      /** List of tvOs configurations for the organization */
      configs?: components["schemas"]["TvOsConfigType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a tvOs configuration. */
    Tvos_UpdateTvOsConfigWsRequest: {
      config?: components["schemas"]["TvOsConfigType"];
    };
    /** Response object for updating a tvOs configuration. */
    Tvos_UpdateTvOsConfigWsResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    TwilioSettings: {
      enabled?: boolean | null;
      phoneNumbers?: (string | null)[] | null;
    };
    UAPSettingsType: {
      enabled?: boolean | null;
      text?: string | null;
    } | null;
    /** List of unhealthy device alerts */
    UnHealthyDeviceAlertType: {
      deviceUuid?: string | null;
      orgUuid?: string | null;
      symptom?: UnHealthyDeviceAlertSymptomEnum | null;
      timestamp?: number | null;
      uuid?: string | null;
    };
    UnlockDoorActionRecordType: {
      doorId?: string | null;
      placeId?: string | null;
      succeeded?: boolean | null;
      system?: string | null;
    };
    UriBuilder: { [key: string]: unknown } | null;
    UserCustomMetadataTextElement:
      | ({
          color?: string | null;
          maxWidth?: number | null;
          /** base 64 (url-safe) uuid string */
          metadataTemplateUuid?: string | null;
          style?: string | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    /** User customization settings and preferences */
    UserCustomizationsType: {
      dashboard?: components["schemas"]["DashboardCustomizations"];
      frontend?: { [key: string]: string | null } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    UserEventOriginator:
      | ({
          userEmail?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
          username?: string | null;
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    /** A HashMap of <RhombusOrgUser uuid : Slack user uuid, user access token>. This stores the information for each Slack user. */
    UserInfo: {
      /** Slack user access token */
      userAccessToken?: string | null;
      /** Slack user uuid */
      userId?: string | null;
    };
    UserLockdownEventOriginator:
      | ({
          userEmail?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
          username?: string | null;
        } & {
          type?: components["schemas"]["LockdownEventOriginatorEnumType"];
        })
      | null;
    UserMetadataEnum: UserMetadataEnum;
    UserMetadataField: {
      createdAtMillis?: number | null;
      fieldValue?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      templateUuid?: string | null;
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    UserMetadataFieldTemplate: {
      createdAtMillis?: number | null;
      fieldName?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scimFieldName?: string | null;
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    UserMetadataFieldTemplateSelectiveUpdate: {
      createdAtMillis?: number | null;
      fieldName?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scimFieldName?: string | null;
      updatedAtMillis?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    UserMetadataTextElement:
      | ({
          color?: string | null;
          field?: components["schemas"]["UserMetadataEnum"];
          maxWidth?: number | null;
          style?: string | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    /** Template update configuration */
    UserNotificationSelectiveUpdateV2: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      timeFrames?: components["schemas"]["NotificationTimeFrame"][] | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** List of user notification settings (V3) */
    UserNotificationSettingsV3Type: {
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** List of user notification settings (V4) */
    UserNotificationSettingsV4Type: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      timeFrames?: components["schemas"]["NotificationTimeFrame"][] | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Updated permission group configuration */
    UserPermissionGroupType: {
      accessControlLocationAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      accessibleLocations?: (string | null)[] | null;
      assignablePermissionGroups?: (string | null)[] | null;
      defaultAccessControlPermissionForNewLocations?: components["schemas"]["Permission"];
      defaultPermissionForNewLocations?: components["schemas"]["Permission"];
      description?: string | null;
      deviceAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      functionalityList?: components["schemas"]["Functionality"][] | null;
      inLine?: boolean | null;
      installer?: boolean | null;
      locationAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      locationGranularAccessMap?: {
        [key: string]: {
          [key: string]: components["schemas"]["Permission"];
        } | null;
      } | null;
      mutable?: boolean | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      storedInS3?: boolean | null;
      superAdmin?: boolean | null;
      userPermissionGroupAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** List of user permissions */
    UserPermissionType: {
      /** base 64 (url-safe) uuid string */
      groupUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    UserProfilePhotoElement:
      | ({
          height?: number | null;
          width?: number | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    /** Virtual MFA device information for the current user */
    UserVirtualMfaDeviceType: {
      createdAtMillis?: number | null;
    };
    /** Request object for assigning an email to a user. */
    User_AssignEmailToUserWSRequest: {
      /** Email address to assign to the user */
      emailToAssign?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response object for assigning an email to a user. */
    User_AssignEmailToUserWSResponse: { [key: string]: unknown };
    User_BulkProvisionCredentialsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      messages?: (string | null)[] | null;
    };
    /** Request object for changing a user's email address. */
    User_ChangeUserEmailWSRequest: {
      /** New email address for the user */
      newEmail?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response object for changing a user's email address. */
    User_ChangeUserEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for changing a user's password. */
    User_ChangeUserPasswordWSRequest: {
      /** Current password of the user */
      currentPassword?: string | null;
      /** New password for the user */
      newPassword?: string | null;
    };
    /** Response object for changing a user's password. */
    User_ChangeUserPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the password change response */
      responseStatus?: ChangeUserPasswordWSResponseResponseStatusEnum | null;
    };
    /** CreateUserWSRequest */
    User_CreateUserWSRequest: {
      /** The set of accessible Rhombus apps */
      accessibleRhombusApps?: (CreateUserWSRequestAccessibleRhombusAppsEnum | null)[] | null;
      /** The email of the user */
      email?: string | null;
      /** The name of the user */
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      rhombusKeySettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      /** Suppress the welcome email for the Rhombus Key mobile app if the user is provided access */
      suppressRhombusKeyWelcomeEmail?: boolean | null;
      /** Suppress the welcome email */
      suppressWelcomeEmail?: boolean | null;
    };
    /** Response object for creating a user. */
    User_CreateUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Status of the user creation response */
      responseStatus?: CreateUserWSResponseResponseStatusEnum | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Request object for deleting a user. */
    User_DeleteUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response object for deleting a user. */
    User_DeleteUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting the virtual MFA device for the current user. */
    User_DeleteVirtualMfaDeviceForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    /** Response object for deleting the virtual MFA device for the current user. */
    User_DeleteVirtualMfaDeviceForCurrentUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for finding a user by email. */
    User_FindUserByEmailWSRequest: {
      /** Email address of the user to find */
      email?: string | null;
    };
    /** Response object containing user information found by email. */
    User_FindUserByEmailWSResponse: {
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    /** Request object for finding a user by UUID. */
    User_FindUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response object containing user information. */
    User_FindUserWSResponse: {
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    User_GetBulkProvisionCredentialsFormatWSResponse: {
      accessControlEnabled?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      example?: string | null;
      explanation?: string | null;
    };
    User_GetImportUsersFormatWSResponse: {
      accessControlEnabled?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      example?: string | null;
      explanation?: string | null;
    };
    User_GetRhombusKeyConfigForUserWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_GetRhombusKeyConfigForUserWSResponse: {
      userRhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
    };
    User_GetUserCustomizationFlagsWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_GetUserCustomizationFlagsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      userCustomizations?: { [key: string]: string | null } | null;
    };
    /** Request object for getting users in the organization for reports. */
    User_GetUsersInOrgForReportsWSRequest: { [key: string]: unknown };
    /** Response object containing users in the organization for reports. */
    User_GetUsersInOrgForReportsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of users in the organization for reports */
      users?: components["schemas"]["RhombusOrgUserType"][] | null;
    };
    /** Request object for getting all users in the organization. */
    User_GetUsersInOrgWSRequest: { [key: string]: unknown };
    /** Response object containing all users in the organization with their settings and permissions. */
    User_GetUsersInOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of user notification settings (V3) */
      notificationSettings?:
        | components["schemas"]["UserNotificationSettingsV3Type"][]
        | null;
      /** List of user notification settings (V4) */
      notificationSettingsV2?:
        | components["schemas"]["UserNotificationSettingsV4Type"][]
        | null;
      /** List of partner users in the organization */
      partners?: components["schemas"]["WrappedRhombusOrgUserType"][] | null;
      /** List of Rhombus Key app configurations */
      rhombusKeyAppConfigs?:
        | components["schemas"]["RhombusKeyAppConfigType"][]
        | null;
      /** List of user snooze notification settings */
      snoozeSettings?:
        | components["schemas"]["User_UserSnoozeNotificationSettingsType"][]
        | null;
      /** List of user permissions */
      userPermissions?: components["schemas"]["UserPermissionType"][] | null;
      /** List of users in the organization */
      users?: components["schemas"]["WrappedRhombusOrgUserType"][] | null;
    };
    /** Request object for getting the virtual MFA device for the current user. */
    User_GetVirtualMfaDeviceForCurrentUserWSRequest: { [key: string]: unknown };
    /** Response object containing the virtual MFA device for the current user. */
    User_GetVirtualMfaDeviceForCurrentUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      virtualMfaDevice?: components["schemas"]["UserVirtualMfaDeviceType"];
    };
    User_ImportUsersWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      messages?: (string | null)[] | null;
    };
    /** Organization details and summary information */
    User_RhombusKeyOrgDetailsType: {
      companyLogoUrl?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for sending a mobile download SMS. */
    User_SendMobileDownloadSMSWSRequest: {
      /** Phone number to send the SMS to */
      phoneNumber?: string | null;
    };
    /** Response object for sending a mobile download SMS. */
    User_SendMobileDownloadSMSWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for sending a partner access granted email. */
    User_SendPartnerAccessGrantedEmailWSRequest: {
      /** Login link for the partner */
      loginLink?: string | null;
      /** Email address of the partner */
      partnerEmailAddress?: string | null;
      /** Full name of the partner */
      partnerFullName?: string | null;
      /** Phone number of the partner */
      phoneNumber?: string | null;
    };
    /** Response object for sending a partner access granted email. */
    User_SendPartnerAccessGrantedEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for sending a Rhombus Key user welcome email. */
    User_SendRhombusKeyUserWelcomeEmailWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response object for sending a Rhombus Key user welcome email. */
    User_SendRhombusKeyUserWelcomeEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for sending a welcome email to a user. */
    User_SendUserWelcomeEmailWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response object for sending a welcome email to a user. */
    User_SendUserWelcomeEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for setting up a virtual MFA device for the current user. */
    User_SetupVirtualMfaDeviceForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    /** Response object for setting up a virtual MFA device for the current user. */
    User_SetupVirtualMfaDeviceForCurrentUserWSResponse: {
      /** Whether the MFA device already exists */
      alreadyExists?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** QR code setup data for the MFA device */
      qrCodeSetupData?: string | null;
      /** Whether the MFA device setup was successful */
      success?: boolean | null;
    };
    User_UpdatePartnerUserNotificationSettingsWSRequest: {
      allClientsSelected?: boolean | null;
      clientNotificationIntervalsMap?: {
        [key: string]:
          | components["schemas"]["PartnerNotificationClientSection"][]
          | null;
      } | null;
      notificationIntervalsForAllClients?:
        | components["schemas"]["PartnerNotificationClientSection"][]
        | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_UpdatePartnerUserNotificationSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_UpdatePartnerWSRequest: {
      bypassSaml?: boolean | null;
      mfaEnabled?: boolean | null;
      name?: string | null;
      notificationSettings?: components["schemas"]["PartnerNotificationSettingsType"];
      notificationSettingsV2?: components["schemas"]["PartnerNotificationSettingsV2"];
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_UpdatePartnerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_UpdateRhombusKeySettingsForUserWSRequest: {
      bypassSaml?: boolean | null;
      endDateProvisioner?: components["schemas"]["EpochSecondsProvisioner"];
      maxMobileCredsAllowed?: number | null;
      remoteUnlockEnabled?: boolean | null;
      rhombusKeyAccessEnabled?: boolean | null;
      startDateProvisioner?: components["schemas"]["EpochSecondsProvisioner"];
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_UpdateRhombusKeySettingsForUserWSResponse: {
      userRhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
    };
    User_UpdateUserCustomizationFlagsWSRequest: {
      userCustomizationFlags?: { [key: string]: string | null } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_UpdateUserCustomizationFlagsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_UpdateUserNotificationSettingsWSRequest: {
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      timeFrames?: components["schemas"]["NotificationTimeFrame"][] | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_UpdateUserNotificationSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_UpdateUserSelectiveWSRequest: {
      bypassSaml?: boolean | null;
      mfaEnabled?: boolean | null;
      name?: string | null;
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response object for selective user updates. */
    User_UpdateUserSelectiveWSResponse: { [key: string]: unknown };
    /** Request object for updating user information and settings. */
    User_UpdateUserWSRequest: {
      /** Whether SAML bypass is enabled for the user */
      bypassSaml?: boolean | null;
      /** Whether MFA is enabled for the user */
      mfaEnabled?: boolean | null;
      /** Name of the user */
      name?: string | null;
      /** List of notification intervals (V2) for the user */
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      /** base 64 (url-safe) uuid string */
      permissionGroupUuid?: string | null;
      /** List of SMS phone numbers for the user */
      smsPhoneNumbers?: (string | null)[] | null;
      /** Whether summary emails are enabled for the user */
      summaryEmailEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    /** Response object for updating a user. */
    User_UpdateUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** User snooze notification settings with location and device-specific snooze intervals. */
    User_UserSnoozeNotificationSettingsType: {
      /** List of snooze intervals for all notifications */
      snoozedForAllNotificationsIntervals?:
        | components["schemas"]["ScheduledIntervalType"][]
        | null;
      /** Map of device UUIDs to snooze intervals */
      snoozedForDevicesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      /** Map of location UUIDs to snooze intervals */
      snoozedForLocationsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_metadata_CreateUserMetadataFieldTemplateWSRequest: {
      template?: components["schemas"]["UserMetadataFieldTemplate"];
    };
    User_metadata_CreateUserMetadataFieldTemplateWSResponse: {
      template?: components["schemas"]["UserMetadataFieldTemplate"];
    };
    User_metadata_DeleteUserMetadataFieldTemplateWSRequest: {
      /** base 64 (url-safe) uuid string */
      templateUuid?: string | null;
    };
    User_metadata_DeleteUserMetadataFieldTemplateWSResponse: {
      template?: components["schemas"]["UserMetadataFieldTemplate"];
    };
    User_metadata_DeleteUserMetadataFieldWSRequest: {
      /** base 64 (url-safe) uuid string */
      templateUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_metadata_DeleteUserMetadataFieldWSResponse: {
      field?: components["schemas"]["UserMetadataField"];
    };
    User_metadata_FindUserMetadataFieldTemplatesWSRequest: {
      [key: string]: unknown;
    };
    User_metadata_FindUserMetadataFieldTemplatesWSResponse: {
      templateMap?: {
        [key: string]: components["schemas"]["UserMetadataFieldTemplate"];
      } | null;
    };
    User_metadata_FindUserMetadataFieldsWSRequest: {
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_metadata_FindUserMetadataFieldsWSResponse: {
      templateMap?: {
        [key: string]: components["schemas"]["UserMetadataFieldTemplate"];
      } | null;
      userFieldValueMap?: {
        [key: string]: components["schemas"]["UserMetadataField"];
      } | null;
    };
    User_metadata_SaveUserMetadataFieldsWSRequest: {
      fieldValueMap?: { [key: string]: string | null } | null;
      /** base 64 (url-safe) uuid string */
      userUuid?: string | null;
    };
    User_metadata_SaveUserMetadataFieldsWSResponse: {
      templateMap?: {
        [key: string]: components["schemas"]["UserMetadataFieldTemplate"];
      } | null;
      userFieldValueMap?: {
        [key: string]: components["schemas"]["UserMetadataField"];
      } | null;
    };
    User_metadata_UpdateUserMetadataFieldTemplateWSRequest: {
      selectiveUpdate?: components["schemas"]["UserMetadataFieldTemplateSelectiveUpdate"];
    };
    User_metadata_UpdateUserMetadataFieldTemplateWSResponse: {
      template?: components["schemas"]["UserMetadataFieldTemplate"];
    };
    VacantActivityEventType:
      | ({
          vacancyThresholdSec?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    /** List of vehicle events matching the query criteria */
    VehicleEventIndexType: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      eventTimestamp?: number | null;
      imageS3Key?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      matchingLicensePlates?: (string | null)[] | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      partialLicensePlates?: (string | null)[] | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      thumbnailS3Key?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      vehicleLicensePlate?: string | null;
    };
    /** List of vehicle events matching the search criteria */
    VehicleEventSearchHitType: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      eventTimestamp?: number | null;
      imageS3Key?: string | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      matchingLicensePlates?: (string | null)[] | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      partialLicensePlates?: (string | null)[] | null;
      searchMatchedTerm?: string | null;
      searchMatchedType?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      thumbnailS3Key?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
      vehicleLicensePlate?: string | null;
    };
    /** List of vehicles in the organization */
    VehicleV2Type: {
      alert?: boolean | null;
      createdAtMillis?: number | null;
      description?: string | null;
      licensePlate?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      thumbnailS3Key?: string | null;
      trust?: boolean | null;
    };
    /** Request object for adding a label to a vehicle. */
    Vehicle_AddVehicleLabelWSRequest: {
      /** Label to add to the vehicle */
      label?: string | null;
      /** License plate number of the vehicle to add label to */
      vehicleLicensePlate?: string | null;
    };
    /** Response object for adding a label to a vehicle. */
    Vehicle_AddVehicleLabelWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for associating vehicle events to a saved vehicle. */
    Vehicle_AssociateEventsToVehicleWSRequest: {
      /** List of event UUIDs to associate with the vehicle */
      eventUuids?: (string | null)[] | null;
      /** License plate number of the vehicle to associate events with */
      vehicleLicensePlate?: string | null;
    };
    /** Response object for associating events to a vehicle. */
    Vehicle_AssociateEventsToVehicleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting a vehicle. */
    Vehicle_DeleteVehicleWSRequest: {
      /** License plate number of the vehicle to delete */
      vehicleLicensePlate?: string | null;
    };
    /** Response object for deleting a vehicle. */
    Vehicle_DeleteVehicleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for getting recent vehicle events by location (deprecated). */
    Vehicle_GetRecentVehicleEventsByLocationWSRequest: {
      /** End time in milliseconds for the query period */
      endTimeMs?: number | null;
      /** base 64 (url-safe) uuid string */
      locationUuid?: string | null;
      /** Start time in milliseconds for the query period */
      startTimeMs?: number | null;
    };
    /** Response object containing recent vehicle events by location (deprecated). */
    Vehicle_GetRecentVehicleEventsByLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of recent vehicle events for the location */
      events?: components["schemas"]["VehicleEventIndexType"][] | null;
    };
    /** Request object for getting recent vehicle events for a specific vehicle (deprecated). */
    Vehicle_GetRecentVehicleEventsForVehicleWSRequest: {
      /** End time in milliseconds for the query period */
      endTimeMs?: number | null;
      /** License plate number of the vehicle to get events for */
      licensePlate?: string | null;
      /** Start time in milliseconds for the query period */
      startTimeMs?: number | null;
    };
    /** Response object containing recent vehicle events for a specific vehicle (deprecated). */
    Vehicle_GetRecentVehicleEventsForVehicleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of recent vehicle events for the specific vehicle */
      events?: components["schemas"]["VehicleEventIndexType"][] | null;
    };
    /** Request object for getting recent vehicle events (deprecated). */
    Vehicle_GetRecentVehicleEventsWSRequest: {
      /** List of device UUIDs to filter events by */
      deviceUuids?: (string | null)[] | null;
      /** End time in milliseconds for the query period */
      endTimeMs?: number | null;
      /** Start time in milliseconds for the query period */
      startTimeMs?: number | null;
    };
    /** Response object containing recent vehicle events (deprecated). */
    Vehicle_GetRecentVehicleEventsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of recent vehicle events */
      events?: components["schemas"]["VehicleEventIndexType"][] | null;
    };
    /** Request object for getting vehicle events with filters and additive queries. */
    Vehicle_GetVehicleEventsWSRequest: {
      /** Filter events by specific reporting device uuids */
      deviceUuidFilter?: (string | null)[] | null;
      /** Time window filter end (newest) time in Epoch milliseconds */
      endTimeMs?: number | null;
      /** Query events by exact license plate number. Query fields are additive queries (returned events satisfy at least one of the query fields) */
      licensePlateExactQuery?: (string | null)[] | null;
      /** Query events by partial or complete license plate with fuzzy character matching. Query fields are additive queries (returned events satisfy at least one of the query fields) */
      licensePlateFuzzyQuery?: string | null;
      /** Filter events by specific reporting location uuids */
      locationUuidFilter?: (string | null)[] | null;
      /** Query events by vehicle name. Query fields are additive queries (returned events satisfy at least one of the query fields) */
      nameQuery?: (string | null)[] | null;
      /** Time window filter start (oldest) time in Epoch milliseconds */
      startTimeMs?: number | null;
      /** Query events by name presence.  If false, returns events with a name.  If true, returns events without names.  Omit if not needed.  Query fields are additive queries (returned events satisfy at least one of the query fields) */
      unnamedQuery?: boolean | null;
      /** Query events by vehicle labels. Query fields are additive queries (returned events satisfy at least one of the query fields) */
      vehicleLabelQuery?: (string | null)[] | null;
    };
    /** Response object containing vehicle events with filters and additive queries. */
    Vehicle_GetVehicleEventsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of vehicle events matching the query criteria */
      events?: components["schemas"]["VehicleEventIndexType"][] | null;
    };
    /** Request object for getting all vehicle labels for the organization. */
    Vehicle_GetVehicleLabelsForOrgWSRequest: { [key: string]: unknown };
    /** Response object containing all vehicle labels for the organization. */
    Vehicle_GetVehicleLabelsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of license plate to label set */
      vehicleLabels?: { [key: string]: (string | null)[] | null } | null;
    };
    /** Request object for getting all vehicles in the organization. */
    Vehicle_GetVehiclesWSRequest: { [key: string]: unknown };
    /** Response object containing all vehicles in the organization. */
    Vehicle_GetVehiclesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of vehicles in the organization */
      vehicles?: components["schemas"]["VehicleV2Type"][] | null;
    };
    /** Request object for removing a label from a vehicle. */
    Vehicle_RemoveVehicleLabelWSRequest: {
      /** Label to remove from the vehicle */
      label?: string | null;
      /** License plate number of the vehicle to remove label from */
      vehicleLicensePlate?: string | null;
    };
    /** Response object for removing a label from a vehicle. */
    Vehicle_RemoveVehicleLabelWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for reporting a mis-detected license plate event. */
    Vehicle_ReportVehicleEventRequest: {
      /** base 64 (url-safe) uuid string */
      eventUuid?: string | null;
    };
    /** Response object for reporting a mis-detected license plate event. */
    Vehicle_ReportVehicleEventResponse: {
      /** Whether media was collected for AI training */
      collectedMediaForTraining?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for saving a vehicle with license plate information. */
    Vehicle_SaveVehicleWSRequest: {
      /** Whether to alert when this vehicle is detected */
      alert?: boolean | null;
      /** Creation timestamp in milliseconds */
      createdAtMillis?: number | null;
      /** Description of the vehicle */
      description?: string | null;
      /** Name for the vehicle */
      name?: string | null;
      /** S3 key for the vehicle thumbnail image */
      thumbnailS3Key?: string | null;
      /** Whether this vehicle is trusted */
      trust?: boolean | null;
      /** License plate number of the vehicle */
      vehicleLicensePlate?: string | null;
    };
    /** Response object for saving a vehicle. */
    Vehicle_SaveVehicleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    VerificationHistory: {
      alertIndex?: number | null;
      currentVerification?: components["schemas"]["VerificationRecord"];
      verificationRecords?:
        | components["schemas"]["VerificationRecord"][]
        | null;
    };
    VerificationRecord: {
      /** base 64 (url-safe) uuid string */
      alertUuid?: string | null;
      clipVerificationId?: string | null;
      failedAsClip?: boolean | null;
      failedAsStream?: boolean | null;
      sentAsClip?: boolean | null;
      sentAsClipAtMs?: number | null;
      sentAsWindowedStream?: boolean | null;
      sentAsWindowedStreamAtMs?: number | null;
      streamVerificationId?: string | null;
    };
    VideoDoorbellSettings: {
      standalone_doorbell_mode?: boolean | null;
    };
    /** Update Video Doorbell settings */
    VideoDoorbellSettingsSelectiveUpdate: {
      standalone_doorbell_mode?: boolean | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    /** List of video intercom policies using the schedule */
    VideoIntercomPolicyType: {
      description?: string | null;
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["VideoIntercomScheduledTriggerType"][]
        | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    VideoIntercomScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["VideoIntercomTriggerType"][] | null;
    };
    VideoIntercomTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      faceAlertLabelSet?: (string | null)[] | null;
      faceAlertUnidentified?: boolean | null;
      faceAllowedLabelSet?: (string | null)[] | null;
      lufsThreshold?: number | null;
      peopleCountThreshold?: number | null;
      vehicleAlertLabelSet?: (string | null)[] | null;
      vehicleAlertUnidentified?: boolean | null;
      vehicleAllowedLabelSet?: (string | null)[] | null;
    };
    /** Video similarity model to use for search */
    VideoSimilarityModelEnum: VideoSimilarityModelEnum;
    /** Video wall configuration to update */
    VideoWallType: {
      deviceList?: (string | null)[] | null;
      displayName?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      othersCanEdit?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerUserUuid?: string | null;
      settings?: { [key: string]: { [key: string]: unknown } | null } | null;
      shared?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for canceling a spliced clip V2. */
    Video_CancelSpliceV2WSRequest: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      /** List of clip UUIDs to cancel */
      clipUuidList?: (string | null)[] | null;
      /** List of device facet UUIDs associated with the clips */
      deviceUuids?: (string | null)[] | null;
    };
    /** Response object for canceling a spliced clip V2. */
    Video_CancelSpliceV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for canceling a spliced clip (deprecated). */
    Video_CancelSpliceWSRequest: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
    };
    /** Response object for canceling a spliced clip (deprecated). */
    Video_CancelSpliceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for creating a shared timelapse group. */
    Video_CreateSharedTimelapseGroupWSRequest: {
      /** Description for the shared timelapse group */
      description?: string | null;
      /** Expiration time in seconds for the shared group */
      expirationTimeSecs?: number | null;
      /** Plaintext password for the shared timelapse group */
      plaintextPassword?: string | null;
      /** List of timelapse UUIDs to include in the shared group */
      timelapseUuids?: (string | null)[] | null;
      /** Title for the shared timelapse group */
      title?: string | null;
    };
    /** Response object for creating a shared timelapse group. */
    Video_CreateSharedTimelapseGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Share URL for the timelapse group */
      shareUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for deleting a shared timelapse group. */
    Video_DeleteSharedTimelapseGroupWSRequest: {
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for deleting a shared timelapse group. */
    Video_DeleteSharedTimelapseGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for deleting timelapse clips. */
    Video_DeleteTimelapseClipsWSRequest: {
      /** List of timelapse clip UUIDs to delete */
      clipUuids?: (string | null)[] | null;
    };
    /** Response object for deleting timelapse clips. */
    Video_DeleteTimelapseClipsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for generating a timelapse clip. */
    Video_GenerateTimelapseClipWSRequest: {
      /** Description for the timelapse */
      description?: string | null;
      /** List of device UUIDs to include in the timelapse */
      deviceUuids?: (string | null)[] | null;
      /** Whether to draw camera details on the video */
      drawCameraDetails?: boolean | null;
      /** Whether to draw timestamps on the video */
      drawTimestamp?: boolean | null;
      /** Whether to skip night time periods */
      skipNights?: boolean | null;
      /** Whether to skip weekend periods */
      skipWeekends?: boolean | null;
      /** Start time in milliseconds for the timelapse */
      startTime?: number | null;
      /** Stop time in milliseconds for the timelapse */
      stopTime?: number | null;
      /** Title for the timelapse */
      title?: string | null;
      /** Duration in seconds for the output video */
      videoDuration?: number | null;
      /** Format for the output video */
      videoFormat?: string | null;
    };
    /** Response object for generating a timelapse clip. */
    Video_GenerateTimelapseClipWSResponse: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for generating URL to get an exact frame with optional crop from a camera. */
    Video_GetExactFrameUriWSRequest: {
      /** RUUID with optional appended facet information */
      cameraUuid: string | null;
      /** Ratio to shrink the image pixels by */
      downscaleFactor?: number | null;
      /** Adjust quality of image compression */
      jpgQuality?: number | null;
      /** Precise ratio to crop the height by. Capped at 10000, which is 100.00% of the image */
      permyriadCropHeight?: number | null;
      /** Precise ratio to crop the width by. Capped at 10000, which is 100.00% of the image */
      permyriadCropWidth?: number | null;
      /** Proportional location to start horizontal crop at. Where 10000 is 100.00% of, or the end of the image */
      permyriadCropX?: number | null;
      /** Proportional location to start vertical crop at. Where 10000 is 100.00% of, or the end of the image */
      permyriadCropY?: number | null;
      /** Timestamp in epoch milliseconds */
      timestampMs: number | null;
    };
    /** Response object containing the exact frame URI. */
    Video_GetExactFrameUriWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** URI to access the exact frame */
      frameUri?: string | null;
      /** Response message from the frame generation */
      responseMessage?: string | null;
    };
    /** Request object for getting the max splice duration an organization can set. */
    Video_GetMaxSpliceDurationWSRequest: { [key: string]: unknown };
    /** Response object containing the max splice duration for the organization. */
    Video_GetMaxSpliceDurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Maximum duration in seconds that can be set for a splice */
      maxDuration?: number | null;
    };
    /** Request object for getting all shared timelapse groups for the organization. */
    Video_GetSharedTimelapseGroupsWSRequest: { [key: string]: unknown };
    /** Response object containing all shared timelapse groups for the organization. */
    Video_GetSharedTimelapseGroupsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of shared timelapse groups for the organization */
      sharedTimelapses?:
        | components["schemas"]["SharedTimelapseGroupWrapperType"][]
        | null;
    };
    /** Request object for getting all spliced clips in progress. */
    Video_GetSplicedClipsInProgressWSRequest: { [key: string]: unknown };
    /** Response object containing all spliced clips in progress. */
    Video_GetSplicedClipsInProgressWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of spliced clips currently in progress */
      splicedClips?: components["schemas"]["SplicedClipType"][] | null;
    };
    /** Request object for getting all timelapse clips for the organization. */
    Video_GetTimelapseClipsWSRequest: { [key: string]: unknown };
    /** Response object containing all timelapse clips for the organization. */
    Video_GetTimelapseClipsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** List of timelapse clips for the organization */
      timelapseClips?: components["schemas"]["TimelapseClipType"][] | null;
    };
    /** Request object for getting timelapse metadata for cameras. */
    Video_GetTimelapseMetadataWSRequest: {
      /** List of device facet UUIDs to get timelapse metadata for */
      deviceUuidList?: (string | null)[] | null;
    };
    /** Response object containing timelapse metadata for cameras. */
    Video_GetTimelapseMetadataWSResponse: {
      /** Map of device facet UUIDs to their earliest available timelapse timestamps */
      earliestTimestampMap?: { [key: string]: string | null } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for retrying a spliced clip. */
    Video_RetrySpliceWSRequest: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Duration in seconds for the retry */
      duration?: number | null;
      /** Start time in milliseconds for the retry */
      startTime?: number | null;
    };
    /** Response object for retrying a spliced clip. */
    Video_RetrySpliceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for sharing timelapse clips (deprecated). */
    Video_ShareTimelapseClipsWSRequest: {
      /** List of timelapse clip UUIDs to share */
      clipUuids?: (string | null)[] | null;
    };
    /** Response object for sharing timelapse clips (deprecated). */
    Video_ShareTimelapseClipsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Map of clip UUIDs to their share URLs */
      shareUrlMap?: { [key: string]: string | null } | null;
    };
    /** Request object for creating a single image from a point in time. */
    Video_SpliceFrameWSRequest: {
      /** RUUID with optional appended facet information */
      deviceUuid?: string | null;
      /** Timestamp in milliseconds for the frame */
      timestampMs?: number | null;
    };
    /** Response object for creating a single image from a point in time. */
    Video_SpliceFrameWSResponse: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Region where the frame clip is stored */
      region?: string | null;
    };
    /** Request object for splicing video clips V2 (deprecated). */
    Video_SpliceV2WSRequest: {
      /** Description for the spliced clip */
      description?: string | null;
      /** List of device UUIDs to splice video from */
      deviceUuids?: (string | null)[] | null;
      /** Duration in seconds for the splice */
      durationSec?: number | null;
      /** Map of device UUIDs to dewarped view configurations for fisheye cameras */
      fisheyePresentationMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      /** Start time in milliseconds for the splice */
      startTimeMillis?: number | null;
      /** Title for the spliced clip */
      title?: string | null;
    };
    /** Response object for splicing video clips V2 (deprecated). */
    Video_SpliceV2WSResponse: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for splicing video clips V3 with multiple cameras and advanced options. */
    Video_SpliceV3WSRequest: {
      /** Map of device facet UUIDs to altered view configurations */
      alteredViewMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      /** Whether to include audio in the clip */
      audioIncluded?: boolean | null;
      clipVisibility?: components["schemas"]["ClipVisibility"];
      /** Description for the spliced clip */
      description?: string | null;
      /** List of device facet UUIDs to splice video from */
      deviceUuids?: (string | null)[] | null;
      /** Duration in seconds for the splice */
      durationSec?: number | null;
      /** Map of integration names to upload flags */
      integrationUploadMap?: { [key: string]: boolean | null } | null;
      /** Whether to save the clip to console */
      saveToConsole?: boolean | null;
      /** Whether to send to shared storage */
      sendToSharedStorage?: boolean | null;
      /** Whether to send to user storage */
      sendToUserStorage?: boolean | null;
      /** Start time in milliseconds for the splice */
      startTimeMillis?: number | null;
      /** Title for the spliced clip */
      title?: string | null;
    };
    /** Response object for splicing video clips V3. */
    Video_SpliceV3WSResponse: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      /** List of UUIDs for created spliced clips */
      clipUuidList?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for splicing video clips (deprecated). */
    Video_SpliceWSRequest: {
      /** base 64 (url-safe) uuid string */
      deviceUuid?: string | null;
      /** Duration in seconds for the splice */
      duration?: number | null;
      /** Start time in milliseconds for the splice */
      startTime?: number | null;
    };
    /** Response object for splicing video clips (deprecated). */
    Video_SpliceWSResponse: {
      /** base 64 (url-safe) uuid string */
      clipUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Request object for updating a shared timelapse group. */
    Video_UpdateSharedTimelapseGroupWSRequest: {
      /** New description for the shared timelapse group */
      description?: string | null;
      /** Whether to update the description */
      descriptionUpdate?: boolean | null;
      /** New expiration time in seconds for the shared group */
      expirationTimeSecs?: number | null;
      /** Whether to update the expiration time */
      expirationTimeUpdate?: boolean | null;
      /** Whether to update the password */
      passwordUpdate?: boolean | null;
      /** New plaintext password for the shared timelapse group */
      plaintextPassword?: string | null;
      /** New title for the shared timelapse group */
      title?: string | null;
      /** Whether to update the title */
      titleUpdate?: boolean | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Response object for updating a shared timelapse group. */
    Video_UpdateSharedTimelapseGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Updated share URL for the timelapse group */
      shareUrl?: string | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Request object for updating a timelapse clip's editable metadata. */
    Video_UpdateTimelapseClipMetadataWSRequest: {
      /** base 64 (url-safe) uuid string */
      clipUuid: string | null;
      /** The new description for the timelapse clip. Omit this field to not update. Providing the field with null will cause the field to be unset */
      description?: string | null;
      /** The new title for the timelapse clip. Omit this field to not update. Providing the field with null will cause the field to be unset */
      title?: string | null;
    };
    /** Response object for updating a timelapse clip's metadata. */
    Video_UpdateTimelapseClipMetadataWSResponse: {
      timelapseClip?: components["schemas"]["TimelapseClipType"];
    };
    VisionLLMEventRecordType: {
      /** RUUID with optional appended facet information */
      deviceFacetUuid?: string | null;
      fullResponse?: string | null;
      parsedAffirmativeResponse?: boolean | null;
      timestampMs?: number | null;
      userPrompt?: string | null;
    };
    VisionLLMRuleTriggerType:
      | ({
          createAffirmativeSeekpoints?: boolean | null;
          createNegativeSeekpoints?: boolean | null;
          /** RUUID with optional appended facet information */
          deviceFacetUuid?: string | null;
          highDetail?: boolean | null;
          userPrompt?: string | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    WaveToUnlockIntentExpiredEvent:
      | ({
          authWaitMs?: number | null;
          authWaitMsTotal?: number | null;
          /** base 64 (url-safe) uuid string */
          componentCompositeUuid?: string | null;
          credentials?: components["schemas"]["CredentialEntry"][] | null;
          rssiThreshold?: number | null;
        } & {
          /** base 64 (url-safe) uuid string */
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          /** base 64 (url-safe) uuid string */
          locationUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    WaveToUnlockSettingsType: {
      awaitAuthDurationMs?: number | null;
      enabled?: boolean | null;
      minRSSIThreshold?: number | null;
      showAwaitIntentFeedback?: boolean | null;
      treatNfcAsIntent?: boolean | null;
    };
    WaveToUnlockSettingsType_Minimal: {
      enabled?: boolean | null;
      minRSSIThreshold?: number | null;
    };
    WebhookActionType: {
      webhookUrl?: string | null;
    };
    WebhookInfo: {
      webhookDisabled?: boolean | null;
      webhookSecret?: string | null;
    };
    WebhookMapEntry: {
      orgId?: number | null;
      webhookId?: number | null;
    } | null;
    /** Webhook integration settings to update */
    WebhookSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      /** base 64 (url-safe) uuid string */
      enablingUserUuid?: string | null;
      webhookSecret?: string | null;
      webhookUrl?: string | null;
    };
    WebhooksType:
      | ({
          activityWebhooks?: { [key: string]: string | null } | null;
          activityWebhooksV2?: {
            [key: string]: components["schemas"]["WebhookInfo"];
          } | null;
          diagnosticWebhooks?: { [key: string]: string | null } | null;
          diagnosticWebhooksV2?: {
            [key: string]: components["schemas"]["WebhookInfo"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    WeeklyMinuteIntervalType: {
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
    } | null;
    WeeklyRepeatingScheduleType:
      | ({
          intervalList?:
            | components["schemas"]["WeeklyMinuteIntervalType"][]
            | null;
        } & {
          mutable?: boolean | null;
          name?: string | null;
          oneTimeUse?: boolean | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          strategy?: WeeklyRepeatingScheduleStrategyEnum | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
        })
      | null;
    /** List of weekly statistics data points */
    WeeklyStatisticsDataPoint: {
      date?: string | null;
      stats?: { [key: string]: components["schemas"]["Stats"] } | null;
    };
    Wiegand64BitRawCredentialType:
      | ({
          cardNumber?: number | null;
          format?: components["schemas"]["WiegandFormatEnumType"];
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          /** base 64 (url-safe) uuid string */
          managedCredUuid?: string | null;
          note?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    WiegandD10202Credential:
      | ({
          cardNumber?: number | null;
          facilityCode?: number | null;
          format?: components["schemas"]["WiegandFormatEnumType"];
          nonParityValue?: string | null;
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          /** base 64 (url-safe) uuid string */
          managedCredUuid?: string | null;
          note?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    WiegandDataPhysicalPortEnumType: WiegandDataPhysicalPortEnumType;
    WiegandDataPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["WiegandDataPhysicalPortEnumType"];
    };
    WiegandDoorReaderType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      buzzerPort?: components["schemas"]["WiegandOutputPortType"];
      createdAtMillis?: number | null;
      d0Port?: components["schemas"]["WiegandDataPortType"];
      d1Port?: components["schemas"]["WiegandDataPortType"];
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      gledPort?: components["schemas"]["WiegandOutputPortType"];
      name?: string | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      /** base 64 (url-safe) uuid string */
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      portImmutable?: boolean | null;
      readerType?: components["schemas"]["DoorReaderEnumType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      rledPort?: components["schemas"]["WiegandOutputPortType"];
      tamperPort?: components["schemas"]["WiegandInputPortType"];
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    WiegandFormatEnumType: WiegandFormatEnumType;
    WiegandH10301CredentialType:
      | ({
          cardNumber?: number | null;
          facilityCode?: number | null;
          format?: components["schemas"]["WiegandFormatEnumType"];
          nonParityValue?: string | null;
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          /** base 64 (url-safe) uuid string */
          managedCredUuid?: string | null;
          note?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    WiegandH10304Credential:
      | ({
          cardNumber?: number | null;
          facilityCode?: number | null;
          format?: components["schemas"]["WiegandFormatEnumType"];
          nonParityValue?: string | null;
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          /** base 64 (url-safe) uuid string */
          managedCredUuid?: string | null;
          note?: string | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    WiegandInputPhysicalPortEnumType: WiegandInputPhysicalPortEnumType;
    WiegandInputPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["WiegandInputPhysicalPortEnumType"];
    };
    WiegandOutputPhysicalPortEnumType: WiegandOutputPhysicalPortEnumType;
    WiegandOutputPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["WiegandOutputPhysicalPortEnumType"];
    };
    /** List of users in the organization */
    WrappedRhombusOrgUserType: {
      accessibleRhombusApps?: (WrappedRhombusOrgUserAccessibleRhombusAppsEnum | null)[] | null;
      accountOwner?: boolean | null;
      bypassSaml?: boolean | null;
      changePasswordOnLogin?: boolean | null;
      createdAtMillis?: number | null;
      deleted?: boolean | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      emailVerified?: boolean | null;
      firstName?: string | null;
      lastName?: string | null;
      mfaEnabled?: boolean | null;
      mfaTokenType?: WrappedRhombusOrgUserMfaTokenTypeEnum | null;
      name?: string | null;
      orgUserCustomizationFlags?: { [key: string]: string | null } | null;
      /** base 64 (url-safe) uuid string */
      orgUuid?: string | null;
      passwordSet?: boolean | null;
      /** base 64 (url-safe) uuid string */
      rhombusUserUuid?: string | null;
      status?: WrappedRhombusOrgUserStatusEnum | null;
      updatedAtMillis?: number | null;
      /** base 64 (url-safe) uuid string */
      uuid?: string | null;
    };
    /** Zapier integration type */
    ZapierEnum: ZapierEnum;
    ZapierType:
      | ({
          zapierWebhooks?: {
            [key: string]: components["schemas"]["ZapierWebhookSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          /** base 64 (url-safe) uuid string */
          orgUuid?: string | null;
          /** base 64 (url-safe) uuid string */
          userUuid?: string | null;
        })
      | null;
    ZapierWebhookSettings: {
      backoffSec?: number | null;
      doorState?: ZapierWebhookSettingsDoorStateEnum | null;
      humidityLowerThreshold?: number | null;
      humidityUpperThreshold?: number | null;
      tempLowerThreshold?: number | null;
      tempUpperThreshold?: number | null;
      url: string | null;
      uuids?: (string | null)[] | null;
      zapEnum: components["schemas"]["ZapierEnum"];
    } | null;
    rctpRMAType: {
      falseReport?: boolean | null;
      rectified?: boolean | null;
      /** base 64 (url-safe) uuid string */
      rmauuid?: string | null;
    };
  };
  parameters: {
    /** Authentication scheme indicator ("api-token"). */
    XAuthSchemeParam: string;
  };
}

export interface operations {
  /** Adds specified users to an access control group */
  addUsersToAccessControlGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_AddUsersToOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_AddUsersToOrgGroupWSRequest"];
      };
    };
  };
  /** Assign a currently unassigned credential to a user */
  assignAccessControlCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_AssignAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_AssignAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Create a badge template */
  createBadgeTemplate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_CreateBadgeTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_CreateBadgeTemplateWSRequest"];
      };
    };
  };
  /** Delete a badge template */
  deleteBadgeTemplate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_DeleteBadgeTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_DeleteBadgeTemplateWSRequest"];
      };
    };
  };
  /** Deletes the stored image and metadata document. Prevented if any badge template refers to the image. */
  deleteBadgeTemplateImage: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_DeleteBadgeTemplateImageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_DeleteBadgeTemplateImageWSRequest"];
      };
    };
  };
  /** Finds metadata for all images uploaded for use with badge template configuration */
  findBadgeTemplateImages: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_FindBadgeTemplateImagesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_FindBadgeTemplateImagesWSRequest"];
      };
    };
  };
  /** Find badge templates in the org */
  findBadgeTemplates: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_FindBadgeTemplatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_FindBadgeTemplatesWSRequest"];
      };
    };
  };
  /** Retrieve a badge template */
  getBadgeTemplate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_GetBadgeTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_GetBadgeTemplateWSRequest"];
      };
    };
  };
  /** Get the metadata for a specific badge template image */
  getBadgeTemplateImage: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_GetBadgeTemplateImageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_GetBadgeTemplateImageWSRequest"];
      };
    };
  };
  /** Update a badge template */
  updateBadgeTemplate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_UpdateBadgeTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_UpdateBadgeTemplateWSRequest"];
      };
    };
  };
  /** Update the metadata for a badge template image */
  updateBadgeTemplateImage: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_UpdateBadgeTemplateImageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_UpdateBadgeTemplateImageWSRequest"];
      };
    };
  };
  /** Create a credential based on a hex value and credential type. Useful if you see an unauthorized badge event, know its type and want to import it */
  createAccessControlCredentialByHexValueAndType: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateAccessControlCredentialByHexValueAndTypeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateAccessControlCredentialByHexValueAndTypeWSRequest"];
      };
    };
  };
  /** Creates an access control group */
  createAccessControlGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_CreateOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_CreateOrgGroupWSRequest"];
      };
    };
  };
  /** Create a location access grant */
  createAccessGrant: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_CreateAccessGrantWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_CreateAccessGrantWSRequest"];
      };
    };
  };
  /** Create a location access revocation */
  createAccessRevocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_CreateAccessRevocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_CreateAccessRevocationWSRequest"];
      };
    };
  };
  /** Get credentials to generate Apple Wallet pass for user */
  createAppleWalletPass: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateAppleWalletPassWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateAppleWalletPassWSRequest"];
      };
    };
  };
  /** Create a rhombus secure csn credential (Rhombus Badge) */
  createRhombusSecureCsnCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateRhombusSecureCsnCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateRhombusSecureCsnCredentialWSRequest"];
      };
    };
  };
  /** Create a standard csn credential (Third Party Badge) */
  createStandardCsnCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateStandardCsnCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateStandardCsnCredentialWSRequest"];
      };
    };
  };
  /** Create a 64bit raw wiegand credential. Used when an explicit endpoint for the wiegand format is not otherwise defined. */
  createWiegand64BitRawCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegand64BitRawCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegand64BitRawCredentialWSRequest"];
      };
    };
  };
  /** Create a wiegand credential */
  createWiegandCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandCredentialWSRequest"];
      };
    };
  };
  /** Create a D10202 wiegand credential */
  createWiegandD10202Credential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandD10202CredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandD10202CredentialWSRequest"];
      };
    };
  };
  /** Create a H10301 wiegand credential */
  createWiegandH10301Credential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandH10301CredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandH10301CredentialWSRequest"];
      };
    };
  };
  /** Create a H10304 wiegand credential */
  createWiegandH10304Credential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandH10304CredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandH10304CredentialWSRequest"];
      };
    };
  };
  /** Delete an access control credential. It is recommended to revoke a credential rather than delete it to preserve credential history */
  deleteAccessControlCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_DeleteAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_DeleteAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Delete an access control group */
  deleteAccessControlGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_DeleteOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_DeleteOrgGroupWSRequest"];
      };
    };
  };
  /** Deletes a location access grant */
  deleteLocationAccessGrant: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_DeleteLocationAccessGrantWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_DeleteLocationAccessGrantWSRequest"];
      };
    };
  };
  /** Deletes a location access revocation */
  deleteLocationAccessRevocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_DeleteLocationAccessRevocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_DeleteLocationAccessRevocationWSRequest"];
      };
    };
  };
  /** Delete an unassigned access control credential. The credential must be unassigned (revoked) before this method can be called. History of the credential is maintained but it will no longer be returned as an unassigned credential. */
  deleteUnassignedAccessControlCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_DeleteUnassignedAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_DeleteUnassignedAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Create a door schedule exception */
  createExceptionV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_CreateDoorScheduleExceptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_CreateDoorScheduleExceptionWSRequest"];
      };
    };
  };
  /** Delete door schedule exception */
  deleteExceptionV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_DeleteDoorScheduleExceptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_DeleteDoorScheduleExceptionWSRequest"];
      };
    };
  };
  /** Find door schedule exceptions for a specific door */
  findExceptionsForDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsForDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsForDoorWSRequest"];
      };
    };
  };
  /** Find door schedule exceptions for a specific location */
  findExceptionsForLocationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsForLocationWSRequest"];
      };
    };
  };
  /** Find door schedule exceptions */
  findExceptionsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsWSRequest"];
      };
    };
  };
  /** Get a door schedule exception */
  getExceptionV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_GetDoorScheduleExceptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_GetDoorScheduleExceptionWSRequest"];
      };
    };
  };
  /** Update door schedule exception */
  updateExceptionV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_UpdateDoorScheduleExceptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_UpdateDoorScheduleExceptionWSRequest"];
      };
    };
  };
  /** Find all access control credentials in the org */
  findAccessControlCredentialByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByOrgWSRequest"];
      };
    };
  };
  /** Find all access control credentials for the specified user */
  findAccessControlCredentialByUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByUserWSRequest"];
      };
    };
  };
  /** Find all access control credentials for the specified users */
  findAccessControlCredentialByUsers: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByUsersWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByUsersWSRequest"];
      };
    };
  };
  /** Retrieve the access control group with the specified name */
  findAccessControlGroupByExactName: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByExactNameWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByExactNameWSRequest"];
      };
    };
  };
  /** Find all access control group memberships by user */
  findAccessControlGroupMembershipsByUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupMembershipsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupMembershipsByUserWSRequest"];
      };
    };
  };
  /** Find all access control group memberships for the current Rhombus Key user */
  findAccessControlGroupMembershipsForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupMembershipsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupMembershipsForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieve all access control groups with a name starting with the specified prefix */
  findAccessControlGroupsByNamePrefix: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByNamePrefixWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByNamePrefixWSRequest"];
      };
    };
  };
  /** Retrieve all access control groups defined in the org */
  findAccessControlGroupsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByOrgWSRequest"];
      };
    };
  };
  /** Find all access control groups a user belongs to */
  findAccessControlGroupsByUserMembership: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByUserMembershipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByUserMembershipWSRequest"];
      };
    };
  };
  /** Find all users belonging to an access control group */
  findAllUsersForAccessControlGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindAllUsersForOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindAllUsersForOrgGroupWSRequest"];
      };
    };
  };
  /** Retrieves all credential history belonging to an org */
  findCredentialHistory: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryWSRequest"];
      };
    };
  };
  /** Retrieves all credentials that have owned the credential hex value. Expect at most 1 valid/active credential and the rest are revoked */
  findCredentialHistoryByCredentialHexValue: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByCredentialHexValueWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByCredentialHexValueWSRequest"];
      };
    };
  };
  /** Retrieves all credentials that have owned the credential value. */
  findCredentialHistoryByCredentialValue: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByCredentialValueWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByCredentialValueWSRequest"];
      };
    };
  };
  /** Retrieves all credentials both current and revoked that were at some point assigned to the specified user */
  findCredentialHistoryByUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByUserWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified access controlled door */
  findLocationAccessGrantsByAccessControlledDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified door label */
  findLocationAccessGrantsByDoorLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByDoorLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByDoorLabelWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified group */
  findLocationAccessGrantsByGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByGroupWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified location */
  findLocationAccessGrantsByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified location and user */
  findLocationAccessGrantsByLocationAndUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationAndUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationAndUserWSRequest"];
      };
    };
  };
  /** Finds all location access grants in the org */
  findLocationAccessGrantsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByOrgWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified user */
  findLocationAccessGrantsByUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByUserWSRequest"];
      };
    };
  };
  /** Finds location access revocations by the specified access controlled door */
  findLocationAccessRevocationsByAccessControlledDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Finds location access revocation by the specified door label */
  findLocationAccessRevocationsByDoorLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByDoorLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByDoorLabelWSRequest"];
      };
    };
  };
  /** Finds location access revocations by the specified group */
  findLocationAccessRevocationsByGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByGroupWSRequest"];
      };
    };
  };
  /** Finds all location access revocations in the org */
  findLocationAccessRevocationsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByOrgWSRequest"];
      };
    };
  };
  /** Finds location access revocations by the specified user */
  findLocationAccessRevocationsByUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByUserWSRequest"];
      };
    };
  };
  /** Find all rhombus secure mobile credentials for the current user */
  findRhombusSecureMobileCredentialsForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindRhombusSecureMobileCredentialsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindRhombusSecureMobileCredentialsForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieve basic details of unlockable access controlled doors for a device */
  findUnlockableAccessControlledDoorsByDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_FindUnlockableAccessControlledDoorsByDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_FindUnlockableAccessControlledDoorsByDeviceWSRequest"];
      };
    };
  };
  /** Attempts to apply the specified first-in state to all doors belonging to the specified first-in settings */
  applyDoorAuthFirstInGroupState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorAuthFirstInGroupStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorAuthFirstInGroupStateWSRequest"];
      };
    };
  };
  /** Attempts to apply the specified first-in state to the specified door */
  applyDoorAuthFirstInState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorAuthFirstInStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorAuthFirstInStateWSRequest"];
      };
    };
  };
  /** Attempts to apply the specified first-in state to all doors belonging to the specified first-in settings */
  applyDoorScheduleFirstInGroupState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorScheduleFirstInGroupStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorScheduleFirstInGroupStateWSRequest"];
      };
    };
  };
  /** Attempts to apply the specified first-in state to the specified door */
  applyDoorScheduleFirstInState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorScheduleFirstInStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorScheduleFirstInStateWSRequest"];
      };
    };
  };
  /** Create settings for first-in that can be shared across the specified doors within a location */
  createLocationFirstInSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_CreateLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_CreateLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Delete the specified first-in settings. Effectively removes first-in configuration from all doors that belong to the settings */
  deleteLocationFirstInSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_DeleteLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_DeleteLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Paginated retrieval of all first-in settings in a location */
  findLocationFirstInSettingsByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_FindLocationFirstInSettingsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_FindLocationFirstInSettingsByLocationWSRequest"];
      };
    };
  };
  /** Paginated retrieval of all first-in settings in an org */
  findLocationFirstInSettingsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_FindLocationFirstInSettingsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_FindLocationFirstInSettingsByOrgWSRequest"];
      };
    };
  };
  /** Retrieve the specified first-in settings by its unique RUUID */
  getLocationFirstInSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_GetLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_GetLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Retrieve the first-in settings that a door belongs to, if any */
  getLocationFirstInSettingsForDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_GetLocationFirstInSettingsForDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_GetLocationFirstInSettingsForDoorWSRequest"];
      };
    };
  };
  /** Removes the specified door from the first-in settings if currently assigned to one. Also possible via the updateLocationFirstInSettings method but this method will leave other doorsbelonging assigned settings as-is rather than require the entire list. */
  removeDoorLocationFirstInSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_RemoveDoorLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_RemoveDoorLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Update settings for first-in that can be shared across the specified doors within a location */
  updateLocationFirstInSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_UpdateLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_UpdateLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Send a command to the access control unit so it refreshes its complete configuration */
  forceRefreshAccessControlUnitConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_ForceRefreshAccessControlUnitConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_ForceRefreshAccessControlUnitConfigWSRequest"];
      };
    };
  };
  /** Retrieve a location access grant by id */
  getLocationAccessGrant: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_GetLocationAccessGrantWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_GetLocationAccessGrantWSRequest"];
      };
    };
  };
  /** Retrieve a location access revocation by id */
  getLocationAccessRevocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_GetLocationAccessRevocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_GetLocationAccessRevocationWSRequest"];
      };
    };
  };
  /** Get locations for which the current user is associated with 1 or more access grants */
  getLocationsByAccessGrantForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_GetLocationsByAccessGrantForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_GetLocationsByAccessGrantForCurrentUserWSRequest"];
      };
    };
  };
  /** Get access controlled doors for the specified location for which the current user is associated with 1 or more access grants */
  getMinimalAccessControlledDoorsByLocationForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_GetMinimalAccessControlledDoorsByLocationForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_GetMinimalAccessControlledDoorsByLocationForCurrentUserWSRequest"];
      };
    };
  };
  /** Get the current state of a location lockdown and messages that should be displayed */
  getRhombusKeyLocationLockdownDetailsForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_GetRhombusKeyLocationLockdownDetailsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_GetRhombusKeyLocationLockdownDetailsForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieves a rhombus secure csn credential including sensitive details */
  getRhombusSecureCsnCredentialDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetRhombusSecureCsnCredentialDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetRhombusSecureCsnCredentialDetailsWSRequest"];
      };
    };
  };
  /** Retrieves stats of Rhombus Key app usage for active credentials that describe whether settings are optimal for the best user experience */
  getRhombusSecureMobileAppStateStatsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetRhombusSecureMobileAppStateStatsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetRhombusSecureMobileAppStateStatsForOrgWSRequest"];
      };
    };
  };
  /** Retrieves a standard csn credential including sensitive details */
  getStandardCsnCredentialDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetStandardCsnCredentialDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetStandardCsnCredentialDetailsWSRequest"];
      };
    };
  };
  /** Activate lockdown for the specified location */
  activateLockdownForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_ActivateLockdownForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_ActivateLockdownForLocationWSRequest"];
      };
    };
  };
  /** Activate lockdown for the specified location from Rhombus Key */
  activateLockdownForLocationViaRhombusKey: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_ActivateLockdownForLocationViaRhombusKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_ActivateLockdownForLocationViaRhombusKeyWSRequest"];
      };
    };
  };
  /** Create location lockdown plan */
  createLocationLockdownPlan: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_CreateLocationLockdownPlanWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_CreateLocationLockdownPlanWSRequest"];
      };
    };
  };
  /** Create (or update if ruleUuid is provided) a lockdown rule for the specified location */
  createLockdownRuleForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_CreateLockdownRuleForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_CreateLockdownRuleForLocationWSRequest"];
      };
    };
  };
  /** Deactivate lockdown for the specified location */
  deactivateLockdownForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeactivateLockdownForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeactivateLockdownForLocationWSRequest"];
      };
    };
  };
  /** Deactivate lockdown for the specified location from Rhombus Key */
  deactivateLockdownForLocationViaRhombusKey: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeactivateLockdownForLocationViaRhombusKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeactivateLockdownForLocationViaRhombusKeyWSRequest"];
      };
    };
  };
  /** Disables tracking lockdown state for the specified location */
  deleteLocationLockdownState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLocationLockdownStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLocationLockdownStateWSRequest"];
      };
    };
  };
  /** Delete lockdown plan */
  deleteLockdownPlan: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLockdownPlanWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLockdownPlanWSRequest"];
      };
    };
  };
  /** Delete a lockdown rule for the specified location */
  deleteLockdownRuleForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLockdownRuleForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLockdownRuleForLocationWSRequest"];
      };
    };
  };
  /** Disable test mode of lockdown for the specified location */
  disableLockdownTestModeForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DisableLockdownTestModeForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DisableLockdownTestModeForLocationWSRequest"];
      };
    };
  };
  /** Enable test mode of lockdown for the specified location */
  enableLockdownTestModeForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_EnableLockdownTestModeForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_EnableLockdownTestModeForLocationWSRequest"];
      };
    };
  };
  /** Retrieve a list of lockdown events for the specified location */
  findLocationLockdownEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLocationLockdownEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLocationLockdownEventsWSRequest"];
      };
    };
  };
  /** Finds the state of all lockdowns for the org */
  findLocationLockdownStates: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLocationLockdownStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLocationLockdownStatesWSRequest"];
      };
    };
  };
  /** Find lockdown plans in the org */
  findLockdownPlans: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLockdownPlansWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLockdownPlansWSRequest"];
      };
    };
  };
  /** Find lockdown plans for the specified location */
  findLockdownPlansByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLockdownPlansByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLockdownPlansByLocationWSRequest"];
      };
    };
  };
  /** Get lockdown plan */
  getLockdownPlan: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetLockdownPlanWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetLockdownPlanWSRequest"];
      };
    };
  };
  /** Get lockdown activation / deactivation rules for a location */
  getLockdownRulesForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetLockdownRulesForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetLockdownRulesForLocationWSRequest"];
      };
    };
  };
  /** Retrieves an existing lockdown state or creates one for the specified location */
  getOrCreateLocationLockdownState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetOrCreateLocationLockdownStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetOrCreateLocationLockdownStateWSRequest"];
      };
    };
  };
  /** Update location lockdown plan */
  updateLocationLockdownPlan: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_UpdateLocationLockdownPlanWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_UpdateLocationLockdownPlanWSRequest"];
      };
    };
  };
  /** Bulk provision PIN credentials for multiple users. Creates PIN credentials for all specified users and returns the created credentials. */
  bulkProvisionPinCredentials: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BulkProvisionPinCredentialsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_BulkProvisionPinCredentialsWSRequest"];
      };
    };
  };
  /** Rotate multiple PIN credentials with new generated values. Generates new PIN codes for all specified credentials and returns the updated credentials. */
  bulkRotatePinCredentials: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BulkRotatePinCredentialsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_BulkRotatePinCredentialsWSRequest"];
      };
    };
  };
  /** Create a PIN credential for a user and returns the created credential with its details. */
  createPinCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreatePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreatePinCredentialWSRequest"];
      };
    };
  };
  /** Delete a PIN credential permanently from the system. */
  deletePinCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_DeletePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_DeletePinCredentialWSRequest"];
      };
    };
  };
  /** Retrieves all PIN credentials in the organization, optionally filtered by the provided criteria. */
  findPinCredentialsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindPinCredentialsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindPinCredentialsByOrgWSRequest"];
      };
    };
  };
  /** Get an unclaimed PIN code to create a PIN credential with. The PIN code will be generated with the specified length. */
  getAccessControlAvailablePinCode: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetAvailablePinCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetAvailablePinCodeWSRequest"];
      };
    };
  };
  /** Retrieves a PIN credential including sensitive details such as the PIN code value. */
  getPinCredentialDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetPinCredentialDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetPinCredentialDetailsWSRequest"];
      };
    };
  };
  /** Revoke a PIN credential, making it inactive and unusable for access control. */
  revokePinCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_RevokePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_RevokePinCredentialWSRequest"];
      };
    };
  };
  /** Rotate a PIN credential with a new value. Generates a new PIN code for the specified credential and returns the updated credential. */
  rotatePinCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_RotatePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_RotatePinCredentialWSRequest"];
      };
    };
  };
  /** Update a PIN credential with new start and end dates. Modifies the validity period of the specified PIN credential. */
  updatePinCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdatePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdatePinCredentialWSRequest"];
      };
    };
  };
  /** Creates a mobile access control credential. Store the private key securely, there is no other way to retrieve it other then generating a new cred. */
  provisionMobileAccessControlCredentialForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BaseProvisionMobileAccessControlCredentialForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserWSRequest"];
      };
    };
  };
  /** Generate a QR code to unlock a door remotely when viewed by a camera */
  generateQRAccessCode: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_qr_GenerateQRAccessCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_qr_GenerateQRAccessCodeWSRequest"];
      };
    };
  };
  /** Generate a QR code to unlock a door remotely when viewed by a camera */
  getQRAccessCodes: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_qr_GetQRAccessCodesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_qr_GetQRAccessCodesWSRequest"];
      };
    };
  };
  /** Removes specified users from an access control group */
  removeUsersFromAccessControlGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_RemoveUsersFromOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_RemoveUsersFromOrgGroupWSRequest"];
      };
    };
  };
  /** Revokes an access control credential. Unlike suspension this will give up its claim on the credential value allowing another cred to claim it as its identifier */
  revokeAccessControlCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_RevokeAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_RevokeAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Revoke user's rhombus secure mobile credential */
  revokeRhombusSecureMobileCredentialForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_RevokeRhombusSecureMobileCredentialForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_RevokeRhombusSecureMobileCredentialForCurrentUserWSRequest"];
      };
    };
  };
  /** Send user presence information for the current user */
  sendUserPresenceForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_BaseSendUserPresenceForCurrentUserWsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_SendUserPresenceForCurrentUserWSRequest"];
      };
    };
  };
  /** Mark an access control credential as suspended */
  suspendAccessControlCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_SuspendAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_SuspendAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Unlock an access controlled door */
  unlockAccessControlledDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BaseUnlockAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_UnlockAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Unlock an access controlled door using authorization of supplied user token */
  unlockAccessControlledDoorForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BaseUnlockAccessControlledDoorForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_UnlockAccessControlledDoorForCurrentUserWSRequest"];
      };
    };
  };
  /** Mark an access control credential as no longer suspended */
  unsuspendAccessControlCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UnsuspendAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UnsuspendAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Update the note field of an Access Control Credential */
  updateAccessControlCredentialNote: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateAccessControlCredentialNoteWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateAccessControlCredentialNoteWSRequest"];
      };
    };
  };
  /** Updates an access control group's meta information like name and description */
  updateAccessControlGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_UpdateOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_UpdateOrgGroupWSRequest"];
      };
    };
  };
  /** Updates a location access grant */
  updateAccessGrant: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_UpdateAccessGrantWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_UpdateAccessGrantWSRequest"];
      };
    };
  };
  /** Updates a location access revocation */
  updateAccessRevocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_UpdateAccessRevocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_UpdateAccessRevocationWSRequest"];
      };
    };
  };
  /** Rhombus Key can update the detected app state which includes settings that can effect certain features. */
  updateRhombusKeyMobileAppStateForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusKeyMobileAppStateForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusKeyMobileAppStateForCurrentUserWSRequest"];
      };
    };
  };
  /** Update a rhombus secure csn credential (Rhombus Badge) */
  updateRhombusSecureCsnCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusSecureCsnCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusSecureCsnCredentialWSRequest"];
      };
    };
  };
  /** Update a rhombus secure mobile credential (RhombusKey App w/ BLE or NFC) */
  updateRhombusSecureMobileCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusSecureMobileCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusSecureMobileCredentialWSRequest"];
      };
    };
  };
  /** Update a standard csn credential (Third Party Badge) */
  updateStandardCsnCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateStandardCsnCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateStandardCsnCredentialWSRequest"];
      };
    };
  };
  /** Update a wiegand credential (Third Party Badge) */
  updateWiegandCredential: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateWiegandCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateWiegandCredentialWSRequest"];
      };
    };
  };
  /** Accept the terms of service for alert monitoring. */
  acceptAlertMonitoringTermsOfService: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_AcceptAlertMonitoringTermsOfServiceResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_AcceptAlertMonitoringTermsOfServiceRequest"];
      };
    };
  };
  /** Accept the terms of service for alert monitoring at a specific location. */
  acceptAlertMonitoringTermsOfServiceForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_AcceptAlertMonitoringTermsOfServiceResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_AcceptAlertMonitoringTermsOfServiceForLocationRequest"];
      };
    };
  };
  /** Create a new prompt threat qualification for the org. */
  addPromptThreatQualification: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_AddPromptThreatQualificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_AddPromptThreatQualificationsWSRequest"];
      };
    };
  };
  /** Cancel a threat case in alert monitoring. */
  cancelThreatCase: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_CancelThreatCaseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_CancelThreatCaseWSRequest"];
      };
    };
  };
  /** Create alert monitoring settings for a location. */
  createAlertMonitoringSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_CreateNoonlightSettingsForLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_CreateNoonlightSettingsForLocationRequest"];
      };
    };
  };
  /** Create a custom PIN for alert monitoring at a specific location. */
  createCustomPinForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_CreateCustomPinForNoonlightWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_CreateCustomPinForNoonlightWSRequest"];
      };
    };
  };
  /** Create a PIN for alert monitoring at a specific location. */
  createPinForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_CreatePinForNoonlightWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_CreatePinForNoonlightWSRequest"];
      };
    };
  };
  /** Delete alert monitoring settings for a location. */
  deleteAlertMonitoringSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_DeleteNoonlightSettingsForLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_DeleteNoonlightSettingsForLocationRequest"];
      };
    };
  };
  /** Delete a PIN for alert monitoring at a specific location. */
  deletePinForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_DeletePinForNoonlightWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_DeletePinForNoonlightWSRequest"];
      };
    };
  };
  /** Delete a prompt threat qualification by title for the org. */
  deletePromptThreatQualificationByTitle: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_DeletePromptThreatQualificationByTitleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_DeletePromptThreatQualificationByTitleWSRequest"];
      };
    };
  };
  /** Disable alert monitoring for a specific location. */
  disableMonitoringForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_DisableLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_DisableLocationRequest"];
      };
    };
  };
  /** Dismiss a threat case in alert monitoring. */
  dismissThreatCase: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_DismissThreatCaseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_DismissThreatCaseWSRequest"];
      };
    };
  };
  /** Enable alert monitoring for a specific location. */
  enableMonitoringForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_EnableLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_EnableLocationRequest"];
      };
    };
  };
  /** Escalate a threat case to an alarm for alert monitoring. */
  escalateThreatCaseToAlarm: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_EscalateThreatCaseToAlarmWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_EscalateThreatCaseToAlarmWSRequest"];
      };
    };
  };
  /** Generate monthly verifications for year report for alert monitoring at a specific location. */
  generateMonthlyVerificationsForYearReportForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GenerateMonthlyVerificationsForYearReportForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GenerateMonthlyVerificationsForYearReportForLocationWSRequest"];
      };
    };
  };
  /** Generate report data for alert monitoring at a specific location. */
  generateReportDataForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GenerateReportDataForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GenerateReportDataForLocationWSRequest"];
      };
    };
  };
  /** Generate report data for alert monitoring at a specific location. */
  generateReportDataForLocationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GenerateReportDataForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GenerateReportDataForLocationWSRequest"];
      };
    };
  };
  /** Retrieve alert monitoring settings. */
  getAlertMonitoringSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GetNoonlightSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GetNoonlightSettingsWSRequest"];
      };
    };
  };
  /** Retrieve alert monitoring settings by location. */
  getAlertMonitoringSettingsForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GetNoonlightSettingsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GetNoonlightSettingsForLocationWSRequest"];
      };
    };
  };
  /** Retrieve monitored door sensors by location based on the current active monitoring mode. */
  getMonitoredDoorSensorsForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GetMonitoredDoorSensorsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GetMonitoredDoorSensorsForLocationWSRequest"];
      };
    };
  };
  /** Retrieve the prompt threat qualification list for a the org. */
  getPromptThreatQualifications: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GetPromptThreatQualificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GetPromptThreatQualificationsWSRequest"];
      };
    };
  };
  /** Get the count of tripwire groups for alert monitoring. */
  getAlertMonitoringTripwireGroupCount: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GetAlertMonitoringTripwireGroupCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GetAlertMonitoringTripwireGroupCountWSRequest"];
      };
    };
  };
  /** Retrieve summary of the alarm monitoring status for the specified location */
  locationStatus: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_LocationStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_LocationStatusWSRequest"];
      };
    };
  };
  /** Retrieve summary of the alarm monitoring status for all locations */
  orgStatus: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_OrgStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_OrgStatusWSRequest"];
      };
    };
  };
  /** Bulk provision alert monitoring PINs for multiple users. */
  bulkProvisionPins: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BulkPinsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_BulkProvisionPinsWSRequest"];
      };
    };
  };
  /** Rotate multiple alert monitoring PINs. */
  bulkRotatePins: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BulkPinsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_BulkRotatePinsWSRequest"];
      };
    };
  };
  /** Create a PIN for alert monitoring. */
  createPin: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_CreatePinWSRequest"];
      };
    };
  };
  /** Delete an alert monitoring PIN. */
  deletePin: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_DeletePinWSRequest"];
      };
    };
  };
  /** Retrieve alert monitoring PINs by location and/or user. */
  findPinsByLocationAndUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_FindPinsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_FindPinsByLocationAndUserWSRequest"];
      };
    };
  };
  /** Retrieve alert monitoring PINs by org. */
  findPinsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_FindPinsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_FindPinsByOrgWSRequest"];
      };
    };
  };
  /** Get an unclaimed PIN code to create an alert monitoring PIN with. */
  getAlertMonitoringAvailablePinCode: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_GetAvailableALMPinCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_GetAvailableALMPinCodeWSRequest"];
      };
    };
  };
  /** Retrieve an alert monitoring PIN. */
  getPin: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_GetPinWSRequest"];
      };
    };
  };
  /** Rotate an alert monitoring PIN. */
  rotatePin: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_RotatePinWSRequest"];
      };
    };
  };
  /** Update an alert monitoring PIN. */
  updatePin: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_UpdatePinWSRequest"];
      };
    };
  };
  /** Reset the count of tripwire groups for alert monitoring. */
  resetAlertMonitoringTripwireGroupCount: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_ResetAlertMonitoringTripwireGroupCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_ResetAlertMonitoringTripwireGroupCountWSRequest"];
      };
    };
  };
  /** Update alert monitoring settings for a location. */
  updateAlertMonitoringSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_UpdateNoonlightSettingsForLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_UpdateNoonlightSettingsForLocationRequest"];
      };
    };
  };
  /** Remove an audio gateway from organization */
  deleteAudioGateway: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audiogateway_DeleteAudioGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_DeleteAudioGatewayWSRequest"];
      };
    };
  };
  /** Get audio seek points */
  getAudioSeekpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetAudioSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetAudioSeekpointsWSRequest"];
      };
    };
  };
  /** Get an audio gateway config */
  getAudioGatewayConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetAudioGatewayConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetAudioGatewayConfigWSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified audio gateway */
  getFullAudioGatewayState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetFullAudioGatewayStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetFullAudioGatewayStateWSRequest"];
      };
    };
  };
  /** Get media uris for audio gateway to retrieve footage */
  getAudioGatewayMediaUris: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetMediaUrisWSRequest"];
      };
    };
  };
  /** Get basic state information for all audio gateways */
  getMinimalAudioGatewayStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetMinimalAudioGatewayStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetMinimalAudioGatewayStatesWSRequest"];
      };
    };
  };
  /** Get required information for offline lan streaming on all audio gateways */
  getAudioGatewayOfflineLanStreamingInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetAudioGatewayOfflineLanStreamingInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetAudioGatewayOfflineLanStreamingInfoWSRequest"];
      };
    };
  };
  /** Get stored video information for an audio gateway */
  getAudioGatewayPresenceWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get uptime information for an audio gateway */
  getAudioGatewayUptimeWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetUptimeWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetUptimeWindowsWSRequest"];
      };
    };
  };
  /** Reboot the specified audio gateway */
  rebootAudioGateway: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_RebootDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_RebootAudioGatewayWSRequest"];
      };
    };
  };
  /** Update config for audio gateway */
  updateAudioGatewayConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audiogateway_UpdateAudioGatewayConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_UpdateAudioGatewayConfigWSRequest"];
      };
    };
  };
  /** Update details for audio gateway. Note: uuid is a required field */
  updateAudioGatewayDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audiogateway_UpdateAudioGatewayDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_UpdateAudioGatewayDetailsWSRequest"];
      };
    };
  };
  /** Cancel any currently playing looping audio for an audio device */
  cancelLoopingAudioPlayback: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audioplayback_CancelLoopingAudioPlaybackWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_CancelLoopingAudioPlaybackWSRequest"];
      };
    };
  };
  /** Delete an uploaded audio clip metadata */
  deleteAudioUploadMetadata: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audioplayback_DeleteAudioUploadMetadataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_DeleteAudioUploadMetadataWSRequest"];
      };
    };
  };
  /** Get list of uploaded audio clip metadata */
  getAudioUploadMetadataForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audioplayback_GetAudioUploadMetadataForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_GetAudioUploadMetadataForOrgWSRequest"];
      };
    };
  };
  /** Play an uploaded audio clip through an audio device */
  playAudioUpload: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audioplayback_PlayAudioUploadWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_PlayAudioUploadWSRequest"];
      };
    };
  };
  /** Update an uploaded audio clip metadata */
  updateAudioUploadMetadata: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audioplayback_UpdateAudioUploadMetadataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_UpdateAudioUploadMetadataWSRequest"];
      };
    };
  };
  /** Upload PCM audio clip */
  uploadAudioPcm: {
    parameters: {
      path: {
        audioClipName: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audioplayback_UploadAudioPcmWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload text to synthesize audio */
  uploadAudioText: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Audioplayback_UploadAudioTextWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_UploadAudioTextWSRequest"];
      };
    };
  };
  /** Remove the badge reader from the organization */
  deleteBadgeReader: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Badgereader_DeleteBadgeReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Badgereader_DeleteBadgeReaderWSRequest"];
      };
    };
  };
  /** Get a badge reader's config */
  getBadgeReaderConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Badgereader_GetBadgeReaderConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified badge reader */
  getBadgeReaderFullState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Badgereader_GetBadgeReaderFullStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetFullDeviceStateWSRequest"];
      };
    };
  };
  /** Get basic state information about all badge readers in organization */
  getBadgeReaderMinimalStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Badgereader_GetBadgeReaderMinimalStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetMinimalDeviceStateListWSRequest"];
      };
    };
  };
  /** Reboot the specified badge reader */
  rebootBadgeReader: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_RebootDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Badgereader_RebootBadgeReaderWSRequest"];
      };
    };
  };
  /** Update a badge reader's config */
  updateBadgeReaderConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Badgereader_UpdateBadgeReaderConfigWSRequest"];
      };
    };
  };
  /** Update hardware details of badge reader. */
  updateBadgeReaderDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateDeviceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Badgereader_UpdateBadgeReaderDetailsWSRequest"];
      };
    };
  };
  /** Retrieve list of available base stations for BLE sensors */
  getBaseStations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Ble_GetBaseStationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_GetBaseStationsWSRequest"];
      };
    };
  };
  /** Get secure secret for registered sensor */
  getSecureSecretForRegistered: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Ble_GetSecureSecretForRegisteredWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_BleDeviceMap"];
      };
    };
  };
  /** Get secure secret to register an unregistered sensor */
  getSecureSecretForUnregistered: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Ble_GetSecureSecretForUnregisteredWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_BleDeviceMap"];
      };
    };
  };
  /** Equivalent to getSecureSecretForRegistered but for RhombusKey mobile app */
  getSecureSecretOfRegisteredDeviceForRhombusKey: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Ble_GetSecureSecretForRegisteredWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_BleDeviceMap"];
      };
    };
  };
  /** Get latest firmware update details for all sensor */
  getSensorHardwareFirmwareUpdateDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Ble_GetSensorHardwareFirmwareUpdateDetailsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_GetSensorHardwareFirmwareUpdateDetailsRequest"];
      };
    };
  };
  /** Register a sensor to an organization */
  registerSensor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Ble_RegisterSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_RegisterSensorWSRequest"];
      };
    };
  };
  /** Unregister a sensor from account */
  unregisterSensor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Ble_UnregisterSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_UnregisterSensorWSRequest"];
      };
    };
  };
  /** Create rule for a button sensor. */
  createRuleForButton: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Button_CreateRuleForButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_CreateRuleForButtonWSRequest"];
      };
    };
  };
  /** Delete rule for a button sensor. */
  deleteRuleForButton: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Button_DeleteRuleForButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_DeleteRuleForButtonWSRequest"];
      };
    };
  };
  /** Get list of button press events for button sensor */
  getButtonPressEventsForSensor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Button_GetButtonPressEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_GetButtonPressEventsForSensorWSRequest"];
      };
    };
  };
  /** Get rules for all buttons in an org. */
  getButtonRulesForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Button_GetButtonRulesForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_GetButtonRulesForOrgWSRequest"];
      };
    };
  };
  /** Get basic state information for all button sensors */
  getMinimalButtonStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Button_GetMinimalButtonStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_GetMinimalButtonStatesWSRequest"];
      };
    };
  };
  /** Get all rules for a button sensor. */
  getRulesForButton: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Button_GetRulesForButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_GetRulesForButtonWSRequest"];
      };
    };
  };
  /** Update config for a button sensor. */
  updateButtonConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_UpdateButtonConfigWSRequest"];
      };
    };
  };
  /** Update details for a button sensor. */
  updateButtonDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateDeviceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_UpdateButtonDetailsWSRequest"];
      };
    };
  };
  /** Generate the homography to project detections onto a floorplan. */
  cameraCalibrateFloorplanProjection: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_CalibrateFloorplanProjectionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_CalibrateFloorplanProjectionWSRequest"];
      };
    };
  };
  /** Create custom activity seekpoints for a specified camera */
  createCustomFootageSeekpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_CreateFootageSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateCustomFootageSeekpointsWSRequest"];
      };
    };
  };
  /** Create an activity bounding box for specified camera */
  createFootageBoundingBoxes: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_CreateFootageBoundingBoxesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateFootageBoundingBoxesWSRequest"];
      };
    };
  };
  /** Share a password protected live video stream for a camera */
  createProtectedSharedLiveVideoStream: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_CreateSharedLiveVideoStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateSharedLiveVideoStreamWSRequest"];
      };
    };
  };
  /** Share a password protected video wall */
  createProtectedSharedVideoWall: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_CreateSharedVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateSharedVideoWallWSRequest"];
      };
    };
  };
  /** Create a raw HTTP stream for a camera */
  createCameraRawHttpStream: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_CreateRawHttpStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_CreateRawHttpStreamWSRequest"];
      };
    };
  };
  /** Share an unprotected live video stream for a camera */
  createCameraSharedLiveVideoStream: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_CreateSharedLiveVideoStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateSharedLiveVideoStreamWSRequest"];
      };
    };
  };
  /** Share an unprotected video wall */
  createSharedVideoWall: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_CreateSharedVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateSharedVideoWallWSRequest"];
      };
    };
  };
  /** Create a video wall for user */
  createVideoWall: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_CreateVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateVideoWallWSRequest"];
      };
    };
  };
  /** Remove a camera from organization */
  deleteCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_DeleteCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteCameraWSRequest"];
      };
    };
  };
  /** Delete custom seekpoints for specified cameras */
  deleteCustomFootageSeekpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_DeleteCustomFootageSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteCustomFootageSeekpointsWSRequest"];
      };
    };
  };
  /** Delete a raw HTTP stream for a camera */
  deleteCameraRawHttpStream: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_DeleteRawHttpStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_DeleteRawHttpStreamWSRequest"];
      };
    };
  };
  /** Remove a shared live stream from camera */
  deleteSharedLiveVideoStream: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteSharedLiveVideoStreamForDeviceResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteSharedLiveVideoStreamWSRequest"];
      };
    };
  };
  /** Remove a shared video wall */
  deleteSharedVideoWall: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_DeleteSharedVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteSharedVideoWallWSRequest"];
      };
    };
  };
  /** Delete a video wall */
  deleteVideoWall: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_DeleteVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteVideoWallWSRequest"];
      };
    };
  };
  /** Wipes the SD card on a camera */
  eraseCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_EraseCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_EraseCameraWSRequest"];
      };
    };
  };
  /** Get a list of all cameras raw HTTP streams */
  findAllCameraRawHttpStreams: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_FindAllRawHttpStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_FindAllRawHttpStreamsWSRequest"];
      };
    };
  };
  /** Get list of all shared live streams */
  findAllSharedLiveVideoStreams: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_FindAllSharedLiveVideoStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_FindAllSharedLiveVideoStreamsWSRequest"];
      };
    };
  };
  /** Get list of all shared live streams for camera */
  findCameraSharedLiveVideoStreams: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_FindSharedLiveVideoStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_FindSharedLiveVideoStreamsForWSRequest"];
      };
    };
  };
  /** Get list of all shares for a video wall */
  findSharedVideoWalls: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_FindSharedVideoWallsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_FindSharedVideoWallsWSRequest"];
      };
    };
  };
  /** Create camera registration information for QR code generation */
  generateBatchRegistrationInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GenerateBatchRegistrationInfoResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GenerateBatchRegistrationInfoRequest"];
      };
    };
  };
  /** Create a change wifi request for QR code generation */
  generateWifiChangeAuthorizationToken: {
    parameters: {
      header: {
        RHOMBUS_MY_IP?: string | null;
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GenerateWifiChangeAuthorizationTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GenerateWifiChangeAuthorizationTokenWSRequest"];
      };
    };
  };
  /** Get detailed usage information for a registration token */
  getBatchRegistrationUsage: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetBatchRegistrationTokenUsageResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetBatchRegistrationTokenUsageRequest"];
      };
    };
  };
  /** Get AI normalized confidence thresholds for a camera */
  getCameraAIThresholds: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetCameraAIThresholdsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCameraAIThresholdsWSRequest"];
      };
    };
  };
  /** Get information on archived video for specified camera */
  getCloudArchivedMediaInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetCloudArchivedMediaInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCloudArchivedMediaInfoWSRequest"];
      };
    };
  };
  /** Get the cloud archiving scheduling config applicable to a camera */
  getCloudArchivingConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetCloudArchivingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCloudArchivingConfigWSRequest"];
      };
    };
  };
  /** Get a camera's config */
  getCameraConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetConfigWSRequest"];
      };
    };
  };
  /** Use /getFullCameraState instead */
  getCurrentCameraState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetCurrentStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCurrentStateWSRequest"];
      };
    };
  };
  /** Get activity seekpoints for specified camera */
  getCustomFootageSeekpointsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetCustomFootageSeekpointsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCustomFootageSeekpointsV2WSRequest"];
      };
    };
  };
  /** Get hardware details of multiple cameras */
  getCameraDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetCameraDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCameraDetailsWSRequest"];
      };
    };
  };
  /** Get a camera's config */
  getCameraFacetedConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Deviceconfig_GetFacetedUserConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Get object bounding boxes for a specified camera. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
  getCameraFootageBoundingBoxes: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageBoundingBoxesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageBoundingBoxesWSRequest"];
      };
    };
  };
  /** Get object bounding boxes for multiple cameras. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
  getFootageBoundingBoxesForMultiple: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageBoundingBoxesForMultipleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageBoundingBoxesForMultipleWSRequest"];
      };
    };
  };
  /** Use /getFootageSeekpointsV2 instead */
  getCameraFootageSeekpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageSeekpointsWSRequest"];
      };
    };
  };
  /** Get activity seekpoints for multiple cameras */
  getFootageSeekpointsForMultiple: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageSeekpointsForMultipleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageSeekpointsForMultipleWSRequest"];
      };
    };
  };
  /** Get activity seekpoints for specified camera */
  getCameraFootageSeekpointsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageSeekpointsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageSeekpointsV2WSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified camera */
  getFullCameraState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetFullCameraStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFullCameraStateWSRequest"];
      };
    };
  };
  /** Gets all the cameras that have line-crossing feature enabled at a location */
  getLineCrossingEnabledCamerasForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetLineCrossingEnabledCamerasForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetLineCrossingEnabledCamerasForLocationWSRequest"];
      };
    };
  };
  /** Get media uris for camera to retrieve footage */
  getCameraMediaUris: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetMediaUrisWSRequest"];
      };
    };
  };
  /** Get basic information about all cameras and their locations in organization */
  getMinimalCameraLocationMap: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetMinimalCameraLocationMapWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetMinimalCameraLocationMapWSRequest"];
      };
    };
  };
  /** Get basic state information about all cameras in organization */
  getMinimalCameraStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetMinimalCameraStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetMinimalCameraStateListWSRequest"];
      };
    };
  };
  /** Use /getMinimalCameraStateList instead */
  getCameraMinimalList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetMinimalListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetMinimalListWSRequest"];
      };
    };
  };
  /** Gets all the cameras that have a occupancy polygon defined */
  getOccupancyEnabledCameras: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetFacetedCameraDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetOccupancyEnabledCamerasWSRequest"];
      };
    };
  };
  /** Get required information for offline lan streaming on all cameras */
  getCameraOfflineLanStreamingInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetOfflineLanStreamingInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetOfflineLanStreamingInfoWSRequest"];
      };
    };
  };
  /** Get stored video information for camera */
  getCameraPresenceWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get info for all raw HTTP streams from a camera */
  getCameraRawHttpStreams: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_GetRawHttpStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_GetRawHttpStreamsWSRequest"];
      };
    };
  };
  /** Get a file that contains information required to recover the media from the SD card of a damaged camera */
  getStorageRecoveryFile: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetStorageRecoveryFileWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetStorageRecoveryFileWSRequest"];
      };
    };
  };
  /** Get uptime information for camera */
  getUptimeWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetUptimeWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetUptimeWindowsWSRequest"];
      };
    };
  };
  /** Get list of video walls available for client */
  getVideoWalls: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetVideoWallsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetVideoWallsWSRequest"];
      };
    };
  };
  /** Send reboot command to camera */
  rebootCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_RebootCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_RebootCameraWSRequest"];
      };
    };
  };
  revertToDefaults: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_RevertCameraToDefaultsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_RevertCameraToDefaultsWSRequest"];
      };
    };
  };
  /** Update AI confidence thresholds for a camera */
  updateCameraAIThresholds: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraAIThresholdsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraAIThresholdsWSRequest"];
      };
    };
  };
  /** Updates the human loitering feature for a camera. */
  updateCameraHumanLoiteringConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraHumanLoiteringWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraHumanLoiteringConfigWSRequest"];
      };
    };
  };
  /** Updates the line-crossing feature for a camera. Accepts two points which define a line that determines the threshold for which INGRESS and EGRESS events will be generated. Consider the top-left corner of a camera's image to be the origin (0,0). */
  updateCameraLineCrossingThresholds: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraLineCrossingThresholdsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraLineCrossingThresholdsWSRequest"];
      };
    };
  };
  /** Update a camera's config */
  updateCameraConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateConfigWSRequest"];
      };
    };
  };
  /** Update hardware details of camera */
  updateCameraDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraWSRequest"];
      };
    };
  };
  /** Update hardware details of multiple cameras in bulk */
  updateDetailsBulkV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCamerasBulkV2WSRequest"];
      };
    };
  };
  /** Update hardware details of camera. */
  updateCameraDetailsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraV2WSRequest"];
      };
    };
  };
  /** Update a camera's config */
  updateCameraFacetedConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_UpdateFacetedUserConfigWSRequest"];
      };
    };
  };
  /** Send command to update firmware to camera */
  updateFirmware: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraFirmwareWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraFirmwareWSRequest"];
      };
    };
  };
  /** Update a video wall */
  updateVideoWalls: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateVideoWallWSRequest"];
      };
    };
  };
  /** Send a command to update wifi on specified connected cameras */
  updateCameraWifi: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateWifiWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateWifiWSRequest"];
      };
    };
  };
  /**
   * Creates settings for managing an automated job with Rhombus MIND. Only users with access to the
   * associated role can update these settings.
   */
  createAutomatedPrompt: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_BaseAutomatedPromptWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_CreateAutomatedPromptWSRequest"];
      };
    };
  };
  /**
   * Deletes the settings for an automated job by its UUID. This also deletes all responses generated
   * by the job. Only users with access to the associated role can delete these settings.
   */
  deleteAutomatedPrompt: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_DeleteAutomatedPromptWSRequest"];
      };
    };
  };
  /** Retrieves settings for an automated job by its UUID. */
  getAutomatedPrompt: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_BaseAutomatedPromptWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_GetAutomatedPromptWSRequest"];
      };
    };
  };
  /**
   * Retrieves all responses generated by an automated job. Each response is stored for 90 days before
   * being erased. Only users with access to the job’s associated role, or those who were explicitly
   * granted permission when the response was generated, may view these responses.
   */
  getAutomatedPromptChatHistory: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_GetChatHistoryWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_GetAutomatedPromptChatHistoryWSRequest"];
      };
    };
  };
  /** Retrieves settings for all automated jobs for the current org. */
  getAutomatedPromptsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_GetAutomatedPromptsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaginateRequest"];
      };
    };
  };
  /**
   * Sends a prompt to Rhombus MIND. This is only used for testing a prompt. No additional
   * context is used when processing this prompt. The response generated by Rhombus MIND expires
   * after an hour.
   */
  submitTestPrompt: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_SubmitTestPromptWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_SubmitTestPromptWSRequest"];
      };
    };
  };
  /**
   * Updates the settings for an automated job. Only users with access to the associated role can
   * update these settings. If updating the associated role, the user must have access to both the
   * current role and the new role.
   */
  updateAutomatedPrompt: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_BaseAutomatedPromptWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_UpdateAutomatedPromptWSRequest"];
      };
    };
  };
  /**
   * Verifies whether an automated job is scheduled to trigger. If no scheduled event is found, a new
   * one is created. Returns information about when the next scheduled event will trigger.
   */
  verifyJobScheduled: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_VerifyJobScheduledWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_VerifyJobScheduledWSRequest"];
      };
    };
  };
  /** Deletes a chat record. */
  deleteChatRecord: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_DeleteChatRecordWSRequest"];
      };
    };
  };
  /** Deletes a conversation and its entire chat history. */
  deleteChatbotConversation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_DeleteChatbotConversationWSRequest"];
      };
    };
  };
  /**
   * Retrieves a user's full chat history across all of their conversations. Chat records can be filtered
   * by parameters such as timestamp and response type.
   */
  getChatHistory: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_GetChatHistoryWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_GetChatHistoryWSRequest"];
      };
    };
  };
  /**
   * Retrieves chat history by context ID. A context ID can be retrieved from a conversation and refers
   * to a unique set of chat history that is seeded to Rhombus MIND before it answers a new query.
   */
  getChatHistoryByContextId: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_GetChatHistoryWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_GetChatHistoryByContextIdWSRequest"];
      };
    };
  };
  /** Retrieves a chat record. */
  getChatRecord: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_BaseChatWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_GetChatRecordWSRequest"];
      };
    };
  };
  /**
   * Retrieves the list of conversations the user has initiated with Rhombus MIND. Conversations are
   * stored for 90 days then it and its specific chat history are erased. A conversation is a unique
   * set of chat history with Rhombus MIND. When submitting a new chat for a conversation its entire
   * chat history is used to initialize the LLM before answer the new query.
   */
  getChatbotConversations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_GetChatbotConversationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_GetChatbotConversationsWSRequest"];
      };
    };
  };
  /**
   * Retrieves all chat records shared with the current user. Chat records can be filtered by parameters
   * such as timestamp and response type.
   */
  getSharedChatRecords: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_GetSharedChatRecordsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_GetSharedChatRecordsWSRequest"];
      };
    };
  };
  /**
   * Submits a query to Rhombus MIND. When submitting a query the context ID plays an important role in
   * helping seed Rhombus MIND with the previous chat history to answer the query in the context of the
   * perceived conversation. You do not need to create a conversation, submitting a new context ID will
   * cause a new conversation to be created.
   */
  submitChat: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_SubmitChatWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_SubmitChatWSRequest"];
      };
    };
  };
  /** Selectively updates a chat record. */
  updateChatRecord: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_BaseChatWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_UpdateChatRecordWSRequest"];
      };
    };
  };
  /**
   * Updates fields of a conversation by presence. Meaning if the field is omitted it will not be updated.
   * Currently the only field that can be updated is the conversation name. The contextId field is required.
   */
  updateChatbotConversation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chatbot_UpdateChatbotConversationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_UpdateChatbotConversationWSRequest"];
      };
    };
  };
  /** Remove an environmental gateway from the org */
  deleteEnvironmentalGateway: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_DeleteEnvironmentalGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_DeleteEnvironmentalGatewayWSRequest"];
      };
    };
  };
  /** Get list of climate events for environmental sensor */
  getClimateEventsForSensor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_GetClimateEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetClimateEventsForSensorWSRequest"];
      };
    };
  };
  /** Get list of climate events for environmental sensor */
  getClimateEventsForTags: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_GetClimateEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetClimateEventsForSensorWSRequest"];
      };
    };
  };
  /** Get stored video information for sensor */
  getClimatePresenceWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get the config for a climate sensor */
  getConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_GetClimateSensorConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetClimateSensorConfigWSRequest"];
      };
    };
  };
  /** Get list of shadows of all environmental gateways of an org */
  getEnvironmentalGatewayShadows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_GetEnvironmentalGatewayShadowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetEnvironmentalGatewayShadowsWSRequest"];
      };
    };
  };
  /** Get list of events for environmental gateway */
  getEventsForEnvironmentalGateway: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_GetEventsForEnvironmentalGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetEventsForEnvironmentalGatewayWSRequest"];
      };
    };
  };
  /** Get basic state information of all environmental sensors */
  getMinimalClimateStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_GetMinimalClimateStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetMinimalClimateStatesWSRequest"];
      };
    };
  };
  /** Get list of basic states of all environmental gateways of an org */
  getMinimalEnvironmentalGatewayStates: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_GetMinimalEnvironmentalGatewayStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetMinimalEnvironmentalGatewayStatesWSRequest"];
      };
    };
  };
  /** Get list of events for environmental gateways in minimal state */
  getMinimalStateEventsForEnvironmentalGateway: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_GetMinimalEnvironmentalGatewayStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetEventsForEnvironmentalGatewayWSRequest"];
      };
    };
  };
  /** Send reboot command to environmental gateway */
  rebootEnvironmentalGateway: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_RebootDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_RebootEnvironmentalGatewayWSRequest"];
      };
    };
  };
  /** Update details for environmental sensor. Note: uuid is a required field */
  updateClimateSensorDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_UpdateClimateSensorDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_UpdateClimateSensorDetailsWSRequest"];
      };
    };
  };
  /** Update details for environmental gateway. Note: uuid is a required field */
  updateEnvironmentalGatewayDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Climate_UpdateEnvironmentalGatewayDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_UpdateEnvironmentalGatewayDetailsWSRequest"];
      };
    };
  };
  /** Create a label that can be assigned to an access controlled door and referenced by an access grant or access revocation */
  addAccessControlledDoorLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_AddAccessControlledDoorLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_AddAccessControlledDoorLabelWSRequest"];
      };
    };
  };
  /** Attempts to apply a door state override to an access controlled door that ignores the regular door schedule and door schedule exceptions. */
  applyAccessControlledDoorStateOverride: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_ApplyAccessControlledDoorStateOverrideWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_ApplyAccessControlledDoorStateOverrideWSRequest"];
      };
    };
  };
  /** Attempts to cancel the door state override, if one has been applied, to an access controlled door. */
  cancelAccessControlledDoorStateOverride: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CancelAccessControlledDoorStateOverrideWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CancelAccessControlledDoorStateOverrideWSRequest"];
      };
    };
  };
  /** Create an access controlled door */
  createAccessControlledDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Create custom activity seekpoints for a specified access controlled door */
  createAccessControlledDoorSeekpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateAccessControlledDoorSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateAccessControlledDoorSeekpointsWSRequest"];
      };
    };
  };
  /** Create a door position indicator component */
  createIntegratedDoorPositionIndicator: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedDoorPositionIndicatorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedDoorPositionIndicatorWSRequest"];
      };
    };
  };
  /** Create a door relay component */
  createIntegratedDoorRelay: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedDoorRelayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedDoorRelayWSRequest"];
      };
    };
  };
  /** Create a generic button component */
  createIntegratedGenericButton: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedGenericButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedGenericButtonWSRequest"];
      };
    };
  };
  /** Create a generic input component */
  createIntegratedGenericInput: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedGenericInputWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedGenericInputWSRequest"];
      };
    };
  };
  /** Create a generic relay component */
  createIntegratedGenericRelay: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedGenericRelayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedGenericRelayWSRequest"];
      };
    };
  };
  /** Create a request to exit component */
  createIntegratedRequestToExit: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedRequestToExitWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedRequestToExitWSRequest"];
      };
    };
  };
  /** Create a third party OSDP Reader component */
  createOsdpDoorReader: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateOsdpReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateOsdpReaderWSRequest"];
      };
    };
  };
  /** Create a Rhombus OSDP Reader component */
  createRhombusOsdpDoorReader: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateRhombusOsdpReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateRhombusOsdpReaderWSRequest"];
      };
    };
  };
  /** Create a third party Wiegand Reader component */
  createWiegandReader: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateWiegandReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateWiegandReaderWSRequest"];
      };
    };
  };
  /** Delete the specified access controlled door */
  deleteAccessControlledDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_DeleteAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_DeleteAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Delete a component */
  deleteComponent: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_DeleteComponentWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_DeleteComponentWSRequest"];
      };
    };
  };
  /** Delete all components owned by the specified device */
  deleteComponentsByOwnerDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_DeleteComponentsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_DeleteComponentsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Find access controlled door shadows within the org */
  findAccessControlledDoorShadows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorShadowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorShadowsWSRequest"];
      };
    };
  };
  /** Find access controlled door shadows within the specified location */
  findAccessControlledDoorShadowsByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorShadowsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorShadowsByLocationWSRequest"];
      };
    };
  };
  /** Find access controlled doors within the org */
  findAccessControlledDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorsWSRequest"];
      };
    };
  };
  /** Find access controlled doors within the specified location */
  findAccessControlledDoorsByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorsByLocationWSRequest"];
      };
    };
  };
  /** Find access controlled doors for the specified owner device */
  findAccessControlledDoorsByOwnerDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Retrieve all component shadows for the specified component uuids */
  findAllComponentShadows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindAllComponentShadowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAllComponentShadowsWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified AccessControlledDoor */
  findComponentEventsByAccessControlledDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified api token */
  findComponentEventsByApiToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByApiTokenWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified component */
  findComponentEventsByComponent: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByComponentWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByComponentWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified correlation id */
  findComponentEventsByCorrelation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByCorrelationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByCorrelationWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified credential hex value */
  findComponentEventsByCredentialHexValue: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByCredentialHexValueWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByCredentialHexValueWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified credential uuid */
  findComponentEventsByCredentialUuid: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByCredentialUuidWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByCredentialUuidWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified credential value */
  findComponentEventsByCredentialValue: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByCredentialValueWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByCredentialValueWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified location */
  findComponentEventsByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByLocationWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified owner device (i.e. DC20's device uuid) */
  findComponentEventsByOwnerDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified api token */
  findComponentEventsBySupportAuthority: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsBySupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsBySupportAuthorityWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified User */
  findComponentEventsByUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByUserWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the rhombus key user */
  findComponentEventsForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieve component events across the entire org for the Dashboard. */
  findComponentEventsForOrgDashboard: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsForOrgDashboardWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsForOrgDashboardWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified Video Intercom and optional AccessControlledDoor */
  findComponentEventsForVideoIntercom: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsForVideoIntercomWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsForVideoIntercomWSRequest"];
      };
    };
  };
  /** Find component seekpoints by access controlled door */
  findComponentSeekPointsByAccessControlledDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Find component seekpoints by access controlled doors */
  findComponentSeekPointsByAccessControlledDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorsWSRequest"];
      };
    };
  };
  /** Find component seekpoints by component */
  findComponentSeekPointsByComponent: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByComponentWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByComponentWSRequest"];
      };
    };
  };
  /** Find component seekpoints by location */
  findComponentSeekPointsByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByLocationWSRequest"];
      };
    };
  };
  /** Find component seekpoints by owner device */
  findComponentSeekPointsByOwnerDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Find component seekpoints by user */
  findComponentSeekPointsByUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByUserWSRequest"];
      };
    };
  };
  /** Retrieve component shadows by the specified owner device uuid */
  findComponentShadowsByOwnerDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentShadowsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentShadowsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Retrieve a list of components owned by a Rhombus device (i.e. DC20's device uuid) */
  findComponentsByOwnerDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Retrieve a list of credential received events by access controlled door with distinct originators. Can be used for a list of distinct users that have entered a door within the queried timeframe */
  findDistinctByOriginatorCredentialReceivedEventsByAccessControlledDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindDistinctOriginatorCredentialReceivedEventsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindDistinctOriginatorCredentialReceivedEventsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Retrieve a list of credential received events by location with distinct originators. Can be used for a list of distinct users that have entered a location within the queried timeframe */
  findDistinctByOriginatorCredentialReceivedEventsByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindDistinctOriginatorCredentialReceivedEventsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindDistinctOriginatorCredentialReceivedEventsByLocationWSRequest"];
      };
    };
  };
  /** Find minimal state access controlled doors within the org */
  findMinimalStateAccessControlledDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindMinimalStateAccessControlledDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindMinimalStateAccessControlledDoorsWSRequest"];
      };
    };
  };
  /** Find minimal state access controlled doors within the specified location */
  findMinimalStateAccessControlledDoorsByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_FindMinimalStateAccessControlledDoorsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindMinimalStateAccessControlledDoorsByLocationWSRequest"];
      };
    };
  };
  /** Get all access controlled door labels for the organization */
  getAccessControlledDoorLabelsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_GetAccessControlledDoorLabelsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_GetAccessControlledDoorLabelsForOrgWSRequest"];
      };
    };
  };
  /** Attempts to determine what the current door state is expected to be based on the current door configuration and current time. */
  getCurrentExpectedAccessControlledDoorState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_GetCurrentExpectedAccessControlledDoorStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_GetCurrentExpectedAccessControlledDoorStateWSRequest"];
      };
    };
  };
  /** Retrieve the door shadow and all of its component shadows */
  getFullAccessControlledDoorShadow: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_GetFullAccessControlledDoorShadowWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_GetFullAccessControlledDoorShadowWSRequest"];
      };
    };
  };
  /** Gets a physical port layout for the specified device, components owned by that device and details about the port configuration validity. Map is instantiated if it doesn't currently exist as part of the call. */
  getOrCreateDevicePhysicalPortConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_GetOrCreateDevicePhysicalPortConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_GetOrCreateDevicePhysicalPortConfigWSRequest"];
      };
    };
  };
  /** Remove a label to an access controlled door */
  removeAccessControlledDoorLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_RemoveAccessControlledDoorLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_RemoveAccessControlledDoorLabelWSRequest"];
      };
    };
  };
  /** Updates an access controlled door */
  updateAccessControlledDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Update a door position indicator component */
  updateIntegratedDoorPositionIndicator: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedDoorPositionIndicatorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedDoorPositionIndicatorWSRequest"];
      };
    };
  };
  /** Update a door relay component */
  updateIntegratedDoorRelay: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedDoorRelayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedDoorRelayWSRequest"];
      };
    };
  };
  /** Update a generic button component */
  updateIntegratedGenericButton: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericButtonWSRequest"];
      };
    };
  };
  /** Update a generic input component */
  updateIntegratedGenericInput: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericInputWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericInputWSRequest"];
      };
    };
  };
  /** Update a generic relay component */
  updateIntegratedGenericRelay: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelayWSRequest"];
      };
    };
  };
  /** Update a generic relay component's steady state */
  updateIntegratedGenericRelaySteadyState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelaySteadyStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelaySteadyStateWSRequest"];
      };
    };
  };
  /** Activate a generic relay for a brief period */
  updateIntegratedGenericRelayTransientState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelayTransientStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelayTransientStateWSRequest"];
      };
    };
  };
  /** Update a request to exit component */
  updateIntegratedRequestToExit: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedRequestToExitWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedRequestToExitWSRequest"];
      };
    };
  };
  /** Update a third party OSDP Reader component */
  updateOsdpDoorReader: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateOsdpReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateOsdpReaderWSRequest"];
      };
    };
  };
  /** Update a Rhombus OSDP Reader component */
  updateRhombusOsdpDoorReader: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateRhombusOsdpReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateRhombusOsdpReaderWSRequest"];
      };
    };
  };
  /** Update a third party Wiegand Reader component */
  updateWiegandDoorReader: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_UpdateWiegandReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateWiegandReaderWSRequest"];
      };
    };
  };
  /** Accepts the usage policy for the current user. */
  acceptUsagePolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_AcceptUsagePolicyResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_AcceptUsagePolicyRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a device */
  deleteAllNotificationSnoozeSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a component composite */
  deleteNotificationSnoozeSettingForComponentComposite: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a device */
  deleteNotificationSnoozeSettingForDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a location */
  deleteNotificationSnoozeSettingForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSRequest"];
      };
    };
  };
  /** Retrieves detailed information about the current authenticated partner user. */
  getCurrentPartnerUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentPartnerUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentPartnerUserWSRequest"];
      };
    };
  };
  /** Retrieve the RhombusKey User config, user details and org summary details for the current rhombus key user. */
  getCurrentRhombusKeyUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentRhombusKeyUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentRhombusKeyUserWSRequest"];
      };
    };
  };
  /** Retrieves detailed information about the current authenticated user. */
  getCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieves the list of organizations that the current user can context switch into for the Console application. */
  getCurrentUserConsoleOrgsForContextSwitch: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentUserConsoleOrgsForContextSwitchWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentUserConsoleOrgsForContextSwitchWSRequest"];
      };
    };
  };
  /** Retrieves the list of organizations that the current user can context switch into for the Rhombus Key application. */
  getCurrentUserRhombusKeyOrgsForContextSwitch: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentUserRhombusKeyOrgsForContextSwitchWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentUserRhombusKeyOrgsForContextSwitchWSRequest"];
      };
    };
  };
  /** Retrieves the list of active sessions for the current user. */
  getCurrentUserSessions: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentUserSessionsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentUserSessionsWSRequest"];
      };
    };
  };
  /** Retrieves dashboard status and information for the current user. */
  getDashboardStatus: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_GetDashboardStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetDashboardstatusWSRequest"];
      };
    };
  };
  /** Retrieve the RhombusKey mobile app config for a user. If it does not exist a default one is created and returned. */
  getRhombusKeyConfigForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_GetRhombusKeyConfigForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetRhombusKeyConfigForCurrentUserWSRequest"];
      };
    };
  };
  /** Get the current and planned user notification snooze details */
  getUserSnoozedNotificationSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_GetUserSnoozedNotificationSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetUserSnoozedNotificationSettingsWSRequest"];
      };
    };
  };
  /** Logs out all other active sessions for the current user, keeping only the current session active. */
  logoutAllOtherCurrentUserSessions: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_LogoutAllOtherCurrentUserSessionsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_LogoutAllOtherCurrentUserSessionsRequest"];
      };
    };
  };
  /** Stores a flag or setting for the current user. */
  setCustomerFlag: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_SetFlagWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SetFlagWSRequest"];
      };
    };
  };
  /** Snoozes all user notifications for the current user. */
  snoozeAllUserNotifications: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_SnoozeAllNotificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SnoozeAllNotificationsWSRequest"];
      };
    };
  };
  /** Snoozes user notifications for a specific component composite. */
  snoozeUserNotificationsForComponentComposite: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_SnoozeNotificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SnoozeNotificationsWSRequest"];
      };
    };
  };
  /** Snoozes user notifications for a specific device. */
  snoozeUserNotificationsForDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_SnoozeNotificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SnoozeNotificationsWSRequest"];
      };
    };
  };
  /** Snoozes user notifications for a specific location. */
  snoozeUserNotificationsForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_SnoozeNotificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SnoozeNotificationsWSRequest"];
      };
    };
  };
  /** Updates the details and information for the current authenticated partner user. */
  updateCurrentPartnerUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateCurrentPartnerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateCurrentPartnerWSRequest"];
      };
    };
  };
  /** Updates the details and information for the current authenticated user. */
  updateCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateCurrentUserWSRequest"];
      };
    };
  };
  /** Update notification settings for user */
  updateCurrentUserNotificationSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserNotificationSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserNotificationSettingsWSRequest"];
      };
    };
  };
  /** Updates the dashboard customization settings for the current user. */
  updateDashboardCustomizations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateDashboardCustomizationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateDashboardCustomizationsWSRequest"];
      };
    };
  };
  /** Updates the frontend customization settings for the current user. */
  updateFrontendCustomizations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateFrontendCustomizationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateFrontendCustomizationsWSRequest"];
      };
    };
  };
  /** Update the RhombusKey mobile app preferences for the current user */
  updateRhombusKeyPreferencesForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateRhombusKeyPreferencesForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateRhombusKeyPreferencesForCurrentUserWSRequest"];
      };
    };
  };
  /** Create an event listener */
  createEventListener: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Developer_CreateEventListenerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Developer_CreateEventListenerWSRequest"];
      };
    };
  };
  /** Delete an event listener */
  deleteEventListener: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Developer_DeleteEventListenerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Developer_DeleteEventListenerWSRequest"];
      };
    };
  };
  /** Get a list of all event listeners */
  getAllEventListeners: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Developer_GetAllEventListenersWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Developer_GetAllEventListenersWSRequest"];
      };
    };
  };
  /** Get a list of event listeners for a device */
  getEventListenersForDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Developer_GetEventListenersForDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Developer_GetEventListenersForDeviceWSRequest"];
      };
    };
  };
  /** Get a device's config */
  getFacetedConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Deviceconfig_GetFacetedUserConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Update a device's config */
  updateFacetedConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_UpdateFacetedUserConfigWSRequest"];
      };
    };
  };
  /** Get list of door open/close events for door sensor */
  getDoorEventsForSensor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Door_GetDoorEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Door_GetDoorEventsForSensorWSRequest"];
      };
    };
  };
  /** Get list of door open/close events for door sensor */
  getDoorEventsForTags: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Door_GetDoorEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Door_GetDoorEventsForSensorWSRequest"];
      };
    };
  };
  /** Get stored video information for sensor */
  getDoorPresenceWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get basic state information for all door sensors */
  getMinimalDoorStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Door_GetMinimalDoorStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Door_GetMinimalDoorStatesWSRequest"];
      };
    };
  };
  /** Update details for door sensor. Note: uuid is a required field */
  updateDoorSensorDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Door_UpdateDoorSensorDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Door_UpdateDoorSensorDetailsWSRequest"];
      };
    };
  };
  /** Generate the homography to project detections onto a floorplan. */
  doorbellCameraCalibrateFloorplanProjection: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_CalibrateFloorplanProjectionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_CalibrateFloorplanProjectionWSRequest"];
      };
    };
  };
  /** Create a raw HTTP stream for a doorbell camera. */
  createDoorbellCameraRawHttpStream: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_CreateRawHttpStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_CreateRawHttpStreamWSRequest"];
      };
    };
  };
  /** Create rule for a doorbell camera. */
  createRuleForDoorbellCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_CreateRuleForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_CreateRuleForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Share an live video stream for a doorbell camera */
  createDoorbellCameraSharedLiveVideoStream: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_CreateSharedLiveVideoStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_CreateSharedLiveVideoStreamWSRequest"];
      };
    };
  };
  /** Remove the doorbell camera from the organization */
  deleteDoorbellCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_DeleteDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_DeleteDoorbellCameraWSRequest"];
      };
    };
  };
  /** Delete a raw HTTP stream for a doorbell camera. */
  deleteDoorbellCameraRawHttpStream: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_DeleteRawHttpStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_DeleteRawHttpStreamWSRequest"];
      };
    };
  };
  /** Delete rule for a doorbell camera. */
  deleteRuleForDoorbellCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_DeleteRuleForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_DeleteRuleForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Get a list of all doorbell cameras raw HTTP streams. */
  findAllDoorbellCameraRawHttpStreams: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_FindAllRawHttpStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_FindAllRawHttpStreamsWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified Doorbell Camera */
  findComponentEventsForDoorbellCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_FindComponentEventsForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_FindComponentEventsForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Retrieve all component seekpoints relevant to the specified Doorbell Camera */
  findComponentSeekPointsForDoorbellCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_FindComponentSeekPointsForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_FindComponentSeekPointsForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Get list of all shared live streams for doorbell camera */
  findDoorbellCameraSharedLiveVideoStreams: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_FindSharedLiveVideoStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_FindSharedLiveVideoStreamsForWSRequest"];
      };
    };
  };
  /** Get object bounding boxes for a specified doorbell camera. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
  getDoorbellCameraBoundingBoxes: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetBoundingBoxesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetBoundingBoxesWSRequest"];
      };
    };
  };
  /** Get a doorbell camera's config */
  getDoorbellCameraConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Get rules for all doorbell cameras in an org. */
  getDoorbellCameraRulesForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraRulesForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraRulesForOrgWSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified doorbell camera */
  getDoorbellCameraFullState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraFullStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetFullDeviceStateWSRequest"];
      };
    };
  };
  /** Get media uris for doorbell camera to retrieve footage and audio */
  getDoorbellCameraMediaUris: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetMediaUrisWSRequest"];
      };
    };
  };
  /** Get basic state information about all doorbell cameras in organization */
  getDoorbellCameraMinimalStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraMinimalStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetMinimalDeviceStateListWSRequest"];
      };
    };
  };
  /** Get required information for offline lan streaming on all video intercoms */
  getDoorbellCameraOfflineLanStreamingInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraOfflineLanStreamingInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraOfflineLanStreamingInfoWSRequest"];
      };
    };
  };
  /** Get stored video information for a doorbell camera */
  getDoorbellCameraPresenceWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get info for all raw HTTP streams from a doorbell camera. */
  getDoorbellCameraRawHttpStreams: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_GetRawHttpStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_GetRawHttpStreamsWSRequest"];
      };
    };
  };
  /** Get all rules for a doorbell camera. */
  getRulesForDoorbellCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetRulesForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_GetRulesForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Get activity seekpoints for specified doorbell camera */
  getDoorbellCameraSeekPoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetSeekpointsWSRequest"];
      };
    };
  };
  /** Get uptime information for a doorbell camera */
  getDoorbellCameraUptimeWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetUptimeWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetUptimeWindowsWSRequest"];
      };
    };
  };
  /** Reboot the specified doorbell camera */
  rebootDoorbellCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_RebootDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_RebootDoorbellCameraWSRequest"];
      };
    };
  };
  /** Update a doorbell camera's config */
  updateDoorbellCameraConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_UpdateDoorbellCameraConfigWSRequest"];
      };
    };
  };
  /** Update hardware details of doorbell camera. */
  updateDoorbellCameraDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateDeviceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_UpdateDoorbellCameraDetailsWSRequest"];
      };
    };
  };
  /** Create a rule owned by a specific door controller. */
  createDoorControllerRule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_CreateDoorControllerRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_CreateDoorControllerRuleWSRequest"];
      };
    };
  };
  /** Remove the door controller from the organization as long as it has no doors */
  deleteDoorController: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_DeleteDoorControllerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_DeleteDoorControllerWSRequest"];
      };
    };
  };
  /** Delete a rule owned by a specific door controller. */
  deleteDoorControllerRule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_DeleteDoorControllerRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_DeleteDoorControllerRuleWSRequest"];
      };
    };
  };
  /** Get a door controller's config */
  getDoorControllerConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_GetDoorControllerConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Get a specific rule owned by the door controller. */
  getDoorControllerRule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_GetDoorControllerRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_GetDoorControllerRuleWSRequest"];
      };
    };
  };
  /** Get all rules owned by the door controller. */
  getDoorControllerRules: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_GetDoorControllerRulesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_GetDoorControllerRulesWSRequest"];
      };
    };
  };
  /** Get state information about all door controllers in an organization */
  getDoorControllerStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_GetDoorControllerStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_GetDoorControllerStateListWSRequest"];
      };
    };
  };
  /** Register a Rhombus reader that a Door Controller has discovered */
  registerDiscoveredRhombusReader: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_RegisterDiscoveredRhombusReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_RegisterDiscoveredRhombusReaderWSRequest"];
      };
    };
  };
  /** Update a door controller's config */
  updateDoorControllerConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerConfigWSRequest"];
      };
    };
  };
  /** Update details for door controller. Note: uuid is a required field */
  updateDoorControllerDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerDetailsWSRequest"];
      };
    };
  };
  /** Update a rule owned by a specific door controller. */
  updateDoorControllerRule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerRuleWSRequest"];
      };
    };
  };
  /** Get test configuration */
  getEthernetTesterConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Ethernettester_GetEthernetTesterConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ethernettester_GetEthernetTesterConfigWSRequest"];
      };
    };
  };
  /** Create a group of clips */
  createClipGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_groups_CreateClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_CreateClipGroupWSRequest"];
      };
    };
  };
  /** Use /createSharedClipGroupV3 instead */
  createSharedClipGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_CreateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_CreateSharedClipGroupWSRequest"];
      };
    };
  };
  /** Use /createSharedClipGroupV3 instead */
  createSharedClipGroupV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_CreateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_CreateSharedClipGroupWSRequest"];
      };
    };
  };
  /** Share multiple clips in a single page */
  createSharedClipGroupV3: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_CreateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_CreateSharedClipGroupWSRequest"];
      };
    };
  };
  /** Delete alert monitoring threat case */
  deleteAlertMonitoringThreatCase: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_DeleteAlertMonitoringThreatCaseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteAlertMonitoringThreatCaseWSRequest"];
      };
    };
  };
  /** Delete alert monitoring threat case by status */
  deleteAlertMonitoringThreatCaseByStatus: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_DeleteAlertMonitoringThreatCaseByStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteAlertMonitoringThreatCaseByStatusWSRequest"];
      };
    };
  };
  /** Delete a clip group */
  deleteClipGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_groups_DeleteClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_DeleteClipGroupWSRequest"];
      };
    };
  };
  /** Delete all types of saved clips (splices in progress, completed splices, saved alerts) */
  deleteSavedClip: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_DeleteSavedClipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteSavedClipWSRequest"];
      };
    };
  };
  /** Use /deleteSharedClipGroupV2 instead */
  deleteSharedClipGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_DeleteSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteSharedClipGroupWSRequest"];
      };
    };
  };
  /** Delete a shared clip page */
  deleteSharedClipGroupV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_DeleteSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteSharedClipGroupWSRequest"];
      };
    };
  };
  /** Dismiss all policy alerts for each specified device(s) */
  dismissAllPolicyAlertsForDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_DismissAllPolicyAlertsForDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DismissAllPolicyAlertsForDeviceWSRequest"];
      };
    };
  };
  /** Dismiss all policy alerts in organization */
  dismissAllPolicyAlertsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_DismissAllPolicyAlertsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DismissAllPolicyAlertsWSRequest"];
      };
    };
  };
  /** Dismiss a policy alert */
  dismissPolicyAlertV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_DismissPolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DismissPolicyAlertWSRequest"];
      };
    };
  };
  /** Dismiss multiple policy alerts */
  dismissPolicyAlertsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_DismissPolicyAlertsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DismissPolicyAlertsWSRequest"];
      };
    };
  };
  /** Get alert monitoring threat case */
  getAlertMonitoringThreatCase: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetAlertMonitoringThreatCaseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetAlertMonitoringThreatCaseWSRequest"];
      };
    };
  };
  /** Get alert monitoring threat cases */
  getAlertMonitoringThreatCases: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetAlertMonitoringThreatCasesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetAlertMonitoringThreatCasesWSRequest"];
      };
    };
  };
  /** Get details like seekpoints for a clip group */
  getClipGroupDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_groups_GetClipGroupDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_GetClipGroupDetailsWSRequest"];
      };
    };
  };
  /** Get all clip groups for an org */
  getClipGroupsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_groups_GetClipGroupsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_GetClipGroupsForOrgWSRequest"];
      };
    };
  };
  /** Get a specified saved clip with current progress */
  getClipWithProgress: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetClipWithProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetClipWithProgressWSRequest"];
      };
    };
  };
  /** Get list of saved clips in organization, with current progress */
  getClipsWithProgress: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetClipsWithProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetClipsWithProgressWSRequest"];
      };
    };
  };
  /** Get list of expiring saved clips in organization. */
  getExpiringClipsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetClipsWithProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetClipsWithProgressWSRequest"];
      };
    };
  };
  /** Retrieves all policy alerts that will expire before the provided timestamp */
  getExpiringPolicyAlerts: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetExpiringPolicyAlertsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetExpiringPolicyAlertsWSRequest"];
      };
    };
  };
  /** Get motion data for specified camera */
  getMotionGrid: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetMotionGridWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetMotionGridWSRequest"];
      };
    };
  };
  /** Get aggregated motion heatmap for specified time period and camera. Divides a camera's resolution into a 36x64 grid and counts the number of motion events that occurred in each cell. */
  getMotionHeatMap: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetMotionGridCountsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetMotionGridWSRequest"];
      };
    };
  };
  /** Get information about a policy alert */
  getPolicyAlert: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertWSRequest"];
      };
    };
  };
  /** Get count of policy alerts */
  getPolicyAlertCount: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertCountWSRequest"];
      };
    };
  };
  /** Get detailed information about policy alert, including seekpoints and bounding boxes */
  getPolicyAlertDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertDetailsWSRequest"];
      };
    };
  };
  /** Get recent policy alerts for device, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
  getPolicyAlertGroupsForDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertGroupsForDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertGroupsForDeviceWSRequest"];
      };
    };
  };
  /** Get recent policy alerts for a location, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
  getPolicyAlertGroupsForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertGroupsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertGroupsForLocationWSRequest"];
      };
    };
  };
  /** Get recent policy alerts for organization, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
  getPolicyAlertGroupsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertGroupsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertGroupsV2WSRequest"];
      };
    };
  };
  /** Get information about a policy alert */
  getPolicyAlertV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertV2WSRequest"];
      };
    };
  };
  /** Get recent policy alerts for organization */
  getPolicyAlerts: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertsWSRequest"];
      };
    };
  };
  /** Get recent policy alerts for organization */
  getPolicyAlertsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertsV2WSRequest"];
      };
    };
  };
  /** Get a count of saved clips in and organization */
  getSavedClipCount: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipCountWSRequest"];
      };
    };
  };
  /** Get detailed information about a saved clip, including seekpoints and bounding boxes */
  getSavedClipDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipDetailsWSRequest"];
      };
    };
  };
  /** Use /getSavedClipsV2 instead */
  getSavedClips: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipsWSRequest"];
      };
    };
  };
  /** Get list of saved clips matching the external transaction id */
  getSavedClipsByExternalTransactionId: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipsByExternalTransactionIdWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipsByExternalTransactionIdWSRequest"];
      };
    };
  };
  /** Get list of saved clips in organization */
  getSavedClipsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipsV2WSRequest"];
      };
    };
  };
  /** Get detailed information about a shared clip page, including seekpoints and bounding boxes */
  getSharedClipGroupDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetSharedClipGroupDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSharedClipGroupDetailsWSRequest"];
      };
    };
  };
  /** Use /getSharedClipGroupsV2 instead */
  getSharedClipGroups: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetSharedClipGroupsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSharedClipGroupsWSRequest"];
      };
    };
  };
  /** Get list of shared clip pages in organization */
  getSharedClipGroupsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetSharedClipGroupsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSharedClipGroupsV2WSRequest"];
      };
    };
  };
  /** Get spliced clips in progress */
  DEPRECATED_getSplicedClipsInProgress: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetSplicedClipsInProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSplicedClipsInProgressWSRequest"];
      };
    };
  };
  /** Get list of unhealthy devices in organization */
  getUnhealthyDeviceAlerts: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_GetUnhealthyDeviceAlertsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetUnhealthyDeviceAlertsWSRequest"];
      };
    };
  };
  /** Mute notifications from a device for specified number of seconds */
  muteNotificationsForDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_MuteNotificationsForDevicetWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_MuteNotificationsForDevicetWSRequest"];
      };
    };
  };
  /** Report a bad policy event (AI false positive) and send information for feedback. Note: this adds the clip to our AI training data set */
  reportBadPolicyAlert: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_ReportBadPolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_ReportBadPolicyAlertWSRequest"];
      };
    };
  };
  /** Save a policy alert as a saved clip */
  savePolicyAlertV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_SavePolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_SavePolicyAlertWSRequest"];
      };
    };
  };
  /** Search motion grid for motion events occuring in specified grid cells. Note: motion grid is a 64x36 grid of cells with the upper left hand corner being (0, 0) */
  searchMotionGrid: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_SearchMotionGridWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_SearchMotionGridWSRequest"];
      };
    };
  };
  /** Search motion grid for motion events occuring in specified grid cells. Note: motion grid is a 64x36 grid of cells with the upper left hand corner being (0, 0) */
  searchMotionGridWithActivities: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_SearchMotionGridWithActivitiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_SearchMotionGridWithActivitiesWSRequest"];
      };
    };
  };
  /** Unsave policy alert and remove associated saved clip */
  unSavePolicyAlertV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_UnSavePolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UnSavePolicyAlertWSRequest"];
      };
    };
  };
  /** Update a clip group's title, description, or clips */
  updateClipGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_groups_UpdateClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_UpdateClipGroupWSRequest"];
      };
    };
  };
  /** Update the text description field of a policy alert. Development only for now */
  updatePolicyAlertTextDescription: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_UpdatePolicyAlertTextDescriptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UpdatePolicyAlertTextDescriptionWSRequest"];
      };
    };
  };
  /** Update saved clip title or summary */
  updateSavedClip: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_UpdateSavedClipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UpdateSavedClipWSRequest"];
      };
    };
  };
  /** Use /updateSharedClipGroupV2 instead */
  updateSharedClipGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_UpdateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UpdateSharedClipGroupWSRequest"];
      };
    };
  };
  /** Update shared clip page title, description, password, or expiration time */
  updateSharedClipGroupV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Event_UpdateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UpdateSharedClipGroupWSRequest"];
      };
    };
  };
  /** Get camera or doorbell camera seekpoints */
  getCameraOrDoorbellCameraSeekpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Eventsearch_GetCameraOrDoorbellCameraSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetCameraOrDoorbellCameraSeekpointsWSRequest"];
      };
    };
  };
  /** Get normal seekpoint events and access control seekpoint events */
  getDeprecatedEventSeekpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsWSRequest"];
      };
    };
  };
  /** Get normal seekpoint events and access control seekpoint events */
  getDeprecatedEventSeekpointsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsWSRequest"];
      };
    };
  };
  /** Get normal seekpoint events and access control seekpoint events */
  getEventSeekpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsV2WSRequest"];
      };
    };
  };
  /** Download audit log */
  exportAudit: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv; charset=UTF-8": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportAuditEventsWSRequest"];
      };
    };
  };
  /** Download climate event log */
  exportClimateEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportClimateEventsWSRequest"];
      };
    };
  };
  /** Download count report */
  exportCountReports: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv; charset=UTF-8": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportCountReportsWSRequest"];
      };
    };
  };
  /** Download diagnostic log */
  exportDiagnostic: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv; charset=UTF-8": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportDiagnosticEventsWSRequest"];
      };
    };
  };
  /** Download door event log */
  exportDoorEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportDoorEventsWSRequest"];
      };
    };
  };
  /** Download environmental gateway event log */
  exportEnvironmentalGatewayEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportEnvironmentalGatewayEventsWSRequest"];
      };
    };
  };
  /** Download device inventory */
  exportInventory: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv; charset=UTF-8": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportInventoryWSRequest"];
      };
    };
  };
  /** Download motion event log for motion sensors */
  exportMotionEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportMotionEventsWSRequest"];
      };
    };
  };
  /** Download people count report */
  exportPeopleCountEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv; charset=UTF-8": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportPeopleCountEventsWSRequest"];
      };
    };
  };
  /** Download people event log */
  exportPeopleEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportPeopleEventsWSRequest"];
      };
    };
  };
  /** Download proximity tag event log */
  exportProximityEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportProximityEventsWSRequest"];
      };
    };
  };
  /** Download proximity tag event log */
  exportProximityLocomotionEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportProximityLocomotionEventsWSRequest"];
      };
    };
  };
  /** Download device uptime reports */
  exportUptime: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/zip": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportUptimeWSRequest"];
      };
    };
  };
  /** Download org users */
  exportUsers: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv; charset=UTF-8": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportUsersWSRequest"];
      };
    };
  };
  /** Download vehicle event log.  Use /export/vehicleEventsV2 instead for more functionality */
  exportVehicleEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv; charset=UTF-8": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportVehicleEventsWSRequest"];
      };
    };
  };
  /** Download vehicle event log */
  exportVehicleEventsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv; charset=UTF-8": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetVehicleEventsWSRequest"];
      };
    };
  };
  /** Delete face event. */
  deleteFaceEvent: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_DeleteFaceEventWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_DeleteFaceEventWSRequest"];
      };
    };
  };
  /** Export face events for an organization */
  exportFaceEventsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "text/csv; charset=UTF-8": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_ExportFaceEventsByOrgWSRequest"];
      };
    };
  };
  /** Find face events by device for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
  findFaceEventsByDeviceForReporting: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByDeviceForReportingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByDeviceForReportingWSRequest"];
      };
    };
  };
  /** Find face events by location for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
  findFaceEventsByLocationForReporting: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByLocationForReportingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByLocationForReportingWSRequest"];
      };
    };
  };
  /** Find face events for an organization. The events are returned in reverse chronological order, with the latest events appearing first. */
  findFaceEventsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByOrgWSRequest"];
      };
    };
  };
  /** Find face events by org for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
  findFaceEventsByOrgForReporting: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByOrgForReportingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByOrgForReportingWSRequest"];
      };
    };
  };
  /** Find face events for an organization that are similar to a specified face event. The events are returned in reverse chronological order, with the latest events appearing first. */
  findSimilarFaceEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsWSRequest"];
      };
    };
  };
  /** Find face events for an organization that are similar to a specified face embedding. The events are returned in reverse chronological order, with the latest events appearing first. */
  findSimilarFaceEventsByEmbedding: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsByEmbeddingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsByEmbeddingWSRequest"];
      };
    };
  };
  /** Find face events for an organization that are similar to a specified face matchmaker. The events are returned in reverse chronological order, with the latest events appearing first. */
  findSimilarFaceEventsByFaceMatchmaker: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsByFaceMatchmakerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsByFaceMatchmakerWSRequest"];
      };
    };
  };
  /** Get face event. */
  getFaceEvent: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_GetFaceEventWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_GetFaceEventWSRequest"];
      };
    };
  };
  /** Generates an embedding for the face search image if a face is detected. The embedding can be used to search for similar face events. */
  processFaceEventSearchImage: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_ProcessFaceEventSearchImageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Update face event. */
  updateFaceEvent: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_UpdateFaceEventWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_UpdateFaceEventWSRequest"];
      };
    };
  };
  /** Create face matchmaker from face sighting. */
  createFaceMatchmakerFromSighting: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_CreateFaceMatchmakerFromSightingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_CreateFaceMatchmakerFromSightingWSRequest"];
      };
    };
  };
  /** Create person and face matchmakers. */
  createPersonAndFaceMatchmakers: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_CreatePersonAndFaceMatchmakersWSResponse"];
        };
      };
    };
    /** Multipart form-data containing:a required 'personName' form field,an optional list of 'faceEventUuid' fields,an optional .jpg or .png file (maximum file size: 5MB) */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Delete face matchmaker. */
  deleteFaceMatchmaker: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_DeleteFaceMatchmakerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_DeleteFaceMatchmakerWSRequest"];
      };
    };
  };
  /** Find face matchmakers by org. */
  findFaceMatchmakersByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceMatchmakersByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceMatchmakersByOrgWSRequest"];
      };
    };
  };
  /** Find face matchmakers by person. */
  findFaceMatchmakersByPerson: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceMatchmakersByPersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceMatchmakersByPersonWSRequest"];
      };
    };
  };
  /** Find face upload metadata by transaction. */
  findFaceUploadMetadataByTransaction: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceUploadMetadataByTransactionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceUploadMetadataByTransactionWSRequest"];
      };
    };
  };
  /** Get face matching configuration. */
  getFaceMatchingConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_GetFaceMatchingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_GetFaceMatchingConfigWSRequest"];
      };
    };
  };
  /** Get face matchmaker. */
  getFaceMatchmaker: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_GetFaceMatchmakerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_GetFaceMatchmakerWSRequest"];
      };
    };
  };
  /** Update face matching configuration. */
  updateFaceMatchingConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_UpdateFaceMatchingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_UpdateFaceMatchingConfigWSRequest"];
      };
    };
  };
  /** Upload face matchmaker image for a specific person. */
  uploadFaceMatchmakerForPerson: {
    parameters: {
      path: {
        personUuid: string | null;
      };
      query: {
        /** Unique transaction id to track the face matchmakers upload progress. If not specified, the system will generate it. */
        transaction?: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_UploadFaceMatchmakerForPersonWSResponse"];
        };
      };
    };
    /** Multipart form-data containing a .jpg or .png file. Maximum file size: 5MB. */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload face matchmaker images for one or more people. The uploaded file name is matched to a person's name. If a person is not found and createPersonIfNotFound is set to true, a new person is created. */
  uploadFaceMatchmakers: {
    parameters: {
      query: {
        /** Unique transaction id to track the face matchmakers upload progress. If not specified, the system will generate it. */
        transaction?: string | null;
        /** If a person is not found and createPersonIfNotFound is set to true, a new person is created */
        createPersonIfNotFound?: boolean | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_UploadFaceMatchmakersWSResponse"];
        };
      };
    };
    /** Multipart form-data containing a .jpg or .png file. Maximum file size: 5MB. */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Validates if image is suitable to be a face matchmaker. */
  validateFaceMatchmakerImage: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_ValidateFaceMatchmakerImageWSResponse"];
        };
      };
    };
    /** Multipart form-data containing a .jpg or .png file. Maximum file size: 5MB. */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Add a label to a person */
  addPersonLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_AddPersonLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_AddPersonLabelWSRequest"];
      };
    };
  };
  /** Create a person for face recognition purposes. */
  createPerson: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_CreatePersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_CreatePersonWSRequest"];
      };
    };
  };
  /** Delete person created for face recognition purposes. */
  deletePerson: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_DeletePersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_DeletePersonWSRequest"];
      };
    };
  };
  /** Find people created for face recognition purposes in an organization. */
  findPeopleByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_FindPeopleByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_FindPeopleByOrgWSRequest"];
      };
    };
  };
  /** Find all person labels for organization. */
  findPersonLabelsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_FindPersonLabelsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_FindPersonLabelsByOrgWSRequest"];
      };
    };
  };
  /** Get a person created for face recognition purposes. */
  getPerson: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_GetPersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_GetPersonWSRequest"];
      };
    };
  };
  /** Remove a label from a person. */
  removePersonLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_RemovePersonLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_RemovePersonLabelWSRequest"];
      };
    };
  };
  /** Update person created for face recognition purposes. */
  updatePerson: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_UpdatePersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_UpdatePersonWSRequest"];
      };
    };
  };
  /** Get possible event types for specified device dependent on features enabled */
  getDeviceEventTypes: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Feature_GetDeviceEventTypesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_GetDeviceEventTypesWSRequest"];
      };
    };
  };
  /** Get enabled features for a device */
  getDeviceFeatures: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Feature_GetDeviceFeaturesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_GetDeviceFeaturesWSRequest"];
      };
    };
  };
  /** Get enabled features for all devices in an org */
  getDeviceFeaturesList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Feature_GetDeviceFeaturesListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_GetDeviceFeaturesListWSRequest"];
      };
    };
  };
  /** Get feature compatability matrix */
  getFeatureCompatabilityMatrix: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Feature_GetFeatureCompatabilityMatrixWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_GetFeatureCompatabilityMatrixWSRequest"];
      };
    };
  };
  /** Update enabled features for a device */
  updateDeviceFeatures: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Feature_UpdateDeviceFeaturesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_UpdateDeviceFeaturesWSRequest"];
      };
    };
  };
  /** Updates guest information using a provided token. Validates the token, fetches location data, performs offender checks, and updates guest details including face images. This endpoint is used for external guest management forms. */
  updateGuestByToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGuestByTokenWSRequest"];
      };
    };
  };
  /** Activate kiosk and redirect to kiosk page */
  activateKiosk: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_ActivateKioskWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_ActivateKioskWSRequest"];
      };
    };
  };
  /** Adds specified users to a guest management host group */
  addUsersToGuestManagementHostGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_AddUsersToOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_AddUsersToOrgGroupWSRequest"];
      };
    };
  };
  /** Create Guest Without Email Invite */
  createGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_CreateGuestWSRequest"];
      };
    };
  };
  /** Create Guest Invite */
  createGuestInvite: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_CreateGuestInviteWSRequest"];
      };
    };
  };
  /** Creates a guest management host group */
  createGuestManagementHostGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_CreateOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_CreateOrgGroupWSRequest"];
      };
    };
  };
  /** Create guest management settings */
  createGuestManagementSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_CreateGuestManagementSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_CreateGuestManagementSettingsWSRequest"];
      };
    };
  };
  /** Delete Guest */
  deleteGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestByEmailWSRequest"];
      };
    };
  };
  /** Delete a guest management host group */
  deleteGuestManagementHostGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_DeleteOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_DeleteOrgGroupWSRequest"];
      };
    };
  };
  /** Delete guest management settings */
  deleteGuestManagementSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_BaseGuestManagementWSRequest"];
      };
    };
  };
  /** Export Guest Activity .csv */
  exportGuestActivity: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_ExportGuestsWSRequest"];
      };
    };
  };
  /** Export Single Guest Activity .csv */
  exportGuestActivityForGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_ExportGuestActivitiesWSRequest"];
      };
    };
  };
  /** Export Guest List .csv */
  exportGuestList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["StreamingOutput"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_ExportGuestsWSRequest"];
      };
    };
  };
  /** Find all users belonging to an guest management host group */
  findAllUsersForGuestManagementHostGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindAllUsersForOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindAllUsersForOrgGroupWSRequest"];
      };
    };
  };
  /** Retrieve the guest management host group with the specified name */
  findGuestManagementHostGroupByExactName: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByExactNameWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByExactNameWSRequest"];
      };
    };
  };
  /** Find all guest management host group memberships by user */
  findGuestManagementHostGroupMembershipsByUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupMembershipsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupMembershipsByUserWSRequest"];
      };
    };
  };
  /** Retrieve all guest management host groups with a name starting with the specified prefix */
  findGuestManagementHostGroupsByNamePrefix: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByNamePrefixWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByNamePrefixWSRequest"];
      };
    };
  };
  /** Retrieve all guest management host groups defined in the org */
  findGuestManagementHostGroupsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByOrgWSRequest"];
      };
    };
  };
  /** Find all guest management host groups a user belongs to */
  findGuestManagementHostGroupsByUserMembership: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByUserMembershipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByUserMembershipWSRequest"];
      };
    };
  };
  /** Get activity logs for a guest */
  getActivitiesForGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestActivityLogsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetActivityLogsForGuestWSRequest"];
      };
    };
  };
  /** Get activity logs for a location */
  getActivitiesForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestActivityLogsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetActivityLogsForLocationWSRequest"];
      };
    };
  };
  /** Get All Guest Invites by Org */
  getAllGuestInvitesByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetAllGuestInvitesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetInvitesForOrgWSRequest"];
      };
    };
  };
  /** Get All Guests by Org */
  getAllGuestsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetAllGuestsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_BaseGuestManagementWSRequest"];
      };
    };
  };
  /** Get Guest */
  getGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestByEmailWSRequest"];
      };
    };
  };
  /** Get org wide activity logs for guests */
  getGuestActivityLogs: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestActivityLogsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetGuestActivityLogsWSRequest"];
      };
    };
  };
  /** Get Guest Invite */
  getGuestInvite: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestInviteWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestInviteWSRequest"];
      };
    };
  };
  /** Get Guest Invite by Email */
  getGuestInvitesByEmail: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestInvitesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestInvitesByEmailWSRequest"];
      };
    };
  };
  /** Get guest management Settings for org */
  getGuestManagementSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestManagementSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_BaseGuestManagementWSRequest"];
      };
    };
  };
  /** Get info for kiosk */
  getKioskInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetKioskInfoWSResponse"];
        };
      };
    };
  };
  /** Get kiosks for org */
  getGuestManagementKiosksForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetKiosksForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_BaseGuestManagementWSRequest"];
      };
    };
  };
  /** Get name tag template for guest */
  getNametagTemplateForGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetNametagTemplateForGuestWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetNametagTemplateForGuestWSRequest"];
      };
    };
  };
  /** Invite Guest Via Email */
  inviteGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestWSRequest"];
      };
    };
  };
  /** Removes specified users from a guest management host group */
  removeUsersFromGuestManagementHostGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_RemoveUsersFromOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_RemoveUsersFromOrgGroupWSRequest"];
      };
    };
  };
  /** Invite Guest Via Email */
  sendFormInvite: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestWSRequest"];
      };
    };
  };
  /** Sign In Guest */
  signInGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestCheckinWSRequest"];
      };
    };
  };
  /** Sign Out Guest */
  signOutGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestCheckinWSRequest"];
      };
    };
  };
  /** Update Guest */
  updateGuest: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_UpdateGuestWSRequest"];
      };
    };
  };
  /** Update Guest Invite */
  updateGuestInvite: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_UpdateGuestInviteWSRequest"];
      };
    };
  };
  /** Updates a guest management host group's meta information like name and description */
  updateGuestManagementHostGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Group_UpdateOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_UpdateOrgGroupWSRequest"];
      };
    };
  };
  /** Update guest management settings */
  updateGuestManagementSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_UpdateGuestManagementSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_UpdateGuestManagementSettingsWSRequest"];
      };
    };
  };
  /** Leave feedback of our system */
  sendFeedback: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Help_SendFeedbackWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_SendFeedbackWSRequest"];
      };
    };
  };
  /**
   * Get Open Support Tickets For A Client Organization. Tickets are associated to an organziation based on the requester's organization association.
   * This endpoint returns a paginated response sorted by the request date. The first page is indexed at 1 and each page has up to 100 ticket entries.
   */
  getOpenTickets: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Help_GetOpenTicketsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_GetOpenTicketsWSRequest"];
      };
    };
  };
  /** Get Open Support Tickets For A Client Organization. Tickets are associated to an organziation based on the requester's organization association. */
  getOpenTicketsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Help_GetOpenTicketsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_GetOpenTicketsV2WSRequest"];
      };
    };
  };
  /** Open an RMA for a camera */
  processRMA: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Help_ProcessRMAWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_ProcessRMAWSRequest"];
      };
    };
  };
  /** Open a support ticket */
  createTicket: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Help_CreateTicketWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_CreateTicketWSRequest"];
      };
    };
  };
  /** Open a support ticket and optionally include a file upload. Uploading multiple Files are not supported throught this call. */
  createTicketWithFile: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Help_CreateTicketWSResponse"];
        };
      };
    };
    /** multipart/form-data with field 'file' for the file and 'request' for the CreateTicketWSRequest(see '/ticket' for details on CreateTicketWSRequest) */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Triage a device connection/recording issue */
  triageDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Help_TriageDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_TriageDeviceWSRequest"];
      };
    };
  };
  /** Delete Device integration */
  deleteDeviceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Flic Integration */
  deleteFlicIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Halo Smart Sensor integration */
  deleteHaloIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Intuiface integration */
  deleteIntuifaceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete 911Cellular Integration */
  deleteNineOneOneCellularIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Omnialert integration */
  deleteOmnialertIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Shelly integration */
  deleteShellyIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Generate Rhombus Token for use */
  generateFlicToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Generate Rhombus Token for use */
  generateNineOneOneCellularToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Device integration */
  getDeviceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Grabs all Flic Devices */
  getFlicDevices: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetFlicDevicesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetFlicDevicesWSRequest"];
      };
    };
  };
  /** Get Flic Integration */
  getFlicIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Uploaded Module UUID */
  getFlicModule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetFlicDevicesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetFlicDevicesWSRequest"];
      };
    };
  };
  /** Get 911Cellular Integration */
  getNineOneOneCellularIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get 911Cellular Security Zones */
  getNineOneOneCellularSecurityZones: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetNineOneOneCSZonesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetNineOneOneCSZonesWSRequest"];
      };
    };
  };
  /** Get Omnialert integration */
  getOmnialertIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Shelly integration */
  getShellyIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Initiate the Shelly Auth Process */
  initiateShellyAuth: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateCallbackAuthResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateCallbackAuthRequest"];
      };
    };
  };
  /** Toggle power for a managed power switch */
  togglePower: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_TogglePowerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_TogglePowerWSRequest"];
      };
    };
  };
  /** Update Device integration */
  updateDeviceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateDeviceIntegrationWSRequest"];
      };
    };
  };
  /** Update Flic Integration */
  updateFlicIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateFlicIntegrationWSRequest"];
      };
    };
  };
  /** Update Halo Smart Sensor integration */
  updateHaloIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateHaloIntegrationWSRequest"];
      };
    };
  };
  /** Update Intuiface integration */
  updateIntuifaceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateIntuifaceIntegrationWSRequest"];
      };
    };
  };
  /** Update 911Cellular Integration */
  updateNineOneOneCellularIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateNineOneOneCellularIntegrationWSRequest"];
      };
    };
  };
  /** Update Omnialert integration */
  updateOmnialertIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOmnialertIntegrationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOmnialertIntegrationWSRequest"];
      };
    };
  };
  /** Update Shelly rules engine integration */
  updateShellyIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateShellyIntegrationWSRequest"];
      };
    };
  };
  /** Issues a command to clear the device's DTC */
  clearDtc: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_aperio_ClearAperioDtcWSResponse"];
          "application/octet-stream": components["schemas"]["Integration_aperio_ClearAperioDtcWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_aperio_ClearAperioDtcWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_aperio_ClearAperioDtcWSRequest"];
      };
    };
  };
  /** Create one or more Aperio Door component(s). */
  createAperioAccessControlledDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateAperioDoorsWSResponse"];
          "application/octet-stream": components["schemas"]["Component_CreateAperioDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateAperioDoorsWSRequest"];
        "multipart/form-data": components["schemas"]["Component_CreateAperioDoorsWSRequest"];
      };
    };
  };
  /** Create an Aperio Gateway component. */
  createAperioGateway: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Component_CreateAperioGatewayWSResponse"];
          "application/octet-stream": components["schemas"]["Component_CreateAperioGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateAperioGatewayWSRequest"];
        "multipart/form-data": components["schemas"]["Component_CreateAperioGatewayWSRequest"];
      };
    };
  };
  /** Download a certificate to use with Aperio's devices. */
  downloadCertificate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": string;
          "application/octet-stream": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_aperio_DownloadCertificateWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_aperio_DownloadCertificateWSRequest"];
      };
    };
  };
  /** Retrieve the Aperio integration configuration. */
  getAperioIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetAperioIntegrationWSResponse"];
          "application/octet-stream": components["schemas"]["Integration_GetAperioIntegrationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetAperioIntegrationWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_GetAperioIntegrationWSRequest"];
      };
    };
  };
  /** Reboot an Aperio gateway that is connected to a Door Controller. */
  rebootAperioGateway: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_aperio_RebootAperioGatewayWSResponse"];
          "application/octet-stream": components["schemas"]["Integration_aperio_RebootAperioGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_aperio_RebootAperioGatewayWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_aperio_RebootAperioGatewayWSRequest"];
      };
    };
  };
  /** Update the Aperio integration configuration. */
  updateAperioIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
          "application/octet-stream": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAperioIntegrationWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_UpdateAperioIntegrationWSRequest"];
      };
    };
  };
  /** Upload a firmware file which will be deployed to Aperio's communication hubs. */
  uploadFirmwareFile: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
          "application/octet-stream": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          file?: components["schemas"]["FormDataContentDisposition"];
        };
        "multipart/form-data": {
          file?: components["schemas"]["FormDataContentDisposition"];
        };
      };
    };
  };
  /** Delete Amt badge integration */
  deleteAmtIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Avigilon Alta badge integration V2 */
  deleteAvigilonAltaIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Brivo badge integration */
  deleteBrivoIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Brivo badge integration V2 */
  deleteBrivoIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Brivo badge integration V3 */
  deleteBrivoIntegrationV3: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ButterflyMX badge integration */
  deleteButterflymxIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ButterflyMX badge integration V2 */
  deleteButterflymxIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Genea badge integration */
  deleteGeneaIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Genea badge integration V2 */
  deleteGeneaIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Inner Range integration */
  deleteInnerRangeIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Kisi badge integration */
  deleteKisiIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Kisi badge integration V2 */
  deleteKisiIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Openpath badge integration */
  deleteOpenpathIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Opentech Alliance integration */
  deleteOpentechAllianceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Opentech Alliance integration */
  deleteOpentechAllianceIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ProDataKey badge integration */
  deletePdkIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ProDataKey badge integration */
  deletePdkIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete PlaceOs badge integration */
  deletePlaceOsIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete PlaceOs badge integration */
  deletePlaceOsIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Enabled and Redirect to ProDataKey */
  enablePdkIntegration: {
    parameters: {
      query: {
        systemId?: string | null;
        clientOrgUuid?: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  /** Get list of v2 Access Control integrations for org that can be used for Rhombus Alarm Monitoring */
  getAccessControlIntegrationsForAlm: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetAccessControlIntegrationsForAlmWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of AMT readers to assign cameras */
  getAmtReaders: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetAmtReadersWSRequest"];
      };
    };
  };
  /** Get Avigilon Alta integration */
  getAvigilonAltaIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of available Brivo doors to assign cameras */
  getBrivoDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetBrivoDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetBrivoDoorsWSRequest"];
      };
    };
  };
  /** Get list of available Brivo doors to assign cameras */
  getBrivoDoorsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetBrivoDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetBrivoDoorsWSRequest"];
      };
    };
  };
  /** Get list of available Brivo doors to assign cameras */
  getBrivoDoorsV3: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetBrivoDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetBrivoDoorsWSRequest"];
      };
    };
  };
  /** Get Brivo badge integration */
  getBrivoIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get ButterflyMX badge integration */
  getButterflymxIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of available ButterflyMX panels to assign cameras */
  getButterflymxPanels: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetButterflymxPanelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetButterflymxPanelsWSRequest"];
      };
    };
  };
  /** Get list of available ButterflyMX panels to assign cameras */
  getButterflymxPanelsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetButterflymxPanelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetButterflymxPanelsWSRequest"];
      };
    };
  };
  /** Get list of Genea doors to assign cameras */
  getGeneaDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetGeneaDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetGeneaDoorsWSRequest"];
      };
    };
  };
  /** Get Genea integration */
  getGeneaIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Inner Range console settings */
  getInnerRangeConsoles: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetInnerRangeConsolesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetInnerRangeConsolesWSRequest"];
      };
    };
  };
  /** Get list of Inner Range doors */
  getInnerRangeDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetInnerRangeDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetInnerRangeDoorsWSRequest"];
      };
    };
  };
  /** Get Inner Range integration */
  getInnerRangeIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of Kisi doors to assign cameras */
  getKisiDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetKisiDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetKisiDoorsWSRequest"];
      };
    };
  };
  /** Get Kisi badge integration */
  getKisiIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetKisiIntegrationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Get Kisi badge integration V2 */
  getKisiIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of Kisi places to assign cameras */
  getKisiPlaces: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationPlacesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetKisiPlacesWSRequest"];
      };
    };
  };
  /** Get list of Openpath doors to assign cameras */
  getOpenpathDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpenpathDoorsWSRequest"];
      };
    };
  };
  /** Get list of Openpath lockdown plans to trigger */
  getOpenpathLockdownPlans: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpenpathLockdownsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpenpathDoorsWSRequest"];
      };
    };
  };
  /** Get list of Opentech Alliance facilities */
  getOpentechAllianceFacilities: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpentechAllianceFacilitiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpentechAllianceFacilitiesWSRequest"];
      };
    };
  };
  /** Get list of Opentech Alliance facilities */
  getOpentechAllianceFacilitiesV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpentechAllianceFacilitiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpentechAllianceFacilitiesWSRequest"];
      };
    };
  };
  /** Get Opentech Alliance integration */
  getOpentechAllianceIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of ProDataKey doors to assign cameras */
  getPdkDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetPdkDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetPdkDoorsWSRequest"];
      };
    };
  };
  /** Get ProDataKey badge integration */
  getPdkIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get SystemID for ProDataKey badge integration */
  getPdkSystemId: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetPdkSystemIdWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetPdkSystemIdWSRequest"];
      };
    };
  };
  /** Get list of PlaceOs doors to assign cameras */
  getPlaceOsDoors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationGenericDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetPlaceOsDoorsWSRequest"];
      };
    };
  };
  /** Get PlaceOs integration */
  getPlaceOsIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Initiate Brivo Oauth 2.0 process */
  initiateBrivoOauth: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateBrivoOAuthWSRequest"];
      };
    };
  };
  /** Initiate Butterflymx Oauth */
  initiateButterflymxOauth: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Revert Openpath lockdown plan */
  revertOpenpathLockdown: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockOpenpathDoorWSRequest"];
      };
    };
  };
  /** Trigger Openpath lockdown plan */
  triggerOpenpathLockdown: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockOpenpathDoorWSRequest"];
      };
    };
  };
  /** Unlock Brivo door */
  unlockBrivoDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Brivo door */
  unlockBrivoDoorV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Brivo door V3 */
  unlockBrivoDoorV3: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Genea door */
  unlockGeneaDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockGeneaDoorWSRequest"];
      };
    };
  };
  /** Unlock Inner Range door */
  unlockInnerRangeDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Kisi door */
  unlockKisiDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockKisiDoorWSRequest"];
      };
    };
  };
  /** Unlock Openpath door */
  unlockOpenpathDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockOpenpathDoorWSRequest"];
      };
    };
  };
  /** Unlock Opentech Alliance door */
  unlockOpentechAllianceDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Opentech Alliance door */
  unlockOpentechAllianceDoorV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock ProDataKey door */
  unlockPdkDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock PlaceOs door */
  unlockPlaceOsDoor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Update Amt badge integration */
  updateAmtIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAmtIntegrationWSRequest"];
      };
    };
  };
  /** Update Avigilon Alta badge integration V2 */
  updateAvigilonAltaIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAvigilonAltaV2WSRequest"];
      };
    };
  };
  /** Update Brivo badge integration */
  updateBrivoIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateBrivoIntegrationWSRequest"];
      };
    };
  };
  /** Update Brivo badge integration */
  updateBrivoIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateBrivoIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Brivo badge integration V3 */
  updateBrivoIntegrationV3: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateBrivoIntegrationV2WSRequest"];
      };
    };
  };
  /** Update ButterflyMX badge integration */
  updateButterflymxIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateButterflymxIntegrationWSRequest"];
      };
    };
  };
  /** Update ButterflyMX badge integration V2 */
  updateButterflymxIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateButterflymxIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Genea badge integration */
  updateGeneaIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGeneaIntegrationWSRequest"];
      };
    };
  };
  /** Update Genea badge integration V2 */
  updateGeneaIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGeneaIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Inner Range integration */
  updateInnerRangeIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateInnerRangeIntegrationWSRequest"];
      };
    };
  };
  /** Update Kisi badge integration */
  updateKisiIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateKisiIntegrationWSRequest"];
      };
    };
  };
  /** Update Kisi badge integration V2 */
  updateKisiIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateKisiIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Openpath badge integration */
  updateOpenpathIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpenpathIntegrationWSRequest"];
      };
    };
  };
  /** Update Opentech Alliance integration */
  updateOpentechAllianceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpentechAllianceIntegrationWSRequest"];
      };
    };
  };
  /** Update Opentech Alliance integration */
  updateOpentechAllianceIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpentechAllianceIntegrationV2WSRequest"];
      };
    };
  };
  /** Update ProDataKey badge integration */
  updatePdkIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePdkIntegrationWSRequest"];
      };
    };
  };
  /** Update ProDataKey badge integration */
  updatePdkIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePdkIntegrationV2WSRequest"];
      };
    };
  };
  /** Update PlaceOs badge integration */
  updatePlaceOsSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePlaceOsSettingsWSRequest"];
      };
    };
  };
  /** Update PlaceOs badge integration */
  updatePlaceOsSettingsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePlaceOsSettingsV2WSRequest"];
      };
    };
  };
  /** Validate Kisi api key */
  validateKisiApiKey: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_ValidateKisiApiKeyWSRequest"];
      };
    };
  };
  /** Validate Kisi api key V2 */
  validateKisiApiKeyV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_ValidateKisiApiKeyWSRequest"];
      };
    };
  };
  /** Delete Amt badge integration */
  deleteAmtIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Device integration */
  deleteDeviceIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Mattermost alert integration */
  deleteMattermostIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete OpenAI integration */
  deleteOpenAIIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete outbound webhook alert integration */
  deleteWebhookIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete entire webhook integration */
  deleteWebhookIntegrationV2Dep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of AMT readers to assign cameras */
  getAmtReadersDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetAmtReadersWSRequest"];
      };
    };
  };
  /** Get details of all open api token requests for organization */
  getApiTokenApplicationsDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSRequest"];
      };
    };
  };
  /** Get list of all api tokens for organization */
  getApiTokensDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokensWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokensWSRequest"];
      };
    };
  };
  /** Get Calendly event details */
  getCalendlyEventDetailsDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetCalendlyEventDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetCalendlyEventDetailsWSRequest"];
      };
    };
  };
  /** Get Device integration */
  getDeviceIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get OpenAI integration */
  getOpenAIIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of OpenAI models */
  getOpenAIModelsDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpenAIModelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpenAIModelsWSRequest"];
      };
    };
  };
  /** Get details of all third-party integrations for organization */
  getOrgIntegrationsDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Get details of all V2 third-party integrations for an organization */
  getOrgIntegrationsV2Dep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetAllOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Get webhook integration */
  getWebhookIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Dice integration */
  deleteDiceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete email alert integration */
  deleteEmailIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Informacast integration */
  deleteInformacastIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Lumeo integration */
  deleteLumeoIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Mattermost alert integration */
  deleteMattermostIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Microsoft Teams alert integration */
  deleteMicrosoftTeamsIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Microsoft Teams alert integration */
  deleteMicrosoftTeamsIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Remove configurations for Microsoft Teams user */
  deleteMicrosoftTeamsUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete OpenAI integration */
  deleteOpenAIIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete PagerDuty alert integration */
  deletePagerDutyIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Pimloc integration */
  deletePimlocIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Raptor Integration */
  deleteRaptorIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ServiceNow alert integration */
  deleteServiceNowIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Slack alert integration v2 */
  deleteSlackIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Dice integration */
  getDiceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Informacast integration */
  getInformacastIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Informacast scenarios */
  getInformacastScenarios: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetInformacastScenariosWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Lumeo integration */
  getLumeoIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Microsoft Teams alert integration */
  getMicrosoftTeamsIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get a list of teams a Microsoft Teams user joined */
  getMicrosoftUsersJoinedTeams: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetMicrosoftUsersJoinedTeamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get OpenAI integration */
  getOpenAIIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of OpenAI models */
  getOpenAIModels: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpenAIModelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpenAIModelsWSRequest"];
      };
    };
  };
  /** Get Pimloc integration */
  getPimlocIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Raptor Buildings */
  getRaptorBuildings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetRaptorBuildingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Raptor Integration */
  getRaptorIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Raptor Templates */
  getRaptorTemplates: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetRaptorTemplatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Initiate the Microsoft Teams OAuth Process */
  initiateMicrosoftTeamsOAuth: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Initiate the Slack OAuth Process */
  initiateSlackOAuth: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Install notification bot for Microsoft Teams team */
  installMicrosoftTeamsBotForTeam: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMicrosoftTeamsBotForTeamWSRequest"];
      };
    };
  };
  /** Install notification bot for Microsoft Teams user */
  installMicrosoftTeamsBotForUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Uninstall notification bot for Microsoft Teams team */
  uninstallMicrosoftTeamsBotForTeam: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMicrosoftTeamsBotForTeamWSRequest"];
      };
    };
  };
  /** Uninstall notification bot for Microsoft Teams user */
  uninstallMicrosoftTeamsBotForUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Update Dice integration */
  updateDiceIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateDiceIntegrationWSRequest"];
      };
    };
  };
  /** Update email alert integration */
  updateEmailIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateEmailIntegrationWSRequest"];
      };
    };
  };
  /** Update Informacast rules engine integration */
  updateInformacastIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateInformacastIntegrationRequest"];
      };
    };
  };
  /** Update Lumeo integration */
  updateLumeoIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateLumeoIntegrationWSRequest"];
      };
    };
  };
  /** Update Mattermost alert integration */
  updateMattermostIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMattermostIntegrationWSRequest"];
      };
    };
  };
  /** Update Microsoft Teams alert integration */
  updateMicrosoftTeamsIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMicrosoftTeamsIntegrationWSRequest"];
      };
    };
  };
  /** Update Microsoft Teams alert integration */
  updateMicrosoftTeamsIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMicrosoftTeamsIntegrationV2WSRequest"];
      };
    };
  };
  /** Update OpenAI integration */
  updateOpenAIIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpenAIIntegrationRequest"];
      };
    };
  };
  /** Update PagerDuty alert integration */
  updatePagerDutyIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePagerDutyIntegrationWSRequest"];
      };
    };
  };
  /** Update Pimloc integration */
  updatePimlocIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePimlocIntegrationRequest"];
      };
    };
  };
  /** Update Raptor Integration */
  updateRaptorIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateRaptorIntegrationRequest"];
      };
    };
  };
  /** Update ServiceNow alert integration */
  updateServiceNowIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateServiceNowIntegrationWSRequest"];
      };
    };
  };
  /** Update Slack alert integration */
  updateSlackIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateSlackIntegrationWSRequest"];
      };
    };
  };
  /** Update Slack alert integration v2 */
  updateSlackIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateSlackIntegrationV2WSRequest"];
      };
    };
  };
  /** Get details of all open api token requests for organization */
  getApiTokenApplications: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSRequest"];
      };
    };
  };
  /** Get list of all api tokens for organization */
  getApiTokens: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokensWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokensWSRequest"];
      };
    };
  };
  /** Get details of all third-party integrations for organization */
  getOrgIntegrations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Get details of all V2 third-party integrations for an organization */
  getOrgIntegrationsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetAllOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Remove an api token from organization. Note: this is irreversible */
  revokeApiToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_RevokeApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RevokeApiTokenWSRequest"];
      };
    };
  };
  /** Request an api token for organization */
  submitApiTokenApplication: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSRequest"];
      };
    };
  };
  /** Update display name and permissions of an api token */
  updateApiToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateApiTokenWSRequest"];
      };
    };
  };
  /** Remove an api token from organization. Note: this is irreversible */
  revokeApiTokenDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_RevokeApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RevokeApiTokenWSRequest"];
      };
    };
  };
  /** Create an invite with Envoy */
  createEnvoyInvite: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_CreateEnvoyInviteWSRequest"];
      };
    };
  };
  /** Delete Envoy badge integration */
  deleteEnvoyIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Envoy integration */
  deleteEnvoyIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Guest */
  deleteGuestI: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GuestWSRequest"];
      };
    };
  };
  /** Delete guest management integration */
  deleteGuestManagementIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Toast integration */
  deleteToastIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Toast integration */
  deleteToastIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get All Guests by Org */
  getAllGuestsByOrgI: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetAllGuestsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Calendly event details */
  getCalendlyEventDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetCalendlyEventDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetCalendlyEventDetailsWSRequest"];
      };
    };
  };
  /** Get Envoy integration */
  getEnvoyIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Guest */
  getGuestI: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetGuestWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GuestWSRequest"];
      };
    };
  };
  /** Get guest management integration details */
  getGuestManagementIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Toast integration */
  getToastIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of Toast service areas to assign cameras */
  getToastServiceAreas: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetToastServiceAreasWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetToastServiceAreasWSRequest"];
      };
    };
  };
  /** Initiate the Envoy OAuth Process */
  initiateEnvoyOAuth: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Update Envoy badge integration */
  updateEnvoyIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateEnvoyIntegrationWSRequest"];
      };
    };
  };
  /** Update Envoy integration */
  updateEnvoyIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateEnvoyIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Guest */
  updateGuestI: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGuestWSRequest"];
      };
    };
  };
  /** Update guest management integration configuration */
  updateGuestManagementIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGuestManagementIntegrationWSRequest"];
      };
    };
  };
  /** Update Toast integration */
  updateToastIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateToastIntegrationWSRequest"];
      };
    };
  };
  /** Update Toast integration */
  updateToastIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateToastIntegrationV2WSRequest"];
      };
    };
  };
  /** Delete AWS S3 clip storage integration */
  deleteAwsIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Box clip storage integration */
  deleteBoxIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Dropbox clip storage integration */
  deleteDropboxIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Google Drive clip storage integration */
  deleteGoogleIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Google Drive clip storage integration */
  deleteGoogleIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Office365 Sharepoint clip storage integration */
  deleteOffice365Integration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Google Drive clip storage integration */
  getGoogleIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Initiate the Dropbox OAuth Process */
  initiateDropboxOAuth: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Initiate the Google OAuth Process */
  initiateGoogleOAuth: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Initiate the Office365 OAuth Process */
  initiateOffice365OAuth: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Migrate Google Drive settings from the V1 table to the V2 table */
  migrateGoogleIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Refresh Google access token */
  refreshGoogleAccessToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_RefreshGoogleAccessTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RefreshGoogleAccessTokenWSRequest"];
      };
    };
  };
  /** Revokes access to a Google Drive account */
  revokeGoogleDriveAccess: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RevokeGoogleDriveAccessWSRequest"];
      };
    };
  };
  /** Update AWS S3 clip storage integration */
  updateAwsIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAwsIntegrationWSRequest"];
      };
    };
  };
  /** Update Box clip storage integration */
  updateBoxIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateBoxIntegrationWSRequest"];
      };
    };
  };
  /** Update Dropbox clip storage integration */
  updateDropboxIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateDropboxIntegrationWSRequest"];
      };
    };
  };
  /** Update Google Drive clip storage integration */
  updateGoogleIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGoogleIntegrationWSRequest"];
      };
    };
  };
  /** Update Google Drive clip storage integration */
  updateGoogleIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGoogleIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Office365 Sharepoint clip storage integration */
  updateOffice365Integration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOffice365IntegrationWSRequest"];
      };
    };
  };
  /** Request an api token for organization */
  submitApiTokenApplicationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSRequest"];
      };
    };
  };
  /** Setup a Zapier webhook */
  subscribeZapierWebhookDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_SubscribeZapierWebhookWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubscribeZapierWebhookWSRequest"];
      };
    };
  };
  /** Delete a Zapier webhook */
  unsubscribeZapierWebhookDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnsubscribeZapierWebhookWSRequest"];
      };
    };
  };
  /** Update Amt badge integration */
  updateAmtIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAmtIntegrationWSRequest"];
      };
    };
  };
  /** Update display name and permissions of an api token */
  updateApiTokenDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateApiTokenWSRequest"];
      };
    };
  };
  /** Update Device integration */
  updateDeviceIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateDeviceIntegrationWSRequest"];
      };
    };
  };
  /** Update Mattermost alert integration */
  updateMattermostIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMattermostIntegrationWSRequest"];
      };
    };
  };
  /** Update Noonlight integration */
  updateNoonlightSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateNoonlightSettingsWSRequest"];
      };
    };
  };
  /** Update OpenAI integration */
  updateOpenAIIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpenAIIntegrationRequest"];
      };
    };
  };
  /** Update outbound webhook alert integration */
  updateWebhookIntegrationDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationWSRequest"];
      };
    };
  };
  /** Update preexisting webhooks */
  updateWebhookIntegrationV2Dep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationV2WSRequest"];
      };
    };
  };
  /** Verifies an API token is still active */
  validateTokenDep: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
  };
  /** Delete outbound webhook alert integration */
  deleteWebhookIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete entire webhook integration */
  deleteWebhookIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get webhook integration */
  getWebhookIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Setup a Zapier webhook */
  subscribeZapierWebhook: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_SubscribeZapierWebhookWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubscribeZapierWebhookWSRequest"];
      };
    };
  };
  /** Delete a Zapier webhook */
  unsubscribeZapierWebhook: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnsubscribeZapierWebhookWSRequest"];
      };
    };
  };
  /** Update outbound webhook alert integration */
  updateWebhookIntegration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationWSRequest"];
      };
    };
  };
  /** Update preexisting webhooks */
  updateWebhookIntegrationV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationV2WSRequest"];
      };
    };
  };
  /** Migrate access control door only from sf opp */
  accessControlDoorOnly: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_AccessControlDoorOnlyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_AccessControlDoorOnlyWSRequest"];
      };
    };
  };
  /** Add partner as super admin */
  addPartnerAsSuperAdmin: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_AddPartnerAsSuperAdminWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_AddPartnerAsSuperAdminWSRequest"];
      };
    };
  };
  /** Migrate alarm monitoring only from sf opp */
  alarmMonitoringOnly: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_AlarmMonitoringOnlyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_AlarmMonitoringOnlyWSRequest"];
      };
    };
  };
  /** Migrate pro and ent devices, cloud archiving, alm and acd from sf opp */
  createCombinedLicensesFromV1: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_CreateCombinedLicensesFromV1WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_CreateCombinedLicensesFromV1WSRequest"];
      };
    };
  };
  /** Create a new organization */
  createOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_CreateOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_CreateOrgWSRequest"];
      };
    };
  };
  /** Create a new partner organization */
  createPartnerOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_CreatePartnerOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_CreatePartnerOrgWSRequest"];
      };
    };
  };
  /** Create return inventory audit reservation */
  createReturnInventoryAuditReservation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_CreateReturnedInventoryAuditReservationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_CreateReturnedInventoryAuditReservationWSRequest"];
      };
    };
  };
  /** Add a support authority to organization */
  createInternalSalesforceSupportAuthority: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_CreateSupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_CreateSupportAuthorityWSRequest"];
      };
    };
  };
  /** Enroll in developer newsletter */
  developerNewsletterEnroll: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_DeveloperNewsletterEnrollWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_DeveloperNewsletterEnrollWSRequest"];
      };
    };
  };
  /** Migrate ent devices only from sf opp */
  entDevicesOnly: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_EntDevicesOnlyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_EntDevicesOnlyWSRequest"];
      };
    };
  };
  /** Get super admin group UUID */
  getSuperAdminGroupUUID: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_GetSuperAdminGroupUUIDWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_GetSuperAdminGroupUUIDWSRequest"];
      };
    };
  };
  /** Initiate shipment process */
  initiateShipment: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_ShipmentEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_InitiateShipmentWSRequest"];
      };
    };
  };
  /** List organizations */
  listOrgs: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_ListOrgsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_ListOrgsWSRequest"];
      };
    };
  };
  /** Get parent lifetime spend information */
  parentLifetimeSpend: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_ParentLifetimeSpendWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_ParentLifetimeSpendWSRequest"];
      };
    };
  };
  /** Migrate pro devices only from sf opp */
  proDevicesOnly: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_ProDevicesOnlyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_ProDevicesOnlyWSRequest"];
      };
    };
  };
  /** Request hardware for development purposes */
  requestHardwareForDevelopment: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_RequestHardwareForDevelopmentWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_RequestHardwareForDevelopmentWSRequest"];
      };
    };
  };
  /** Send shipment shipped email notification */
  sendShipmentShippedEmail: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_ShipmentEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_SendShipmentShippedEmailWSRequest"];
      };
    };
  };
  /** Set opportunity for purchase order */
  setOpportunityForPurchaseOrder: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_SetOpportunityForPurchaseOrderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_SetOpportunityForPurchaseOrderWSRequest"];
      };
    };
  };
  /** Verify org can migrate from v1, takes in custom CSV generated from Salesforce script */
  verifyCanMigrateOrgFromV1: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_CreateCombinedLicensesFromV1WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          file?: { [key: string]: unknown } | null;
        };
      };
    };
  };
  /** Charge an invoice, version 0 (original) */
  invoiceCharge: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceChargeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceChargeWSRequest"];
      };
    };
  };
  /** Charge an invoice, version 1 */
  invoiceChargeV1: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceChargeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceChargeWSRequest"];
      };
    };
  };
  /** Charge an invoice, version 2 */
  invoiceChargeV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceChargeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceChargeWSRequest"];
      };
    };
  };
  /** Get details of an invoice, version 0 (original) */
  invoiceDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceDetailsWSRequest"];
      };
    };
  };
  /** Get details of an invoice, version 1 */
  invoiceDetailsV1: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceDetailsV1WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceDetailsWSRequest"];
      };
    };
  };
  /** Get details of an invoice, version 2 */
  invoiceDetailsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceDetailsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceDetailsV2WSRequest"];
      };
    };
  };
  /** Authenticate a keypad PIN */
  authenticatePin: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Keypad_AuthenticatePinResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_AuthenticatePinRequest"];
      };
    };
  };
  /** Method for keypad online/offline processing */
  keypadCheckin: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Keypad_KeypadCheckinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_KeypadCheckinWSRequest"];
      };
    };
  };
  /** Connects a keypad to Rhombus services */
  claimKeypadActivationToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Keypad_ClaimKeypadActivationTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_ClaimKeypadActivationTokenRequest"];
      };
    };
  };
  /** Get the current keypad */
  getCurrentKeypad: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Keypad_GetCurrentKeypadWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_GetCurrentKeypadWSRequest"];
      };
    };
  };
  /** Get a list of all registered keypads for a location */
  getKeypadsForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Keypad_GetKeypadsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_GetKeypadsForLocationWSRequest"];
      };
    };
  };
  /** Get a list of all registered keypads for an org */
  getKeypadsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Keypad_GetKeypadsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_GetKeypadsForOrgWSRequest"];
      };
    };
  };
  /** Publishes a STOMP containing a keypad command which is broadcasted to a location */
  publishKeypadCommand: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_PublishKeypadCommandWSRequest"];
      };
    };
  };
  /** Unregister a keypad */
  unregisterKeypad: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Keypad_UnregisterKeypadResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_UnregisterKeypadRequest"];
      };
    };
  };
  /** Update keypad settings */
  updateKeypad: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Keypad_UpdateKeypadResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_UpdateKeypadRequest"];
      };
    };
  };
  /** Update kiosk settings */
  claimKioskActivationToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Kiosk_ClaimKioskActivationTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_ClaimKioskActivationTokenRequest"];
      };
    };
  };
  /** Deleted a kiosk */
  deleteKiosk: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Kiosk_DeleteKioskWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_DeleteKioskWSRequest"];
      };
    };
  };
  /** Get the current kiosk */
  getCurrentKiosk: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Kiosk_GetCurrentKioskWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_GetCurrentKioskWSRequest"];
      };
    };
  };
  /** Get a list of all registered kiosks for a location */
  getKiosksForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Kiosk_GetKiosksForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_GetKiosksForLocationWSRequest"];
      };
    };
  };
  /** Get a list of all registered kiosks for an org */
  getKiosksForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Kiosk_GetKiosksForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_GetKiosksForOrgWSRequest"];
      };
    };
  };
  /** Method for kiosk online/offline processing */
  kioskCheckin: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Kiosk_KioskCheckinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_KioskCheckinWSRequest"];
      };
    };
  };
  /** Unregister a kiosk */
  unregisterKiosk: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Kiosk_UnregisterKioskResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_UnregisterKioskRequest"];
      };
    };
  };
  /** Update kiosk settings */
  updateKiosk: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Kiosk_UpdateKioskResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_UpdateKioskSelectiveRequest"];
      };
    };
  };
  /** Assign ACU door license */
  assignACUDoorLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_AssignACUDoorLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_AssignACUDoorLicenseWSRequest"];
      };
    };
  };
  /** Assign alert monitoring license */
  assignAlertMonitoringLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_AssignAlertMonitoringLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_AssignAlertMonitoringLicenseWSRequest"];
      };
    };
  };
  /** Assign or unassign a device license. */
  assignDeviceLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_AssignDeviceLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_AssignDeviceLicenseWSRequest"];
      };
    };
  };
  /** Assign an add-on license to a device */
  assignLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_AssignLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_AssignLicenseWSRequest"];
      };
    };
  };
  /** Calculate license statistics for client organization */
  calculateLicenseStatsForClientOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_CalculateLicensesStatsForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CalculateLicensesStatsForClientOrgWSRequest"];
      };
    };
  };
  /** Calculate license statistics for organization */
  calculateLicenseStatsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_CalculateLicensesStatsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CalculateLicensesStatsForOrgWSRequest"];
      };
    };
  };
  /** Find catalog items */
  findCatalogItems: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_catalog_FindCatalogItemsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_catalog_FindCatalogItemsWSRequest"];
      };
    };
  };
  /** Get catalog item by product code */
  getCatalogItemByProductCode: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_catalog_GetCatalogItemByProductCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_catalog_GetCatalogItemByProductCodeWSRequest"];
      };
    };
  };
  /** Start claiming licenses represented by claim key with the specified code. This operation is asynchronous. */
  claimLicenses: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_claimkey_ClaimLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_ClaimLicensesWSRequest"];
      };
    };
  };
  /** Claim licenses for client organization */
  claimLicensesForClientOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_claimkey_ClaimLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_ClaimLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Create claim key */
  createClaimKey: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_claimkey_CreateClaimKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_CreateClaimKeyWSRequest"];
      };
    };
  };
  /** Create renewal claim key */
  createRenewalClaimKey: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_claimkey_CreateRenewalClaimKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_CreateRenewalClaimKeyWSRequest"];
      };
    };
  };
  /** Find claim keys by org */
  findClaimKeysByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_claimkey_FindClaimKeysByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_FindClaimKeysByOrgWSRequest"];
      };
    };
  };
  /** Get claim key with the specified uuid */
  getClaimKey: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_claimkey_GetClaimKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_GetClaimKeyWSRequest"];
      };
    };
  };
  /** Get claim key with the specified code */
  getClaimKeyByCode: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_claimkey_GetClaimKeyByCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_GetClaimKeyByCodeWSRequest"];
      };
    };
  };
  /** Get claim key with the specified code for a client organization. */
  getClaimKeyByCodeForClientOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_claimkey_GetClaimKeyByCodeForClientWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_GetClaimKeyByCodeForClientOrgWSRequest"];
      };
    };
  };
  /** Return claim key product quantities */
  returnClaimKeyProductQuantities: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_claimkey_ReturnClaimKeyProductQuantitiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_ReturnClaimKeyProductQuantitiesWSRequest"];
      };
    };
  };
  /** Create ACU door license */
  createACUDoorLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_CreateACUDoorLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CreateACUDoorLicenseWSRequest"];
      };
    };
  };
  /** Create alert monitoring license */
  createAlertMonitoringLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_CreateAlertMonitoringLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CreateAlertMonitoringLicenseWSRequest"];
      };
    };
  };
  /** Create a device license for an organization */
  createDeviceLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_CreateDeviceLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CreateDeviceLicenseWSRequest"];
      };
    };
  };
  /** Create an add-on license for an organization */
  createLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_CreateLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CreateLicenseWSRequest"];
      };
    };
  };
  /** Delete alert monitoring license */
  deleteAlertMonitoringLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_DeleteAlertMonitoringLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_DeleteAlertMonitoringLicenseWSRequest"];
      };
    };
  };
  /** Delete an unassigned device license from an organization */
  deleteDeviceLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_DeleteDeviceLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_DeleteDeviceLicenseWSRequest"];
      };
    };
  };
  /** Delete an unassigned add-on license from an organization */
  deleteLicense: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_DeleteLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_DeleteLicenseWSRequest"];
      };
    };
  };
  /** Find licenses by claim key */
  findLicensesByClaimKey: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_FindLicensesByClaimKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_FindLicensesByClaimKeyWSRequest"];
      };
    };
  };
  /** Get list of access controlled door licenses licenses available in organization */
  getACUDoorLicenses: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetACUDoorLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetACUDoorLicensesWSRequest"];
      };
    };
  };
  /** Get list of access controlled door licenses licenses available for a client organization */
  getACUDoorLicensesForClientOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetACUDoorLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetACUDoorLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Get list of alert monitoring licenses available in organization */
  getAlertMonitoringLicenses: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetAlertMonitoringLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetAlertMonitoringLicensesWSRequest"];
      };
    };
  };
  /** Get list of alert monitoring licenses available for a client organization */
  getAlertMonitoringLicensesForClientOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetAlertMonitoringLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetAlertMonitoringLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Get list of device licenses available in organization */
  getDeviceLicenses: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetDeviceLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetDeviceLicensesWSRequest"];
      };
    };
  };
  /** Get list of device licenses available for a client organization */
  getDeviceLicensesForClientOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetDeviceLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetDeviceLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Get list of add-on licenses available in organization */
  getLicenses: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetLicensesWSRequest"];
      };
    };
  };
  /** Get a list of licenses available for a client organization */
  getLicensesForClientOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Add a label to a location */
  addLocationLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_AddLocationLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_AddLocationLabelWSRequest"];
      };
    };
  };
  /** Create a location */
  createlocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_CreateLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_CreateLocationWSRequest"];
      };
    };
  };
  /** Remove a location */
  deleteLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_DeleteLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_DeleteLocationWSRequest"];
      };
    };
  };
  /** Get the latitude and longitude of an address */
  geoCode: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_GeoCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GeoCodeWSRequest"];
      };
    };
  };
  /** Get location by id */
  getLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationWSRequest"];
      };
    };
  };
  /** Get all location labels for an organization */
  getLocationLabelsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationLabelsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationLabelsForOrgWSRequest"];
      };
    };
  };
  /** Get list of locations in organization */
  getLocations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationsWSRequest"];
      };
    };
  };
  /** Get all locations associated to location labels for an organization */
  getLocationsAssociatedToLocationLabelsByOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationLabelsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationLabelsForOrgWSRequest"];
      };
    };
  };
  /** Get list of locations given latitude and longitude */
  getLocationsByGeo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationsByGeoResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationsByGeoRequest"];
      };
    };
  };
  /** Get nested locations by subLocationHierarchyKey */
  getLocationsBySubLocationsHierarchyKey: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationsBySubLocationsHierarchyKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationsBySubLocationsHierarchyKeyWSRequest"];
      };
    };
  };
  /** Get list of locations in organization */
  getLocationsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationsV2WSRequest"];
      };
    };
  };
  /** Remove a label from a location */
  removeLocationLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_RemoveLocationLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_RemoveLocationLabelWSRequest"];
      };
    };
  };
  /** Selectively update a location */
  selectiveUpdateLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_SelectiveUpdateLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_SelectiveUpdateLocationWSRequest"];
      };
    };
  };
  /** Update a location **NOTE: This will replace old settings meaning if you leave a field blank it will be overrode to blank. For selective field updates use the endpoint /selectiveUpdateLocation */
  updateLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_UpdateLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_UpdateLocationWSRequest"];
      };
    };
  };
  /** Validate a location address for Alarm Monitoring */
  validateLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Location_ValidateLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_ValidateLocationWSRequest"];
      };
    };
  };
  /** Get RMAs */
  getRMAs: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Logistics_GetRMAsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Logistics_GetRMAsWSRequest"];
      };
    };
  };
  /** Get shipments */
  getShipments: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Logistics_GetShipmentsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Logistics_GetShipmentsWSRequest"];
      };
    };
  };
  /** Get warranty approved RMAs */
  getWarrantyApprovedRMAs: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Internal_GetWarrantyApprovedRMAsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_GetWarrantyApprovedRMAsWSRequest"];
      };
    };
  };
  /** Generate a map URL */
  generateMapUrl: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Maps_GenerateMapUrlWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Maps_GenerateMapUrlWSRequest"];
      };
    };
  };
  /** Get media information of any video-supporting media device */
  getBulkMediaDeviceDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mediadevice_GetBulkMediaDeviceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Mediadevice_GetBulkMediaDeviceDetailsWSRequest"];
      };
    };
  };
  /** Upload logs */
  logEvent: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Metric_LogEventWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metric_LogEventWSRequest"];
      };
    };
  };
  /** Upload mobile logs */
  uploadMobileLogs: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/octet-stream": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Report an error */
  reportError: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Metric_ReportErrorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metric_ReportErrorWSRequest"];
      };
    };
  };
  /** Allows a multi-org user on mobile to login to a different org they are able to access. */
  loginToOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mobile_LoginToOrgBaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_LoginToOrgRequest"];
      };
    };
  };
  /** Mobile login of partner to client org. */
  loginVerifiedSupportAuthority: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mobile_LoginVerifiedSupportAuthorityMobileResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_LoginVerifiedSupportAuthorityMobileRequest"];
      };
    };
  };
  /** Ends a mobile session. */
  logoutMobileUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mobile_LogoutMobileUserResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_LogoutMobileUserRequest"];
      };
    };
  };
  /** Refreshes the mobile session for the authenticated user. */
  refreshMobileSession: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mobile_RefreshMobileSessionResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_RefreshMobileSessionRequest"];
      };
    };
  };
  /** Updates a mobile notification token for the Console mobile app */
  updateNotificationToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mobile_UpdateMobileNotificationTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_UpdateMobileNotificationTokenRequest"];
      };
    };
  };
  /** Updates a mobile notification token for the Rhombus Key mobile app */
  updateRhombusKeyNotificationToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Mobile_UpdateRhombusKeyMobileNotificationTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_UpdateRhombusKeyMobileNotificationTokenRequest"];
      };
    };
  };
  /** Add model to device */
  addModelToDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Modularai_AddModelToDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Modularai_AddModelToDeviceWSRequest"];
      };
    };
  };
  /** Get devices running model */
  getDevicesForModel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Modularai_GetDevicesForModelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Modularai_GetDevicesForModelWSRequest"];
      };
    };
  };
  /** Get available models */
  getModels: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Modularai_GetModelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Modularai_GetModelsWSRequest"];
      };
    };
  };
  /** Get models added to device */
  getModelsAddedToDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Modularai_GetModelsAddedToDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Modularai_GetModelsAddedToDeviceWSRequest"];
      };
    };
  };
  /** Remove model from device */
  removeModelFromDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Modularai_RemoveModelFromDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Modularai_RemoveModelFromDeviceWSRequest"];
      };
    };
  };
  /** Update model config name, description, or model parameters */
  updateModel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Modularai_UpdateModelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Modularai_UpdateModelWSRequest"];
      };
    };
  };
  /** Upload a custom model */
  uploadCustomModel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    /** multipart/form-data with zip containing custom model */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** [DEV ONLY] Upload a quantized model for an existing modular AI config */
  uploadQuantizedModel: {
    parameters: {
      query: {
        modelUuid?: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    /** multipart/form-data with zip containing custom model */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Get device network configuration */
  getDeviceNetworkConfiguration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Network_GetDeviceNetworkConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Network_GetDeviceNetworkConfigurationWSRequest"];
      };
    };
  };
  /** Update device IP configuration */
  updateDeviceIpConfiguration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Network_UpdateDeviceIpConfigurationWSRequest"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Network_UpdateDeviceIpConfigurationWSRequest"];
      };
    };
  };
  /** User authorizes to share permission and ac settings, receives temporary authorization code */
  authorize: {
    parameters: {
      query: {
        clientId?: string | null;
        redirectUri?: string | null;
        responseType?: string | null;
        state?: string | null;
        consentGiven?: boolean | null;
        codeChallenge?: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  /** Delete application */
  deleteApplication: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_OAuthApplicationWSRequest"];
      };
    };
  };
  /** Get all applications for org */
  getAllApplicationsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Oauth_GetAllApplicationsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_GetAllApplicationsForOrgWSRequest"];
      };
    };
  };
  /** Get application by clientId */
  getApplicationByClientId: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Oauth_GetApplicationByClientIdWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_GetApplicationByClientIdWSRequest"];
      };
    };
  };
  /** Application for client_id and client_secret */
  submitApplication: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Oauth_OAuthApplicationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_OAuthApplicationWSRequest"];
      };
    };
  };
  /** Update application */
  updateApplication: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_OAuthApplicationWSRequest"];
      };
    };
  };
  /** Get basic state information about all proximity tags in organization */
  getMinimalOccupancySensorStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Occupancysensor_GetMinimalOccupancySensorStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Occupancysensor_GetMinimalOccupancySensorStatesWSRequest"];
      };
    };
  };
  /** Get recent events for specified proximity tag */
  getOccupancyEventsForSensor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Occupancysensor_GetOccupancyEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Occupancysensor_GetOccupancyEventsForSensorWSRequest"];
      };
    };
  };
  /** Get stored video information for sensor */
  getOccupancyPresenceWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSRequest"];
      };
    };
  };
  /** Update the details of an occupancy sensor */
  updateOccupancySensorDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Occupancysensor_UpdateOccupancySensorDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Occupancysensor_UpdateOccupancySensorDetailsWSRequest"];
      };
    };
  };
  /** Exposes custom objects and enums to the component schema - this endpoint should not be invoked */
  getSchemas: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Openapi_GetOpenApiComponentSchemasWSRequest"];
      };
    };
  };
  /** Claim activation token for organization */
  claimActivationToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_ClaimActivationTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_ClaimActivationTokenWSRequest"];
      };
    };
  };
  /** Claim shipment registration token for an organization */
  claimShipmentRegistrationToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_ClaimShipmentRegistrationTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_ClaimShipmentRegistrationTokenWSRequest"];
      };
    };
  };
  /** Create a pending registration. Registration will be completed when the hardware establishes connectivity */
  createPendingRegistration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_CreatePendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_CreatePendingRegistrationRequest"];
      };
    };
  };
  /** Delete scoped cloud archiving config.  Note that the priority of scoping is Org > Location > Device */
  deleteCloudArchivingConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_DeleteCloudArchivingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_DeleteCloudArchivingConfigWSRequest"];
      };
    };
  };
  /** Delete keypad logo. */
  deleteKeypadLogo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_DeleteKeypadLogoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_DeleteKeypadLogoWSRequest"];
      };
    };
  };
  /** Delete rhombus key logo. */
  deleteRhombusKeyLogo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_DeleteRhombusKeyLogoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_DeleteRhombusKeyLogoWSRequest"];
      };
    };
  };
  /** Find all hardware for which a pending registrations exists */
  findAllHardwareWithPendingRegistration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_FindAllHardwareWithPendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_FindAllHardwareWithPendingRegistrationRequest"];
      };
    };
  };
  /** Find hardware for which pending registrations can be created */
  findHardwareAvailableForPendingRegistration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_FindHardwareAvailableForPendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_FindHardwareAvailableForPendingRegistrationRequest"];
      };
    };
  };
  /** Get organization team name if it is available */
  findIfTeamNameAvailable: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_FindIfTeamNameAvailableResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_FindIfTeamNameAvailableRequest"];
      };
    };
  };
  /** Get SCIM configuration for organization */
  findSCIMSettingsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_FindSCIMSettingsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_FindSCIMSettingsForOrgWSRequest"];
      };
    };
  };
  /** Generate a federated session token login for organization */
  generateFederatedSessionToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GenerateFederatedSessionTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GenerateFederatedSessionTokenRequest"];
      };
    };
  };
  /** Get AWS integration cloudformation file */
  getAwsIntCloudFormationFile: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetAwsIntCloudformationFileResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetAwsIntCloudformationFileRequest"];
      };
    };
  };
  /** Get details about the client organization */
  getClientOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetClientOrgWSRequest"];
      };
    };
  };
  /** Get scoped cloud archiving configs.  Note that the priority of scoping is Org > Location > Device */
  getCloudArchivingConfigs: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetCloudArchivingConfigsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetCloudArchivingConfigsWSRequest"];
      };
    };
  };
  /** Get flags for a device */
  getDeviceFlags: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetDeviceFlagsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetDeviceFlagsWSRequest"];
      };
    };
  };
  /** Get organization wide features */
  getFeatures: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetFeaturesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetFeaturesWSRequest"];
      };
    };
  };
  /** Get flags for all locations */
  getLocationFlags: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetLocationFlagsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetLocationFlagsWSRequest"];
      };
    };
  };
  /** Get details about organization */
  getOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgWSRequest"];
      };
    };
  };
  /** Use endpoints in Integrations Webservice instead */
  DEPRECATED_getOrgIntegrations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** This endpoint is no longer in use. Please use getOrgNotificationTemplateV2 instead. */
  getOrgNotificationTemplate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgNotificationTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgNotificationTemplateWSRequest"];
      };
    };
  };
  /** Get organization's default notification schedule template */
  getOrgNotificationTemplateV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgNotificationTemplateV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgNotificationTemplateWSRequest"];
      };
    };
  };
  /** Get details about organization */
  getOrgV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgV2WSRequest"];
      };
    };
  };
  /** Deprecated. Use getSAMLSettingsV2 */
  getSAMLSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetSAMLSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetSAMLSettingsWSRequest"];
      };
    };
  };
  /** Get details about organization */
  getSAMLSettingsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetSAMLSettingsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetSAMLSettingsV2WSRequest"];
      };
    };
  };
  /** Get SCIM display info for organization */
  getScimDisplayInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_GetScimDisplayInfoResponse"];
        };
      };
    };
  };
  /** Generate a temporary org token for use in OAuth flows */
  getTemporaryOrgToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetTemporaryOrgTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetTemporaryOrgTokenWSRequest"];
      };
    };
  };
  /** Peek at a shipping registration token for an organization */
  peekShipmentRegistrationToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_PeekShipmentRegistrationTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_PeekShipmentRegistrationTokenWSRequest"];
      };
    };
  };
  /** Remove a pending registration */
  removePendingRegistration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_RemovePendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_RemovePendingRegistrationRequest"];
      };
    };
  };
  /** Revoke SCIM access for organization */
  revokeSCIMAccessForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_RevokeSCIMAccessForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_RevokeSCIMAccessForOrgWSRequest"];
      };
    };
  };
  /** Store a flag for organization */
  setOrgFlag: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_SetFlagWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_SetFlagWSRequest"];
      };
    };
  };
  /** Initially configure SCIM access for organization */
  setupSCIMAccessForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_SetupSCIMAccessForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_SetupSCIMAccessForOrgWSRequest"];
      };
    };
  };
  /** Update organization AI training settings */
  updateAiTrainingSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateAiTrainingSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateAiTrainingSettingsWSRequest"];
      };
    };
  };
  /** Update scoped cloud archiving config.  Note that the priority of scoping is Org > Location > Device */
  updateCloudArchivingConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateCloudArchivingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateCloudArchivingConfigWSRequest"];
      };
    };
  };
  /** Update organization firmware schedule settings */
  updateFirmwareSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateFirmwareSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateFirmwareSettingsWSRequest"];
      };
    };
  };
  /** Update organization General settings */
  updateGeneralSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateGeneralSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateGeneralSettingsWSRequest"];
      };
    };
  };
  /** Update organization MFA settings */
  updateMFASettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateMFASettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateMFASettingsWSRequest"];
      };
    };
  };
  /** Update organization details */
  updateOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgWSRequest"];
      };
    };
  };
  /** Update organization AI audio analysis policy */
  updateOrgAudioAnalysisPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgAudioAnalysisPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgAudioAnalysisPolicyWSRequest"];
      };
    };
  };
  /** Update organization audio recording policy */
  updateOrgAudioRecordingPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgAudioRecordingPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgAudioRecordingPolicyWSRequest"];
      };
    };
  };
  /** Use endpoints in Integrations Webservice instead */
  updateOrgIntegrations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Update organization's LLM usage opt-in policy */
  updateOrgLLMUsagePolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgLLMUsagePolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgLLMUsagePolicyWSRequest"];
      };
    };
  };
  /** This endpoint is no longer in use. Please use updateOrgNotificationTemplateV2 instead. */
  updateOrgNotificationTemplate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgNotificationTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgNotificationTemplateWSRequest"];
      };
    };
  };
  /** Update default notification schedule template for newly created Users in Org */
  updateOrgNotificationTemplateV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgNotificationTemplateV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgNotificationTemplateV2WSRequest"];
      };
    };
  };
  /** Update pending registration for hardware */
  updatePendingRegistration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdatePendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdatePendingRegistrationRequest"];
      };
    };
  };
  /** Deprecated. Use updateSAMLSettingsV2 */
  updateSAMLSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateSAMLSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateSAMLSettingsWSRequest"];
      };
    };
  };
  /** Update organization SAML settings */
  updateSAMLSettingsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateSAMLSettingsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateSAMLSettingsV2WSRequest"];
      };
    };
  };
  /** Update SCIM configuration for organization */
  updateSCIMSettingsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_UpdateSCIMSettingsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateSCIMSettingsForOrgWSRequest"];
      };
    };
  };
  /** Create a client account */
  createPartnerClient: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_CreatePartnerClientWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_CreatePartnerClientWSRequest"];
      };
    };
  };
  /** Customize a client account */
  customizeClient: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_CustomizeClientWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_CustomizeClientWSRequest"];
      };
    };
  };
  /** Customize a client device */
  customizeClientDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_CustomizeClientDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_CustomizeClientDeviceWSRequest"];
      };
    };
  };
  /** Delete a client account */
  deletePartnerClient: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_DeleteClientWebResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_DeleteClientWebRequest"];
      };
    };
  };
  /** Get details of all open api token requests for organization */
  partner_getApiTokenApplications: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSRequest"];
      };
    };
  };
  /** Get list of all api tokens for a partner */
  partner_getApiTokens: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokensWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetPartnerApiTokensWSRequest"];
      };
    };
  };
  /** Retrieve a list of devices for a specific client. */
  getClientDevices: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetClientDevicesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetClientDevicesWSRequest"];
      };
    };
  };
  /** Get client rhombus organization users for partner activation token V2 */
  getClientRhombusOrgUsersForPartnerActivationTokenV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSBaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSRequest"];
      };
    };
  };
  /** Get a map of all client accounts to device and location info */
  getPartnerClientsStatusMap: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerClientsStatusMapWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerClientsStatusMapWSRequest"];
      };
    };
  };
  /** Get information about a client */
  getClientSummaryInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetClientSummaryInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetClientSummaryInfoWSRequest"];
      };
    };
  };
  /** Get a list of all client accounts */
  getPartnerClients: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerClientsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerClientsWSRequest"];
      };
    };
  };
  /** Get a list of all client accounts. NOTICE: This is the same as getPartnerClients, but only returns the basic info so partners can login to clients quickly. The other info will be returned by getPartnerClientsStatusMap. */
  getPartnerClientsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerClientsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerClientsWSRequest"];
      };
    };
  };
  /** Get a list of licenses available for a client organization */
  getDeviceLicensesForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetDeviceLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetDeviceLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Get a list of licenses available for a client organization */
  getLicensesForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["License_GetLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Retrieve list of all devices registered across all clients */
  getListOfAllClientDevices: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetListOfAllClientDevicesResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetListOfAllClientDevicesRequest"];
      };
    };
  };
  /** Retrieve a list of hardware available for remote registration. Any hardware originally registered by a Partner is available for re-registration after being removed from an active client account. */
  getListOfControlledHardware: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetListOfControlledHardwareResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetListOfControlledHardwareRequest"];
      };
    };
  };
  /** Get client mobile account access as partner */
  getPartnerClientMobileAccountAccess: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerClientMobileAccountAccessResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerClientMobileAccountAccessRequest"];
      };
    };
  };
  /** Get client shipments */
  PartnerGetShipments: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetShipmentsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetShipmentsWSRequest"];
      };
    };
  };
  /** Grant support access to a client account */
  grantSupportAccessToClient: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GrantSupportAccessToClientWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GrantSupportAccessToClientWSRequest"];
      };
    };
  };
  /** Reassign device(s) to a different organization. Only devices which hardware is controlled by the partner can be reassigned */
  reassignDeviceOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_ReassignDeviceOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_ReassignDeviceOrgWSRequest"];
      };
    };
  };
  /** Register a controlled camera to a client */
  registerCameraToClient: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Org_CreatePendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_CreatePendingRegistrationRequest"];
      };
    };
  };
  /** Register a deal */
  registerDeal: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_RegisterDealWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_RegisterDealWSRequest"];
      };
    };
  };
  /** Request access to a client account */
  requestAccessToClientAccount: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_RequestAccessToClientAccountResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_RequestAccessToClientAccountRequest"];
      };
    };
  };
  /** Request access to a client account using the V2 endpoint */
  requestAccessToClientAccountV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_RequestAccessToClientAccountV2Response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_RequestAccessToClientAccountV2Request"];
      };
    };
  };
  /** Remove an api token from organization. Note: this is irreversible */
  partner_revokeApiToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_RevokeApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RevokeApiTokenWSRequest"];
      };
    };
  };
  /** Request a partner api token for 1 or more organizations */
  partner_submitApiTokenApplication: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSRequest"];
      };
    };
  };
  /** Submit support access decision for partner activation token V2 */
  submitSupportAccessDecisionForPartnerActivationTokenV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSBaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSRequest"];
      };
    };
  };
  /** Update display name and permissions of an api token */
  partner_updateApiToken: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateApiTokenWSRequest"];
      };
    };
  };
  /** Update send license expiration email feature flag by org */
  updateManuallySendLicenseExpirationEmail: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_UpdateManuallySendLicenseExpirationEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_UpdateManuallySendLicenseExpirationEmailWSRequest"];
      };
    };
  };
  /** Submit a forgot password request for password reset */
  forgotPassword: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Password_ForgotPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Password_ForgotPasswordWSRequest"];
      };
    };
  };
  /** Reset user password using reset token */
  resetPassword: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Password_ResetPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Password_ResetPasswordWSRequest"];
      };
    };
  };
  /** Create a new user account in the organization */
  userSignup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Password_UserSignupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Password_UserSignupWSRequest"];
      };
    };
  };
  /** Use Permission Group endpoints instead */
  assignPermission: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_AssignUserPermissionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_AssignUserPermissionWSRequest"];
      };
    };
  };
  /** Create a permission group */
  createPartnerPermissionGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_CreatePartnerPermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_CreatePartnerPermissionGroupWSRequest"];
      };
    };
  };
  /** Create a permission group */
  createPermissionGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_CreatePermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_CreatePermissionGroupWSRequest"];
      };
    };
  };
  /** Delete a permission group */
  deletePartnerPermissionGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_DeletePartnerPermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_DeletePartnerPermissionGroupWSRequest"];
      };
    };
  };
  /** Delete a permission group */
  deletePermissionGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_DeletePermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_DeletePermissionGroupWSRequest"];
      };
    };
  };
  /** Get partner permission groups for the organization */
  getPartnerPermissionGroups: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_GetPartnerPermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPartnerPermissionGroupsWSRequest"];
      };
    };
  };
  /** Get details about all permission groups in organization */
  getPermissionGroups: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_GetPermissionGroupsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPermissionGroupsWSRequest"];
      };
    };
  };
  /** Get permission groups for a specific organization */
  getPermissionGroupsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_GetPermissionGroupsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPermissionGroupsForOrgWSRequest"];
      };
    };
  };
  /** Get permissions for the current partner user */
  getPermissionsForCurrentPartner: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_GetPermissionsForCurrentPartnerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPermissionsForCurrentPartnerWSRequest"];
      };
    };
  };
  /** Get device and functionality permissions for user or API token */
  getPermissionsForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_GetPermissionsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPermissionsForCurrentUserWSRequest"];
      };
    };
  };
  /** Update a partner permission group */
  updatePartnerPermissionGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_UpdatePartnerPermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_UpdatePartnerPermissionGroupWSRequest"];
      };
    };
  };
  /** Update a permission group */
  updatePermissionGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Permission_UpdatePermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_UpdatePermissionGroupWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to a access controlled door */
  createAccessControlledDoorPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreateAccessControlledDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateAccessControlledDoorPolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to audio gateways */
  createAudioPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreateAudioPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateAudioPolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to cameras */
  createCameraPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreateCameraPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateCameraPolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to a climate sensor */
  createClimatePolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreateClimatePolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateClimatePolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to a door sensor */
  createDoorPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreateDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateDoorPolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to a occupancy sensor */
  createOccupancyPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreateOccupancyPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateOccupancyPolicyWSRequest"];
      };
    };
  };
  /** Create policy addendum for location */
  createPolicyAddendumForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreatePolicyAddendumForLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreatePolicyAddendumForLocationRequest"];
      };
    };
  };
  /** Create policy addendums for devices */
  createPolicyAddendumsForDevices: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreatePolicyAddendumsForDevicesResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreatePolicyAddendumsForDevicesRequest"];
      };
    };
  };
  /** Create a policy to be assigned to an asset tag */
  createProximityPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreateProximityPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateProximityPolicyWSRequest"];
      };
    };
  };
  /** Create a schedule to be used for policy creation */
  createSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreateScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateScheduleWSRequest"];
      };
    };
  };
  /** Create a video intercom policy */
  createVideoIntercomPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_CreateVideoIntercomPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateVideoIntercomPolicyWSRequest"];
      };
    };
  };
  /** Delete an access controlled door policy */
  deleteAccessControlledDoorPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteAccessControlledDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteAccessControlledDoorPolicyWSRequest"];
      };
    };
  };
  /** Delete a audio gateway policy */
  deleteAudioPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteAudioPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteAudioPolicyWSRequest"];
      };
    };
  };
  /** Delete a camera policy */
  deleteCameraPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteCameraPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteCameraPolicyWSRequest"];
      };
    };
  };
  /** Delete a climate policy */
  deleteClimatePolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteClimatePolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteClimatePolicyWSRequest"];
      };
    };
  };
  /** Delete a policy addendums */
  deleteDevicePolicyAddendums: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteDevicePolicyAddendumsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteDevicePolicyAddendumsWSRequest"];
      };
    };
  };
  /** Delete a door sensor policy */
  deleteDoorPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteDoorPolicyWSRequest"];
      };
    };
  };
  /** Delete a policy addendums */
  deleteLocationPolicyAddendum: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteLocationPolicyAddendumWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteLocationPolicyAddendumWSRequest"];
      };
    };
  };
  /** Delete an Occupancy policy */
  deleteOccupancyPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteOccupancyPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteOccupancyPolicyWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a component composite */
  deletePolicyPauseSettingForComponentComposite: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a device */
  deletePolicyPauseSettingForDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a location */
  deletePolicyPauseSettingForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSRequest"];
      };
    };
  };
  /** Delete an asset tag policy */
  deleteProximityPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteProximityPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteProximityPolicyWSRequest"];
      };
    };
  };
  /** Delete a schedule used for policy creation */
  deleteSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteScheduleWSRequest"];
      };
    };
  };
  /** Delete a video intercom policy */
  deleteVideoIntercomPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteVideoIntercomPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteVideoIntercomPolicyWSRequest"];
      };
    };
  };
  /** Find all schedules in organization */
  findSchedules: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_FindSchedulesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_FindSchedulesWSRequest"];
      };
    };
  };
  /** Get details about all access controlled door policies in organization */
  getAccessControlledDoorPolicies: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetAccessControlledDoorPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetAccessControlledDoorPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all audio gateway policies in organization */
  getAudioPolicies: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetAudioPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetAudioPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all camera policies in organization */
  getCameraPolicies: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetCameraPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetCameraPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all climate policies in organization */
  getClimatePolicies: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetClimatePoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetClimatePoliciesWSRequest"];
      };
    };
  };
  /** Get details about all door sensor policies in organization */
  getDoorPolicies: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetDoorPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetDoorPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all occupancy policies in organization */
  getOccupancyPolicies: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetOccupancyPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetOccupancyPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all climate policies in organization */
  getPoliciesUsingSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetPoliciesUsingScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetPoliciesUsingScheduleWSRequest"];
      };
    };
  };
  /** Get the current and planned policy alert addendums */
  getPolicyAddendums: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetPolicyAddendumsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetPolicyAddendumsWSRequest"];
      };
    };
  };
  /** Get the current and planned policy alert pause details */
  getPolicyPauseSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetPolicyPauseSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetPolicyPauseSettingsWSRequest"];
      };
    };
  };
  /** Get details about all asset tag policies in organization */
  getProximityPolicies: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetProximityPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetProximityPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all video intercom policies in organization */
  getVideoIntercomPolicies: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_GetVideoIntercomPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetVideoIntercomPoliciesWSRequest"];
      };
    };
  };
  /** Pause alert policy for component composite */
  pauseAlertPolicyForComponentComposite: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_PauseAlertPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_PauseAlertPolicyWSRequest"];
      };
    };
  };
  /** Pause alert policy for device */
  pauseAlertPolicyForDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_PauseAlertPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_PauseAlertPolicyWSRequest"];
      };
    };
  };
  /** Pause alert policy for location */
  pauseAlertPolicyForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_PauseAlertPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_PauseAlertPolicyWSRequest"];
      };
    };
  };
  /** Update an access controlled door policy */
  updateAccessControlledDoorPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateAccessControlledDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateAccessControlledDoorPolicyWSRequest"];
      };
    };
  };
  /** Update a audio gateway policy */
  updateAudioPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateAudioPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateAudioPolicyWSRequest"];
      };
    };
  };
  /** Update a camera policy */
  updateCameraPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateCameraPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateCameraPolicyWSRequest"];
      };
    };
  };
  /** Update a climate policy */
  updateClimatePolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateClimatePolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateClimatePolicyWSRequest"];
      };
    };
  };
  /** Update a door sensor policy */
  updateDoorPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateDoorPolicyWSRequest"];
      };
    };
  };
  /** Update an occupancy policy */
  updateOccupancyPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateOccupancyPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateOccupancyPolicyWSRequest"];
      };
    };
  };
  /** Update an asset tag policy */
  updateProximityPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateProximityPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateProximityPolicyWSRequest"];
      };
    };
  };
  /** Update a schedule to be used for policy creation */
  updateSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateScheduleWSRequest"];
      };
    };
  };
  /** Update video intercom policy */
  updateVideoIntercomPolicy: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateVideoIntercomPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateVideoIntercomPolicyWSRequest"];
      };
    };
  };
  /** Get locomotion events for specified proximity tag */
  getLocomotionEventsForTag: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Proximity_GetLocomotionEventsForTagWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Proximity_GetLocomotionEventsForTagWSRequest"];
      };
    };
  };
  /** Get basic state information about all proximity tags in organization */
  getMinimalProximityStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Proximity_GetMinimalProximityStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Proximity_GetMinimalProximityStatesWSRequest"];
      };
    };
  };
  /** Get recent events for specified proximity tag */
  getProximityEventsForTags: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Proximity_GetProximityEventsForTagWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Proximity_GetProximityEventsForTagWSRequest"];
      };
    };
  };
  /** Update details for a proximity tag */
  updateProximitySensorDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Proximity_UpdateProximitySensorDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Proximity_UpdateProximitySensorDetailsWSRequest"];
      };
    };
  };
  /** Get closest 10 feeds by lat and long */
  getNearbyFeeds: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rapidsos_GetNearbyFeedsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rapidsos_GetNearbyFeedsRequest"];
      };
    };
  };
  /** Assign a third party camera to an NVR */
  assignThirdPartyCameraToNVR: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_AssignThirdPartyCameraToNVRWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_AssignThirdPartyCameraToNVRWSRequest"];
      };
    };
  };
  /** Assign a third party camera to a relay Camera */
  assignThirdPartyCameraToRelayCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_AssignThirdPartyCameraToRelayCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_AssignThirdPartyCameraToRelayCameraWSRequest"];
      };
    };
  };
  /** Authenticate a third party camera, effectively validating the credentials specified to be used for it. */
  authenticateThirdPartyCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_AuthenticateThirdPartyCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_AuthenticateThirdPartyCameraWSRequest"];
      };
    };
  };
  /** Create a third party camera password */
  createThirdPartyCameraPassword: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_CreateThirdPartyCameraPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_CreateThirdPartyCameraPasswordWSRequest"];
      };
    };
  };
  /** Delete a third party camera password */
  deleteThirdPartyCameraPasswords: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_DeleteThirdPartyCameraPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_DeleteThirdPartyCameraPasswordWSRequest"];
      };
    };
  };
  /** Trigger a discovery of cameras on the local LANs */
  executeThirdPartyCameraDiscovery: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_ExecuteThirdPartyCameraDiscoveryWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_ExecuteThirdPartyCameraDiscoveryWSRequest"];
      };
    };
  };
  /** Find default rtsp urls by camera manufacturer. */
  findDefaultRtspUrlsByManufacturer: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_FindDefaultRtspUrlsByManufacturerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_FindDefaultRtspUrlsByManufacturerWSRequest"];
      };
    };
  };
  /** Finds discoveries that have unassigned RTSP endpoints. Only discoveries containing at least one endpoint are returned. */
  findDiscoveriesWithUnassignedRtspEndpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_FindDiscoveriesWithUnassignedRtspEndpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_FindDiscoveriesWithUnassignedRtspEndpointsWSRequest"];
      };
    };
  };
  /** Get a list of the third party cameras assigned to an NVR */
  getAssignedThirdPartyCameras: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_GetAssignedThirdPartyCamerasWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetAssignedThirdPartyCamerasWSRequest"];
      };
    };
  };
  /** Get hardware details of multiple NVRs */
  getNVRDetails: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_GetNVRDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetNVRDetailsWSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified NVR */
  getFullNVRState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_GetFullNVRStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetFullNVRStateWSRequest"];
      };
    };
  };
  /** Returns format for importing third party cameras. */
  getImportThirdPartyCamerasFormat: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_GetImportThirdPartyCamerasFormatWSResponse"];
        };
      };
    };
  };
  /** Get basic state information about all NVRs in organization */
  getMinimalNVRStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_GetMinimalNVRStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetMinimalNVRStateListWSRequest"];
      };
    };
  };
  /** Get basic state information about all third party cameras in the organization */
  getMinimalThirdPartyCameraStateList: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_GetMinimalThirdPartyCameraStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetMinimalThirdPartyCameraStateListWSRequest"];
      };
    };
  };
  /** Gets rtsp endpoints for device with the specified mac address. */
  getRtspEndpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_GetRtspEndpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetRtspEndpointsWSRequest"];
      };
    };
  };
  /** Get a list of the third party camera passwords */
  getThirdPartyCameraPasswords: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_GetThirdPartyCameraPasswordsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetThirdPartyCameraPasswordsWSRequest"];
      };
    };
  };
  /** Imports third party cameras in csv format */
  importThirdPartyCameras: {
    parameters: {
      path: {
        locationUuid: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_ImportThirdPartyCamerasWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          file?: { [key: string]: unknown } | null;
        };
      };
    };
  };
  /** Manually identify a camera on the network */
  manualDiscoverCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_ManualDiscoverThirdPartyCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_ManualDiscoverThirdPartyCameraWSRequest"];
      };
    };
  };
  /** Trigger a pan, tilt, or zoom */
  ptzMove: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_PTZMoveWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_PTZMoveWSRequest"];
      };
    };
  };
  /** Trigger a pan, tilt, or zoom */
  ptz: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_PTZStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_PTZStatusWSRequest"];
      };
    };
  };
  /** Reboot an NVR */
  rebootNVR: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_RebootNVRVWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_RebootNVRVWSRequest"];
      };
    };
  };
  /** Unassign a third party camera from an NVR */
  unassignThirdPartyCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_UnassignThirdPartyCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_UnassignThirdPartyCameraWSRequest"];
      };
    };
  };
  /** Remove an NVR from organization */
  unregisterNVR: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_UnregisterNVRWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_UnregisterNVRWSRequest"];
      };
    };
  };
  /** Update hardware details of NVR. */
  updateNVRDetailsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_UpdateNVRVWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_UpdateNVRVWSRequest"];
      };
    };
  };
  /** Send command to update firmware to NVR */
  updateNVRFirmware: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Relay_UpdateNVRFirmwareWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_UpdateNVRFirmwareWSRequest"];
      };
    };
  };
  /** Get the latest audit logs for organization */
  getAuditFeed: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetAuditFeedWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetAuditFeedWSRequest"];
      };
    };
  };
  /** Get audit logs for a specified entity */
  getAuditFeedForTarget: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetAuditFeedForTargetWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetAuditFeedForTargetWSRequest"];
      };
    };
  };
  /** Get the average report if it is available for the specified count report */
  getAverageReport: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetAverageReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetAverageReportWSRequest"];
      };
    };
  };
  /** Get the average reports if they are available for the specified count report */
  getAverageReports: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetAverageReportsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetAverageReportsWSRequest"];
      };
    };
  };
  /** Use /getCountReportV2 instead */
  getCountReport: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetCountReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCountReportWSRequest"];
      };
    };
  };
  /** Get the specified count reports */
  getCountReportV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetCountReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCountReportV2WSRequest"];
      };
    };
  };
  /** Get multiple specified count reports */
  getCountReports: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetCountReportsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCountReportsWSRequest"];
      };
    };
  };
  /** Get count reports by device for a specified location */
  getCountReportsForDevicesAtLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetCountReportsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCountReportsForDevicesAtLocationWSRequest"];
      };
    };
  };
  /**
   * Retrieves aggregated counts of boolean event values (true/false) produced by a selected prompt over a specified time window.
   *
   * Scope & filters:
   * 	•	promptUuid – The prompt to aggregate (required).
   *
   * Time window & interval:
   * 	•	A time range (startTimeMs → endTimeMs, epoch ms) is required and is used exactly as provided.
   * 	•	If an interval is supplied (e.g., MINUTELY, QUARTERHOURLY, HOURLY), events are bucketed at that granularity.
   * 	•	Aggregation is always performed in the device’s local timezone. Buckets are computed relative to each device’s timezone, then evaluated within the exact provided window.
   *
   * Response:
   * 	•	Per interval bucket, returns a BinaryAggregationValue with counts for true and false.
   * 	•	Includes minValueTimestampMs and maxValueTimestampMs (if available) and the bucket timestamp from BaseReportValue.
   *
   * Notes:
   * 	•	Only binary/boolean prompt types are valid for this endpoint.
   */
  getCustomLLMBinaryCounts: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetCustomLLMWBinaryWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCustomLLMWSRequest"];
      };
    };
  };
  /**
   * Retrieves aggregated statistics for numeric events event values produced by a selected prompt over a specified time window.
   * Scope & filters:
   * 	•	promptUuid – The prompt to aggregate (required).
   *
   * Time window & interval:
   * 	•	A time range (startTimeMs → endTimeMs, epoch ms) is required and is used exactly as provided.
   * 	•	If an interval is supplied (e.g., MINUTELY, QUARTERHOURLY, HOURLY), events are bucketed at that granularity.
   * 	•	Aggregation is always performed in the device’s local timezone. Buckets are computed relative to each device’s timezone, then evaluated within the exact provided window.
   *
   * Response:
   * 	•	Per interval bucket, returns numeric aggregates derived from raw values: count, sum, min, max, average.
   * 	•	Includes minValueTimestampMs and maxValueTimestampMs indicating when min/max occurred within the bucket (if available).
   * 	•	Bucket timestamps are returned as epoch ms.
   *
   * Notes:
   * 	•	Only numeric prompt types are valid for this endpoint.
   */
  getCustomLLMNumericCounts: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetCustomLLMNumericWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCustomLLMWSRequest"];
      };
    };
  };
  /**
   * Retrieves a custom events report containing raw time-series event values recorded by selected prompts and devices within the specified time window.
   * The report can be filtered by:
   * 	•	promptUuid – The specific prompt to query.
   * 	•	deviceFacetUuids – A set of devices to include.
   * 	•	locationUuid – The location context for the query.
   * For example, a request may specify a promptUuid to fetch results from a certain LLM prompt, and additionally restrict results to only devices in a given locationUuid.
   * The time range (startTimeMs → endTimeMs) is required and determines the interval of events returned.
   * The response includes, per device and prompt, the raw event values (numeric or boolean as string) along with timestamps, check-condition results (if selected), and prompt type.
   */
  getCustomLLMReport: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetCustomLLMNumericWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCustomLLMReportWSRequest"];
      };
    };
  };
  /** Get the latest diagnostic logs for organization */
  getDiagnosticFeed: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetDiagnosticFeedWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetDiagnosticFeedWSRequest"];
      };
    };
  };
  /** Get a list of deliveries from Envoy to populate reporting logs */
  getEnvoyDeliveries: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetEnvoyDeliveriesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetEnvoyDeliveriesWSRequest"];
      };
    };
  };
  /** Get a list of employees from Envoy */
  getEnvoyEmployees: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetEnvoyEmployeesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetEnvoyEmployeesWSRequest"];
      };
    };
  };
  /** Get list of Envoy locations */
  getEnvoyLocations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetEnvoyLocationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetEnvoyLocationsWSRequest"];
      };
    };
  };
  /** Get a list of visitors from Envoy to populate reporting logs */
  getEnvoyVisitors: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetEnvoyVisitorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetEnvoyVisitorsWSRequest"];
      };
    };
  };
  /** Get the diagnostic logs of supported third-party devices for organization */
  getIntegrationDiagnosticEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetIntegrationDiagnosticEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetIntegrationDiagnosticEventsWSRequest"];
      };
    };
  };
  /** Get license plate counting events for a specified camera */
  getLicensePlatesByDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetLicensePlatesByDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetLicensePlatesByDeviceWSRequest"];
      };
    };
  };
  /** Get the X most recent people counting events for a specified device */
  getMostRecentPeopleCountEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetMostRecentPeopleCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetMostRecentPeopleCountWSRequest"];
      };
    };
  };
  /** Get occupancy count */
  getOccupancyCount: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetOccupancyCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetOccupancyCountWSRequest"];
      };
    };
  };
  /**
   * Returns the estimated occupancy count for a specified room or area within a given time range. This endpoint allows you to monitor occupancy trends over time or retrieve a single count for a defined interval.
   * Important: An occupancy region must be defined in the Rhombus Console before using this endpoint.
   * You can optionally specify an interval (e.g., MINUTELY, QUARTERHOURLY, HOURLY ...) to retrieve occupancy counts broken down by sub-intervals between startTime and endTime.
   * If no interval is provided, a single occupancy count is returned for the entire duration between startTime and endTime.
   */
  getOccupancyCounts: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetOccupancyCountsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetOccupancyCountsWSRequest"];
      };
    };
  };
  /** Get proximity tag locations by date */
  getProximityTagLocationsByDate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetProximityTagLocationsByDateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetProximityTagLocationsByDateWSRequest"];
      };
    };
  };
  /** Get the running average for the specified count report if it is available, based on recent data */
  getRunningAverage: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetRunningAverageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetRunningAverageWSRequest"];
      };
    };
  };
  /** Get a summary report for a camera, location, or organization */
  getSummaryCountReport: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetSummaryCountReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetSummaryCountReportWSRequest"];
      };
    };
  };
  /** Get threshold crossing count report */
  getThresholdCrossingCountReport: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetThresholdCrossingCountReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetThresholdCrossingCountReportWSRequest"];
      };
    };
  };
  /** Get the occupancy counts from threshold crossing for a group of cameras over a period of time */
  getThresholdCrossingCounts: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetThresholdCrossingCountsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetThresholdCrossingCountsWSRequest"];
      };
    };
  };
  /** Get the raw threshold crossing events for a group of cameras over a period of time */
  getThresholdCrossingEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetThresholdCrossingEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetThresholdCrossingEventsWSRequest"];
      };
    };
  };
  /** Get threshold crossing events for device */
  getThresholdCrossingEventsForDevice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_GetThresholdCrossingEventsForDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetThresholdCrossingEventsForDeviceWSRequest"];
      };
    };
  };
  /** Get list of Toast orders to populate events table */
  getToastEventsTable: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetToastEventsTableWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetToastEventsTableWSRequest"];
      };
    };
  };
  /** Get list of Toast orders from all restaurants to populate events table */
  getToastEventsTableAllLocations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Integration_GetToastEventsTableAllLocationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetToastEventsTableAllLocationsWSRequest"];
      };
    };
  };
  /** Reset the running average for the specified count report */
  resetRunningAverage: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Report_ResetRunningAverageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_ResetRunningAverageWSRequest"];
      };
    };
  };
  /** Create a rule */
  createRule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_CreateRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_CreateRuleWSRequest"];
      };
    };
  };
  /** Delete a rule */
  deleteRule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_DeleteRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_DeleteRuleWSRequest"];
      };
    };
  };
  /** Delete a rule pause setting */
  deleteRulePauseSetting: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_DeleteRulePauseSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_DeleteRulePauseSettingWSRequest"];
      };
    };
  };
  /** Get the current and planned rule pause details */
  getRulePauseSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_GetRulePauseSettingsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_GetRulePauseSettingsWSRequest"];
      };
    };
  };
  /** Get rules with Uuid and Type filtering */
  getRulesFiltered: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_GetRulesForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_records_GetRulesFilteredWSRequest"];
      };
    };
  };
  /** List rules for org */
  getRulesForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_GetRulesForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_GetRulesForOrgWSRequest"];
      };
    };
  };
  /** Pause rule */
  pauseRule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_PauseRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_PauseRuleWSRequest"];
      };
    };
  };
  /** Update a rule */
  updateRule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_UpdateRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_UpdateRuleWSRequest"];
      };
    };
  };
  /** Delete a rules event historical record */
  deleteRulesEventRecord: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_records_DeleteRulesEventRecordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_records_DeleteRulesEventRecordWSRequest"];
      };
    };
  };
  /** Get N latest rules event historical records */
  getLatestRulesEventRecords: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_records_GetLatestRulesEventRecordsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_records_GetLatestRulesEventRecordsWSRequest"];
      };
    };
  };
  /** Find rules event historical records */
  getRulesEventRecords: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rules_records_GetRulesEventRecordsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_records_GetRulesEventRecordsWSRequest"];
      };
    };
  };
  /** Create scene query configuration */
  createPromptConfiguration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Scenequery_CreatePromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_CreatePromptConfigurationWSRequest"];
      };
    };
  };
  /** Delete scene query configuration */
  deletePromptConfiguration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Scenequery_DeletePromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_DeletePromptConfigurationWSRequest"];
      };
    };
  };
  /** Find all scene query configurations */
  findAllPromptConfigurations: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Scenequery_FindAllPromptConfigurationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_FindAllPromptConfigurationsWSRequest"];
      };
    };
  };
  /** Get scene query configuration */
  getPromptConfiguration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Scenequery_GetPromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_GetPromptConfigurationWSRequest"];
      };
    };
  };
  /** Selectively update a scene query configuration */
  selectiveUpdatePromptConfiguration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Scenequery_SelectiveUpdatePromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_SelectiveUpdatePromptConfigurationWSRequest"];
      };
    };
  };
  /** Trigger scene query with a custom prompt */
  triggerPrompt: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Scenequery_TriggerPromptWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_TriggerPromptWSRequest"];
      };
    };
  };
  /** Update scene query configuration */
  updatePromptConfiguration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Scenequery_UpdatePromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_UpdatePromptConfigurationWSRequest"];
      };
    };
  };
  /** Create a absolute schedule */
  createAbsoluteSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_CreateAbsoluteScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_CreateAbsoluteScheduleWSRequest"];
      };
    };
  };
  /** Create a one-time relative datetime schedule */
  createRelativeDateTimeIntervalsSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_CreateRelativeDateTimeIntervalsScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_CreateRelativeDateTimeIntervalsScheduleWSRequest"];
      };
    };
  };
  /** Create a realtime relative schedule */
  createRelativeSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_CreateRelativeScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_CreateRelativeScheduleWSRequest"];
      };
    };
  };
  /** Create a weekly schedule */
  createWeeklySchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_CreateWeeklyScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_CreateWeeklyScheduleWSRequest"];
      };
    };
  };
  /** Delete a schedule */
  deleteScheduleV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteScheduleWSRequest"];
      };
    };
  };
  /** Find an absolute schedule */
  findAbsoluteSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_FindAbsoluteScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_FindAbsoluteScheduleWSRequest"];
      };
    };
  };
  /** Find a one-time relative datetime schedule */
  findRelativeDateTimeIntervalsSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_FindRelativeDateTimeIntervalsScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_FindRelativeDateTimeIntervalsScheduleWSRequest"];
      };
    };
  };
  /** Find a relative schedule */
  findRelativeSchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_FindRelativeScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_FindRelativeScheduleWSRequest"];
      };
    };
  };
  /** Find a weekly schedule */
  findWeeklySchedule: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_FindWeeklyScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_FindWeeklyScheduleWSRequest"];
      };
    };
  };
  /** Get weekly schedules in org with usage data */
  getScheduleData: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_GetScheduleDataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_GetSchedulesWSRequest"];
      };
    };
  };
  /** Get weekly schedules in org with usage data */
  getScheduleDataV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_GetScheduleDataV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_GetScheduleDataV2WSRequest"];
      };
    };
  };
  /** Get schedules in org */
  getSchedules: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Schedule_GetSchedulesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_GetSchedulesWSRequest"];
      };
    };
  };
  /** Delete video embedding, do not use unless you know what you're doing. */
  deleteVideoEmbedding: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Search_DeleteVideoEmbeddingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_DeleteVideoEmbeddingWSRequest"];
      };
    };
  };
  /** Index video embedding, do not use unless you know what you're doing. */
  indexVideoEmbedding: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Search_IndexVideoEmbeddingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_IndexVideoEmbeddingWSRequest"];
      };
    };
  };
  /** Fuzzy search for license plate sightings based on a partial or full plate number. Use /vehicle/getVehicleEvents instead. */
  searchLicensePlates: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Search_SearchLicensePlatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchLicensePlatesWSRequest"];
      };
    };
  };
  /** Search for objects by color */
  searchObjectsByColor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Search_SearchObjectsByColorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchObjectsByColorWSRequest"];
      };
    };
  };
  /** Search for similar objects by embedding */
  searchSimilarObjectEmbeddings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsWSRequest"];
      };
    };
  };
  /** Search for similar objects by text */
  searchSimilarObjectEmbeddingsByText: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsByTextWSRequest"];
      };
    };
  };
  /** Search for similar objects by explicit vector */
  searchSimilarObjectEmbeddingsByVector: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsByVectorWSRequest"];
      };
    };
  };
  /** Search for similar videos by embedding */
  searchSimilarVideoEmbeddings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarVideoEmbeddingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarVideoEmbeddingsWSRequest"];
      };
    };
  };
  /** Search for similar videos by time window */
  searchSimilarVideoEmbeddingsByTimeWindow: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarVideoEmbeddingsByTimeWindowWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarVideoEmbeddingsByTimeWindowWSRequest"];
      };
    };
  };
  /** Retrieves sensor activity seekpoints for a specific camera within a given time range. Returns footage seekpoints that correspond to sensor events detected by the camera. */
  getSensorFootageSensorSeekpointsForCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForCameraWSRequest"];
      };
    };
  };
  /** Retrieves sensor activity seekpoints for a specific location within a given time range. Returns footage seekpoints that correspond to sensor events detected at the specified location. */
  getFootageSensorSeekpointsForLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForLocationWSRequest"];
      };
    };
  };
  /** Retrieves sensor activity seekpoints for a specific sensor within a given time range. Returns footage seekpoints that correspond to events detected by the specified sensor device. */
  getFootageSensorSeekpointsForSensor: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForSensorWSRequest"];
      };
    };
  };
  /** Retrieves the current state information for a shared camera, including connection status, video operation URL, region, and cloud archive details. */
  getCurrentState: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Camera_GetSharedCameraCurrentStateWSResponse"];
        };
      };
    };
  };
  /** Retrieves object detection bounding boxes for a shared video clip, providing coordinates and metadata for detected objects within the footage. */
  getShareFootageBoundingBoxes: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedFootageBoundingBoxesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedFootageBoundingBoxesWSRequest"];
      };
    };
  };
  /** Deprecated method for retrieving footage seekpoints. Use the V2 endpoint instead for improved functionality and performance. */
  getShareFootageSeekpoints: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedFootageSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedFootageSeekpointsWSRequest"];
      };
    };
  };
  /** Retrieves activity seekpoints for a shared video clip, providing timestamps and metadata for significant events within the footage. */
  getShareFootageSeekpointsV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedFootageSeekpointsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedFootageSeekpointsV2WSRequest"];
      };
    };
  };
  /** Retrieves media URIs for a shared camera stream, including live stream URLs and video on demand access points. */
  getMediaUris: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedMediaUrisWSRequest"];
      };
    };
  };
  /** Retrieves presence detection data for a shared video stream, providing information about when people or objects are detected in the camera view. */
  getSharePresenceWindows: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedPresenceWindowsWSRequest"];
      };
    };
  };
  /** Retrieves media URIs for devices in a shared video wall, providing access to live streams and video on demand for each camera in the wall. */
  getSharedVideoWallMediaUris: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedVideoWallMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedVideoWallMediaUrisWSRequest"];
      };
    };
  };
  /** Retrieves detailed information about a shared video clip, including metadata, access permissions, and clip properties. */
  getSharedClipData: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedClipDataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedClipDataWSRequest"];
      };
    };
  };
  /** Retrieves detailed information about a shared live video stream, including device configuration, location details, schedule information, and video settings. */
  getSharedLiveStreamInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedLiveStreamInfoWSResponse"];
        };
      };
    };
  };
  /** Retrieves information about shared video walls, including device lists, permissions, location details, and video settings for each device in the wall. */
  getSharedVideoWallInfo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedVideoWallInfoWSResponse"];
        };
      };
    };
  };
  /** Retrieves sensor activity seekpoints for a shared camera, providing timestamps and metadata for sensor events detected by the camera. */
  getShareFootageSensorSeekpointsForCamera: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedFootageSensorSeekpointsForCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedFootageSensorSeekpointsForCameraWSRequest"];
      };
    };
  };
  /** Sends an email or SMS message containing a shared media link to specified recipients. Requires data exfiltration permissions and is audited for security compliance. */
  shareLink: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_ShareLinkWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_ShareLinkWSRequest"];
      };
    };
  };
  /** Deprecated method for retrieving shared timelapse clip data. Use the V2 endpoint instead for improved functionality and performance. */
  getSharedTimelapseClipData: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedTimelapseDataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedTimelapseDataWSRequest"];
      };
    };
  };
  /** Retrieves detailed information about a shared timelapse clip, including metadata, access permissions, and timelapse properties. */
  getSharedTimelapseClipDataV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedTimelapseDataV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedTimelapseDataWSRequest"];
      };
    };
  };
  /** Creates a new support authority for the organization, allowing external support providers or partners to access the system with specified permissions and expiration settings. */
  addSupportAuthority: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Support_AddSupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_AddSupportAuthorityWSRequest"];
      };
    };
  };
  /** Enables login access for a support authority, allowing them to authenticate and access the system with their assigned permissions. */
  allowSupportAuthorityAccess: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Support_AlllowSupportAuthorityAccessWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_AlllowSupportAuthorityAccessWSRequest"];
      };
    };
  };
  /** Retrieves information about all active sessions for support authorities, including session details and authentication status. */
  findSupportAuthoritySessions: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Support_FindSupportAuthoritySessionsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_FindSupportAuthoritySessionsWSRequest"];
      };
    };
  };
  /** Retrieves a list of all support authorities configured for the organization, including their permissions, access settings, and status information. */
  getSupportAuthorities: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Support_GetSupportAuthoritiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_GetSupportAuthoritiesWSRequest"];
      };
    };
  };
  /** Terminates all active sessions for a specific support authority, forcing them to re-authenticate for future access. */
  logoutAllSupportAuthoritySessions: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Support_LogoutAllSupportAuthoritySessionsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_LogoutAllSupportAuthoritySessionsWSRequest"];
      };
    };
  };
  /** Searches for available partner organizations that can be added as support authorities, based on name or contact information. */
  lookupSupportPartnerAuthorities: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Support_LookupSupportPartnerAuthoritiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_LookupSupportPartnerAuthoritiesWSRequest"];
      };
    };
  };
  /** Removes a support authority from the organization, revoking all access permissions and terminating any active sessions for the specified authority. */
  removeSupportAuthority: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Support_RemoveSupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_RemoveSupportAuthorityWSRequest"];
      };
    };
  };
  /** Disables login access for a support authority and terminates all active sessions, preventing further authentication attempts. */
  revokeSupportAuthorityAccess: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Support_RevokeSupportAuthorityAccessWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_RevokeSupportAuthorityAccessWSRequest"];
      };
    };
  };
  /** Updates the configuration of an existing support authority, including permissions, access settings, expiration dates, and contact information. */
  updateSupportAuthority: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Support_UpdateSupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_UpdateSupportAuthorityWSRequest"];
      };
    };
  };
  /** Retrieves a specific tvOs configuration by UUID, returning the detailed settings and parameters for a particular Apple TV client. */
  getTvOsConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tvos_GetTvOsConfigWsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tvos_GetTvOsConfigWsRequest"];
      };
    };
  };
  /** Retrieves all tvOs configurations for the organization, providing a list of all Apple TV client configurations and their settings. */
  getTvOsConfigsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tvos_GetTvOsConfigsForOrgWsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tvos_GetTvOsConfigsForOrgWsRequest"];
      };
    };
  };
  /** Updates the configuration for a tvOs client, allowing modification of settings and parameters for Apple TV applications. */
  updateTvOsConfig: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Tvos_UpdateTvOsConfigWsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tvos_UpdateTvOsConfigWsRequest"];
      };
    };
  };
  /** Deletes the image associated with a specific access controlled door, removing the file from S3 storage. */
  deleteAccessControlledDoorPicture: {
    parameters: {
      path: {
        accessControlledDoorUuidStr: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  /** Uploads an image for a specific access controlled door, supporting various image formats with size validation and automatic storage to S3. */
  uploadAccessControlledDoorPicture: {
    parameters: {
      path: {
        accessControlledDoorUuidStr: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Uploads images for badge templates with associated metadata, supporting JPEG and PNG formats with size validation and automatic S3 storage. */
  uploadBadgeTemplateImages: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Uploads multiple user profile pictures in a single request, supporting up to 100 photos with automatic user matching based on filename or metadata. Each photo must be <= 5MB. */
  bulkUploadUserProfilePhotos: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Uploads a company logo image, supporting various formats including JPEG, PNG, BMP, GIF, WebP, and PSD, and updates the organization's logo URL. */
  uploadCompanyLogo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Uploads error log files for debugging purposes, storing them in a dedicated S3 bucket for error tracking and analysis. */
  uploadErrors: {
    parameters: {
      path: {
        fileName: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Uploads a new floorplan image for a location, supporting multiple formats including JPEG, PNG, PDF, WebP, and SVG with automatic conversion to JPEG for SVG files. */
  uploadNewFloorPlan: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Updates an existing floorplan image for a location using the specified floorplan UUID, supporting multiple formats with automatic format conversion. */
  uploadExistingFloorPlan: {
    parameters: {
      path: {
        floorPlanUuid: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Uploads a profile picture for a specific guest by email address, supporting various image formats with size validation and automatic cache-busting for browser compatibility. */
  uploadGuestProfilePicture: {
    parameters: {
      path: {
        guestEmail: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Uploads a logo image for keypad devices, generating a unique UUID and storing the image with proper metadata and organization association. */
  uploadKeypadLogo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Uploads a logo image for Rhombus key devices, generating a unique UUID and storing the image with proper metadata and organization association. */
  uploadRhombusKeyLogo: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Uploads an image to be associated with a sensor as a thumbnail, supporting JPEG format with automatic image normalization and orientation correction. */
  uploadSensorThumbnails: {
    parameters: {
      path: {
        sensorUuid: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "image/jpeg": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Deletes the profile picture for a specific user, removing the image file from S3 storage and clearing the user's profile photo association. */
  deleteUserProfilePicture: {
    parameters: {
      path: {
        userUuidStr: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  /** Uploads a profile picture for a specific user, supporting various image formats with size validation and automatic storage to S3 with audit logging. */
  uploadUserProfilePicture: {
    parameters: {
      path: {
        userUuidStr: string | null;
      };
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Assign a user to an email as long as the user is not currently assigned to one, with validation to prevent duplicate email associations. */
  assignEmailToUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_AssignEmailToUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_AssignEmailToUserWSRequest"];
      };
    };
  };
  /** Provisions credentials in bulk using a CSV file. Credentials can be assigned to existing users or left unassigned, depending on the data in the file. */
  bulkProvisionCredentials: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_BulkProvisionCredentialsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          file?: { [key: string]: unknown } | null;
        };
      };
    };
  };
  /** Change a user's email address with proper validation and security controls for email updates. */
  changeEmail: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_ChangeUserEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_ChangeUserEmailWSRequest"];
      };
    };
  };
  /** Change a user's password with current password validation and proper security controls. */
  changePassword: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_ChangeUserPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_ChangeUserPasswordWSRequest"];
      };
    };
  };
  /** Create a user for organization with specified name, email, and role permissions, supporting both client and partner user types with proper validation and audit logging. */
  createUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_CreateUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_CreateUserWSRequest"];
      };
    };
  };
  /** Delete a user from the organization with proper validation to prevent deletion of the last super admin and current user. */
  deleteUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_DeleteUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_DeleteUserWSRequest"];
      };
    };
  };
  /** Remove MFA for current user, disabling multi-factor authentication for the authenticated user. */
  deleteVirtualMfaDeviceForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_DeleteVirtualMfaDeviceForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_DeleteVirtualMfaDeviceForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieve a specific user by UUID with complete user details and associated information. */
  findUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_FindUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_FindUserWSRequest"];
      };
    };
  };
  /** Retrieve a specific user by email address with complete user details and associated information. */
  findUserByEmail: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_FindUserByEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_FindUserByEmailWSRequest"];
      };
    };
  };
  /** Returns format for bulk provisioning credentials, providing CSV template examples and field explanations based on access control configuration. */
  getBulkProvisionCredentialsFormat: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_GetBulkProvisionCredentialsFormatWSResponse"];
        };
      };
    };
  };
  /** Returns format for importing users, providing CSV template examples and field explanations based on access control configuration. */
  getImportUsersFormat: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_GetImportUsersFormatWSResponse"];
        };
      };
    };
  };
  /** Get list of all partners in organization with partner-specific user details and permissions. */
  getPartnerUsersInOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerUsersInOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerUsersInOrgWSRequest"];
      };
    };
  };
  /** Retrieve the RhombusKey mobile app config for a user. If it does not exist a default one is created and returned. */
  getRhombusKeyConfigForUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_GetRhombusKeyConfigForUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetRhombusKeyConfigForUserWSRequest"];
      };
    };
  };
  /** Get user's customization flags for UI preferences and user experience settings. */
  getUserCustomizationFlags: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_GetUserCustomizationFlagsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetUserCustomizationFlagsWSRequest"];
      };
    };
  };
  /** Get list of all users in organization with complete user details, permissions, notification settings, and partner information. */
  getUsersInOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_GetUsersInOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetUsersInOrgWSRequest"];
      };
    };
  };
  /** Gets a reduced amount of information about users in the organization to be used for reports, providing streamlined user data for reporting purposes. */
  getUsersInOrgForReports: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_GetUsersInOrgForReportsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetUsersInOrgForReportsWSRequest"];
      };
    };
  };
  /** Get details about MFA for current user, including device status and configuration information. */
  getVirtualMfaDeviceForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_GetVirtualMfaDeviceForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetVirtualMfaDeviceForCurrentUserWSRequest"];
      };
    };
  };
  /** Imports users in CSV format with support for user details, roles, groups, credentials, and custom metadata fields. Processes users in batches with duplicate detection and validation. */
  importUsers: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_ImportUsersWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          file?: { [key: string]: unknown } | null;
        };
      };
    };
  };
  /** Create a new template user metadata field that will be applicable to all users in the organization, allowing custom field definitions for user data. */
  createUserMetadataFieldTemplate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_metadata_CreateUserMetadataFieldTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_CreateUserMetadataFieldTemplateWSRequest"];
      };
    };
  };
  /** Deletes the specified user's value stored for the specified template, removing the custom field value while preserving the template definition. */
  deleteUserMetadataField: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_metadata_DeleteUserMetadataFieldWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_DeleteUserMetadataFieldWSRequest"];
      };
    };
  };
  /** Delete a template user metadata field. THIS WILL DELETE THE CUSTOM FIELD AND USER DATA FOR THIS FIELD, permanently removing the field definition and all associated user values. */
  deleteUserMetadataFieldTemplate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_metadata_DeleteUserMetadataFieldTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_DeleteUserMetadataFieldTemplateWSRequest"];
      };
    };
  };
  /** Find all template user metadata fields for the organization, returning the complete list of custom field definitions available for users. */
  findUserMetadataFieldTemplates: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_metadata_FindUserMetadataFieldTemplatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_FindUserMetadataFieldTemplatesWSRequest"];
      };
    };
  };
  /** Returns the org template metadata fields and the queried users stored values for those fields if they've been set, providing complete metadata information for a specific user. */
  findUserMetadataFields: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_metadata_FindUserMetadataFieldsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_FindUserMetadataFieldsWSRequest"];
      };
    };
  };
  /** Saves custom metadata values for the user specified. Template IDs that do not map to an actual org metadata template are ignored and values for omitted Template IDs are left as-is. */
  saveUserMetadataFields: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_metadata_SaveUserMetadataFieldsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_SaveUserMetadataFieldsWSRequest"];
      };
    };
  };
  /** Update a template user metadata field that will be applicable to all users, allowing modification of existing custom field definitions. */
  updateUserMetadataFieldTemplate: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_metadata_UpdateUserMetadataFieldTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_UpdateUserMetadataFieldTemplateWSRequest"];
      };
    };
  };
  /** Send SMS with link to download mobile app to the specified phone number using AWS SNS. */
  sendMobileDownloadSMS: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_SendMobileDownloadSMSWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SendMobileDownloadSMSWSRequest"];
      };
    };
  };
  /** Send partner an email to access client account with proper access credentials and instructions. */
  sendPartnerAccessGrantedEmail: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_SendPartnerAccessGrantedEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SendPartnerAccessGrantedEmailWSRequest"];
      };
    };
  };
  /** Send a rhombus key welcome email to a user with mobile app download instructions and setup information. */
  sendRhombusKeyUserWelcomeEmail: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_SendRhombusKeyUserWelcomeEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SendRhombusKeyUserWelcomeEmailWSRequest"];
      };
    };
  };
  /** Send a welcome email to a user with organization-specific branding and welcome information. */
  sendUserWelcomeEmail: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_SendUserWelcomeEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SendUserWelcomeEmailWSRequest"];
      };
    };
  };
  /** Configure MFA for current user with virtual device setup and QR code generation. */
  setupVirtualMfaDeviceForCurrentUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_SetupVirtualMfaDeviceForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SetupVirtualMfaDeviceForCurrentUserWSRequest"];
      };
    };
  };
  /** Update a partner's details with partner-specific validation and audit logging. */
  updatePartnerUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_UpdatePartnerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdatePartnerWSRequest"];
      };
    };
  };
  /** Update notification settings for partner user with partner-specific notification configurations. */
  updatePartnerUserNotificationSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_UpdatePartnerUserNotificationSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdatePartnerUserNotificationSettingsWSRequest"];
      };
    };
  };
  /** Update the RhombusKey mobile app settings for the user, including access permissions and app configuration. */
  updateRhombusKeySettingsForUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_UpdateRhombusKeySettingsForUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateRhombusKeySettingsForUserWSRequest"];
      };
    };
  };
  /** Update a user's details, DEPRECATED[4/28/2025]: use updateUserSelective for better field-level control. */
  updateUser: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserWSRequest"];
      };
    };
  };
  /** Update user's customization flags for UI preferences and user experience settings. */
  updateUserCustomizationFlags: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserCustomizationFlagsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserCustomizationFlagsWSRequest"];
      };
    };
  };
  /** Update notification settings for user with various notification channels and preferences. */
  updateUserNotificationSettings: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserNotificationSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserNotificationSettingsWSRequest"];
      };
    };
  };
  /** Selectively updates a user's details. Omitted fields are ignored but fields with null will unset a value, providing granular control over user updates. */
  updateUserSelective: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserSelectiveWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserSelectiveWSRequest"];
      };
    };
  };
  /** Add a label to a vehicle */
  addVehicleLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_AddVehicleLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_AddVehicleLabelWSRequest"];
      };
    };
  };
  /** Associate vehicle events to a saved vehicle */
  associateEventsToVehicle: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_AssociateEventsToVehicleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_AssociateEventsToVehicleWSRequest"];
      };
    };
  };
  /** Delete a saved vehicle */
  deleteVehicle: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_DeleteVehicleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_DeleteVehicleWSRequest"];
      };
    };
  };
  /** Get recent vehicle events for organization. Use /vehicle/getVehicleEvents instead. */
  getRecentVehicleEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsWSRequest"];
      };
    };
  };
  /** Get recent vehicle events for a location. Use /vehicle/getVehicleEvents instead. */
  getRecentVehicleEventsByLocation: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsByLocationWSRequest"];
      };
    };
  };
  /** Get recent vehicle events for specified vehicle. Use /vehicle/getVehicleEvents instead. */
  getRecentVehicleEventsForVehicle: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsForVehicleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsForVehicleWSRequest"];
      };
    };
  };
  /** Get vehicle events with filters and additive queries */
  getVehicleEvents: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetVehicleEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetVehicleEventsWSRequest"];
      };
    };
  };
  /** Get all vehicle labels for organization */
  getVehicleLabelsForOrg: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetVehicleLabelsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetVehicleLabelsForOrgWSRequest"];
      };
    };
  };
  /** Get details of all saved vehicles in organization */
  getVehicles: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetVehiclesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetVehiclesWSRequest"];
      };
    };
  };
  /** Remove a label to a vehicle */
  removeVehicleLabel: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_RemoveVehicleLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_RemoveVehicleLabelWSRequest"];
      };
    };
  };
  /** Report a mis-detected license plate event.  This sends the image/clip to Rhombus to better train AI models and removes the event */
  reportVehicleEvent: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_ReportVehicleEventResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_ReportVehicleEventRequest"];
      };
    };
  };
  /** Name and save a vehicle based on license plate number */
  saveVehicle: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle_SaveVehicleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_SaveVehicleWSRequest"];
      };
    };
  };
  /** Use /cancelSpliceV2 instead */
  cancelSplice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_CancelSpliceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_CancelSpliceWSRequest"];
      };
    };
  };
  /** Cancel a spliced clip request */
  cancelSpliceV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_CancelSpliceV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_CancelSpliceV2WSRequest"];
      };
    };
  };
  /** Share multiple timelapses in one link */
  createSharedTimelapseGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_CreateSharedTimelapseGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_CreateSharedTimelapseGroupWSRequest"];
      };
    };
  };
  /** Delete a shared timelapse link */
  deleteSharedTimelapseGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_DeleteSharedTimelapseGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_DeleteSharedTimelapseGroupWSRequest"];
      };
    };
  };
  /** Delete a timelapse */
  deleteTimelapseClips: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_DeleteTimelapseClipsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_DeleteTimelapseClipsWSRequest"];
      };
    };
  };
  /** Generate a timelapse */
  generateTimelapseClip: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_GenerateTimelapseClipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GenerateTimelapseClipWSRequest"];
      };
    };
  };
  /** Generate URL to get an exact frame with optional crop from a camera */
  getExactFrameUri: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_GetExactFrameUriWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetExactFrameUriWSRequest"];
      };
    };
  };
  /** Get the max splice duration an organization can set */
  getMaxSpliceDuration: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_GetMaxSpliceDurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetMaxSpliceDurationWSRequest"];
      };
    };
  };
  /** Get details of all shared timelapse links for organization */
  getSharedTimelapseGroups: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_GetSharedTimelapseGroupsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetSharedTimelapseGroupsWSRequest"];
      };
    };
  };
  /** Get all spliced clips in progress */
  getSplicedClipsInProgress: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_GetSplicedClipsInProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetSplicedClipsInProgressWSRequest"];
      };
    };
  };
  /** Get all timelapse clips for organization */
  getTimelapseClips: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_GetTimelapseClipsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetTimelapseClipsWSRequest"];
      };
    };
  };
  /** Get information about earliest available timelapse images for cameras */
  getTimelapseMetadata: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_GetTimelapseMetadataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetTimelapseMetadataWSRequest"];
      };
    };
  };
  /** Send a request to retry splicing a clip */
  retrySplice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_RetrySpliceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_RetrySpliceWSRequest"];
      };
    };
  };
  /** Use /CreateSharedTimelapseGroup instead */
  shareTimelapseClips: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_ShareTimelapseClipsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_ShareTimelapseClipsWSRequest"];
      };
    };
  };
  /** Use /spliceV3 instead */
  splice: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_SpliceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_SpliceWSRequest"];
      };
    };
  };
  /** Send a request to create a single image from a point in time */
  spliceFrame: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_SpliceFrameWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_SpliceFrameWSRequest"];
      };
    };
  };
  /** Use /spliceV3 instead */
  spliceV2: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_SpliceV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_SpliceV2WSRequest"];
      };
    };
  };
  /** Send a request to create an arbitrary clip for multiple cameras */
  spliceV3: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_SpliceV3WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_SpliceV3WSRequest"];
      };
    };
  };
  /** Update title, description, or expiration on a shared timelapse link */
  updateSharedTimelapseGroup: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_UpdateSharedTimelapseGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_UpdateSharedTimelapseGroupWSRequest"];
      };
    };
  };
  /** Update a timelapse clip's editable metadata */
  updateTimelapseClipMetadata: {
    parameters: {
      header: {
        /** Authentication scheme indicator ("api-token"). */
        "x-auth-scheme": components["parameters"]["XAuthSchemeParam"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Video_UpdateTimelapseClipMetadataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_UpdateTimelapseClipMetadataWSRequest"];
      };
    };
  };
}


export enum ACUDoorCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum ACUDoorLicenseLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum ACUDoorLicenseProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum ACUDoorLicenseStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum AbsoluteSecondsScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum AccessControlAuthenticationResultEnumType {
  ACCEPTED = "ACCEPTED",
  REJECTED = "REJECTED",
  ERROR = "ERROR",
  NA = "NA",
}

export enum AccessControlAuthorizationResultEnumType {
  ALLOWED = "ALLOWED",
  DENIED = "DENIED",
  DISABLED = "DISABLED",
  ERROR = "ERROR",
  NA = "NA",
}

export enum AccessControlCredentialEnumType {
  STANDARD_CSN = "STANDARD_CSN",
  RHOMBUS_SECURE_CSN = "RHOMBUS_SECURE_CSN",
  RHOMBUS_SECURE_MOBILE = "RHOMBUS_SECURE_MOBILE",
  PIN_CODE = "PIN_CODE",
  WIEGAND_H10301 = "WIEGAND_H10301",
  WIEGAND_H10304 = "WIEGAND_H10304",
  WIEGAND_D10202 = "WIEGAND_D10202",
  WIEGAND_64BIT_RAW = "WIEGAND_64BIT_RAW",
}

export enum AccessControlCredentialWorkflowStatusEnumType {
  ACTIVE = "ACTIVE",
  UNASSIGNED = "UNASSIGNED",
  SUSPENDED = "SUSPENDED",
  REVOKED = "REVOKED",
}

export enum AccessControlUnitTamperSourceEnumType {
  PROX = "PROX",
  ACCEL = "ACCEL",
  SWITCH = "SWITCH",
  NA = "NA",
}

export enum AccessControlledDoorPolicyAlertTypeEnum {
  POLICY_ALERT_V2 = "POLICY_ALERT_V2",
  ACCESS_CONTROLLED_DOOR_POLICY_ALERT = "ACCESS_CONTROLLED_DOOR_POLICY_ALERT",
}

export enum AccessControlledDoorStateEnumType {
  UNLOCKED = "UNLOCKED",
  ACCESS_CONTROLLED = "ACCESS_CONTROLLED",
}

export enum AccessControlledDoorSubTypeEnum {
  RHOMBUS = "RHOMBUS",
  APERIO = "APERIO",
}

export enum MinimalSubTypeEnum {
  RHOMBUS = "RHOMBUS",
  APERIO = "APERIO",
}

export enum BaseSendUserPresenceForCurrentUserWsResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum SendUserPresenceForCurrentUserErrorWsResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum SendUserPresenceForCurrentUserSuccessWsResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum UnlockAccessControlledDoorErrorWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum UnlockAccessControlledDoorErrorWSResponseErrorTypeEnum {
  FAILED_SENDING_ACU_UNLOCK_REQUEST = "FAILED_SENDING_ACU_UNLOCK_REQUEST",
  DOOR_NOT_CONFIGURED_WITH_LOCK = "DOOR_NOT_CONFIGURED_WITH_LOCK",
}

export enum UnlockAccessControlledDoorForCurrentUserErrorWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum UnlockAccessControlledDoorForCurrentUserErrorWSResponseErrorTypeEnum {
  INACTIVE_CREDENTIAL = "INACTIVE_CREDENTIAL",
  FAILED_SENDING_ACU_UNLOCK_REQUEST = "FAILED_SENDING_ACU_UNLOCK_REQUEST",
  GEOFENCE_RESTRICTED = "GEOFENCE_RESTRICTED",
  DOOR_NOT_CONFIGURED_WITH_LOCK = "DOOR_NOT_CONFIGURED_WITH_LOCK",
}

export enum UnlockAccessControlledDoorForCurrentUserSuccessWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum UnlockAccessControlledDoorSuccessWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum BaseProvisionMobileAccessControlCredentialForCurrentUserWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum BaseUnlockAccessControlledDoorForCurrentUserWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum BaseUnlockAccessControlledDoorWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponseErrorTypeEnum {
  USER_HAS_MAX_ALLOWED_CREDENTIALS = "USER_HAS_MAX_ALLOWED_CREDENTIALS",
}

export enum ProvisionMobileAccessControlCredentialForCurrentUserSuccessWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum ActionEnum {
  NOTIFY_USERS = "NOTIFY_USERS",
  UNKNOWN = "UNKNOWN",
}

export enum ActivityEnum {
  SOUND_LOUD = "SOUND_LOUD",
  SOUND_GUN_SHOT = "SOUND_GUN_SHOT",
  TAMPER = "TAMPER",
  VISUAL_TAMPER = "VISUAL_TAMPER",
  MOTION_TAMPER = "MOTION_TAMPER",
  MOTION = "MOTION",
  MOTION_HUMAN = "MOTION_HUMAN",
  MOTION_CAR = "MOTION_CAR",
  MOTION_ANIMAL = "MOTION_ANIMAL",
  FACE = "FACE",
  FACE_IDENTIFIED = "FACE_IDENTIFIED",
  FACE_UNIDENTIFIED = "FACE_UNIDENTIFIED",
  FACE_BLACKLISTED = "FACE_BLACKLISTED",
  FACE_ALERT = "FACE_ALERT",
  POSE_ANOMALOUS = "POSE_ANOMALOUS",
  POSE_FALL = "POSE_FALL",
  LICENSEPLATE = "LICENSEPLATE",
  LICENSEPLATE_IDENTIFIED = "LICENSEPLATE_IDENTIFIED",
  LICENSEPLATE_UNIDENTIFIED = "LICENSEPLATE_UNIDENTIFIED",
  LICENSEPLATE_ALERT = "LICENSEPLATE_ALERT",
  LICENSEPLATE_BLACKLISTED = "LICENSEPLATE_BLACKLISTED",
  LICENSEPLATE_TRUSTED = "LICENSEPLATE_TRUSTED",
  PEOPLECOUNT_HIGH = "PEOPLECOUNT_HIGH",
  PEOPLECOUNT_HIGH_RESET = "PEOPLECOUNT_HIGH_RESET",
  PEOPLECOUNT_LOW = "PEOPLECOUNT_LOW",
  PEOPLECOUNT_LOW_RESET = "PEOPLECOUNT_LOW_RESET",
  HUMAN_ENTER = "HUMAN_ENTER",
  HUMAN_EXIT = "HUMAN_EXIT",
  CAR_ENTER = "CAR_ENTER",
  CAR_EXIT = "CAR_EXIT",
  TEMPERATURE_EXCEEDED_HIGH = "TEMPERATURE_EXCEEDED_HIGH",
  TEMPERATURE_EXCEEDED_LOW = "TEMPERATURE_EXCEEDED_LOW",
  HUMIDITY_EXCEEDED_HIGH = "HUMIDITY_EXCEEDED_HIGH",
  HUMIDITY_EXCEEDED_LOW = "HUMIDITY_EXCEEDED_LOW",
  PM25_EXCEEDED_HIGH = "PM25_EXCEEDED_HIGH",
  TVOC_EXCEEDED_HIGH = "TVOC_EXCEEDED_HIGH",
  ETOH_EXCEEDED_HIGH = "ETOH_EXCEEDED_HIGH",
  IAQ_EXCEEDED_HIGH = "IAQ_EXCEEDED_HIGH",
  CO2_EXCEEDED_HIGH = "CO2_EXCEEDED_HIGH",
  CO2_EXCEEDED_LOW = "CO2_EXCEEDED_LOW",
  PROBE_TEMPERATURE_EXCEEDED_HIGH = "PROBE_TEMPERATURE_EXCEEDED_HIGH",
  PROBE_TEMPERATURE_EXCEEDED_LOW = "PROBE_TEMPERATURE_EXCEEDED_LOW",
  PROBE_DISCONNECTED = "PROBE_DISCONNECTED",
  PROBE_CONNECTED = "PROBE_CONNECTED",
  HEAT_INDEX_EXCEEDED_HIGH = "HEAT_INDEX_EXCEEDED_HIGH",
  PRESSURE_EXCEEDED_HIGH = "PRESSURE_EXCEEDED_HIGH",
  PRESSURE_EXCEEDED_LOW = "PRESSURE_EXCEEDED_LOW",
  PM10_EXCEEDED_HIGH = "PM10_EXCEEDED_HIGH",
  PM40_EXCEEDED_HIGH = "PM40_EXCEEDED_HIGH",
  PM100_EXCEEDED_HIGH = "PM100_EXCEEDED_HIGH",
  VOC_IDX_EXCEEDED_HIGH = "VOC_IDX_EXCEEDED_HIGH",
  NOX_IDX_EXCEEDED_HIGH = "NOX_IDX_EXCEEDED_HIGH",
  FORMALDEHYDE_EXCEEDED_HIGH = "FORMALDEHYDE_EXCEEDED_HIGH",
  CARBON_MONOXIDE_EXCEEDED_HIGH = "CARBON_MONOXIDE_EXCEEDED_HIGH",
  AQI_EXCEEDED_HIGH = "AQI_EXCEEDED_HIGH",
  DOOR_AJAR = "DOOR_AJAR",
  DOOR_OPENED = "DOOR_OPENED",
  DOOR_CLOSED = "DOOR_CLOSED",
  BUTTON_SINGLE_PRESSED = "BUTTON_SINGLE_PRESSED",
  BUTTON_DOUBLE_PRESSED = "BUTTON_DOUBLE_PRESSED",
  BUTTON_LONG_PRESSED = "BUTTON_LONG_PRESSED",
  TAG_ARRIVED = "TAG_ARRIVED",
  TAG_DEPARTED = "TAG_DEPARTED",
  TAG_MOVED = "TAG_MOVED",
  TAG_POSITIONING_CHANGED = "TAG_POSITIONING_CHANGED",
  TAG_BOUNDARY_INGRESS = "TAG_BOUNDARY_INGRESS",
  TAG_BOUNDARY_EGRESS = "TAG_BOUNDARY_EGRESS",
  TAG_PANIC = "TAG_PANIC",
  BADGE_AUTHORIZED = "BADGE_AUTHORIZED",
  BADGE_UNAUTHORIZED = "BADGE_UNAUTHORIZED",
  BADGE_UNAUTHORIZED_V2 = "BADGE_UNAUTHORIZED_V2",
  BADGE_AJAR = "BADGE_AJAR",
  BADGE_MANUAL = "BADGE_MANUAL",
  BADGE_FORCED_OPEN = "BADGE_FORCED_OPEN",
  BADGE_LOCKDOWN = "BADGE_LOCKDOWN",
  BADGE_REQUEST_TO_EXIT = "BADGE_REQUEST_TO_EXIT",
  BADGE_DURESS = "BADGE_DURESS",
  BADGE_SECURITY_BREACH = "BADGE_SECURITY_BREACH",
  BADGE_TAMPER = "BADGE_TAMPER",
  BADGE_FACE_MISMATCH = "BADGE_FACE_MISMATCH",
  POS_ORDER = "POS_ORDER",
  GUN_DETECT_EVENT = "GUN_DETECT_EVENT",
  IOT_SOUND_AGGRESSION = "IOT_SOUND_AGGRESSION",
  IOT_SOUND_HELP = "IOT_SOUND_HELP",
  IOT_AIR_CO = "IOT_AIR_CO",
  IOT_AIR_CO2 = "IOT_AIR_CO2",
  IOT_AIR_MASKING = "IOT_AIR_MASKING",
  IOT_AIR_THC = "IOT_AIR_THC",
  IOT_AIR_VAPE = "IOT_AIR_VAPE",
  IOT_AIR_VOC = "IOT_AIR_VOC",
  IOT_AIR_TEMP = "IOT_AIR_TEMP",
  IOT_TAMPER = "IOT_TAMPER",
  IOT_GUNSHOT = "IOT_GUNSHOT",
  IOT_BUTTON_SINGLE_CLICK = "IOT_BUTTON_SINGLE_CLICK",
  IOT_BUTTON_DOUBLE_CLICK = "IOT_BUTTON_DOUBLE_CLICK",
  IOT_BUTTON_HOLD = "IOT_BUTTON_HOLD",
  IOT_PANIC_BUTTON_TRIGGERED = "IOT_PANIC_BUTTON_TRIGGERED",
  AUDIO_SOUND_SIGNIFICANT = "AUDIO_SOUND_SIGNIFICANT",
  AUDIO_SOUND_LOUD = "AUDIO_SOUND_LOUD",
  AUDIO_SOUND_ABUSIVE = "AUDIO_SOUND_ABUSIVE",
  AUDIO_SOUND_GREETING = "AUDIO_SOUND_GREETING",
  AUDIO_SOUND_HELP = "AUDIO_SOUND_HELP",
  AUDIO_SOUND_GUN = "AUDIO_SOUND_GUN",
  AUDIO_SOUND_GLASS_BREAK = "AUDIO_SOUND_GLASS_BREAK",
  AUDIO_SOUND_ALARM_SMOKE_FIRE = "AUDIO_SOUND_ALARM_SMOKE_FIRE",
  AUDIO_SOUND_ALARM_CARBON_MONOXIDE = "AUDIO_SOUND_ALARM_CARBON_MONOXIDE",
  AUDIO_SOUND_SIREN = "AUDIO_SOUND_SIREN",
  CLIMATE_VOC = "CLIMATE_VOC",
  CLIMATE_VAPE = "CLIMATE_VAPE",
  CLIMATE_SMOKE = "CLIMATE_SMOKE",
  CLIMATE_THC = "CLIMATE_THC",
  CLIMATE_CO2 = "CLIMATE_CO2",
  CLIMATE_ETOH = "CLIMATE_ETOH",
  CLIMATE_PM25 = "CLIMATE_PM25",
  CLIMATE_IAQ = "CLIMATE_IAQ",
  CLIMATE_LEAK = "CLIMATE_LEAK",
  SOUND_AGGRESSION = "SOUND_AGGRESSION",
  SOUND_HELP = "SOUND_HELP",
  AIR_CO = "AIR_CO",
  AIR_CO2 = "AIR_CO2",
  AIR_MASKING = "AIR_MASKING",
  AIR_THC = "AIR_THC",
  AIR_VAPE = "AIR_VAPE",
  AIR_VOC = "AIR_VOC",
  MASK_MISSING = "MASK_MISSING",
  HELMET_MISSING = "HELMET_MISSING",
  GLOVES_MISSING = "GLOVES_MISSING",
  PIR_OCCUPIED = "PIR_OCCUPIED",
  PIR_MOVEMENT = "PIR_MOVEMENT",
  PIR_VACANT = "PIR_VACANT",
  CUSTOM = "CUSTOM",
  VISITOR_ARRIVED = "VISITOR_ARRIVED",
  VISITOR_DEPARTED = "VISITOR_DEPARTED",
  AC_DR_CONNECTED = "AC_DR_CONNECTED",
  AC_DR_DISCONNECTED = "AC_DR_DISCONNECTED",
  AC_DPI_DOOR_OPEN = "AC_DPI_DOOR_OPEN",
  AC_DPI_DOOR_CLOSED = "AC_DPI_DOOR_CLOSED",
  AC_DPI_DOOR_AJAR = "AC_DPI_DOOR_AJAR",
  AC_DPI_DOOR_FORCED_OPEN = "AC_DPI_DOOR_FORCED_OPEN",
  AC_DSR_UNLOCKED = "AC_DSR_UNLOCKED",
  AC_DSR_LOCKED = "AC_DSR_LOCKED",
  AC_DB_TRIGGERED = "AC_DB_TRIGGERED",
  AC_PANIC_BUTTON_TRIGGERED = "AC_PANIC_BUTTON_TRIGGERED",
  AC_REMOTE_UNLOCK = "AC_REMOTE_UNLOCK",
  AC_BADGE_AUTHORIZED = "AC_BADGE_AUTHORIZED",
  AC_BADGE_UNAUTHORIZED = "AC_BADGE_UNAUTHORIZED",
  AC_BADGE_FACE_MISMATCH = "AC_BADGE_FACE_MISMATCH",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_TAMPER_PROX = "AC_TAMPER_PROX",
  AC_TAMPER_ACCEL = "AC_TAMPER_ACCEL",
  AC_TAMPER_SWITCH = "AC_TAMPER_SWITCH",
  AC_GR_ACTIVE = "AC_GR_ACTIVE",
  AC_GR_INACTIVE = "AC_GR_INACTIVE",
  AC_GI_ACTIVE = "AC_GI_ACTIVE",
  AC_GI_INACTIVE = "AC_GI_INACTIVE",
  AC_REX_ACTIVE = "AC_REX_ACTIVE",
  AC_REX_INACTIVE = "AC_REX_INACTIVE",
  AC_APERIO_DEVICE_DISCONNECTED = "AC_APERIO_DEVICE_DISCONNECTED",
  AC_APERIO_DEVICE_CONNECTED = "AC_APERIO_DEVICE_CONNECTED",
  AC_APERIO_DEVICE_REBOOT = "AC_APERIO_DEVICE_REBOOT",
  AC_APERIO_DEVICE_TAMPER = "AC_APERIO_DEVICE_TAMPER",
  AC_APERIO_LOW_BATTERY = "AC_APERIO_LOW_BATTERY",
  AC_APERIO_FLAT_BATTERY = "AC_APERIO_FLAT_BATTERY",
  AC_APERIO_OK_BATTERY = "AC_APERIO_OK_BATTERY",
  POWER_SWITCH_BATTERY = "POWER_SWITCH_BATTERY",
  POWER_SWITCH_PRIMARY = "POWER_SWITCH_PRIMARY",
  CUSTOM_LLM_BOOLEAN_TRUE = "CUSTOM_LLM_BOOLEAN_TRUE",
  CUSTOM_LLM_BOOLEAN_FALSE = "CUSTOM_LLM_BOOLEAN_FALSE",
  CUSTOM_LLM_THRESHOLD_EXCEEDED_LOW = "CUSTOM_LLM_THRESHOLD_EXCEEDED_LOW",
  CUSTOM_LLM_THRESHOLD_EXCEEDED_HIGH = "CUSTOM_LLM_THRESHOLD_EXCEEDED_HIGH",
  UNKNOWN = "UNKNOWN",
}

export enum AddOnLicenseEnum {
  CLOUD_ARCHIVING = "CLOUD_ARCHIVING",
  PERCEPTION = "PERCEPTION",
  POSE = "POSE",
  BEHAVIOR = "BEHAVIOR",
  VEHICLE = "VEHICLE",
  PEOPLE = "PEOPLE",
  PPE = "PPE",
  PEOPLE_ANALYTICS = "PEOPLE_ANALYTICS",
  UNKNOWN = "UNKNOWN",
}

export enum AirQualityIndexPollutantEnum {
  OZONE = "OZONE",
  PM2P5 = "PM2P5",
  PM10P0 = "PM10P0",
  CO = "CO",
  NO2 = "NO2",
  SO2 = "SO2",
  UNKNOWN = "UNKNOWN",
}

export enum AlertActionStatusEnum {
  SUCCESS = "SUCCESS",
  ERROR = "ERROR",
  PAUSED = "PAUSED",
  IGNORED = "IGNORED",
  MUTED = "MUTED",
  BACKOFF = "BACKOFF",
  UNKNOWN = "UNKNOWN",
}

export enum AlertMonitoringCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum AlertMonitoringLicenseLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum AlertMonitoringLicenseProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum AlertMonitoringLicenseStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum AlertMonitoringRulesEventTypeEnum {
  ALARM_CREATED = "ALARM_CREATED",
  ALARM_CANCELED = "ALARM_CANCELED",
  UNKNOWN = "UNKNOWN",
}

export enum AmModifiedByEventEnum {
  UPDATED = "UPDATED",
  CREATED = "CREATED",
  DELETED = "DELETED",
  ARMED = "ARMED",
  DISARMED = "DISARMED",
  NO_CHANGE = "NO_CHANGE",
}

export enum NoonlightWSSettingsMonitoringModeEnum {
  MANUAL = "MANUAL",
  SCHEDULED = "SCHEDULED",
  UNKNOWN = "UNKNOWN",
}

export enum ApiClientTypeEnum {
  PARTNER_DEVELOPER = "PARTNER_DEVELOPER",
  DEVELOPER = "DEVELOPER",
  INTERNAL_SALESFORCE = "INTERNAL_SALESFORCE",
  TVOS = "TVOS",
  KIOSK = "KIOSK",
  KEYPAD = "KEYPAD",
  SQUARE = "SQUARE",
  KISI = "KISI",
  OPENPATH = "OPENPATH",
  TOAST = "TOAST",
  BRIVO = "BRIVO",
  EXECUTABLE = "EXECUTABLE",
  HALO = "HALO",
  SALTO = "SALTO",
  BUTTERFLYMX = "BUTTERFLYMX",
  GENEA = "GENEA",
  PRODATAKEY = "PRODATAKEY",
  ENVOY = "ENVOY",
  AMT = "AMT",
  PIMLOC = "PIMLOC",
  PLACEOS = "PLACEOS",
  OMNIALERT = "OMNIALERT",
  FLIC = "FLIC",
  NINEONEONECELLULAR = "NINEONEONECELLULAR",
  CHATBOT = "CHATBOT",
  UNKNOWN = "UNKNOWN",
}

export enum ApiTokenAuthTypeEnum {
  API_TOKEN = "API_TOKEN",
  CERT = "CERT",
}

export enum AudioGatewayStatusEnum {
  SUCCESS = "SUCCESS",
  ERROR = "ERROR",
  BACKOFF = "BACKOFF",
  IGNORED = "IGNORED",
  INITIATED = "INITIATED",
  SUBMITTED = "SUBMITTED",
  UNKNOWN = "UNKNOWN",
}

export enum DeleteAudioGatewayWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum AuthDecisionSourceEnum {
  ACCESS_GRANT = "ACCESS_GRANT",
  ACCESS_REVOCATION = "ACCESS_REVOCATION",
  LOCKDOWN = "LOCKDOWN",
  FIRST_IN_SETTINGS = "FIRST_IN_SETTINGS",
  CONFIG = "CONFIG",
  ADMIN = "ADMIN",
  PRIVACY = "PRIVACY",
  ERROR = "ERROR",
  UNKNOWN = "UNKNOWN",
}

export enum AuxiliaryEnumType {
  integrated_generic_input = "integrated_generic_input",
  integrated_generic_relay = "integrated_generic_relay",
}

export enum AuxiliaryInputPhysicalPortEnumType {
  GPIO_INPUT = "GPIO_INPUT",
  GPIO_INPUT_SUPERVISED = "GPIO_INPUT_SUPERVISED",
}

export enum AuxiliaryRelayPhysicalPortEnumType {
  GPIO_OUTPUT = "GPIO_OUTPUT",
}

export enum BadgeTemplateElementEnum {
  CUSTOM_TEXT = "CUSTOM_TEXT",
  USER_METADATA = "USER_METADATA",
  USER_CUSTOM_METADATA = "USER_CUSTOM_METADATA",
  CUSTOM_IMAGE = "CUSTOM_IMAGE",
  USER_PROFILE_PHOTO = "USER_PROFILE_PHOTO",
}

export enum DeleteBadgeReaderWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum BaseCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum BaseClaimKeyExpirationEmailStateEnum {
  NINETY_DAY_EMAIL_SUCCEEDED = "NINETY_DAY_EMAIL_SUCCEEDED",
  NINETY_DAY_EMAIL_FAILED = "NINETY_DAY_EMAIL_FAILED",
  SIXTY_DAY_EMAIL_SUCCEEDED = "SIXTY_DAY_EMAIL_SUCCEEDED",
  SIXTY_DAY_EMAIL_FAILED = "SIXTY_DAY_EMAIL_FAILED",
  FOURTY_FIVE_DAY_EMAIL_SUCCEEDED = "FOURTY_FIVE_DAY_EMAIL_SUCCEEDED",
  FOURTY_FIVE_DAY_EMAIL_FAILED = "FOURTY_FIVE_DAY_EMAIL_FAILED",
  THIRTY_DAY_EMAIL_SUCCEEDED = "THIRTY_DAY_EMAIL_SUCCEEDED",
  THIRTY_DAY_EMAIL_FAILED = "THIRTY_DAY_EMAIL_FAILED",
  TWENTY_ONE_DAY_EMAIL_SUCCEEDED = "TWENTY_ONE_DAY_EMAIL_SUCCEEDED",
  TWENTY_ONE_DAY_EMAIL_FAILED = "TWENTY_ONE_DAY_EMAIL_FAILED",
  FOURTEEN_DAY_EMAIL_SUCCEEDED = "FOURTEEN_DAY_EMAIL_SUCCEEDED",
  FOURTEEN_DAY_EMAIL_FAILED = "FOURTEEN_DAY_EMAIL_FAILED",
  TEN_DAY_EMAIL_SUCCEEDED = "TEN_DAY_EMAIL_SUCCEEDED",
  TEN_DAY_EMAIL_FAILED = "TEN_DAY_EMAIL_FAILED",
  FIVE_DAY_EMAIL_SUCCEEDED = "FIVE_DAY_EMAIL_SUCCEEDED",
  FIVE_DAY_EMAIL_FAILED = "FIVE_DAY_EMAIL_FAILED",
  FOUR_DAY_EMAIL_SUCCEEDED = "FOUR_DAY_EMAIL_SUCCEEDED",
  FOUR_DAY_EMAIL_FAILED = "FOUR_DAY_EMAIL_FAILED",
  THREE_DAY_EMAIL_SUCCEEDED = "THREE_DAY_EMAIL_SUCCEEDED",
  THREE_DAY_EMAIL_FAILED = "THREE_DAY_EMAIL_FAILED",
  TWO_DAY_EMAIL_SUCCEEDED = "TWO_DAY_EMAIL_SUCCEEDED",
  TWO_DAY_EMAIL_FAILED = "TWO_DAY_EMAIL_FAILED",
  ONE_DAY_EMAIL_SUCCEEDED = "ONE_DAY_EMAIL_SUCCEEDED",
  ONE_DAY_EMAIL_FAILED = "ONE_DAY_EMAIL_FAILED",
  ZERO_DAY_EMAIL_SUCCEEDED = "ZERO_DAY_EMAIL_SUCCEEDED",
  ZERO_DAY_EMAIL_FAILED = "ZERO_DAY_EMAIL_FAILED",
  GRACE_PERIOD_EMAILS_IN_PROGRESS = "GRACE_PERIOD_EMAILS_IN_PROGRESS",
  GRACE_PERIOD_EMAILS_COMPLETED = "GRACE_PERIOD_EMAILS_COMPLETED",
  UNKNOWN = "UNKNOWN",
}

export enum BaseClaimKeyStateEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum BaseClaimKeyTypeEnum {
  NEW = "NEW",
  RENEWAL = "RENEWAL",
}

export enum BaseLicenseLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum BaseLicenseProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum BaseLicenseStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum BasePolicyAlertTypeEnum {
  POLICY_ALERT_V2 = "POLICY_ALERT_V2",
  ACCESS_CONTROLLED_DOOR_POLICY_ALERT = "ACCESS_CONTROLLED_DOOR_POLICY_ALERT",
}

export enum BaseSavedScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum MinimalStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum ButtonEnumType {
  integrated_generic_button = "integrated_generic_button",
  integrated_doorbell_button = "integrated_doorbell_button",
}

export enum ButtonModeEnum {
  PANIC = "PANIC",
  PROGRAMMABLE = "PROGRAMMABLE",
  DOORBELL = "DOORBELL",
  NONE = "NONE",
}

export enum ButtonPhysicalPortEnumType {
  GPIO_INPUT = "GPIO_INPUT",
  BUTTON_INPUT = "BUTTON_INPUT",
}

export enum ButtonPressEnum {
  NONE = "NONE",
  SINGLE = "SINGLE",
  DOUBLE = "DOUBLE",
  LONG = "LONG",
  INITIAL_PRESS = "INITIAL_PRESS",
  LONG_RELEASE = "LONG_RELEASE",
}

export enum Button_ButtonHealthDetailsEnum {
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NO_HEARTBEAT = "NO_HEARTBEAT",
  NONE = "NONE",
}

export enum Button_ButtonHealthEnum {
  GREEN = "GREEN",
  RED = "RED",
}

export enum CameraCrossCountingSettingsDirectionsEnum {
  INGRESS = "INGRESS",
  EGRESS = "EGRESS",
}

export enum CameraCrossCountingSettingsObjectTypeEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  FACE = "FACE",
  LPR = "LPR",
  POSE = "POSE",
  CLIP_EMBED = "CLIP_EMBED",
  UNKNOWN = "UNKNOWN",
}

export enum CameraCurrentStateConnectionStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  GREEN = "GREEN",
}

export enum CameraCurrentStateHealthStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  GREEN = "GREEN",
}

export enum CameraCurrentStateHealthStatusDetailsEnum {
  DISCONNECTED = "DISCONNECTED",
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NONE = "NONE",
}

export enum DeleteCameraWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum MinimalCameraConnectionStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  GREEN = "GREEN",
}

export enum MinimalCameraHealthStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  GREEN = "GREEN",
}

export enum MinimalCameraHealthStatusDetailsEnum {
  DISCONNECTED = "DISCONNECTED",
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NONE = "NONE",
}

export enum RebootCameraWSResponseStatusEnum {
  SUCCESS_REBOOT_SENT = "SUCCESS_REBOOT_SENT",
  FAILED_CAMERA_OFFLINE = "FAILED_CAMERA_OFFLINE",
  FAILED_CAMERA_NOT_AUTHORIZED = "FAILED_CAMERA_NOT_AUTHORIZED",
}

export enum SharedCameraCurrentStateConnectionStatusEnum {
  GREEN = "GREEN",
  RED = "RED",
}

export enum UpdateCameraFirmwareWSResponseStatusEnum {
  ALREADY_ON_THE_LATEST_FIRMWARE = "ALREADY_ON_THE_LATEST_FIRMWARE",
  DEVICE_ON_A_SPECIAL_FIRMWARE_AND_CANNOT_BE_UPDATED = "DEVICE_ON_A_SPECIAL_FIRMWARE_AND_CANNOT_BE_UPDATED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UNABLE_TO_REACH_DEVICE = "UNABLE_TO_REACH_DEVICE",
  FIRMWARE_UPDATE_ALREADY_IN_PROGESS = "FIRMWARE_UPDATE_ALREADY_IN_PROGESS",
  DEVICE_NOT_AUTHROIZED = "DEVICE_NOT_AUTHROIZED",
}

export enum UpdateCameraLineCrossingThresholdsWSRequestDirectionsEnum {
  INGRESS = "INGRESS",
  EGRESS = "EGRESS",
}

export enum UpdateCameraLineCrossingThresholdsWSRequestObjectTypeEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  FACE = "FACE",
  LPR = "LPR",
  POSE = "POSE",
  CLIP_EMBED = "CLIP_EMBED",
  UNKNOWN = "UNKNOWN",
}

export enum ChangeTypeEnum {
  REFRESH = "REFRESH",
  DELETE = "DELETE",
  CREATE = "CREATE",
  UPDATE = "UPDATE",
}

export enum ChatVisibilityEnum {
  ORG_WIDE = "ORG_WIDE",
  SELECT_USERS = "SELECT_USERS",
  PRIVATE = "PRIVATE",
  UNKNOWN = "UNKNOWN",
}

export enum CheckConditionOperatorEnum {
  GT = "GT",
  LT = "LT",
  LTE = "LTE",
  GTE = "GTE",
  EQ = "EQ",
}

export enum ClaimKeyExpirationEmailStateEnum {
  NINETY_DAY_EMAIL_SUCCEEDED = "NINETY_DAY_EMAIL_SUCCEEDED",
  NINETY_DAY_EMAIL_FAILED = "NINETY_DAY_EMAIL_FAILED",
  SIXTY_DAY_EMAIL_SUCCEEDED = "SIXTY_DAY_EMAIL_SUCCEEDED",
  SIXTY_DAY_EMAIL_FAILED = "SIXTY_DAY_EMAIL_FAILED",
  FOURTY_FIVE_DAY_EMAIL_SUCCEEDED = "FOURTY_FIVE_DAY_EMAIL_SUCCEEDED",
  FOURTY_FIVE_DAY_EMAIL_FAILED = "FOURTY_FIVE_DAY_EMAIL_FAILED",
  THIRTY_DAY_EMAIL_SUCCEEDED = "THIRTY_DAY_EMAIL_SUCCEEDED",
  THIRTY_DAY_EMAIL_FAILED = "THIRTY_DAY_EMAIL_FAILED",
  TWENTY_ONE_DAY_EMAIL_SUCCEEDED = "TWENTY_ONE_DAY_EMAIL_SUCCEEDED",
  TWENTY_ONE_DAY_EMAIL_FAILED = "TWENTY_ONE_DAY_EMAIL_FAILED",
  FOURTEEN_DAY_EMAIL_SUCCEEDED = "FOURTEEN_DAY_EMAIL_SUCCEEDED",
  FOURTEEN_DAY_EMAIL_FAILED = "FOURTEEN_DAY_EMAIL_FAILED",
  TEN_DAY_EMAIL_SUCCEEDED = "TEN_DAY_EMAIL_SUCCEEDED",
  TEN_DAY_EMAIL_FAILED = "TEN_DAY_EMAIL_FAILED",
  FIVE_DAY_EMAIL_SUCCEEDED = "FIVE_DAY_EMAIL_SUCCEEDED",
  FIVE_DAY_EMAIL_FAILED = "FIVE_DAY_EMAIL_FAILED",
  FOUR_DAY_EMAIL_SUCCEEDED = "FOUR_DAY_EMAIL_SUCCEEDED",
  FOUR_DAY_EMAIL_FAILED = "FOUR_DAY_EMAIL_FAILED",
  THREE_DAY_EMAIL_SUCCEEDED = "THREE_DAY_EMAIL_SUCCEEDED",
  THREE_DAY_EMAIL_FAILED = "THREE_DAY_EMAIL_FAILED",
  TWO_DAY_EMAIL_SUCCEEDED = "TWO_DAY_EMAIL_SUCCEEDED",
  TWO_DAY_EMAIL_FAILED = "TWO_DAY_EMAIL_FAILED",
  ONE_DAY_EMAIL_SUCCEEDED = "ONE_DAY_EMAIL_SUCCEEDED",
  ONE_DAY_EMAIL_FAILED = "ONE_DAY_EMAIL_FAILED",
  ZERO_DAY_EMAIL_SUCCEEDED = "ZERO_DAY_EMAIL_SUCCEEDED",
  ZERO_DAY_EMAIL_FAILED = "ZERO_DAY_EMAIL_FAILED",
  GRACE_PERIOD_EMAILS_IN_PROGRESS = "GRACE_PERIOD_EMAILS_IN_PROGRESS",
  GRACE_PERIOD_EMAILS_COMPLETED = "GRACE_PERIOD_EMAILS_COMPLETED",
  UNKNOWN = "UNKNOWN",
}

export enum ClaimKeyStateEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum ClaimKeyTypeEnum {
  NEW = "NEW",
  RENEWAL = "RENEWAL",
}

export enum ClaimKeySearchFilterExcludedStatesEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum ClaimKeySearchFilterIncludedStatesEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum ClientEnum {
  DEVICE = "DEVICE",
  MOBILE = "MOBILE",
  BROWSER = "BROWSER",
  BROWSER_V2 = "BROWSER_V2",
  BROWSER_PARTNER = "BROWSER_PARTNER",
  MOBILE_PARTNER = "MOBILE_PARTNER",
  ANONYMOUS = "ANONYMOUS",
  SHARE_ANONYMOUS = "SHARE_ANONYMOUS",
  SHARE_ANONYMOUS_V2 = "SHARE_ANONYMOUS_V2",
  SHARE_RAW = "SHARE_RAW",
  SHARE_SSO = "SHARE_SSO",
  TV_API = "TV_API",
  API = "API",
  API_TOKEN = "API_TOKEN",
  API_OAUTH_TOKEN = "API_OAUTH_TOKEN",
  FEDERATED_TOKEN = "FEDERATED_TOKEN",
  PARTNER_API = "PARTNER_API",
  PARTNER_API_TOKEN = "PARTNER_API_TOKEN",
  KEYPAD_API = "KEYPAD_API",
  INTERNAL_SALESFORCE = "INTERNAL_SALESFORCE",
  RHOMBUS_KEY_MOBILE = "RHOMBUS_KEY_MOBILE",
  KIOSK_CONSOLE = "KIOSK_CONSOLE",
  KIOSK_IOS_API = "KIOSK_IOS_API",
  CHATBOT = "CHATBOT",
}

export enum DeleteEnvironmentalGatewayWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum MinimalClimateStateHealthEnum {
  GREEN = "GREEN",
  RED = "RED",
}

export enum MinimalClimateStateHealthDetailsEnum {
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NO_HEARTBEAT = "NO_HEARTBEAT",
  NONE = "NONE",
}

export enum ClipBoundingBoxCustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum ClipSeekPointV2CustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum ClipVisibilityEnum {
  PRIVATE = "PRIVATE",
  ORG_WIDE = "ORG_WIDE",
}

export enum CloudArchivingStrategyEnum {
  WEEKLY_SCHEDULED = "WEEKLY_SCHEDULED",
  CONTINUOUS = "CONTINUOUS",
}

export enum RebootDeviceWSResponseResultEnum {
  REBOOT_SENT = "REBOOT_SENT",
  DEVICE_OFFLINE = "DEVICE_OFFLINE",
}

export enum ComponentBaseEnumType {
  reader = "reader",
  dpi = "dpi",
  relay = "relay",
  rex = "rex",
  aux = "aux",
  aperio = "aperio",
  button = "button",
}

export enum ComponentCompositeEnumType {
  AccessControlledDoor = "AccessControlledDoor",
}

export enum ComponentCompositeEnumType_Minimal {
  AccessControlledDoor = "AccessControlledDoor",
}

export enum ComponentCompositeShadowEnum {
  AccessControlledDoorShadow = "AccessControlledDoorShadow",
}

export enum ComponentEnumType {
  RhombusOsdpDoorReader = "RhombusOsdpDoorReader",
  OsdpDoorReader = "OsdpDoorReader",
  WiegandDoorReader = "WiegandDoorReader",
  IntegratedDoorPositionIndicator = "IntegratedDoorPositionIndicator",
  IntegratedRequestToExit = "IntegratedRequestToExit",
  IntegratedDoorRelay = "IntegratedDoorRelay",
  IntegratedGenericRelay = "IntegratedGenericRelay",
  IntegratedGenericInput = "IntegratedGenericInput",
  IntegratedGenericButton = "IntegratedGenericButton",
  AperioGateway = "AperioGateway",
  AperioDoorExtension = "AperioDoorExtension",
  AperioDoorRelay = "AperioDoorRelay",
  AperioDoorPositionIndicator = "AperioDoorPositionIndicator",
  AperioDoorReader = "AperioDoorReader",
  AperioDoorRequestToExit = "AperioDoorRequestToExit",
}

export enum ComponentEventEnumType {
  DoorbellEvent = "DoorbellEvent",
  DoorReaderStateChangeEvent = "DoorReaderStateChangeEvent",
  DoorRelayStateChangeEvent = "DoorRelayStateChangeEvent",
  DoorPositionIndicatorStateChangeEvent = "DoorPositionIndicatorStateChangeEvent",
  RequestToExitStateChangeEvent = "RequestToExitStateChangeEvent",
  CredentialReceivedEvent = "CredentialReceivedEvent",
  ButtonEvent = "ButtonEvent",
  GenericInputStateChangeEvent = "GenericInputStateChangeEvent",
  GenericRelayStateChangeEvent = "GenericRelayStateChangeEvent",
  AccessControlUnitTamperEvent = "AccessControlUnitTamperEvent",
  AccessControlUnitLocationLockdownStateEvent = "AccessControlUnitLocationLockdownStateEvent",
  DoorLocationLockdownStateEvent = "DoorLocationLockdownStateEvent",
  PanicButtonEvent = "PanicButtonEvent",
  AccessControlUnitBatteryStateChangeEvent = "AccessControlUnitBatteryStateChangeEvent",
  WaveToUnlockIntentExpiredEvent = "WaveToUnlockIntentExpiredEvent",
  DoorStateChangeEvent = "DoorStateChangeEvent",
  DoorAuthFirstInStateEvent = "DoorAuthFirstInStateEvent",
  DoorScheduleFirstInStateEvent = "DoorScheduleFirstInStateEvent",
  AccessControlUnitDoorFirstInStateEvent = "AccessControlUnitDoorFirstInStateEvent",
  AperioDoorExtensionStateEvent = "AperioDoorExtensionStateEvent",
  AperioActivatorStateEvent = "AperioActivatorStateEvent",
  AperioKeyCylinderStateEvent = "AperioKeyCylinderStateEvent",
  AperioDoorModeEvent = "AperioDoorModeEvent",
  AperioDoorHandleStateEvent = "AperioDoorHandleStateEvent",
  AperioGatewayStateEvent = "AperioGatewayStateEvent",
  AperioGatewayConnectionStateChangeEvent = "AperioGatewayConnectionStateChangeEvent",
  AperioDtcEvent = "AperioDtcEvent",
  AperioTamperStateEvent = "AperioTamperStateEvent",
}

export enum ComponentRelayOutputTypeEnum {
  TRANSIENT = "TRANSIENT",
  STEADY = "STEADY",
}

export enum ComponentSeekPointCustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum ComponentShadowEnumType {
  DoorReaderShadow = "DoorReaderShadow",
  DoorRelayShadow = "DoorRelayShadow",
  DoorPositionIndicatorShadow = "DoorPositionIndicatorShadow",
  RequestToExitShadow = "RequestToExitShadow",
  GenericRelayShadow = "GenericRelayShadow",
  GenericInputShadow = "GenericInputShadow",
  GenericButtonShadow = "GenericButtonShadow",
  AperioGatewayShadow = "AperioGatewayShadow",
  AperioDoorExtensionShadow = "AperioDoorExtensionShadow",
}

export enum CredentialSourceEnumType {
  UNKNOWN = "UNKNOWN",
  NFC = "NFC",
  BLE_WAVE = "BLE_WAVE",
  BLE = "BLE",
  WIEGAND = "WIEGAND",
  REMOTE = "REMOTE",
  REMOTE_ADMIN = "REMOTE_ADMIN",
  UNK_3P_OSDP = "UNK_3P_OSDP",
  APERIO_NFC = "APERIO_NFC",
  APERIO_LF = "APERIO_LF",
  APERIO_KEYPAD = "APERIO_KEYPAD",
  KEYPAD_WIEGAND = "KEYPAD_WIEGAND",
  KEYPAD_OSDP = "KEYPAD_OSDP",
  BLE_PROX = "BLE_PROX",
}

export enum CustomFootageSeekPointColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum CustomerShipmentShipmentCategoryEnum {
  RMA = "RMA",
  PURCHASE_ORDER = "PURCHASE_ORDER",
  TRIAL = "TRIAL",
  UNKNOWN = "UNKNOWN",
}

export enum CustomerShipmentShipmentEmailStateEnum {
  SHIPPING_CONFIRMATION_SUCCESS = "SHIPPING_CONFIRMATION_SUCCESS",
  SHIPPING_CONFIRMATION_FAILURE = "SHIPPING_CONFIRMATION_FAILURE",
  SHIPPING_SHIPPED_SUCCESS = "SHIPPING_SHIPPED_SUCCESS",
  SHIPPING_SHIPPED_FAILURE = "SHIPPING_SHIPPED_FAILURE",
  UNKNOWN = "UNKNOWN",
}

export enum CustomerShipmentShipmentStateEnum {
  CREATED = "CREATED",
  SHIPPED = "SHIPPED",
  DELIVERED = "DELIVERED",
  RETURN_REGISTERED = "RETURN_REGISTERED",
  RETURN_SENT = "RETURN_SENT",
  RETURN_DELIVERED = "RETURN_DELIVERED",
  COMPLETE = "COMPLETE",
  UNKNOWN = "UNKNOWN",
}

export enum DashboardStatusHealthStatusIndicatorEnum {
  GREEN = "GREEN",
  YELLOW = "YELLOW",
  RED = "RED",
}

export enum DeviceCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceCatalogItemLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum DeviceFacetEnum {
  V_ = "",
  v0 = "v0",
  v1 = "v1",
  v2 = "v2",
  v3 = "v3",
  a0 = "a0",
  v4 = "v4",
  v5 = "v5",
  v6 = "v6",
  v7 = "v7",
  v8 = "v8",
  v9 = "v9",
  v10 = "v10",
  v11 = "v11",
  v12 = "v12",
  v13 = "v13",
  v14 = "v14",
  v15 = "v15",
  v16 = "v16",
  v17 = "v17",
  v18 = "v18",
  v19 = "v19",
  v20 = "v20",
  v21 = "v21",
  v22 = "v22",
  v23 = "v23",
  v24 = "v24",
  v25 = "v25",
  v26 = "v26",
  v27 = "v27",
  v28 = "v28",
  v29 = "v29",
  v30 = "v30",
  v31 = "v31",
  v32 = "v32",
  v33 = "v33",
  v34 = "v34",
  v35 = "v35",
  v36 = "v36",
  v37 = "v37",
  v38 = "v38",
  v39 = "v39",
  v40 = "v40",
  v41 = "v41",
  v42 = "v42",
  v43 = "v43",
  v44 = "v44",
  v45 = "v45",
  v46 = "v46",
  v47 = "v47",
  v48 = "v48",
  v49 = "v49",
  v50 = "v50",
  v51 = "v51",
  a1 = "a1",
  a2 = "a2",
  a3 = "a3",
  a4 = "a4",
  a5 = "a5",
  a6 = "a6",
  a7 = "a7",
  a8 = "a8",
  a9 = "a9",
  a10 = "a10",
  a11 = "a11",
  a12 = "a12",
  a13 = "a13",
  a14 = "a14",
  a15 = "a15",
  a16 = "a16",
  a17 = "a17",
  a18 = "a18",
  a19 = "a19",
  a20 = "a20",
  a21 = "a21",
  a22 = "a22",
  a23 = "a23",
  a24 = "a24",
  a25 = "a25",
  a26 = "a26",
  a27 = "a27",
  a28 = "a28",
  a29 = "a29",
  a30 = "a30",
  a31 = "a31",
  a32 = "a32",
  a33 = "a33",
  a34 = "a34",
  a35 = "a35",
  a36 = "a36",
  a37 = "a37",
  a38 = "a38",
  a39 = "a39",
  a40 = "a40",
  a41 = "a41",
  a42 = "a42",
  a43 = "a43",
  a44 = "a44",
  a45 = "a45",
  a46 = "a46",
  a47 = "a47",
  a48 = "a48",
  a49 = "a49",
  a50 = "a50",
  a51 = "a51",
}

export enum DeviceFeatureEnum {
  COLOR_SEARCH = "COLOR_SEARCH",
  FACE_RECOGNITION = "FACE_RECOGNITION",
  LICENSE_PLATE_RECOGNITION = "LICENSE_PLATE_RECOGNITION",
  PEOPLE_COUNTING = "PEOPLE_COUNTING",
  PPE_DETECTION = "PPE_DETECTION",
  UNUSUAL_BEHAVIOR_DETECTION = "UNUSUAL_BEHAVIOR_DETECTION",
  VEHICLE_COUNTING = "VEHICLE_COUNTING",
  CAMERA_ENTERPRISE_CLOUD_ARCHIVING = "CAMERA_ENTERPRISE_CLOUD_ARCHIVING",
  TIMELAPSE = "TIMELAPSE",
  VISUAL_TAMPER = "VISUAL_TAMPER",
  AUDIO_AI_ANALYTICS = "AUDIO_AI_ANALYTICS",
  AUDIO_ENTERPRISE_CLOUD_ARCHIVING = "AUDIO_ENTERPRISE_CLOUD_ARCHIVING",
  AUDIO_SPEAKER_ENABLED = "AUDIO_SPEAKER_ENABLED",
  BADGE_READER_ENTERPRISE_CLOUD_ARCHIVING = "BADGE_READER_ENTERPRISE_CLOUD_ARCHIVING",
  OBJECT_SEARCH = "OBJECT_SEARCH",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceHealthStatusDetailsEnum {
  DISCONNECTED = "DISCONNECTED",
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NOT_RECORDING = "NOT_RECORDING",
  MALFUNCTIONING_MODULES = "MALFUNCTIONING_MODULES",
  CALIBRATING = "CALIBRATING",
  DELAYED = "DELAYED",
  NONE = "NONE",
}

export enum DeviceLicenseFamilyStatsDeviceLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum DeviceLicenseLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum DeviceLicenseLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceLicenseProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceLicenseStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum DeviceOrientationEnum {
  CEILING = "CEILING",
  FLOOR = "FLOOR",
  WALL = "WALL",
  WALL_CROOKED = "WALL_CROOKED",
  INDETERMINATE = "INDETERMINATE",
}

export enum DeviceStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  YELLOW = "YELLOW",
  GREEN = "GREEN",
}

export enum DeviceTargetScopeEnum {
  ORG = "ORG",
  LOCATION = "LOCATION",
  DEVICE = "DEVICE",
}

export enum DeviceTypeEnum {
  BLE_TRACKER = "BLE_TRACKER",
  CAMERA = "CAMERA",
  DOOR_SENSOR = "DOOR_SENSOR",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  OCCUPANCY_SENSOR = "OCCUPANCY_SENSOR",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  EXECUTABLE = "EXECUTABLE",
  BADGE_READER = "BADGE_READER",
  DOOR_CONTROLLER = "DOOR_CONTROLLER",
  BLE_BUTTON = "BLE_BUTTON",
  IO_BOARD = "IO_BOARD",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
  NVR = "NVR",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceVideoSettingsSelectiveUpdateIrFilterModeEnum {
  ON = "ON",
  OFF = "OFF",
  AUTO = "AUTO",
}

export enum DeviceVideoSettingsSelectiveUpdateIrLedsModeEnum {
  ON = "ON",
  OFF = "OFF",
  AUTO = "AUTO",
}

export enum ExternalDeviceSettingsSelectiveUpdateLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum ExternalDeviceSettingsSelectiveUpdateLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum ExternalDeviceSettingsSelectiveUpdateSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum ExternalDeviceSettingsSelectiveUpdateThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum ExternalReadableDeviceSettingsLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum ExternalReadableDeviceSettingsLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum ExternalReadableDeviceSettingsSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum ExternalReadableDeviceSettingsThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum ExternalReadableDeviceVideoSettingsIrFilterModeEnum {
  ON = "ON",
  OFF = "OFF",
  AUTO = "AUTO",
}

export enum ExternalReadableDeviceVideoSettingsIrLedsModeEnum {
  ON = "ON",
  OFF = "OFF",
  AUTO = "AUTO",
}

export enum ExternalReadableVideoSettingsDewarpModeEnum {
  NO_TRANSFORM = "NO_TRANSFORM",
  NORMAL = "NORMAL",
  PANORAMA = "PANORAMA",
  SUB_REGION = "SUB_REGION",
  VERTICAL_PANORAMA = "VERTICAL_PANORAMA",
  TRANSVERSE_MERCATOR = "TRANSVERSE_MERCATOR",
  MERCATOR = "MERCATOR",
  EQUIRECTANGULAR = "EQUIRECTANGULAR",
}

export enum ExternalReadableVideoSettingsMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum ExternalVideoSettingsSelectiveUpdateDewarpModeEnum {
  NO_TRANSFORM = "NO_TRANSFORM",
  NORMAL = "NORMAL",
  PANORAMA = "PANORAMA",
  SUB_REGION = "SUB_REGION",
  VERTICAL_PANORAMA = "VERTICAL_PANORAMA",
  TRANSVERSE_MERCATOR = "TRANSVERSE_MERCATOR",
  MERCATOR = "MERCATOR",
  EQUIRECTANGULAR = "EQUIRECTANGULAR",
}

export enum ExternalVideoSettingsSelectiveUpdateMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum IExternalReadableAudioVideoUserConfigDewarpModeEnum {
  NO_TRANSFORM = "NO_TRANSFORM",
  NORMAL = "NORMAL",
  PANORAMA = "PANORAMA",
  SUB_REGION = "SUB_REGION",
  VERTICAL_PANORAMA = "VERTICAL_PANORAMA",
  TRANSVERSE_MERCATOR = "TRANSVERSE_MERCATOR",
  MERCATOR = "MERCATOR",
  EQUIRECTANGULAR = "EQUIRECTANGULAR",
}

export enum IExternalReadableAudioVideoUserConfigLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalReadableAudioVideoUserConfigLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalReadableAudioVideoUserConfigMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum IExternalReadableAudioVideoUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalReadableAudioVideoUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalReadableDoorControllerUserConfigLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalReadableDoorControllerUserConfigLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalReadableDoorControllerUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalReadableDoorControllerUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalUpdateableAudioVideoUserConfigDewarpModeEnum {
  NO_TRANSFORM = "NO_TRANSFORM",
  NORMAL = "NORMAL",
  PANORAMA = "PANORAMA",
  SUB_REGION = "SUB_REGION",
  VERTICAL_PANORAMA = "VERTICAL_PANORAMA",
  TRANSVERSE_MERCATOR = "TRANSVERSE_MERCATOR",
  MERCATOR = "MERCATOR",
  EQUIRECTANGULAR = "EQUIRECTANGULAR",
}

export enum IExternalUpdateableAudioVideoUserConfigLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalUpdateableAudioVideoUserConfigLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalUpdateableAudioVideoUserConfigMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum IExternalUpdateableAudioVideoUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalUpdateableAudioVideoUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalUpdateableDoorControllerUserConfigLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalUpdateableDoorControllerUserConfigLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalUpdateableDoorControllerUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalUpdateableDoorControllerUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum DiagnosticEventActivityEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  GATEWAY_CONNECTED = "GATEWAY_CONNECTED",
  GATEWAY_DISCONNECTED = "GATEWAY_DISCONNECTED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  ALM_AUTHORITIES_CONTACTED = "ALM_AUTHORITIES_CONTACTED",
  ALM_MONITORING_ENABLED = "ALM_MONITORING_ENABLED",
  ALM_MONITORING_DISABLED = "ALM_MONITORING_DISABLED",
  ALM_MONITORING_SETTINGS_CHANGE = "ALM_MONITORING_SETTINGS_CHANGE",
  ALM_THREAT_CASE_CLOSED = "ALM_THREAT_CASE_CLOSED",
  ALM_THREAT_DETECTED = "ALM_THREAT_DETECTED",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum DoorEventStateEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}

export enum DoorLockdownStateEnumType {
  LOCKED_DOWN = "LOCKED_DOWN",
  ACCESS_CONTROLLED = "ACCESS_CONTROLLED",
  UNLOCKED = "UNLOCKED",
  UNKNOWN = "UNKNOWN",
}

export enum DoorPositionIndicatorEnumType {
  integrated = "integrated",
  remote = "remote",
}

export enum DoorPositionIndicatorPhysicalPortEnumType {
  GPIO_INPUT = "GPIO_INPUT",
  GPIO_INPUT_SUPERVISED = "GPIO_INPUT_SUPERVISED",
}

export enum DoorPositionIndicatorStateEnumType {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
  FORCED_OPEN = "FORCED_OPEN",
  ERROR = "ERROR",
  UNKNOWN = "UNKNOWN",
}

export enum DoorReaderEnumType {
  wiegand = "wiegand",
  osdp = "osdp",
  rhombus_osdp = "rhombus_osdp",
  aperio_wireless = "aperio_wireless",
}

export enum DoorReaderStateChangeReasonEnumType {
  FIRMWARE_UPGRADE = "FIRMWARE_UPGRADE",
  FORCED_REBOOT = "FORCED_REBOOT",
  UNKNOWN = "UNKNOWN",
}

export enum DoorReaderStateEnumType {
  CONNECTED = "CONNECTED",
  DISCONNECTED = "DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum DoorRelayEnumType {
  integrated = "integrated",
  remote = "remote",
}

export enum DoorRelayPhysicalPortEnumType {
  GPIO_OUTPUT = "GPIO_OUTPUT",
}

export enum DoorRelayStateEnumType {
  UNLOCKED = "UNLOCKED",
  LOCKED = "LOCKED",
  UNKNOWN = "UNKNOWN",
}

export enum DoorStateSourceEnum {
  DEFAULT_STATE = "DEFAULT_STATE",
  SCHEDULE = "SCHEDULE",
  SCHEDULE_EXCEPTION = "SCHEDULE_EXCEPTION",
  FIRST_IN = "FIRST_IN",
  DOOR_STATE_OVERRIDE = "DOOR_STATE_OVERRIDE",
  LOCKDOWN = "LOCKDOWN",
  PRIVACY = "PRIVACY",
  UNKNOWN = "UNKNOWN",
}

export enum GetDoorEventsForSensorWSRequestStateFilterEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}

export enum MinimalDoorStateHealthEnum {
  GREEN = "GREEN",
  RED = "RED",
}

export enum MinimalDoorStateHealthDetailsEnum {
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NO_HEARTBEAT = "NO_HEARTBEAT",
  NONE = "NONE",
}

export enum MinimalDoorStateStatusEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}

export enum DeleteDoorbellCameraWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum DeleteDoorControllerWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum Doorcontroller_DoorControllerDiscoveredReaderTypeEnum {
  RHOMBUS = "RHOMBUS",
  THIRD_PARTY = "THIRD_PARTY",
}

export enum EarlyExpireModeEnum {
  SCHEDULED_CHANGE = "SCHEDULED_CHANGE",
  STEADY_STATE_CHANGE = "STEADY_STATE_CHANGE",
  OFF = "OFF",
}

export enum EmbeddingEncodingTypeEnum {
  Q_8_24 = "Q_8_24",
  IEEE_754 = "IEEE_754",
}

export enum EntityEnum {
  ALARM_MONITORING_LOCATION_SETTINGS = "ALARM_MONITORING_LOCATION_SETTINGS",
  ALARM_MONITORING_LICENSE = "ALARM_MONITORING_LICENSE",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  POLICY = "POLICY",
  POLICY_ALERT = "POLICY_ALERT",
  POLICY_ADDENDUM = "POLICY_ADDENDUM",
  POLICY_PAUSE = "POLICY_PAUSE",
  USER = "USER",
  CAMERA_USER_CONFIG = "CAMERA_USER_CONFIG",
  ORG = "ORG",
  USER_PERMISSION_GROUP = "USER_PERMISSION_GROUP",
  PARTNER_PERMISSION_GROUP = "PARTNER_PERMISSION_GROUP",
  VIDEO_WALL = "VIDEO_WALL",
  SHARED_CLIPS = "SHARED_CLIPS",
  SAVED_CLIPS = "SAVED_CLIPS",
  SHARED_STREAMS = "SHARED_STREAMS",
  SPLICED_CLIPS = "SPLICED_CLIPS",
  TIMELAPSE = "TIMELAPSE",
  AUDIT_EVENTS = "AUDIT_EVENTS",
  DIAGNOSTIC_EVENTS = "DIAGNOSTIC_EVENTS",
  CAMERA_STATE = "CAMERA_STATE",
  CLIMATE_STATE = "CLIMATE_STATE",
  DOOR_STATE = "DOOR_STATE",
  NVR_STATE = "NVR_STATE",
  OCCUPANCY_STATE = "OCCUPANCY_STATE",
  PROXIMITY_STATE = "PROXIMITY_STATE",
  AUDIO_STATE = "AUDIO_STATE",
  CAMERA = "CAMERA",
  NVR = "NVR",
  DOOR_SENSOR = "DOOR_SENSOR",
  CLIMATE_SENSOR = "CLIMATE_SENSOR",
  PROXIMITY_SENSOR = "PROXIMITY_SENSOR",
  BOUNDING_BOX = "BOUNDING_BOX",
  SEEK_POINT = "SEEK_POINT",
  SENSOR_SEEK_POINT = "SENSOR_SEEK_POINT",
  SCHEDULE = "SCHEDULE",
  FACE_EVENT = "FACE_EVENT",
  DEVICE_SHADOW = "DEVICE_SHADOW",
  THREAT_CASE = "THREAT_CASE",
  KEYPAD = "KEYPAD",
  COMPONENT_DOOR_READER_SHADOW = "COMPONENT_DOOR_READER_SHADOW",
  COMPONENT_DOOR_RELAY_SHADOW = "COMPONENT_DOOR_RELAY_SHADOW",
  COMPONENT_DOOR_POSITION_INDICATOR_SHADOW = "COMPONENT_DOOR_POSITION_INDICATOR_SHADOW",
  COMPONENT_APERIO_GATEWAY_SHADOW = "COMPONENT_APERIO_GATEWAY_SHADOW",
  COMPONENT_APERIO_DOOR_EXT_SHADOW = "COMPONENT_APERIO_DOOR_EXT_SHADOW",
  COMPONENT_REQUEST_TO_EXIT_SHADOW = "COMPONENT_REQUEST_TO_EXIT_SHADOW",
  COMPONENT_GENERIC_RELAY_SHADOW = "COMPONENT_GENERIC_RELAY_SHADOW",
  COMPONENT_GENERIC_INPUT_SHADOW = "COMPONENT_GENERIC_INPUT_SHADOW",
  COMPONENT_GENERIC_BUTTON_SHADOW = "COMPONENT_GENERIC_BUTTON_SHADOW",
  ACCESS_CONTROLLED_DOOR_SHADOW = "ACCESS_CONTROLLED_DOOR_SHADOW",
  ACCESS_CONTROLLED_DOOR = "ACCESS_CONTROLLED_DOOR",
  COMPONENT_SEEKPOINT = "COMPONENT_SEEKPOINT",
  VEHICLE_EVENT = "VEHICLE_EVENT",
  DEVICE_INTEGRATION = "DEVICE_INTEGRATION",
  SHELLY_INTEGRATION = "SHELLY_INTEGRATION",
  THIRD_PARTY_CAMERA_DISCOVERY = "THIRD_PARTY_CAMERA_DISCOVERY",
  THIRD_PARTY_CAMERA_ASSIGNMENT = "THIRD_PARTY_CAMERA_ASSIGNMENT",
  THIRD_PARTY_CAMERA_CREDENTIAL = "THIRD_PARTY_CAMERA_CREDENTIAL",
  CHATBOT_QUERY = "CHATBOT_QUERY",
  KEYPAD_COMMAND = "KEYPAD_COMMAND",
  UNKNOWN = "UNKNOWN",
}

export enum EventOriginatorEnum {
  USER = "USER",
  SUPPORT_AUTHORITY = "SUPPORT_AUTHORITY",
  API_TOKEN = "API_TOKEN",
  RULE = "RULE",
  COMPONENT_COMPOSITE_EVENT = "COMPONENT_COMPOSITE_EVENT",
  UNKNOWN = "UNKNOWN",
}

export enum EventOriginatorEnum_Minimal {
  USER = "USER",
  SUPPORT_AUTHORITY = "SUPPORT_AUTHORITY",
  API_TOKEN = "API_TOKEN",
  RULE = "RULE",
  COMPONENT_COMPOSITE_EVENT = "COMPONENT_COMPOSITE_EVENT",
  UNKNOWN = "UNKNOWN",
}

export enum SavedClipWithProgressStatusEnum {
  INITIATING = "INITIATING",
  UPLOADING = "UPLOADING",
  RENDERING = "RENDERING",
  FAILED = "FAILED",
  COMPLETE = "COMPLETE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum CombinedSeekPointCustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum GetEventSeekpointsV2WSRequestClothingColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum GetEventSeekpointsV2WSRequestVehicleColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum SearchClothingAndVehicleByColorWSRequestClothingColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum SearchClothingAndVehicleByColorWSRequestVehicleColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum ExportAuditEventsWSRequestExcludeActionsEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  REVERT_TO_DEFAULTS = "REVERT_TO_DEFAULTS",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  BULK_PROVISION_CREDENTIALS = "BULK_PROVISION_CREDENTIALS",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_LLM = "UPDATE_INTEGRATION_LLM",
  DELETE_INTEGRATION_LLM = "DELETE_INTEGRATION_LLM",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  CUSTOM_EVENT_CREATE = "CUSTOM_EVENT_CREATE",
  CUSTOM_EVENT_DELETE = "CUSTOM_EVENT_DELETE",
  CUSTOM_EVENT_UPDATE = "CUSTOM_EVENT_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  ORG_LLM_USAGE_UPDATE = "ORG_LLM_USAGE_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum ExportAuditEventsWSRequestIncludeActionsEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  REVERT_TO_DEFAULTS = "REVERT_TO_DEFAULTS",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  BULK_PROVISION_CREDENTIALS = "BULK_PROVISION_CREDENTIALS",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_LLM = "UPDATE_INTEGRATION_LLM",
  DELETE_INTEGRATION_LLM = "DELETE_INTEGRATION_LLM",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  CUSTOM_EVENT_CREATE = "CUSTOM_EVENT_CREATE",
  CUSTOM_EVENT_DELETE = "CUSTOM_EVENT_DELETE",
  CUSTOM_EVENT_UPDATE = "CUSTOM_EVENT_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  ORG_LLM_USAGE_UPDATE = "ORG_LLM_USAGE_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum ExportCountReportsWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum ExportCountReportsWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum ExportCountReportsWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum ExportUptimeWSRequestGranularityEnum {
  NANOSECONDS = "NANOSECONDS",
  MICROSECONDS = "MICROSECONDS",
  MILLISECONDS = "MILLISECONDS",
  SECONDS = "SECONDS",
  MINUTES = "MINUTES",
  HOURS = "HOURS",
  DAYS = "DAYS",
}

export enum ReportTimestampFilterReportIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum FirmwareUpdateSettingsModeEnum {
  MANUAL = "MANUAL",
  SCHEDULED = "SCHEDULED",
}

export enum FirstInFirmwareStatusEnum {
  DISABLED = "DISABLED",
  NOT_CONFIGURED = "NOT_CONFIGURED",
  REQUIRED = "REQUIRED",
  SATISFIED = "SATISFIED",
  UNKNOWN = "UNKNOWN",
}

export enum FirstInResetEnum {
  DAILY = "DAILY",
}

export enum FirstInSourceEnum {
  CONFIG_MANUAL_OVERRIDE = "CONFIG_MANUAL_OVERRIDE",
  CONFIG_REQUIREMENT_CHANGE = "CONFIG_REQUIREMENT_CHANGE",
  CONFIG_MEMBERSHIP = "CONFIG_MEMBERSHIP",
  SCHEDULED_RESET = "SCHEDULED_RESET",
  LOCAL_BADGE_EVENT = "LOCAL_BADGE_EVENT",
  LOCKDOWN = "LOCKDOWN",
  UNKNOWN = "UNKNOWN",
}

export enum FirstInStatusEnum {
  REQUIRED = "REQUIRED",
  SATISFIED = "SATISFIED",
}

export enum FirstInStatus_MinimalEnum {
  REQUIRED = "REQUIRED",
  SATISFIED = "SATISFIED",
}

export enum FisheyeDisplayModeEnum {
  RAW = "RAW",
  IMMERSIVE = "IMMERSIVE",
  TILES = "TILES",
  RAW_PANO = "RAW_PANO",
}

export enum FootageBoundingBoxCustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum FootageSeekPointV2CcEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum FreightWarehouseEnum {
  AIT = "AIT",
  INVENTORY_RESERVATIONS = "INVENTORY_RESERVATIONS",
}

export enum FrequencyUnitEnum {
  HOURS = "HOURS",
  DAYS = "DAYS",
  WEEKS = "WEEKS",
  MONTHS = "MONTHS",
  UNKNOWN = "UNKNOWN",
}

export enum FunctionalityEnum {
  DEVICE_ADMINISTRATION = "DEVICE_ADMINISTRATION",
  ORG_ADMINISTRATION = "ORG_ADMINISTRATION",
  AUTH_ADMINISTRATION = "AUTH_ADMINISTRATION",
  FIRMWARE_ADMINISTRATION = "FIRMWARE_ADMINISTRATION",
  DOOR_ACCESS_ADMINISTRATION = "DOOR_ACCESS_ADMINISTRATION",
  CAMERA_ADMINISTRATION = "CAMERA_ADMINISTRATION",
  REGISTER_DEVICES = "REGISTER_DEVICES",
  DELETE_DEVICES = "DELETE_DEVICES",
  LOCATION_ADMINISTRATION = "LOCATION_ADMINISTRATION",
  POLICY_ADMINISTRATION = "POLICY_ADMINISTRATION",
  USER_ADMINISTRATION = "USER_ADMINISTRATION",
  REPORT_ADMINISTRATION = "REPORT_ADMINISTRATION",
  NOTIFICATION_ADMINISTRATION = "NOTIFICATION_ADMINISTRATION",
  LICENSE_ADMINISTRATION = "LICENSE_ADMINISTRATION",
  RECEIVE_EMAILS = "RECEIVE_EMAILS",
  MANAGE_FACES = "MANAGE_FACES",
  MANAGE_LICENSEPLATES = "MANAGE_LICENSEPLATES",
  API_ADMINISTRATION = "API_ADMINISTRATION",
  INTEGRATION_ADMINISTRATION = "INTEGRATION_ADMINISTRATION",
  DATA_EXFILTRATION = "DATA_EXFILTRATION",
  ALERT_MONITORING_ADMINISTRATION = "ALERT_MONITORING_ADMINISTRATION",
  ALERT_MONITORING_VIEWONLY = "ALERT_MONITORING_VIEWONLY",
  GUEST_MANAGEMENT_ADMINISTRATION = "GUEST_MANAGEMENT_ADMINISTRATION",
  GUEST_MANAGEMENT_VIEWONLY = "GUEST_MANAGEMENT_VIEWONLY",
  CLIP_MANAGEMENT = "CLIP_MANAGEMENT",
  VIEW_SAVED_VIDEO = "VIEW_SAVED_VIDEO",
  CLLM_ADMINISTRATION = "CLLM_ADMINISTRATION",
  UNKNOWN = "UNKNOWN",
}

export enum GenericButtonStateEnumType {
  BUTTON_DOWN = "BUTTON_DOWN",
  BUTTON_UP = "BUTTON_UP",
  UNKNOWN = "UNKNOWN",
}

export enum GenericInputStateEnumType {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum GenericRelayStateEnumType {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum GoogleCaptchaSourceEnum {
  LEGACY = "LEGACY",
  RHOMBUS_CONSOLE_WEB = "RHOMBUS_CONSOLE_WEB",
  RHOMBUS_CONSOLE_ANDROID_APP = "RHOMBUS_CONSOLE_ANDROID_APP",
  RHOMBUS_CONSOLE_IOS_APP = "RHOMBUS_CONSOLE_IOS_APP",
  RHOMBUS_KEY_ANDROID_APP = "RHOMBUS_KEY_ANDROID_APP",
  RHOMBUS_KEY_IOS_APP = "RHOMBUS_KEY_IOS_APP",
}

export enum GuestBackgroundCheckStatusEnum {
  CLEARED = "CLEARED",
  NEEDS_ATTENTION = "NEEDS_ATTENTION",
}

export enum GuestActivityEnum {
  CHECKED_IN = "CHECKED_IN",
  CHECKED_OUT = "CHECKED_OUT",
  AUTO_CHECKED_OUT = "AUTO_CHECKED_OUT",
  UPDATED_INFO = "UPDATED_INFO",
  INVITED = "INVITED",
}

export enum GuestInviteBackgroundCheckStatusEnum {
  CLEARED = "CLEARED",
  NEEDS_ATTENTION = "NEEDS_ATTENTION",
}

export enum GuestInviteSelectiveUpdateByInvocationBackgroundCheckStatusEnum {
  CLEARED = "CLEARED",
  NEEDS_ATTENTION = "NEEDS_ATTENTION",
}

export enum GuestSelectiveUpdateByInvocationBackgroundCheckStatusEnum {
  CLEARED = "CLEARED",
  NEEDS_ATTENTION = "NEEDS_ATTENTION",
}

export enum GuestStatusEnum {
  INVITED = "INVITED",
  PENDING = "PENDING",
  APPROVED = "APPROVED",
  DENIED = "DENIED",
}

export enum GuestTypeEnum {
  CONTRACTOR = "CONTRACTOR",
  INTERVIEWER = "INTERVIEWER",
  GENERAL_VISITOR = "GENERAL_VISITOR",
  UNPLANNED_VISITOR = "UNPLANNED_VISITOR",
  PARTNER = "PARTNER",
  MEETINGS = "MEETINGS",
}

export enum HardwareVariationEnum {
  RASPBERRY_PI_3 = "RASPBERRY_PI_3",
  CAMERA_R1 = "CAMERA_R1",
  CAMERA_R2 = "CAMERA_R2",
  CAMERA_R2_LONG_RANGE = "CAMERA_R2_LONG_RANGE",
  CAMERA_R2_180 = "CAMERA_R2_180",
  CAMERA_R3 = "CAMERA_R3",
  CAMERA_R4 = "CAMERA_R4",
  CAMERA_R100 = "CAMERA_R100",
  CAMERA_R120 = "CAMERA_R120",
  CAMERA_R170 = "CAMERA_R170",
  CAMERA_R200 = "CAMERA_R200",
  CAMERA_R500 = "CAMERA_R500",
  CAMERA_R510 = "CAMERA_R510",
  CAMERA_R520 = "CAMERA_R520",
  CAMERA_R600 = "CAMERA_R600",
  SENSOR_ASSET_TAG_T1 = "SENSOR_ASSET_TAG_T1",
  SENSOR_DOOR_D1 = "SENSOR_DOOR_D1",
  SENSOR_DOOR_D20 = "SENSOR_DOOR_D20",
  SENSOR_ENVIRONMENTAL_E1 = "SENSOR_ENVIRONMENTAL_E1",
  SENSOR_ENVIRONMENTAL_E15 = "SENSOR_ENVIRONMENTAL_E15",
  SENSOR_ENVIRONMENTAL_E2 = "SENSOR_ENVIRONMENTAL_E2",
  SENSOR_MOTION_M1 = "SENSOR_MOTION_M1",
  SENSOR_MOTION_M15 = "SENSOR_MOTION_M15",
  GATEWAY_A1 = "GATEWAY_A1",
  GATEWAY_A100 = "GATEWAY_A100",
  GATEWAY_ENVIRONMENTAL_E50 = "GATEWAY_ENVIRONMENTAL_E50",
  CAMERA_R220 = "CAMERA_R220",
  CAMERA_R230 = "CAMERA_R230",
  CAMERA_R36S = "CAMERA_R36S",
  CAMERA_R410 = "CAMERA_R410",
  CAMERA_R540 = "CAMERA_R540",
  CAMERA_R545 = "CAMERA_R545",
  BADGE_READER_DR1 = "BADGE_READER_DR1",
  BADGE_READER_DR40 = "BADGE_READER_DR40",
  BADGE_READER_DR20 = "BADGE_READER_DR20",
  DOOR_CONTROLLER_DC1 = "DOOR_CONTROLLER_DC1",
  DOOR_CONTROLLER_DC20 = "DOOR_CONTROLLER_DC20",
  DOOR_CONTROLLER_DC10 = "DOOR_CONTROLLER_DC10",
  ETHERNET_TESTER_ET1 = "ETHERNET_TESTER_ET1",
  IO_BOARD_TB1 = "IO_BOARD_TB1",
  BLE_BUTTON_B10 = "BLE_BUTTON_B10",
  BLE_BUTTON_B15 = "BLE_BUTTON_B15",
  CAMERA_THIRD_PARTY_RELAY = "CAMERA_THIRD_PARTY_RELAY",
  CAMERA_THIRD_PARTY_NVR = "CAMERA_THIRD_PARTY_NVR",
  NVR_N100 = "NVR_N100",
  CAMERA_R130 = "CAMERA_R130",
  NVR_N500 = "NVR_N500",
  CAMERA_R150 = "CAMERA_R150",
  UNSPECIFIED = "UNSPECIFIED",
}

export enum HeatIndexRangeWarningEnum {
  HEAT_INDEX_OK = "HEAT_INDEX_OK",
  HEAT_INDEX_WARNING = "HEAT_INDEX_WARNING",
  HEAT_INDEX_UNSUPPORTED = "HEAT_INDEX_UNSUPPORTED",
}

export enum IAudioUserConfigCloudArchiveTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IAudioUserConfigEventClipUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IAudioUserConfigLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IAudioUserConfigLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IAudioUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IAudioUserConfigSpliceClipUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IAudioUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IPimlocBaseAPIUrlEnum {
  US = "US",
  EU = "EU",
}

export enum IntegrationActionStatusEnum {
  SUCCESS = "SUCCESS",
  ERROR = "ERROR",
  BACKOFF = "BACKOFF",
  IGNORED = "IGNORED",
  UNKNOWN = "UNKNOWN",
}

export enum IntegrationAuditEventEnum {
  UPDATE = "UPDATE",
  DELETE = "DELETE",
}

export enum IntegrationDiagnosticEventActivityEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  GATEWAY_CONNECTED = "GATEWAY_CONNECTED",
  GATEWAY_DISCONNECTED = "GATEWAY_DISCONNECTED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  ALM_AUTHORITIES_CONTACTED = "ALM_AUTHORITIES_CONTACTED",
  ALM_MONITORING_ENABLED = "ALM_MONITORING_ENABLED",
  ALM_MONITORING_DISABLED = "ALM_MONITORING_DISABLED",
  ALM_MONITORING_SETTINGS_CHANGE = "ALM_MONITORING_SETTINGS_CHANGE",
  ALM_THREAT_CASE_CLOSED = "ALM_THREAT_CASE_CLOSED",
  ALM_THREAT_DETECTED = "ALM_THREAT_DETECTED",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum IntegrationEnum {
  AVIGILON_ALTA = "AVIGILON_ALTA",
  BRIVO = "BRIVO",
  BUTTERFLY_MX = "BUTTERFLY_MX",
  DEVICE_INTEGRATION = "DEVICE_INTEGRATION",
  DICE = "DICE",
  ENVOY = "ENVOY",
  FLIC = "FLIC",
  GENEA = "GENEA",
  GOOGLE = "GOOGLE",
  GUEST_MANAGEMENT = "GUEST_MANAGEMENT",
  INFORMACAST = "INFORMACAST",
  INNER_RANGE = "INNER_RANGE",
  KISI = "KISI",
  LUMEO = "LUMEO",
  MICROSOFT_TEAMS = "MICROSOFT_TEAMS",
  OMNIALERT = "OMNIALERT",
  OPENAI = "OPENAI",
  OPENTECH_ALLIANCE = "OPENTECH_ALLIANCE",
  PIMLOC = "PIMLOC",
  PLACE_OS = "PLACE_OS",
  PRODATAKEY = "PRODATAKEY",
  SHELLY = "SHELLY",
  TOAST = "TOAST",
  WEBHOOKS = "WEBHOOKS",
  ZAPIER = "ZAPIER",
  RAPTOR = "RAPTOR",
  NINEONEONE_CELLULAR = "NINEONEONE_CELLULAR",
  SLACK = "SLACK",
  APERIO = "APERIO",
  UNKNOWN = "UNKNOWN",
}

export enum SubscribeZapierWebhookWSRequestDoorStateEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}

export enum Integration_aperio_AperioIntegrationStatusEnum {
  DISCOVERED = "DISCOVERED",
  PAIRING = "PAIRING",
  CONFIGURED = "CONFIGURED",
  ERROR_OEM = "ERROR_OEM",
  ERROR_OWNER = "ERROR_OWNER",
}

export enum CreateReturnedInventoryAuditReservationWSRequestReturnTypeEnum {
  TRIAL = "TRIAL",
  SALES = "SALES",
  RMA = "RMA",
  OTHER = "OTHER",
  UNKNOWN = "UNKNOWN",
}

export enum InitiateShipmentWSRequestShipmentCategoryEnum {
  RMA = "RMA",
  PURCHASE_ORDER = "PURCHASE_ORDER",
  TRIAL = "TRIAL",
  UNKNOWN = "UNKNOWN",
}

export enum ShipmentEmailWSResponseCustomerShipmentEmailStateEnum {
  SHIPPING_CONFIRMATION_SUCCESS = "SHIPPING_CONFIRMATION_SUCCESS",
  SHIPPING_CONFIRMATION_FAILURE = "SHIPPING_CONFIRMATION_FAILURE",
  SHIPPING_SHIPPED_SUCCESS = "SHIPPING_SHIPPED_SUCCESS",
  SHIPPING_SHIPPED_FAILURE = "SHIPPING_SHIPPED_FAILURE",
  UNKNOWN = "UNKNOWN",
}

export enum InvalidPhysicalPortReasonEnumType {
  NON_EXISTANT_COMPONENT_BOARD_NUM = "NON_EXISTANT_COMPONENT_BOARD_NUM",
  NON_EXISTANT_COMPONENT_PORT_NUM = "NON_EXISTANT_COMPONENT_PORT_NUM",
  CONFLICTING_COMPONENT_PORT_TYPES = "CONFLICTING_COMPONENT_PORT_TYPES",
  COMPONENT_PORT_TYPE_NOT_SUPPORTED_BY_PORT = "COMPONENT_PORT_TYPE_NOT_SUPPORTED_BY_PORT",
  MAX_COMPONENTS_PER_PORT_TYPE_EXCEEDED = "MAX_COMPONENTS_PER_PORT_TYPE_EXCEEDED",
}

export enum InvoiceStatusEnum {
  PAID = "PAID",
  UNPAID_PENDING = "UNPAID_PENDING",
  UNPAID_OVERDUE = "UNPAID_OVERDUE",
  CANCELLED = "CANCELLED",
}

export enum KeypadCommandEnum {
  ARM = "ARM",
  DISARM = "DISARM",
  CANCEL = "CANCEL",
  UNKNOWN = "UNKNOWN",
}

export enum KeypadConfigConnectionStateEnum {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
}

export enum KioskConnectionStatusEnum {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum KioskSelectiveUpdateConnectionStatusEnum {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum KioskWithInfoConnectionStatusEnum {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum LicenseEnum {
  STARTER = "STARTER",
  STANDARD = "STANDARD",
  ENTERPRISE = "ENTERPRISE",
  LEGACY = "LEGACY",
}

export enum LicenseUsageCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum LicenseUsageCatalogItemLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum LicenseUsageLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum LicenseUsageLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum LicenseUsageProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum LicenseUsageStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum CreateDeviceLicenseWSRequestLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum CreateLicenseWSRequestLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum FindCatalogItemsWSRequestProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum LiveNotificationActionStatusEnum {
  SUCCESS = "SUCCESS",
  ERROR = "ERROR",
  IGNORED = "IGNORED",
  MUTED = "MUTED",
  BACKOFF = "BACKOFF",
  UNKNOWN = "UNKNOWN",
}

export enum LocationFunctionalityEnum {
  ACCESS_CONDITIONS = "ACCESS_CONDITIONS",
  ACCESS_SCHEDULES = "ACCESS_SCHEDULES",
  DOOR_SETTINGS = "DOOR_SETTINGS",
  FIRST_IN_SETTINGS = "FIRST_IN_SETTINGS",
  HARDWARE_CONFIG = "HARDWARE_CONFIG",
  LOCKDOWN_MANAGEMENT = "LOCKDOWN_MANAGEMENT",
  UNKNOWN = "UNKNOWN",
}

export enum LocationLockdownStateEnumType {
  STANDARD_SECURITY = "STANDARD_SECURITY",
  LOCKED_DOWN = "LOCKED_DOWN",
}

export enum LockdownActivationResultEnumType {
  SUCCESS = "SUCCESS",
  INVALID_LOCKDOWN_PLANS = "INVALID_LOCKDOWN_PLANS",
  OPTIMISTIC_CONCURRENCY = "OPTIMISTIC_CONCURRENCY",
}

export enum LockdownDeactivationResultEnumType {
  SUCCESS = "SUCCESS",
  OPTIMISTIC_CONCURRENCY = "OPTIMISTIC_CONCURRENCY",
}

export enum LockdownEventOriginatorEnumType {
  USER = "USER",
  SUPPORT_AUTHORITY = "SUPPORT_AUTHORITY",
  API_TOKEN = "API_TOKEN",
  RULE = "RULE",
  UNKNOWN = "UNKNOWN",
}

export enum LockdownPlanScopeEnumType {
  ORG_LOCKDOWN = "ORG_LOCKDOWN",
  LOCATION_LOCKDOWN = "LOCATION_LOCKDOWN",
}

export enum LockdownStateEventEnumType {
  LOCKDOWN_ACTIVATED = "LOCKDOWN_ACTIVATED",
  LOCKDOWN_DEACTIVATED = "LOCKDOWN_DEACTIVATED",
}

export enum ManualDoorStateChangeEnum {
  DOOR_STATE_OVERRIDE = "DOOR_STATE_OVERRIDE",
  CANCELLED_DOOR_STATE_OVERRIDE = "CANCELLED_DOOR_STATE_OVERRIDE",
}

export enum ManualDoorStateChangeEnum_Minimal {
  DOOR_STATE_OVERRIDE = "DOOR_STATE_OVERRIDE",
  CANCELLED_DOOR_STATE_OVERRIDE = "CANCELLED_DOOR_STATE_OVERRIDE",
}

export enum MinimalThresholdEventCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  FACE = "FACE",
  LPR = "LPR",
  POSE = "POSE",
  CLIP_EMBED = "CLIP_EMBED",
  UNKNOWN = "UNKNOWN",
}

export enum MinimalThresholdEventDirectionEnum {
  INGRESS = "INGRESS",
  EGRESS = "EGRESS",
}

export enum MobileTokenOSEnum {
  IOS = "IOS",
  ANDROID = "ANDROID",
}

export enum LoginToOrg2FARequiredResponseGet2FATypeEnum {
  EMAIL = "EMAIL",
  SMS = "SMS",
  VIRTUAL_MFA = "VIRTUAL_MFA",
}

export enum LoginVerifiedSupportAuthorityMobileRequestClientTypeEnum {
  MOBILE = "MOBILE",
  IOS = "IOS",
  ANDROID = "ANDROID",
  BROWSER = "BROWSER",
}

export enum ModelStatusEnum {
  READY = "READY",
  QUANTIZE_IN_PROGRESS = "QUANTIZE_IN_PROGRESS",
  QUANTIZE_FAILURE = "QUANTIZE_FAILURE",
}

export enum Network_NetworkConfigurationModeEnum {
  DHCP = "DHCP",
  STATIC = "STATIC",
}

export enum NewCookieSameSiteEnum {
  NONE = "NONE",
  LAX = "LAX",
  STRICT = "STRICT",
}

export enum NoonlightPromptSelectionReasonsEnum {
  NO_PERSON = "NO_PERSON",
  ROUTINE_EMPLOYEE = "ROUTINE_EMPLOYEE",
  PERSON_OUTSIDE = "PERSON_OUTSIDE",
  PERSON_INSIDE = "PERSON_INSIDE",
  OTHER = "OTHER",
  SERVICES_ONSITE = "SERVICES_ONSITE",
  MOVING_VEHICLE = "MOVING_VEHICLE",
  CAMERA_OBSTRUCTED = "CAMERA_OBSTRUCTED",
  VIDEO_ISSUE = "VIDEO_ISSUE",
  PERSON_OTHER = "PERSON_OTHER",
  NO_PERSON_OTHER = "NO_PERSON_OTHER",
  LOAD_FAILURE = "LOAD_FAILURE",
  ACTIVE_CRIME = "ACTIVE_CRIME",
  UNKNOWN_PERSON_INSIDE = "UNKNOWN_PERSON_INSIDE",
  UNKNOWN_SUSPECT_OUTSIDE = "UNKNOWN_SUSPECT_OUTSIDE",
  UNKNOWN_PERSON_OUTSIDE = "UNKNOWN_PERSON_OUTSIDE",
  OTHER_CONCLUSIVE_RESULT = "OTHER_CONCLUSIVE_RESULT",
  TIMEOUT = "TIMEOUT",
}

export enum NoonlightPromptThemeEnum {
  THREAT = "THREAT",
  HUMAN = "HUMAN",
}

export enum NoonlightVersionedSettingsMonitoringModeEnum {
  MANUAL = "MANUAL",
  SCHEDULED = "SCHEDULED",
  UNKNOWN = "UNKNOWN",
}

export enum NormalStateEnumType {
  NO = "NO",
  NC = "NC",
}

export enum NotificationEnumType {
  SMS = "SMS",
  EMAIL = "EMAIL",
  APP = "APP",
  SLACK = "SLACK",
  MICROSOFT_TEAMS = "MICROSOFT_TEAMS",
  BROWSER = "BROWSER",
  UNKNOWN = "UNKNOWN",
}

export enum NotificationTimeFrameDaysEnum {
  MONDAY = "MONDAY",
  TUESDAY = "TUESDAY",
  WEDNESDAY = "WEDNESDAY",
  THURSDAY = "THURSDAY",
  FRIDAY = "FRIDAY",
  SATURDAY = "SATURDAY",
  SUNDAY = "SUNDAY",
}

export enum NotificationTimeFrameRowDiagnosticsEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  GATEWAY_CONNECTED = "GATEWAY_CONNECTED",
  GATEWAY_DISCONNECTED = "GATEWAY_DISCONNECTED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  ALM_AUTHORITIES_CONTACTED = "ALM_AUTHORITIES_CONTACTED",
  ALM_MONITORING_ENABLED = "ALM_MONITORING_ENABLED",
  ALM_MONITORING_DISABLED = "ALM_MONITORING_DISABLED",
  ALM_MONITORING_SETTINGS_CHANGE = "ALM_MONITORING_SETTINGS_CHANGE",
  ALM_THREAT_CASE_CLOSED = "ALM_THREAT_CASE_CLOSED",
  ALM_THREAT_DETECTED = "ALM_THREAT_DETECTED",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum NotificationTimeFrameRowLocationOnlyDiagnosticsEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  GATEWAY_CONNECTED = "GATEWAY_CONNECTED",
  GATEWAY_DISCONNECTED = "GATEWAY_DISCONNECTED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  ALM_AUTHORITIES_CONTACTED = "ALM_AUTHORITIES_CONTACTED",
  ALM_MONITORING_ENABLED = "ALM_MONITORING_ENABLED",
  ALM_MONITORING_DISABLED = "ALM_MONITORING_DISABLED",
  ALM_MONITORING_SETTINGS_CHANGE = "ALM_MONITORING_SETTINGS_CHANGE",
  ALM_THREAT_CASE_CLOSED = "ALM_THREAT_CASE_CLOSED",
  ALM_THREAT_DETECTED = "ALM_THREAT_DETECTED",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum ObjectSearchModelEnum {
  CLIP_512 = "CLIP_512",
  UNKNOWN = "UNKNOWN",
}

export enum OccupancyEventStateEnum {
  VACANT = "VACANT",
  MOVEMENT = "MOVEMENT",
  OCCUPIED = "OCCUPIED",
}

export enum MinimalOccupancySensorStateStatusEnum {
  VACANT = "VACANT",
  MOVEMENT = "MOVEMENT",
  OCCUPIED = "OCCUPIED",
}

export enum Occupancysensor_MotionSensorHealthDetailsEnum {
  NO_HEARTBEAT = "NO_HEARTBEAT",
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NONE = "NONE",
}

export enum Occupancysensor_MotionSensorHealthEnum {
  RED = "RED",
  GREEN = "GREEN",
}

export enum OperationStatusStatusEnum {
  SUCCESS = "SUCCESS",
  FAILURE = "FAILURE",
}

export enum OrgGroupMemberTypeEnum {
  RHOMBUS_ACCESS_CONTROL = "RHOMBUS_ACCESS_CONTROL",
  GUEST_MANAGEMENT_HOST = "GUEST_MANAGEMENT_HOST",
}

export enum OrgGroupTypeEnum {
  RHOMBUS_ACCESS_CONTROL = "RHOMBUS_ACCESS_CONTROL",
  GUEST_MANAGEMENT_HOST = "GUEST_MANAGEMENT_HOST",
}

export enum OrgPlanTypeEnum {
  TRIAL = "TRIAL",
  STARTER = "STARTER",
  CUSTOM = "CUSTOM",
}

export enum OrgSubscriptionStatusEnum {
  TRIAL = "TRIAL",
  PAID = "PAID",
  RESELLER = "RESELLER",
  LOST = "LOST",
  UNKNOWN = "UNKNOWN",
}

export enum OrgSubscriptionTypeEnum {
  STARTER = "STARTER",
  PROFESSIONAL = "PROFESSIONAL",
  ENTERPRISE = "ENTERPRISE",
  UNKNOWN = "UNKNOWN",
}

export enum OrgTypeEnum {
  PARTNER = "PARTNER",
  CUSTOMER = "CUSTOMER",
  UNKNOWN = "UNKNOWN",
}

export enum OrgV2SubscriptionStatusEnum {
  TRIAL = "TRIAL",
  PAID = "PAID",
  RESELLER = "RESELLER",
  LOST = "LOST",
  UNKNOWN = "UNKNOWN",
}

export enum OrgV2SubscriptionTypeEnum {
  STARTER = "STARTER",
  PROFESSIONAL = "PROFESSIONAL",
  ENTERPRISE = "ENTERPRISE",
  UNKNOWN = "UNKNOWN",
}

export enum OrgV2TypeEnum {
  PARTNER = "PARTNER",
  CUSTOMER = "CUSTOMER",
  UNKNOWN = "UNKNOWN",
}

export enum OsdpPhysicalPortEnumType {
  RS485 = "RS485",
}

export enum PartnerFunctionalityEnum {
  CREATE_CLIENT = "CREATE_CLIENT",
  DELETE_CLIENT = "DELETE_CLIENT",
  DEAL_ADMINISTRATION = "DEAL_ADMINISTRATION",
  REMOTE_REGISTER_DEVICE = "REMOTE_REGISTER_DEVICE",
  ORG_ADMINISTRATION = "ORG_ADMINISTRATION",
  AUTH_ADMINISTRATION = "AUTH_ADMINISTRATION",
  DOOR_ACCESS_ADMINISTRATION = "DOOR_ACCESS_ADMINISTRATION",
  USER_ADMINISTRATION = "USER_ADMINISTRATION",
  REPORT_ADMINISTRATION = "REPORT_ADMINISTRATION",
  NOTIFICATION_ADMINISTRATION = "NOTIFICATION_ADMINISTRATION",
  LICENSE_ADMINISTRATION = "LICENSE_ADMINISTRATION",
  RECEIVE_EMAILS = "RECEIVE_EMAILS",
  API_ADMINISTRATION = "API_ADMINISTRATION",
  INTEGRATION_ADMINISTRATION = "INTEGRATION_ADMINISTRATION",
  DATA_EXFILTRATION = "DATA_EXFILTRATION",
  CLIP_MANAGEMENT = "CLIP_MANAGEMENT",
  UNKNOWN = "UNKNOWN",
}

export enum PartnerNotificationClientSectionRowDaysEnum {
  MONDAY = "MONDAY",
  TUESDAY = "TUESDAY",
  WEDNESDAY = "WEDNESDAY",
  THURSDAY = "THURSDAY",
  FRIDAY = "FRIDAY",
  SATURDAY = "SATURDAY",
  SUNDAY = "SUNDAY",
}

export enum PartnerNotificationClientSectionRowDiagnosticsEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  GATEWAY_CONNECTED = "GATEWAY_CONNECTED",
  GATEWAY_DISCONNECTED = "GATEWAY_DISCONNECTED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  ALM_AUTHORITIES_CONTACTED = "ALM_AUTHORITIES_CONTACTED",
  ALM_MONITORING_ENABLED = "ALM_MONITORING_ENABLED",
  ALM_MONITORING_DISABLED = "ALM_MONITORING_DISABLED",
  ALM_MONITORING_SETTINGS_CHANGE = "ALM_MONITORING_SETTINGS_CHANGE",
  ALM_THREAT_CASE_CLOSED = "ALM_THREAT_CASE_CLOSED",
  ALM_THREAT_DETECTED = "ALM_THREAT_DETECTED",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum PartnerPermissionEnum {
  DEFAULT = "DEFAULT",
  CUSTOM = "CUSTOM",
}

export enum Partner_PartnerWebResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  USER_EXISTS = "USER_EXISTS",
  CLIENT_EXISTS = "CLIENT_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum ResetPasswordWSResponseFailureReasonTypeEnum {
  RHOMBUS_USER_NOT_FOUND = "RHOMBUS_USER_NOT_FOUND",
  RHOMBUS_ORG_USER_NOT_FOUND = "RHOMBUS_ORG_USER_NOT_FOUND",
  PASSWORD_RESET_TOKEN_EXPIRED = "PASSWORD_RESET_TOKEN_EXPIRED",
  INVALID_CURRENT_PASSWORD = "INVALID_CURRENT_PASSWORD",
}

export enum PerceptionTypeEnum {
  PEOPLE_COUNTING = "PEOPLE_COUNTING",
  FACE_COUNTING_UNIQUE = "FACE_COUNTING_UNIQUE",
  FACE_COUNTING_NONUNIQUE = "FACE_COUNTING_NONUNIQUE",
  ENGAGMENT_COUNTING = "ENGAGMENT_COUNTING",
  FACE_RECOGNITION = "FACE_RECOGNITION",
  LICENSEPLATE_RECOGNITION = "LICENSEPLATE_RECOGNITION",
  VEHICLE_COUNTING = "VEHICLE_COUNTING",
  OCCUPANCY_COUNTING = "OCCUPANCY_COUNTING",
  UNKNOWN = "UNKNOWN",
}

export enum PermissionEnum {
  READONLY = "READONLY",
  ADMIN = "ADMIN",
  LIVEONLY = "LIVEONLY",
}

export enum PhysicalPortEnumType {
  GPIO_OUTPUT = "GPIO_OUTPUT",
  GPIO_INPUT = "GPIO_INPUT",
  GPIO_INPUT_SUPERVISED = "GPIO_INPUT_SUPERVISED",
  RS485 = "RS485",
  WIEGAND_INPUT = "WIEGAND_INPUT",
  WIEGAND_OUTPUT = "WIEGAND_OUTPUT",
  BUTTON_INPUT = "BUTTON_INPUT",
}

export enum PimlocBaseAPIUrlEnum {
  US = "US",
  EU = "EU",
}

export enum PinStatusEnum {
  ACTIVE = "ACTIVE",
  SCHEDULED = "SCHEDULED",
  EXPIRED = "EXPIRED",
}

export enum PipelineComponentTypeEnum {
  logger = "logger",
  cropper_jpg = "cropper_jpg",
  color_class = "color_class",
  crop_mem = "crop_mem",
  motion_filter = "motion_filter",
  motion_detector = "motion_detector",
  visual_tamper = "visual_tamper",
  syntiant_va = "syntiant_va",
  syntiant_tracker = "syntiant_tracker",
  syntiant_lpr = "syntiant_lpr",
  syntiant_bounding_box = "syntiant_bounding_box",
}

export enum PlayerViewLiveTypeEnum {
  REALTIME = "REALTIME",
  BUFFERED = "BUFFERED",
}

export enum PolicyAlertV2CllmPromptTypeEnum {
  COUNT = "COUNT",
  PERCENT = "PERCENT",
  BOOLEAN = "BOOLEAN",
}

export enum PolicyAlertV2TypeEnum {
  POLICY_ALERT_V2 = "POLICY_ALERT_V2",
  ACCESS_CONTROLLED_DOOR_POLICY_ALERT = "ACCESS_CONTROLLED_DOOR_POLICY_ALERT",
}

export enum PolicyAlertWithDetailsTypeEnum {
  POLICY_ALERT_V2 = "POLICY_ALERT_V2",
  ACCESS_CONTROLLED_DOOR_POLICY_ALERT = "ACCESS_CONTROLLED_DOOR_POLICY_ALERT",
}

export enum PromptConfigurationPromptTypeEnum {
  COUNT = "COUNT",
  PERCENT = "PERCENT",
  BOOLEAN = "BOOLEAN",
}

export enum ProximityEventStatusEnum {
  ACTIVE = "ACTIVE",
  STATIONARY = "STATIONARY",
  OFFLINE = "OFFLINE",
}

export enum ProximityTagLocomotionEventMovementEnum {
  ARRIVAL = "ARRIVAL",
  DEPARTURE = "DEPARTURE",
  MOVED_SIGNIFICANTLY = "MOVED_SIGNIFICANTLY",
  UNKNOWN = "UNKNOWN",
}

export enum GetLocomotionEventsForTagWSRequestMovementFilterEnum {
  ARRIVAL = "ARRIVAL",
  DEPARTURE = "DEPARTURE",
  MOVED_SIGNIFICANTLY = "MOVED_SIGNIFICANTLY",
  UNKNOWN = "UNKNOWN",
}

export enum GetProximityEventsForTagWSRequestStatusFilterEnum {
  ACTIVE = "ACTIVE",
  STATIONARY = "STATIONARY",
  OFFLINE = "OFFLINE",
}

export enum MinimalProximityStateStatusEnum {
  ACTIVE = "ACTIVE",
  STATIONARY = "STATIONARY",
  OFFLINE = "OFFLINE",
}

export enum Proximity_ProximityHealthDetailsEnum {
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NONE = "NONE",
}

export enum Proximity_ProximityHealthEnum {
  GREEN = "GREEN",
}

export enum QueryStatusEnum {
  ANSWERED = "ANSWERED",
  PARTIALLY_ANSWERED = "PARTIALLY_ANSWERED",
  CLARIFICATION_REQUESTED = "CLARIFICATION_REQUESTED",
  REDIRECTED = "REDIRECTED",
  INITIATED = "INITIATED",
  QUEUED = "QUEUED",
  IN_PROGRESS = "IN_PROGRESS",
  CALLING_TOOLS = "CALLING_TOOLS",
  GENERATING_RESPONSE = "GENERATING_RESPONSE",
  GENERATING_REPORT_OUTLINE = "GENERATING_REPORT_OUTLINE",
  GENERATING_REPORT_SECTIONS = "GENERATING_REPORT_SECTIONS",
  NOT_UNDERSTOOD = "NOT_UNDERSTOOD",
  INVALID_REQUEST = "INVALID_REQUEST",
  UNAUTHORIZED = "UNAUTHORIZED",
  UNSUPPORTED = "UNSUPPORTED",
  DENIED = "DENIED",
  INTERRUPTED = "INTERRUPTED",
  NO_RESPONSE = "NO_RESPONSE",
  INVALID_AUTH_DATA = "INVALID_AUTH_DATA",
  UNKNOWN = "UNKNOWN",
}

export enum RMAErrorCodeEnum {
  BADGE_READER_UNKNOWN = "BADGE_READER_UNKNOWN",
  DEAD_OR_MISSING_BATTERY = "DEAD_OR_MISSING_BATTERY",
  DOORBELL_BUTTON_ISSUE = "DOORBELL_BUTTON_ISSUE",
  ERROR_2 = "ERROR_2",
  ERROR_4 = "ERROR_4",
  ERROR_5 = "ERROR_5",
  ERROR_24 = "ERROR_24",
  ERROR_28 = "ERROR_28",
  ERROR_30 = "ERROR_30",
  ERROR_39 = "ERROR_39",
  ERROR_74 = "ERROR_74",
  ERROR_84 = "ERROR_84",
  FOREIGN_HARDWARE = "FOREIGN_HARDWARE",
  BAD_SD_BLOCKS = "BAD_SD_BLOCKS",
  NEVER_LEFT_BUSY_STATE = "NEVER_LEFT_BUSY_STATE",
  HARDWARE_DAMAGE = "HARDWARE_DAMAGE",
  HEAVY_HARDWARE_DAMAGE = "HEAVY_HARDWARE_DAMAGE",
  WATER_DAMAGE = "WATER_DAMAGE",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  LIGHT_SENSOR = "LIGHT_SENSOR",
  SD_CARD_UNKOWN = "SD_CARD_UNKOWN",
  SD_CARD_READER_BROKEN = "SD_CARD_READER_BROKEN",
  POWER_ISSUES = "POWER_ISSUES",
  RS485_ISSUE = "RS485_ISSUE",
  CUT_FILTER = "CUT_FILTER",
  QUALITY_OR_PERFORMANCE = "QUALITY_OR_PERFORMANCE",
  NETWORK_ISSUES = "NETWORK_ISSUES",
  UNKNOWN = "UNKNOWN",
  ILLEGIBLE_SERIAL_COMM = "ILLEGIBLE_SERIAL_COMM",
  NO_SERIAL_COMM = "NO_SERIAL_COMM",
  COSMETIC_DAMAGE = "COSMETIC_DAMAGE",
  FIRMWARE_REFLASH_REQUIRED = "FIRMWARE_REFLASH_REQUIRED",
  IR_RING_OVERHEATED = "IR_RING_OVERHEATED",
  REGISTERED_SENSOR = "REGISTERED_SENSOR",
  UNDISCOVERED_ISSUE = "UNDISCOVERED_ISSUE",
  FOCUS_ISSUES = "FOCUS_ISSUES",
  POTENTIAL_MANUFACTURING_DEFECT = "POTENTIAL_MANUFACTURING_DEFECT",
}

export enum RMAShipmentMethodEnum {
  GROUND = "GROUND",
  EXPEDITED = "EXPEDITED",
  OVERNIGHT = "OVERNIGHT",
}

export enum RMAStatusEnum {
  INITIATED = "INITIATED",
  PENDING = "PENDING",
  APPROVED = "APPROVED",
  INPROGRESS = "INPROGRESS",
  COMPLETE = "COMPLETE",
  RETURN = "RETURN",
  STOLEN = "STOLEN",
  OPERATIONAL = "OPERATIONAL",
  FULFILLMENT_ERROR = "FULFILLMENT_ERROR",
}

export enum RealtimeRelativeSecondsScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum RecurringTimeUnitEnum {
  SECONDS = "SECONDS",
  MINUTES = "MINUTES",
  HOURS = "HOURS",
}

export enum RegionOfInterestGroupTypeEnum {
  ACTIVITY = "ACTIVITY",
  REPORTING = "REPORTING",
  CROSSING = "CROSSING",
}

export enum RelativeDateTimeIntervalsScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum AuthenticateThirdPartyCameraWSResponseRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum ExternalRtspEndpointLastRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum ManualDiscoverThirdPartyCameraWSResponseRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum MinimalThirdPartyCameraStateLastRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum RebootNVRVWSResponseResultEnum {
  REBOOT_SENT = "REBOOT_SENT",
  DEVICE_OFFLINE = "DEVICE_OFFLINE",
}

export enum ThirdPartyCameraImportResultUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum UnregisterNVRWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum Relay_UpdateFirmwareWSStatusEnum {
  ALREADY_ON_THE_LATEST_FIRMWARE = "ALREADY_ON_THE_LATEST_FIRMWARE",
  DEVICE_ON_A_SPECIAL_FIRMWARE_AND_CANNOT_BE_UPDATED = "DEVICE_ON_A_SPECIAL_FIRMWARE_AND_CANNOT_BE_UPDATED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UNABLE_TO_REACH_DEVICE = "UNABLE_TO_REACH_DEVICE",
  FIRMWARE_UPDATE_ALREADY_IN_PROGESS = "FIRMWARE_UPDATE_ALREADY_IN_PROGESS",
  DEVICE_NOT_AUTHROIZED = "DEVICE_NOT_AUTHROIZED",
}

export enum RemoteDoorUnlockSystemEnum {
  BRIVO = "BRIVO",
  OPENPATH = "OPENPATH",
  KISI = "KISI",
  PLACEOS = "PLACEOS",
  GENEA = "GENEA",
  PDK = "PDK",
  INNER_RANGE = "INNER_RANGE",
  RHOMBUS = "RHOMBUS",
  UNKNOWN = "UNKNOWN",
}

export enum RenewalClaimKeyExpirationEmailStateEnum {
  NINETY_DAY_EMAIL_SUCCEEDED = "NINETY_DAY_EMAIL_SUCCEEDED",
  NINETY_DAY_EMAIL_FAILED = "NINETY_DAY_EMAIL_FAILED",
  SIXTY_DAY_EMAIL_SUCCEEDED = "SIXTY_DAY_EMAIL_SUCCEEDED",
  SIXTY_DAY_EMAIL_FAILED = "SIXTY_DAY_EMAIL_FAILED",
  FOURTY_FIVE_DAY_EMAIL_SUCCEEDED = "FOURTY_FIVE_DAY_EMAIL_SUCCEEDED",
  FOURTY_FIVE_DAY_EMAIL_FAILED = "FOURTY_FIVE_DAY_EMAIL_FAILED",
  THIRTY_DAY_EMAIL_SUCCEEDED = "THIRTY_DAY_EMAIL_SUCCEEDED",
  THIRTY_DAY_EMAIL_FAILED = "THIRTY_DAY_EMAIL_FAILED",
  TWENTY_ONE_DAY_EMAIL_SUCCEEDED = "TWENTY_ONE_DAY_EMAIL_SUCCEEDED",
  TWENTY_ONE_DAY_EMAIL_FAILED = "TWENTY_ONE_DAY_EMAIL_FAILED",
  FOURTEEN_DAY_EMAIL_SUCCEEDED = "FOURTEEN_DAY_EMAIL_SUCCEEDED",
  FOURTEEN_DAY_EMAIL_FAILED = "FOURTEEN_DAY_EMAIL_FAILED",
  TEN_DAY_EMAIL_SUCCEEDED = "TEN_DAY_EMAIL_SUCCEEDED",
  TEN_DAY_EMAIL_FAILED = "TEN_DAY_EMAIL_FAILED",
  FIVE_DAY_EMAIL_SUCCEEDED = "FIVE_DAY_EMAIL_SUCCEEDED",
  FIVE_DAY_EMAIL_FAILED = "FIVE_DAY_EMAIL_FAILED",
  FOUR_DAY_EMAIL_SUCCEEDED = "FOUR_DAY_EMAIL_SUCCEEDED",
  FOUR_DAY_EMAIL_FAILED = "FOUR_DAY_EMAIL_FAILED",
  THREE_DAY_EMAIL_SUCCEEDED = "THREE_DAY_EMAIL_SUCCEEDED",
  THREE_DAY_EMAIL_FAILED = "THREE_DAY_EMAIL_FAILED",
  TWO_DAY_EMAIL_SUCCEEDED = "TWO_DAY_EMAIL_SUCCEEDED",
  TWO_DAY_EMAIL_FAILED = "TWO_DAY_EMAIL_FAILED",
  ONE_DAY_EMAIL_SUCCEEDED = "ONE_DAY_EMAIL_SUCCEEDED",
  ONE_DAY_EMAIL_FAILED = "ONE_DAY_EMAIL_FAILED",
  ZERO_DAY_EMAIL_SUCCEEDED = "ZERO_DAY_EMAIL_SUCCEEDED",
  ZERO_DAY_EMAIL_FAILED = "ZERO_DAY_EMAIL_FAILED",
  GRACE_PERIOD_EMAILS_IN_PROGRESS = "GRACE_PERIOD_EMAILS_IN_PROGRESS",
  GRACE_PERIOD_EMAILS_COMPLETED = "GRACE_PERIOD_EMAILS_COMPLETED",
  UNKNOWN = "UNKNOWN",
}

export enum RenewalClaimKeyStateEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum RenewalClaimKeyTypeEnum {
  NEW = "NEW",
  RENEWAL = "RENEWAL",
}

export enum AuditEventWebActionEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  REVERT_TO_DEFAULTS = "REVERT_TO_DEFAULTS",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  BULK_PROVISION_CREDENTIALS = "BULK_PROVISION_CREDENTIALS",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_LLM = "UPDATE_INTEGRATION_LLM",
  DELETE_INTEGRATION_LLM = "DELETE_INTEGRATION_LLM",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  CUSTOM_EVENT_CREATE = "CUSTOM_EVENT_CREATE",
  CUSTOM_EVENT_DELETE = "CUSTOM_EVENT_DELETE",
  CUSTOM_EVENT_UPDATE = "CUSTOM_EVENT_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  ORG_LLM_USAGE_UPDATE = "ORG_LLM_USAGE_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum AuditEventWebPrincipalTypeEnum {
  USER = "USER",
  DEVICE = "DEVICE",
  PARTNER = "PARTNER",
  RHOMBUS_SUPPORT = "RHOMBUS_SUPPORT",
  API_TOKEN = "API_TOKEN",
  API_OAUTH_TOKEN = "API_OAUTH_TOKEN",
  SHARED_CLIP = "SHARED_CLIP",
  SHARED_STREAM = "SHARED_STREAM",
  SHARED_TIMELAPSE = "SHARED_TIMELAPSE",
  SHARED_VIDEOWALL = "SHARED_VIDEOWALL",
  KIOSK_CONSOLE = "KIOSK_CONSOLE",
  UNKNOWN = "UNKNOWN",
}

export enum GetAuditFeedWSRequestExcludeActionsEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  REVERT_TO_DEFAULTS = "REVERT_TO_DEFAULTS",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  BULK_PROVISION_CREDENTIALS = "BULK_PROVISION_CREDENTIALS",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_LLM = "UPDATE_INTEGRATION_LLM",
  DELETE_INTEGRATION_LLM = "DELETE_INTEGRATION_LLM",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  CUSTOM_EVENT_CREATE = "CUSTOM_EVENT_CREATE",
  CUSTOM_EVENT_DELETE = "CUSTOM_EVENT_DELETE",
  CUSTOM_EVENT_UPDATE = "CUSTOM_EVENT_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  ORG_LLM_USAGE_UPDATE = "ORG_LLM_USAGE_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum GetAuditFeedWSRequestIncludeActionsEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  REVERT_TO_DEFAULTS = "REVERT_TO_DEFAULTS",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  BULK_PROVISION_CREDENTIALS = "BULK_PROVISION_CREDENTIALS",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_LLM = "UPDATE_INTEGRATION_LLM",
  DELETE_INTEGRATION_LLM = "DELETE_INTEGRATION_LLM",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  CUSTOM_EVENT_CREATE = "CUSTOM_EVENT_CREATE",
  CUSTOM_EVENT_DELETE = "CUSTOM_EVENT_DELETE",
  CUSTOM_EVENT_UPDATE = "CUSTOM_EVENT_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  ORG_LLM_USAGE_UPDATE = "ORG_LLM_USAGE_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum GetAverageReportWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetAverageReportWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetAverageReportWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetAverageReportsWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetAverageReportsWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetAverageReportsWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetCountReportV2WSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetCountReportV2WSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetCountReportV2WSRequestTypesEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetCountReportWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetCountReportWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetCountReportWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetCountReportsForDevicesAtLocationWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetCountReportsForDevicesAtLocationWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetCountReportsWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetCountReportsWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetCountReportsWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetCustomLLMWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetLicensePlatesByDeviceWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetOccupancyCountsWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetRunningAverageWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetRunningAverageWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetSummaryCountReportWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetSummaryCountReportWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetSummaryCountReportWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetThresholdCrossingCountReportWSRequestBucketSizeEnum {
  QUARTER_HOUR = "QUARTER_HOUR",
  HOUR = "HOUR",
  DAY = "DAY",
  WEEK = "WEEK",
  MONTH = "MONTH",
}

export enum GetThresholdCrossingCountReportWSRequestCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  FACE = "FACE",
  LPR = "LPR",
  POSE = "POSE",
  CLIP_EMBED = "CLIP_EMBED",
  UNKNOWN = "UNKNOWN",
}

export enum GetThresholdCrossingCountsWSRequestCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  FACE = "FACE",
  LPR = "LPR",
  POSE = "POSE",
  CLIP_EMBED = "CLIP_EMBED",
  UNKNOWN = "UNKNOWN",
}

export enum GetThresholdCrossingEventsForDeviceWSRequestCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  FACE = "FACE",
  LPR = "LPR",
  POSE = "POSE",
  CLIP_EMBED = "CLIP_EMBED",
  UNKNOWN = "UNKNOWN",
}

export enum GetThresholdCrossingEventsWSRequestCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  FACE = "FACE",
  LPR = "LPR",
  POSE = "POSE",
  CLIP_EMBED = "CLIP_EMBED",
  UNKNOWN = "UNKNOWN",
}

export enum ResetRunningAverageWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum RequestToExitEnumType {
  integrated = "integrated",
  remote = "remote",
}

export enum RequestToExitPhysicalPortEnumType {
  GPIO_INPUT = "GPIO_INPUT",
  GPIO_INPUT_SUPERVISED = "GPIO_INPUT_SUPERVISED",
}

export enum RequestToExitStateEnumType {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum ResponseTypeEnum {
  ANSWER = "ANSWER",
  REPORT = "REPORT",
  UNKNOWN = "UNKNOWN",
}

export enum RhombusOrgUserAccessibleRhombusAppsEnum {
  PARTNER = "PARTNER",
  CONSOLE = "CONSOLE",
  RHOMBUS_KEY = "RHOMBUS_KEY",
  UNKNOWN = "UNKNOWN",
}

export enum RhombusOrgUserStatusEnum {
  JOINED = "JOINED",
  PENDING = "PENDING",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum RhombusSecureMobileFeatureSettingStatusEnum {
  OPTIMAL = "OPTIMAL",
  INHIBITED = "INHIBITED",
}

export enum RhombusSecureMobileFeatureStatusEnum {
  OPT_OUT = "OPT_OUT",
  UNAVAILABLE = "UNAVAILABLE",
  OPTIMAL = "OPTIMAL",
  INHIBITED = "INHIBITED",
  UNKNOWN = "UNKNOWN",
}

export enum RtspEndpointLastRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum RtspEndpointSourceEnum {
  USER = "USER",
  ONVIF = "ONVIF",
}

export enum RuleTriggerConjunctionEnum {
  AND = "AND",
  OR = "OR",
  UNKNOWN = "UNKNOWN",
}

export enum RuleTriggerTypeEnum {
  DEVICE_ACTIVITY_EVENT = "DEVICE_ACTIVITY_EVENT",
  AUDIT_EVENT = "AUDIT_EVENT",
  DIAGNOSTIC_EVENT = "DIAGNOSTIC_EVENT",
  ALERT_MONITORING_EVENT = "ALERT_MONITORING_EVENT",
  BADGE_INTEGRATION_EVENT = "BADGE_INTEGRATION_EVENT",
  SCHEDULED_EVENT = "SCHEDULED_EVENT",
  VISION_LLM_EVENT = "VISION_LLM_EVENT",
  RECURRING_EVENT = "RECURRING_EVENT",
  LOCATION_LOCKDOWN_ACTIVATED_EVENT = "LOCATION_LOCKDOWN_ACTIVATED_EVENT",
  LOCATION_LOCKDOWN_DEACTIVATED_EVENT = "LOCATION_LOCKDOWN_DEACTIVATED_EVENT",
  BUTTON_INTEGRATION_EVENT = "BUTTON_INTEGRATION_EVENT",
  CUSTOM_LLM_EVENT = "CUSTOM_LLM_EVENT",
  UNKNOWN = "UNKNOWN",
}

export enum RuleTypeEnum {
  BUTTON_DEFINED = "BUTTON_DEFINED",
  USER_DEFINED = "USER_DEFINED",
  DOORBELL_CAMERA_DEFINED = "DOORBELL_CAMERA_DEFINED",
  DOOR_CONTROLLER_DEFINED = "DOOR_CONTROLLER_DEFINED",
  LOCKDOWN_PLAN_DEFINED = "LOCKDOWN_PLAN_DEFINED",
  CUSTOM_LLM_DEFINED = "CUSTOM_LLM_DEFINED",
}

export enum SavedClipV2StatusEnum {
  INITIATING = "INITIATING",
  UPLOADING = "UPLOADING",
  RENDERING = "RENDERING",
  FAILED = "FAILED",
  COMPLETE = "COMPLETE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum SavedClipWithDetailsStatusEnum {
  INITIATING = "INITIATING",
  UPLOADING = "UPLOADING",
  RENDERING = "RENDERING",
  FAILED = "FAILED",
  COMPLETE = "COMPLETE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum SceneQueryReportPromptTypeEnum {
  COUNT = "COUNT",
  PERCENT = "PERCENT",
  BOOLEAN = "BOOLEAN",
}

export enum SelectiveUpdatePromptConfigurationWSRequestPromptTypeEnum {
  COUNT = "COUNT",
  PERCENT = "PERCENT",
  BOOLEAN = "BOOLEAN",
}

export enum TriggerPromptWSRequestPromptTypeEnum {
  COUNT = "COUNT",
  PERCENT = "PERCENT",
  BOOLEAN = "BOOLEAN",
}

export enum Schedule_AccessControlledDoorStateSourceEnum {
  DEFAULT_STATE = "DEFAULT_STATE",
  DOOR_SCHEDULE = "DOOR_SCHEDULE",
  DSE_DEFAULT_STATE = "DSE_DEFAULT_STATE",
  DSE_SCHEDULE = "DSE_SCHEDULE",
  DOOR_STATE_OVERRIDE = "DOOR_STATE_OVERRIDE",
}

export enum WeeklyRepeatingScheduleDataStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum SearchObjectsByColorWSRequestColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum SearchSimilarObjectEmbeddingsByTextWSRequestObjectTypeFilterEnum {
  MOTION_HUMAN = "MOTION_HUMAN",
  MOTION_CAR = "MOTION_CAR",
}

export enum SearchSimilarObjectEmbeddingsWSRequestObjectTypeFilterEnum {
  MOTION_HUMAN = "MOTION_HUMAN",
  MOTION_CAR = "MOTION_CAR",
}

export enum SecureTokenAlgorithmEnum {
  AN10922_AES128 = "AN10922_AES128",
}

export enum SeekpointTypeEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum SessionInfoWSClientTypeEnum {
  MOBILE = "MOBILE",
  IOS = "IOS",
  ANDROID = "ANDROID",
  BROWSER = "BROWSER",
}

export enum GetSharedLiveStreamInfoWSResponseMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum SharedVideoWallDeviceMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum SharedTimelapseClipClipFormatEnum {
  MPEG = "MPEG",
  GIF = "GIF",
}

export enum ShellyDeviceCanSendCommandsEnum {
  AUTHORIZED = "AUTHORIZED",
  UNAUTHORIZED = "UNAUTHORIZED",
  UNKNOWN = "UNKNOWN",
}

export enum ShellyDeviceDeviceTypeEnum {
  RELAY = "RELAY",
  LIGHT = "LIGHT",
  ROLLER = "ROLLER",
}

export enum ShipmentServiceLevelEnum {
  NEXT_DAY = "NEXT_DAY",
  SECOND_DAY = "SECOND_DAY",
  THREE_DAY = "THREE_DAY",
  FOUR_DAY = "FOUR_DAY",
  GROUND = "GROUND",
  LOCAL = "LOCAL",
  NEXT_DAY_MORNING = "NEXT_DAY_MORNING",
  WAREHOUSE = "WAREHOUSE",
}

export enum SimpleAuditEventAuditEventEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  REVERT_TO_DEFAULTS = "REVERT_TO_DEFAULTS",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  BULK_PROVISION_CREDENTIALS = "BULK_PROVISION_CREDENTIALS",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_LLM = "UPDATE_INTEGRATION_LLM",
  DELETE_INTEGRATION_LLM = "DELETE_INTEGRATION_LLM",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  CUSTOM_EVENT_CREATE = "CUSTOM_EVENT_CREATE",
  CUSTOM_EVENT_DELETE = "CUSTOM_EVENT_DELETE",
  CUSTOM_EVENT_UPDATE = "CUSTOM_EVENT_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  ORG_LLM_USAGE_UPDATE = "ORG_LLM_USAGE_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum SimpleDiagnosticEventDiagnosticEventEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  GATEWAY_CONNECTED = "GATEWAY_CONNECTED",
  GATEWAY_DISCONNECTED = "GATEWAY_DISCONNECTED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  ALM_AUTHORITIES_CONTACTED = "ALM_AUTHORITIES_CONTACTED",
  ALM_MONITORING_ENABLED = "ALM_MONITORING_ENABLED",
  ALM_MONITORING_DISABLED = "ALM_MONITORING_DISABLED",
  ALM_MONITORING_SETTINGS_CHANGE = "ALM_MONITORING_SETTINGS_CHANGE",
  ALM_THREAT_CASE_CLOSED = "ALM_THREAT_CASE_CLOSED",
  ALM_THREAT_DETECTED = "ALM_THREAT_DETECTED",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum SplicedClipStatusEnum {
  INITIATING = "INITIATING",
  UPLOADING = "UPLOADING",
  RENDERING = "RENDERING",
  FAILED = "FAILED",
  COMPLETE = "COMPLETE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum StatusFamilyEnum {
  INFORMATIONAL = "INFORMATIONAL",
  SUCCESSFUL = "SUCCESSFUL",
  REDIRECTION = "REDIRECTION",
  CLIENT_ERROR = "CLIENT_ERROR",
  SERVER_ERROR = "SERVER_ERROR",
  OTHER = "OTHER",
}

export enum StreamTypeEnum {
  USER = "USER",
  ALARM_MONITORING = "ALARM_MONITORING",
  DICE = "DICE",
  LUMEO = "LUMEO",
  INFORMACAST = "INFORMACAST",
  RAPIDSOS = "RAPIDSOS",
  UNKNOWN = "UNKNOWN",
}

export enum SupervisionModeEnumType {
  CUT_DETECT = "CUT_DETECT",
  SHORT_DETECT = "SHORT_DETECT",
  CUT_AND_SHORT_DETECT = "CUT_AND_SHORT_DETECT",
}

export enum SupervisionStateEnumType {
  CUT_DETECTED = "CUT_DETECTED",
  SHORT_DETECTED = "SHORT_DETECTED",
  NORMAL = "NORMAL",
  INVALID = "INVALID",
  UNKNOWN = "UNKNOWN",
}

export enum SupportAuthorityAuthorityTypeEnum {
  PARTNER_SUPPORT = "PARTNER_SUPPORT",
  RHOMBUS_SUPPORT = "RHOMBUS_SUPPORT",
}

export enum SupportAuthorityWSAuthorityTypeEnum {
  PARTNER_SUPPORT = "PARTNER_SUPPORT",
  RHOMBUS_SUPPORT = "RHOMBUS_SUPPORT",
}

export enum ThirdPartyCameraSettingsPtzEngineEnum {
  DIGITAL = "DIGITAL",
  MECHANICAL = "MECHANICAL",
  NONE = "NONE",
  UNKNOWN = "UNKNOWN",
}

export enum ThirdPartyCameraSettingsPtzMovementEnum {
  RELATIVE = "RELATIVE",
  ABSOLUTE = "ABSOLUTE",
}

export enum ThirdPartyCameraSettingsPtzTranslationSpaceEnum {
  FOV = "FOV",
  DIGITAL = "DIGITAL",
  NONE = "NONE",
  UNKNOWN = "UNKNOWN",
}

export enum ThreatCaseStatusEnum {
  INITIATED = "INITIATED",
  REQUESTED = "REQUESTED",
  FOLLOW_ON = "FOLLOW_ON",
  ESCALATED = "ESCALATED",
  PSAP_CONTACTED = "PSAP_CONTACTED",
  VERIFIED = "VERIFIED",
  DISMISSED = "DISMISSED",
  CANCELLED = "CANCELLED",
  UNVERIFIABLE = "UNVERIFIABLE",
  TIMEOUT = "TIMEOUT",
  ERROR = "ERROR",
  CLOSED = "CLOSED",
}

export enum ThreatCaseTimelineEventTypeEnum {
  ALERT = "ALERT",
  DELAYED_ALERT = "DELAYED_ALERT",
  USER = "USER",
  SERVICE_PROVIDER = "SERVICE_PROVIDER",
  ERROR = "ERROR",
  PANIC_BUTTON = "PANIC_BUTTON",
  ACCESS_CONTROL_INTEGRATION = "ACCESS_CONTROL_INTEGRATION",
  UNKNOWN = "UNKNOWN",
}

export enum TimelapseClipClipFormatEnum {
  MPEG = "MPEG",
  GIF = "GIF",
}

export enum TimelapseStatusStateEnum {
  INITIATED = "INITIATED",
  INPROGRESS = "INPROGRESS",
  COMPLETE = "COMPLETE",
  FAILED = "FAILED",
}

export enum TriggerActivityEnum {
  MOTION_HUMAN = "MOTION_HUMAN",
  VISUAL_TAMPER = "VISUAL_TAMPER",
  MOTION = "MOTION",
  FACE_ALERT = "FACE_ALERT",
  POSE_ANOMALOUS = "POSE_ANOMALOUS",
  MOTION_CAR = "MOTION_CAR",
  LICENSEPLATE_ALERT = "LICENSEPLATE_ALERT",
  HELMET_MISSING = "HELMET_MISSING",
  MASK_MISSING = "MASK_MISSING",
  TAMPER = "TAMPER",
  PEOPLECOUNT_HIGH = "PEOPLECOUNT_HIGH",
  GUN_DETECT_EVENT = "GUN_DETECT_EVENT",
  HUMAN_ENTER = "HUMAN_ENTER",
  HUMAN_EXIT = "HUMAN_EXIT",
  CAR_ENTER = "CAR_ENTER",
  CAR_EXIT = "CAR_EXIT",
  RECURRING_INTERVAL = "RECURRING_INTERVAL",
}

export enum UnHealthyDeviceAlertSymptomEnum {
  POLICY_NOT_ASSIGNED = "POLICY_NOT_ASSIGNED",
  DOWN = "DOWN",
  SLOW_INTERNET = "SLOW_INTERNET",
}

export enum UserMetadataEnum {
  NAME = "NAME",
  FIRST_NAME = "FIRST_NAME",
  LAST_NAME = "LAST_NAME",
  EMAIL = "EMAIL",
}

export enum ChangeUserPasswordWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum CreateUserWSRequestAccessibleRhombusAppsEnum {
  PARTNER = "PARTNER",
  CONSOLE = "CONSOLE",
  RHOMBUS_KEY = "RHOMBUS_KEY",
  UNKNOWN = "UNKNOWN",
}

export enum CreateUserWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum VideoSimilarityModelEnum {
  CHRIS_POSE_512 = "CHRIS_POSE_512",
  CHRIS_BOX_512 = "CHRIS_BOX_512",
  UNKNOWN = "UNKNOWN",
}

export enum WeeklyRepeatingScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum WiegandDataPhysicalPortEnumType {
  WIEGAND_INPUT = "WIEGAND_INPUT",
}

export enum WiegandFormatEnumType {
  H10301 = "H10301",
  D10202 = "D10202",
  H10304 = "H10304",
  H10302 = "H10302",
  WIEGAND_64BIT_RAW = "WIEGAND_64BIT_RAW",
  HID_CORP1000 = "HID_CORP1000",
}

export enum WiegandInputPhysicalPortEnumType {
  WIEGAND_INPUT = "WIEGAND_INPUT",
  GPIO_INPUT = "GPIO_INPUT",
}

export enum WiegandOutputPhysicalPortEnumType {
  WIEGAND_OUTPUT = "WIEGAND_OUTPUT",
}

export enum WrappedRhombusOrgUserAccessibleRhombusAppsEnum {
  PARTNER = "PARTNER",
  CONSOLE = "CONSOLE",
  RHOMBUS_KEY = "RHOMBUS_KEY",
  UNKNOWN = "UNKNOWN",
}

export enum WrappedRhombusOrgUserMfaTokenTypeEnum {
  EMAIL = "EMAIL",
  SMS = "SMS",
  VIRTUAL_MFA = "VIRTUAL_MFA",
}

export enum WrappedRhombusOrgUserStatusEnum {
  JOINED = "JOINED",
  PENDING = "PENDING",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum ZapierEnum {
  BUTTON_EVENTS = "BUTTON_EVENTS",
  DOOR_SENSOR_EVENTS = "DOOR_SENSOR_EVENTS",
  ENVIRONMENTAL_SENSOR_EVENTS = "ENVIRONMENTAL_SENSOR_EVENTS",
  RULE_EVENTS = "RULE_EVENTS",
}

export enum ZapierWebhookSettingsDoorStateEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}


/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accesscontrol/addUsersToAccessControlGroup": {
    /** Adds specified users to an access control group */
    post: operations["addUsersToAccessControlGroup"];
  };
  "/accesscontrol/assignAccessControlCredential": {
    /** Assign a currently unassigned credential to a user */
    post: operations["assignAccessControlCredential"];
  };
  "/accesscontrol/badgeTemplate/createBadgeTemplate": {
    /** Create a badge template */
    post: operations["createBadgeTemplate"];
  };
  "/accesscontrol/badgeTemplate/deleteBadgeTemplate": {
    /** Delete a badge template */
    post: operations["deleteBadgeTemplate"];
  };
  "/accesscontrol/badgeTemplate/deleteBadgeTemplateImage": {
    /** Deletes the stored image and metadata document. Prevented if any badge template refers to the image. */
    post: operations["deleteBadgeTemplateImage"];
  };
  "/accesscontrol/badgeTemplate/findBadgeTemplateImages": {
    /** Finds metadata for all images uploaded for use with badge template configuration */
    post: operations["findBadgeTemplateImages"];
  };
  "/accesscontrol/badgeTemplate/findBadgeTemplates": {
    /** Find badge templates in the org */
    post: operations["findBadgeTemplates"];
  };
  "/accesscontrol/badgeTemplate/getBadgeTemplate": {
    /** Retrieve a badge template */
    post: operations["getBadgeTemplate"];
  };
  "/accesscontrol/badgeTemplate/getBadgeTemplateImage": {
    /** Get the metadata for a specific badge template image */
    post: operations["getBadgeTemplateImage"];
  };
  "/accesscontrol/badgeTemplate/updateBadgeTemplate": {
    /** Update a badge template */
    post: operations["updateBadgeTemplate"];
  };
  "/accesscontrol/badgeTemplate/updateBadgeTemplateImage": {
    /** Update the metadata for a badge template image */
    post: operations["updateBadgeTemplateImage"];
  };
  "/accesscontrol/createAccessControlCredentialByHexValueAndType": {
    /** Create a credential based on a hex value and credential type. Useful if you see an unauthorized badge event, know its type and want to import it */
    post: operations["createAccessControlCredentialByHexValueAndType"];
  };
  "/accesscontrol/createAccessControlGroup": {
    /** Creates an access control group */
    post: operations["createAccessControlGroup"];
  };
  "/accesscontrol/createAccessGrant": {
    /** Create a location access grant */
    post: operations["createAccessGrant"];
  };
  "/accesscontrol/createAccessRevocation": {
    /** Create a location access revocation */
    post: operations["createAccessRevocation"];
  };
  "/accesscontrol/createAppleWalletPass": {
    /** Get credentials to generate Apple Wallet pass for user */
    post: operations["createAppleWalletPass"];
  };
  "/accesscontrol/createRhombusSecureCsnCredential": {
    /** Create a rhombus secure csn credential (Rhombus Badge) */
    post: operations["createRhombusSecureCsnCredential"];
  };
  "/accesscontrol/createStandardCsnCredential": {
    /** Create a standard csn credential (Third Party Badge) */
    post: operations["createStandardCsnCredential"];
  };
  "/accesscontrol/createWiegand64BitRawCredential": {
    /** Create a 64bit raw wiegand credential. Used when an explicit endpoint for the wiegand format is not otherwise defined. */
    post: operations["createWiegand64BitRawCredential"];
  };
  "/accesscontrol/createWiegandCredential": {
    /** Create a wiegand credential */
    post: operations["createWiegandCredential"];
  };
  "/accesscontrol/createWiegandD10202Credential": {
    /** Create a D10202 wiegand credential */
    post: operations["createWiegandD10202Credential"];
  };
  "/accesscontrol/createWiegandH10301Credential": {
    /** Create a H10301 wiegand credential */
    post: operations["createWiegandH10301Credential"];
  };
  "/accesscontrol/createWiegandH10304Credential": {
    /** Create a H10304 wiegand credential */
    post: operations["createWiegandH10304Credential"];
  };
  "/accesscontrol/deleteAccessControlCredential": {
    /** Delete an access control credential. It is recommended to revoke a credential rather than delete it to preserve credential history */
    post: operations["deleteAccessControlCredential"];
  };
  "/accesscontrol/deleteAccessControlGroup": {
    /** Delete an access control group */
    post: operations["deleteAccessControlGroup"];
  };
  "/accesscontrol/deleteLocationAccessGrant": {
    /** Deletes a location access grant */
    post: operations["deleteLocationAccessGrant"];
  };
  "/accesscontrol/deleteLocationAccessRevocation": {
    /** Deletes a location access revocation */
    post: operations["deleteLocationAccessRevocation"];
  };
  "/accesscontrol/deleteUnassignedAccessControlCredential": {
    /** Delete an unassigned access control credential. The credential must be unassigned (revoked) before this method can be called. History of the credential is maintained but it will no longer be returned as an unassigned credential. */
    post: operations["deleteUnassignedAccessControlCredential"];
  };
  "/accesscontrol/doorScheduleException/createExceptionV2": {
    /** Create a door schedule exception */
    post: operations["createExceptionV2"];
  };
  "/accesscontrol/doorScheduleException/deleteExceptionV2": {
    /** Delete door schedule exception */
    post: operations["deleteExceptionV2"];
  };
  "/accesscontrol/doorScheduleException/findExceptionsForDoor": {
    /** Find door schedule exceptions for a specific door */
    post: operations["findExceptionsForDoor"];
  };
  "/accesscontrol/doorScheduleException/findExceptionsForLocationV2": {
    /** Find door schedule exceptions for a specific location */
    post: operations["findExceptionsForLocationV2"];
  };
  "/accesscontrol/doorScheduleException/findExceptionsV2": {
    /** Find door schedule exceptions */
    post: operations["findExceptionsV2"];
  };
  "/accesscontrol/doorScheduleException/getExceptionV2": {
    /** Get a door schedule exception */
    post: operations["getExceptionV2"];
  };
  "/accesscontrol/doorScheduleException/updateExceptionV2": {
    /** Update door schedule exception */
    post: operations["updateExceptionV2"];
  };
  "/accesscontrol/findAccessControlCredentialByOrg": {
    /** Find all access control credentials in the org */
    post: operations["findAccessControlCredentialByOrg"];
  };
  "/accesscontrol/findAccessControlCredentialByUser": {
    /** Find all access control credentials for the specified user */
    post: operations["findAccessControlCredentialByUser"];
  };
  "/accesscontrol/findAccessControlCredentialByUsers": {
    /** Find all access control credentials for the specified users */
    post: operations["findAccessControlCredentialByUsers"];
  };
  "/accesscontrol/findAccessControlGroupByExactName": {
    /** Retrieve the access control group with the specified name */
    post: operations["findAccessControlGroupByExactName"];
  };
  "/accesscontrol/findAccessControlGroupMembershipsByUser": {
    /** Find all access control group memberships by user */
    post: operations["findAccessControlGroupMembershipsByUser"];
  };
  "/accesscontrol/findAccessControlGroupMembershipsForCurrentUser": {
    /** Find all access control group memberships for the current Rhombus Key user */
    post: operations["findAccessControlGroupMembershipsForCurrentUser"];
  };
  "/accesscontrol/findAccessControlGroupsByNamePrefix": {
    /** Retrieve all access control groups with a name starting with the specified prefix */
    post: operations["findAccessControlGroupsByNamePrefix"];
  };
  "/accesscontrol/findAccessControlGroupsByOrg": {
    /** Retrieve all access control groups defined in the org */
    post: operations["findAccessControlGroupsByOrg"];
  };
  "/accesscontrol/findAccessControlGroupsByUserMembership": {
    /** Find all access control groups a user belongs to */
    post: operations["findAccessControlGroupsByUserMembership"];
  };
  "/accesscontrol/findAllUsersForAccessControlGroup": {
    /** Find all users belonging to an access control group */
    post: operations["findAllUsersForAccessControlGroup"];
  };
  "/accesscontrol/findCredentialHistory": {
    /** Retrieves all credential history belonging to an org */
    post: operations["findCredentialHistory"];
  };
  "/accesscontrol/findCredentialHistoryByCredentialHexValue": {
    /** Retrieves all credentials that have owned the credential hex value. Expect at most 1 valid/active credential and the rest are revoked */
    post: operations["findCredentialHistoryByCredentialHexValue"];
  };
  "/accesscontrol/findCredentialHistoryByCredentialValue": {
    /** Retrieves all credentials that have owned the credential value. */
    post: operations["findCredentialHistoryByCredentialValue"];
  };
  "/accesscontrol/findCredentialHistoryByUser": {
    /** Retrieves all credentials both current and revoked that were at some point assigned to the specified user */
    post: operations["findCredentialHistoryByUser"];
  };
  "/accesscontrol/findLocationAccessGrantsByAccessControlledDoor": {
    /** Finds location access grants by the specified access controlled door */
    post: operations["findLocationAccessGrantsByAccessControlledDoor"];
  };
  "/accesscontrol/findLocationAccessGrantsByDoorLabel": {
    /** Finds location access grants by the specified door label */
    post: operations["findLocationAccessGrantsByDoorLabel"];
  };
  "/accesscontrol/findLocationAccessGrantsByGroup": {
    /** Finds location access grants by the specified group */
    post: operations["findLocationAccessGrantsByGroup"];
  };
  "/accesscontrol/findLocationAccessGrantsByLocation": {
    /** Finds location access grants by the specified location */
    post: operations["findLocationAccessGrantsByLocation"];
  };
  "/accesscontrol/findLocationAccessGrantsByLocationAndUser": {
    /** Finds location access grants by the specified location and user */
    post: operations["findLocationAccessGrantsByLocationAndUser"];
  };
  "/accesscontrol/findLocationAccessGrantsByOrg": {
    /** Finds all location access grants in the org */
    post: operations["findLocationAccessGrantsByOrg"];
  };
  "/accesscontrol/findLocationAccessGrantsByUser": {
    /** Finds location access grants by the specified user */
    post: operations["findLocationAccessGrantsByUser"];
  };
  "/accesscontrol/findLocationAccessRevocationsByAccessControlledDoor": {
    /** Finds location access revocations by the specified access controlled door */
    post: operations["findLocationAccessRevocationsByAccessControlledDoor"];
  };
  "/accesscontrol/findLocationAccessRevocationsByDoorLabel": {
    /** Finds location access revocation by the specified door label */
    post: operations["findLocationAccessRevocationsByDoorLabel"];
  };
  "/accesscontrol/findLocationAccessRevocationsByGroup": {
    /** Finds location access revocations by the specified group */
    post: operations["findLocationAccessRevocationsByGroup"];
  };
  "/accesscontrol/findLocationAccessRevocationsByOrg": {
    /** Finds all location access revocations in the org */
    post: operations["findLocationAccessRevocationsByOrg"];
  };
  "/accesscontrol/findLocationAccessRevocationsByUser": {
    /** Finds location access revocations by the specified user */
    post: operations["findLocationAccessRevocationsByUser"];
  };
  "/accesscontrol/findRhombusSecureMobileCredentialsForCurrentUser": {
    /** Find all rhombus secure mobile credentials for the current user */
    post: operations["findRhombusSecureMobileCredentialsForCurrentUser"];
  };
  "/accesscontrol/findUnlockableAccessControlledDoorsByDevice": {
    /** Retrieve basic details of unlockable access controlled doors for a device */
    post: operations["findUnlockableAccessControlledDoorsByDevice"];
  };
  "/accesscontrol/firstIn/applyDoorAuthFirstInGroupState": {
    /** Attempts to apply the specified first-in state to all doors belonging to the specified first-in settings */
    post: operations["applyDoorAuthFirstInGroupState"];
  };
  "/accesscontrol/firstIn/applyDoorAuthFirstInState": {
    /** Attempts to apply the specified first-in state to the specified door */
    post: operations["applyDoorAuthFirstInState"];
  };
  "/accesscontrol/firstIn/applyDoorScheduleFirstInGroupState": {
    /** Attempts to apply the specified first-in state to all doors belonging to the specified first-in settings */
    post: operations["applyDoorScheduleFirstInGroupState"];
  };
  "/accesscontrol/firstIn/applyDoorScheduleFirstInState": {
    /** Attempts to apply the specified first-in state to the specified door */
    post: operations["applyDoorScheduleFirstInState"];
  };
  "/accesscontrol/firstIn/createLocationFirstInSettings": {
    /** Create settings for first-in that can be shared across the specified doors within a location */
    post: operations["createLocationFirstInSettings"];
  };
  "/accesscontrol/firstIn/deleteLocationFirstInSettings": {
    /** Delete the specified first-in settings. Effectively removes first-in configuration from all doors that belong to the settings */
    post: operations["deleteLocationFirstInSettings"];
  };
  "/accesscontrol/firstIn/findLocationFirstInSettingsByLocation": {
    /** Paginated retrieval of all first-in settings in a location */
    post: operations["findLocationFirstInSettingsByLocation"];
  };
  "/accesscontrol/firstIn/findLocationFirstInSettingsByOrg": {
    /** Paginated retrieval of all first-in settings in an org */
    post: operations["findLocationFirstInSettingsByOrg"];
  };
  "/accesscontrol/firstIn/getLocationFirstInSettings": {
    /** Retrieve the specified first-in settings by its unique RUUID */
    post: operations["getLocationFirstInSettings"];
  };
  "/accesscontrol/firstIn/getLocationFirstInSettingsForDoor": {
    /** Retrieve the first-in settings that a door belongs to, if any */
    post: operations["getLocationFirstInSettingsForDoor"];
  };
  "/accesscontrol/firstIn/removeDoorLocationFirstInSettings": {
    /** Removes the specified door from the first-in settings if currently assigned to one. Also possible via the updateLocationFirstInSettings method but this method will leave other doorsbelonging assigned settings as-is rather than require the entire list. */
    post: operations["removeDoorLocationFirstInSettings"];
  };
  "/accesscontrol/firstIn/updateLocationFirstInSettings": {
    /** Update settings for first-in that can be shared across the specified doors within a location */
    post: operations["updateLocationFirstInSettings"];
  };
  "/accesscontrol/forceRefreshAccessControlUnitConfig": {
    /** Send a command to the access control unit so it refreshes its complete configuration */
    post: operations["forceRefreshAccessControlUnitConfig"];
  };
  "/accesscontrol/getLocationAccessGrant": {
    /** Retrieve a location access grant by id */
    post: operations["getLocationAccessGrant"];
  };
  "/accesscontrol/getLocationAccessRevocation": {
    /** Retrieve a location access revocation by id */
    post: operations["getLocationAccessRevocation"];
  };
  "/accesscontrol/getLocationsByAccessGrantForCurrentUser": {
    /** Get locations for which the current user is associated with 1 or more access grants */
    post: operations["getLocationsByAccessGrantForCurrentUser"];
  };
  "/accesscontrol/getMinimalAccessControlledDoorsByLocationForCurrentUser": {
    /** Get access controlled doors for the specified location for which the current user is associated with 1 or more access grants */
    post: operations["getMinimalAccessControlledDoorsByLocationForCurrentUser"];
  };
  "/accesscontrol/getRhombusKeyLocationLockdownDetailsForCurrentUser": {
    /** Get the current state of a location lockdown and messages that should be displayed */
    post: operations["getRhombusKeyLocationLockdownDetailsForCurrentUser"];
  };
  "/accesscontrol/getRhombusSecureCsnCredentialDetails": {
    /** Retrieves a rhombus secure csn credential including sensitive details */
    post: operations["getRhombusSecureCsnCredentialDetails"];
  };
  "/accesscontrol/getRhombusSecureMobileAppStateStatsForOrg": {
    /** Retrieves stats of Rhombus Key app usage for active credentials that describe whether settings are optimal for the best user experience */
    post: operations["getRhombusSecureMobileAppStateStatsForOrg"];
  };
  "/accesscontrol/getStandardCsnCredentialDetails": {
    /** Retrieves a standard csn credential including sensitive details */
    post: operations["getStandardCsnCredentialDetails"];
  };
  "/accesscontrol/lockdownPlan/activateLockdownForLocation": {
    /** Activate lockdown for the specified location */
    post: operations["activateLockdownForLocation"];
  };
  "/accesscontrol/lockdownPlan/activateLockdownForLocationViaRhombusKey": {
    /** Activate lockdown for the specified location from Rhombus Key */
    post: operations["activateLockdownForLocationViaRhombusKey"];
  };
  "/accesscontrol/lockdownPlan/createLocationLockdownPlan": {
    /** Create location lockdown plan */
    post: operations["createLocationLockdownPlan"];
  };
  "/accesscontrol/lockdownPlan/createLockdownRuleForLocation": {
    /** Create (or update if ruleUuid is provided) a lockdown rule for the specified location */
    post: operations["createLockdownRuleForLocation"];
  };
  "/accesscontrol/lockdownPlan/deactivateLockdownForLocation": {
    /** Deactivate lockdown for the specified location */
    post: operations["deactivateLockdownForLocation"];
  };
  "/accesscontrol/lockdownPlan/deactivateLockdownForLocationViaRhombusKey": {
    /** Deactivate lockdown for the specified location from Rhombus Key */
    post: operations["deactivateLockdownForLocationViaRhombusKey"];
  };
  "/accesscontrol/lockdownPlan/deleteLocationLockdownState": {
    /** Disables tracking lockdown state for the specified location */
    post: operations["deleteLocationLockdownState"];
  };
  "/accesscontrol/lockdownPlan/deleteLockdownPlan": {
    /** Delete lockdown plan */
    post: operations["deleteLockdownPlan"];
  };
  "/accesscontrol/lockdownPlan/deleteLockdownRuleForLocation": {
    /** Delete a lockdown rule for the specified location */
    post: operations["deleteLockdownRuleForLocation"];
  };
  "/accesscontrol/lockdownPlan/disableLockdownTestModeForLocation": {
    /** Disable test mode of lockdown for the specified location */
    post: operations["disableLockdownTestModeForLocation"];
  };
  "/accesscontrol/lockdownPlan/enableLockdownTestModeForLocation": {
    /** Enable test mode of lockdown for the specified location */
    post: operations["enableLockdownTestModeForLocation"];
  };
  "/accesscontrol/lockdownPlan/findLocationLockdownEvents": {
    /** Retrieve a list of lockdown events for the specified location */
    post: operations["findLocationLockdownEvents"];
  };
  "/accesscontrol/lockdownPlan/findLocationLockdownStates": {
    /** Finds the state of all lockdowns for the org */
    post: operations["findLocationLockdownStates"];
  };
  "/accesscontrol/lockdownPlan/findLockdownPlans": {
    /** Find lockdown plans in the org */
    post: operations["findLockdownPlans"];
  };
  "/accesscontrol/lockdownPlan/findLockdownPlansByLocation": {
    /** Find lockdown plans for the specified location */
    post: operations["findLockdownPlansByLocation"];
  };
  "/accesscontrol/lockdownPlan/getLockdownPlan": {
    /** Get lockdown plan */
    post: operations["getLockdownPlan"];
  };
  "/accesscontrol/lockdownPlan/getLockdownRulesForLocation": {
    /** Get lockdown activation / deactivation rules for a location */
    post: operations["getLockdownRulesForLocation"];
  };
  "/accesscontrol/lockdownPlan/getOrCreateLocationLockdownState": {
    /** Retrieves an existing lockdown state or creates one for the specified location */
    post: operations["getOrCreateLocationLockdownState"];
  };
  "/accesscontrol/lockdownPlan/updateLocationLockdownPlan": {
    /** Update location lockdown plan */
    post: operations["updateLocationLockdownPlan"];
  };
  "/accesscontrol/pin/bulkProvisionPinCredentials": {
    /** Bulk provision PIN credentials for multiple users */
    post: operations["bulkProvisionPinCredentials"];
  };
  "/accesscontrol/pin/bulkRotatePinCredentials": {
    /** Rotate multiple PIN credentials with new generated values */
    post: operations["bulkRotatePinCredentials"];
  };
  "/accesscontrol/pin/createPinCredential": {
    /** Create a PIN credential */
    post: operations["createPinCredential"];
  };
  "/accesscontrol/pin/deletePinCredential": {
    /** Delete a PIN credential */
    post: operations["deletePinCredential"];
  };
  "/accesscontrol/pin/findPinCredentialsByOrg": {
    /** Retrieves all PIN credentials in the org */
    post: operations["findPinCredentialsByOrg"];
  };
  "/accesscontrol/pin/getAvailablePinCode": {
    /** Get an unclaimed PIN code to create a PIN credential with */
    post: operations["getAccessControlAvailablePinCode"];
  };
  "/accesscontrol/pin/getPinCredentialDetails": {
    /** Retrieves a PIN credential including sensitive details */
    post: operations["getPinCredentialDetails"];
  };
  "/accesscontrol/pin/revokePinCredential": {
    /** Revoke a PIN credential */
    post: operations["revokePinCredential"];
  };
  "/accesscontrol/pin/rotatePinCredential": {
    /** Rotate a PIN credential with a new value */
    post: operations["rotatePinCredential"];
  };
  "/accesscontrol/pin/updatePinCredential": {
    /** Update a PIN credential */
    post: operations["updatePinCredential"];
  };
  "/accesscontrol/provisionMobileAccessControlCredentialForCurrentUser": {
    /** Creates a mobile access control credential. Store the private key securely, there is no other way to retrieve it other then generating a new cred. */
    post: operations["provisionMobileAccessControlCredentialForCurrentUser"];
  };
  "/accesscontrol/qr/generateQRAccessCode": {
    /** Generate a QR code to unlock a door remotely when viewed by a camera */
    post: operations["generateQRAccessCode"];
  };
  "/accesscontrol/qr/getQRAccessCodes": {
    /** Generate a QR code to unlock a door remotely when viewed by a camera */
    post: operations["getQRAccessCodes"];
  };
  "/accesscontrol/removeUsersFromAccessControlGroup": {
    /** Removes specified users from an access control group */
    post: operations["removeUsersFromAccessControlGroup"];
  };
  "/accesscontrol/revokeAccessControlCredential": {
    /** Revokes an access control credential. Unlike suspension this will give up its claim on the credential value allowing another cred to claim it as its identifier */
    post: operations["revokeAccessControlCredential"];
  };
  "/accesscontrol/revokeRhombusSecureMobileCredentialForCurrentUser": {
    /** Revoke user's rhombus secure mobile credential */
    post: operations["revokeRhombusSecureMobileCredentialForCurrentUser"];
  };
  "/accesscontrol/sendUserPresenceForCurrentUser": {
    post: operations["sendUserPresenceForCurrentUser"];
  };
  "/accesscontrol/suspendAccessControlCredential": {
    /** Mark an access control credential as suspended */
    post: operations["suspendAccessControlCredential"];
  };
  "/accesscontrol/unlockAccessControlledDoor": {
    /** Unlock an access controlled door */
    post: operations["unlockAccessControlledDoor"];
  };
  "/accesscontrol/unlockAccessControlledDoorForCurrentUser": {
    /** Unlock an access controlled door using authorization of supplied user token */
    post: operations["unlockAccessControlledDoorForCurrentUser"];
  };
  "/accesscontrol/unsuspendAccessControlCredential": {
    /** Mark an access control credential as no longer suspended */
    post: operations["unsuspendAccessControlCredential"];
  };
  "/accesscontrol/updateAccessControlCredentialNote": {
    /** Update the note field of an Access Control Credential */
    post: operations["updateAccessControlCredentialNote"];
  };
  "/accesscontrol/updateAccessControlGroup": {
    /** Updates an access control group's meta information like name and description */
    post: operations["updateAccessControlGroup"];
  };
  "/accesscontrol/updateAccessGrant": {
    /** Updates a location access grant */
    post: operations["updateAccessGrant"];
  };
  "/accesscontrol/updateAccessRevocation": {
    /** Updates a location access revocation */
    post: operations["updateAccessRevocation"];
  };
  "/accesscontrol/updateRhombusKeyMobileAppStateForCurrentUser": {
    /** Rhombus Key can update the detected app state which includes settings that can effect certain features. */
    post: operations["updateRhombusKeyMobileAppStateForCurrentUser"];
  };
  "/accesscontrol/updateRhombusSecureCsnCredential": {
    /** Update a rhombus secure csn credential (Rhombus Badge) */
    post: operations["updateRhombusSecureCsnCredential"];
  };
  "/accesscontrol/updateRhombusSecureMobileCredential": {
    /** Update a rhombus secure mobile credential (RhombusKey App w/ BLE or NFC) */
    post: operations["updateRhombusSecureMobileCredential"];
  };
  "/accesscontrol/updateStandardCsnCredential": {
    /** Update a standard csn credential (Third Party Badge) */
    post: operations["updateStandardCsnCredential"];
  };
  "/accesscontrol/updateWiegandCredential": {
    /** Update a wiegand credential (Third Party Badge) */
    post: operations["updateWiegandCredential"];
  };
  "/alertmonitoring/acceptAlertMonitoringTermsOfService": {
    post: operations["acceptAlertMonitoringTermsOfService"];
  };
  "/alertmonitoring/acceptAlertMonitoringTermsOfServiceForLocation": {
    post: operations["acceptAlertMonitoringTermsOfServiceForLocation"];
  };
  "/alertmonitoring/cancelThreatCase": {
    post: operations["cancelThreatCase"];
  };
  "/alertmonitoring/createAlertMonitoringSettings": {
    post: operations["createAlertMonitoringSettings"];
  };
  "/alertmonitoring/createCustomPinForLocation": {
    post: operations["createCustomPinForLocation"];
  };
  "/alertmonitoring/createPinForLocation": {
    post: operations["createPinForLocation"];
  };
  "/alertmonitoring/deleteAlertMonitoringSettings": {
    post: operations["deleteAlertMonitoringSettings"];
  };
  "/alertmonitoring/deletePinForLocation": {
    post: operations["deletePinForLocation"];
  };
  "/alertmonitoring/disableMonitoringForLocation": {
    post: operations["disableMonitoringForLocation"];
  };
  "/alertmonitoring/dismissThreatCase": {
    post: operations["dismissThreatCase"];
  };
  "/alertmonitoring/enableMonitoringForLocation": {
    post: operations["enableMonitoringForLocation"];
  };
  "/alertmonitoring/escalateThreatCaseToAlarm": {
    post: operations["escalateThreatCaseToAlarm"];
  };
  "/alertmonitoring/generateMonthlyVerificationsForYearReportForLocation": {
    post: operations["generateMonthlyVerificationsForYearReportForLocation"];
  };
  "/alertmonitoring/generateReportDataForLocation": {
    post: operations["generateReportDataForLocation"];
  };
  "/alertmonitoring/getAlertMonitoringSettings": {
    post: operations["getAlertMonitoringSettings"];
  };
  "/alertmonitoring/getAlertMonitoringSettingsForLocation": {
    /** Retrieve alert monitoring settings by location. */
    post: operations["getAlertMonitoringSettingsForLocation"];
  };
  "/alertmonitoring/getTripwireGroupCount": {
    post: operations["getAlertMonitoringTripwireGroupCount"];
  };
  "/alertmonitoring/locationStatus": {
    /** Retrieve summary of the alarm monitoring status for the specified location */
    post: operations["locationStatus"];
  };
  "/alertmonitoring/orgStatus": {
    /** Retrieve summary of the alarm monitoring status for all locations */
    post: operations["orgStatus"];
  };
  "/alertmonitoring/pin/bulkProvisionPins": {
    /** Bulk provision alert monitoring PINs for multiple users. */
    post: operations["bulkProvisionPins"];
  };
  "/alertmonitoring/pin/bulkRotatePins": {
    /** Rotate multiple alert monitoring PINs. */
    post: operations["bulkRotatePins"];
  };
  "/alertmonitoring/pin/createPin": {
    /** Create a PIN for alert monitoring. */
    post: operations["createPin"];
  };
  "/alertmonitoring/pin/deletePin": {
    /** Delete an alert monitoring PIN. */
    post: operations["deletePin"];
  };
  "/alertmonitoring/pin/findPinsByLocationAndUser": {
    /** Retrieve alert monitoring PINs by location and/or user. */
    post: operations["findPinsByLocationAndUser"];
  };
  "/alertmonitoring/pin/findPinsByOrg": {
    /** Retrieve alert monitoring PINs by org. */
    post: operations["findPinsByOrg"];
  };
  "/alertmonitoring/pin/getAvailablePinCode": {
    /** Get an unclaimed PIN code to create an alert monitoring PIN with. */
    post: operations["getAlertMonitoringAvailablePinCode"];
  };
  "/alertmonitoring/pin/getPin": {
    /** Retrieve an alert monitoring PIN. */
    post: operations["getPin"];
  };
  "/alertmonitoring/pin/rotatePin": {
    /** Rotate an alert monitoring PIN. */
    post: operations["rotatePin"];
  };
  "/alertmonitoring/pin/updatePin": {
    /** Update an alert monitoring PIN. */
    post: operations["updatePin"];
  };
  "/alertmonitoring/resetTripwireGroupCount": {
    post: operations["resetAlertMonitoringTripwireGroupCount"];
  };
  "/alertmonitoring/updateAlertMonitoringSettings": {
    post: operations["updateAlertMonitoringSettings"];
  };
  "/audiogateway/delete": {
    /** Remove an audio gateway from organization */
    post: operations["deleteAudioGateway"];
  };
  "/audiogateway/getAudioSeekpoints": {
    /** Get audio seek points */
    post: operations["getAudioSeekpoints"];
  };
  "/audiogateway/getConfig": {
    /** Get an audio gateway config */
    post: operations["getAudioGatewayConfig"];
  };
  "/audiogateway/getFullAudioGatewayState": {
    /** Get detailed information about state of specified audio gateway */
    post: operations["getFullAudioGatewayState"];
  };
  "/audiogateway/getMediaUris": {
    /** Get media uris for audio gateway to retrieve footage */
    post: operations["getAudioGatewayMediaUris"];
  };
  "/audiogateway/getMinimalAudioGatewayStateList": {
    /** Get basic state information for all audio gateways */
    post: operations["getMinimalAudioGatewayStateList"];
  };
  "/audiogateway/getOfflineLanStreamingInfo": {
    /** Get required information for offline lan streaming on all audio gateways */
    post: operations["getAudioGatewayOfflineLanStreamingInfo"];
  };
  "/audiogateway/getPresenceWindows": {
    /** Get stored video information for an audio gateway */
    post: operations["getAudioGatewayPresenceWindows"];
  };
  "/audiogateway/getUptimeWindows": {
    /** Get uptime information for an audio gateway */
    post: operations["getAudioGatewayUptimeWindows"];
  };
  "/audiogateway/reboot": {
    /** Reboot the specified audio gateway */
    post: operations["rebootAudioGateway"];
  };
  "/audiogateway/updateConfig": {
    /** Update config for audio gateway */
    post: operations["updateAudioGatewayConfig"];
  };
  "/audiogateway/updateDetails": {
    /** Update details for audio gateway. Note: uuid is a required field */
    post: operations["updateAudioGatewayDetails"];
  };
  "/audioplayback/cancelLoopingAudioPlayback": {
    /** Cancel any currently playing looping audio for an audio device */
    post: operations["cancelLoopingAudioPlayback"];
  };
  "/audioplayback/deleteAudioUploadMetadata": {
    /** Delete an uploaded audio clip metadata */
    post: operations["deleteAudioUploadMetadata"];
  };
  "/audioplayback/getAudioUploadMetadataForOrg": {
    /** Get list of uploaded audio clip metadata */
    post: operations["getAudioUploadMetadataForOrg"];
  };
  "/audioplayback/playAudioUpload": {
    /** Play an uploaded audio clip through an audio device */
    post: operations["playAudioUpload"];
  };
  "/audioplayback/updateAudioUploadMetadata": {
    /** Update an uploaded audio clip metadata */
    post: operations["updateAudioUploadMetadata"];
  };
  "/audioplayback/uploadAudioPcm/{audioClipName}": {
    /** Upload PCM audio clip */
    post: operations["uploadAudioPcm"];
  };
  "/audioplayback/uploadAudioText": {
    /** Upload text to synthesize audio */
    post: operations["uploadAudioText"];
  };
  "/badgereader/delete": {
    /** Remove the badge reader from the organization */
    post: operations["deleteBadgeReader"];
  };
  "/badgereader/getConfig": {
    /** Get a badge reader's config */
    post: operations["getBadgeReaderConfig"];
  };
  "/badgereader/getFullState": {
    /** Get detailed information about state of specified badge reader */
    post: operations["getBadgeReaderFullState"];
  };
  "/badgereader/getMinimalStateList": {
    /** Get basic state information about all badge readers in organization */
    post: operations["getBadgeReaderMinimalStateList"];
  };
  "/badgereader/reboot": {
    post: operations["rebootBadgeReader"];
  };
  "/badgereader/updateConfig": {
    /** Update a badge reader's config */
    post: operations["updateBadgeReaderConfig"];
  };
  "/badgereader/updateDetails": {
    /** Update hardware details of badge reader. */
    post: operations["updateBadgeReaderDetails"];
  };
  "/ble/getBaseStations": {
    /** Retrieve list of available base stations for BLE sensors */
    post: operations["getBaseStations"];
  };
  "/ble/getSecureSecretForRegistered": {
    /** Get secure secret for registered sensor */
    post: operations["getSecureSecretForRegistered"];
  };
  "/ble/getSecureSecretForUnregistered": {
    /** Get secure secret to register an unregistered sensor */
    post: operations["getSecureSecretForUnregistered"];
  };
  "/ble/getSecureSecretOfRegisteredDeviceForRhombusKey": {
    /** Equivalent to getSecureSecretForRegistered but for RhombusKey mobile app */
    post: operations["getSecureSecretOfRegisteredDeviceForRhombusKey"];
  };
  "/ble/getSensorHardwareFirmwareUpdateDetails": {
    /** Get latest firmware update details for all sensor */
    post: operations["getSensorHardwareFirmwareUpdateDetails"];
  };
  "/ble/registerSensor": {
    /** Register a sensor to an organization */
    post: operations["registerSensor"];
  };
  "/ble/unregisterSensor": {
    /** Unregister a sensor from account */
    post: operations["unregisterSensor"];
  };
  "/button/createRuleForButton": {
    /** Create rule for a button sensor. */
    post: operations["createRuleForButton"];
  };
  "/button/deleteRuleForButton": {
    /** Delete rule for a button sensor. */
    post: operations["deleteRuleForButton"];
  };
  "/button/getButtonPressEventsForSensor": {
    /** Get list of button press events for button sensor */
    post: operations["getButtonPressEventsForSensor"];
  };
  "/button/getButtonRulesForOrg": {
    /** Get rules for all buttons in an org. */
    post: operations["getButtonRulesForOrg"];
  };
  "/button/getMinimalButtonStateList": {
    /** Get basic state information for all button sensors */
    post: operations["getMinimalButtonStateList"];
  };
  "/button/getRulesForButton": {
    /** Get all rules for a button sensor. */
    post: operations["getRulesForButton"];
  };
  "/button/updateConfig": {
    /** Update config for a button sensor. */
    post: operations["updateButtonConfig"];
  };
  "/button/updateDetails": {
    /** Update details for a button sensor. */
    post: operations["updateButtonDetails"];
  };
  "/camera/calibrateFloorplanProjection": {
    /** Generate the homography to project detections onto a floorplan. */
    post: operations["cameraCalibrateFloorplanProjection"];
  };
  "/camera/createCustomFootageSeekpoints": {
    /** Create custom activity seekpoints for a specified camera */
    post: operations["createCustomFootageSeekpoints"];
  };
  "/camera/createFootageBoundingBoxes": {
    /** Create an activity bounding box for specified camera */
    post: operations["createFootageBoundingBoxes"];
  };
  "/camera/createProtectedSharedLiveVideoStream": {
    /** Share a password protected live video stream for a camera */
    post: operations["createProtectedSharedLiveVideoStream"];
  };
  "/camera/createProtectedSharedVideoWall": {
    /** Share a password protected video wall */
    post: operations["createProtectedSharedVideoWall"];
  };
  "/camera/createRawHttpStream": {
    /** Create a raw HTTP stream for a camera */
    post: operations["createCameraRawHttpStream"];
  };
  "/camera/createSharedLiveVideoStream": {
    /** Share an unprotected live video stream for a camera */
    post: operations["createCameraSharedLiveVideoStream"];
  };
  "/camera/createSharedVideoWall": {
    /** Share an unprotected video wall */
    post: operations["createSharedVideoWall"];
  };
  "/camera/createVideoWall": {
    /** Create a video wall for user */
    post: operations["createVideoWall"];
  };
  "/camera/delete": {
    /** Remove a camera from organization */
    post: operations["deleteCamera"];
  };
  "/camera/deleteCustomFootageSeekpoints": {
    /** Delete custom seekpoints for specified cameras */
    post: operations["deleteCustomFootageSeekpoints"];
  };
  "/camera/deleteRawHttpStream": {
    /** Delete a raw HTTP stream for a camera */
    post: operations["deleteCameraRawHttpStream"];
  };
  "/camera/deleteSharedLiveVideoStream": {
    /** Remove a shared live stream from camera */
    post: operations["deleteSharedLiveVideoStream"];
  };
  "/camera/deleteSharedVideoWall": {
    /** Remove a shared video wall */
    post: operations["deleteSharedVideoWall"];
  };
  "/camera/deleteVideoWall": {
    /** Delete a video wall */
    post: operations["deleteVideoWall"];
  };
  "/camera/erase": {
    /** Wipes the SD card on a camera */
    post: operations["eraseCamera"];
  };
  "/camera/findAllRawHttpStreams": {
    /** Get a list of all cameras raw HTTP streams */
    post: operations["findAllCameraRawHttpStreams"];
  };
  "/camera/findAllSharedLiveVideoStreams": {
    /** Get list of all shared live streams */
    post: operations["findAllSharedLiveVideoStreams"];
  };
  "/camera/findSharedLiveVideoStreams": {
    /** Get list of all shared live streams for camera */
    post: operations["findCameraSharedLiveVideoStreams"];
  };
  "/camera/findSharedVideoWalls": {
    /** Get list of all shares for a video wall */
    post: operations["findSharedVideoWalls"];
  };
  "/camera/generateBatchRegistrationInfo": {
    /** Create camera registration information for QR code generation */
    post: operations["generateBatchRegistrationInfo"];
  };
  "/camera/generateWifiChangeAuthorizationToken": {
    /** Create a change wifi request for QR code generation */
    post: operations["generateWifiChangeAuthorizationToken"];
  };
  "/camera/getBatchRegistrationUsage": {
    /** Get detailed usage information for a registration token */
    post: operations["getBatchRegistrationUsage"];
  };
  "/camera/getCameraAIThresholds": {
    /** Get AI normalized confidence thresholds for a camera */
    post: operations["getCameraAIThresholds"];
  };
  "/camera/getCloudArchivedMediaInfo": {
    /** Get information on archived video for specified camera */
    post: operations["getCloudArchivedMediaInfo"];
  };
  "/camera/getCloudArchivingConfig": {
    /** Get the cloud archiving scheduling config applicable to a camera */
    post: operations["getCloudArchivingConfig"];
  };
  "/camera/getConfig": {
    /** Get a camera's config */
    post: operations["getCameraConfig"];
  };
  "/camera/getCurrentState": {
    /** Use /getFullCameraState instead */
    post: operations["getCurrentCameraState"];
  };
  "/camera/getCustomFootageSeekpointsV2": {
    /** Get activity seekpoints for specified camera */
    post: operations["getCustomFootageSeekpointsV2"];
  };
  "/camera/getDetails": {
    /** Get hardware details of multiple cameras */
    post: operations["getCameraDetails"];
  };
  "/camera/getFacetedConfig": {
    /** Get a camera's config */
    post: operations["getCameraFacetedConfig"];
  };
  "/camera/getFootageBoundingBoxes": {
    /** Get object bounding boxes for a specified camera. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
    post: operations["getCameraFootageBoundingBoxes"];
  };
  "/camera/getFootageBoundingBoxesForMultiple": {
    /** Get object bounding boxes for multiple cameras. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
    post: operations["getFootageBoundingBoxesForMultiple"];
  };
  "/camera/getFootageSeekpoints": {
    /** Use /getFootageSeekpointsV2 instead */
    post: operations["getCameraFootageSeekpoints"];
  };
  "/camera/getFootageSeekpointsForMultiple": {
    /** Get activity seekpoints for multiple cameras */
    post: operations["getFootageSeekpointsForMultiple"];
  };
  "/camera/getFootageSeekpointsV2": {
    /** Get activity seekpoints for specified camera */
    post: operations["getCameraFootageSeekpointsV2"];
  };
  "/camera/getFullCameraState": {
    /** Get detailed information about state of specified camera */
    post: operations["getFullCameraState"];
  };
  "/camera/getLineCrossingEnabledCamerasForLocation": {
    /** Gets all the cameras that have line-crossing feature enabled at a location */
    post: operations["getLineCrossingEnabledCamerasForLocation"];
  };
  "/camera/getMediaUris": {
    /** Get media uris for camera to retrieve footage */
    post: operations["getCameraMediaUris"];
  };
  "/camera/getMinimalCameraLocationMap": {
    /** Get basic information about all cameras and their locations in organization */
    post: operations["getMinimalCameraLocationMap"];
  };
  "/camera/getMinimalCameraStateList": {
    /** Get basic state information about all cameras in organization */
    post: operations["getMinimalCameraStateList"];
  };
  "/camera/getMinimalList": {
    /** Use /getMinimalCameraStateList instead */
    post: operations["getCameraMinimalList"];
  };
  "/camera/getOccupancyEnabledCameras": {
    /** Gets all the cameras that have a occupancy polygon defined */
    post: operations["getOccupancyEnabledCameras"];
  };
  "/camera/getOfflineLanStreamingInfo": {
    /** Get required information for offline lan streaming on all cameras */
    post: operations["getCameraOfflineLanStreamingInfo"];
  };
  "/camera/getPresenceWindows": {
    /** Get stored video information for camera */
    post: operations["getCameraPresenceWindows"];
  };
  "/camera/getRawHttpStreams": {
    /** Get info for all raw HTTP streams from a camera */
    post: operations["getCameraRawHttpStreams"];
  };
  "/camera/getStorageRecoveryFile": {
    /** Get a file that contains information required to recover the media from the SD card of a damaged camera */
    post: operations["getStorageRecoveryFile"];
  };
  "/camera/getUptimeWindows": {
    /** Get uptime information for camera */
    post: operations["getUptimeWindows"];
  };
  "/camera/getVideoWalls": {
    /** Get list of video walls available for client */
    post: operations["getVideoWalls"];
  };
  "/camera/reboot": {
    /** Send reboot command to camera */
    post: operations["rebootCamera"];
  };
  "/camera/updateCameraAIThresholds": {
    /** Update AI confidence thresholds for a camera */
    post: operations["updateCameraAIThresholds"];
  };
  "/camera/updateCameraHumanLoiteringConfig": {
    /** Updates the human loitering feature for a camera. */
    post: operations["updateCameraHumanLoiteringConfig"];
  };
  "/camera/updateCameraLineCrossingThresholds": {
    /** Updates the line-crossing feature for a camera. Accepts two points which define a line that determines the threshold for which INGRESS and EGRESS events will be generated. Consider the top-left corner of a camera's image to be the origin (0,0). */
    post: operations["updateCameraLineCrossingThresholds"];
  };
  "/camera/updateConfig": {
    /** Update a camera's config */
    post: operations["updateCameraConfig"];
  };
  "/camera/updateDetails": {
    /** Update hardware details of camera */
    post: operations["updateCameraDetails"];
  };
  "/camera/updateDetailsBulkV2": {
    post: operations["updateDetailsBulkV2"];
  };
  "/camera/updateDetailsV2": {
    /** Update hardware details of camera. */
    post: operations["updateCameraDetailsV2"];
  };
  "/camera/updateFacetedConfig": {
    /** Update a camera's config */
    post: operations["updateCameraFacetedConfig"];
  };
  "/camera/updateFirmware": {
    /** Send command to update firmware to camera */
    post: operations["updateFirmware"];
  };
  "/camera/updateVideoWalls": {
    /** Update a video wall */
    post: operations["updateVideoWalls"];
  };
  "/camera/updateWifi": {
    /** Send a command to update wifi on specified connected cameras */
    post: operations["updateCameraWifi"];
  };
  "/chatbot/deleteChatbotConversation": {
    /** Deletes a conversation and its entire chat history. */
    post: operations["deleteChatbotConversation"];
  };
  "/chatbot/getChatHistoryByContextId": {
    /**
     * Retrieves chat history by context ID. A context ID can be retrieved from a conversation and refers
     * to a unique set of chat history that is seeded to Rhombus MIND before it answers a new query.
     */
    post: operations["getChatHistoryByContextId"];
  };
  "/chatbot/getChatbotConversations": {
    /**
     * Retrieves the list of conversations the user has initiated with Rhombus MIND. Conversations are
     * stored for 60 days then it and its specific chat history are erased. A conversation is a unique
     * set of chat history with Rhombus MIND. When submitting a new chat for a conversation its entire
     * chat history is used to initialize the LLM before answer the new query.
     */
    post: operations["getChatbotConversations"];
  };
  "/chatbot/submitChat": {
    /**
     * Submits a query to Rhombus MIND. When submitting a query the context ID plays an important role in
     * helping seed Rhombus MIND with the previous chat history to answer the query in the context of the
     * perceived conversation. You do not need to create a conversation, submitting a new context ID will
     * cause a new conversation to be created.
     */
    post: operations["submitChat"];
  };
  "/chatbot/updateChatbotConversation": {
    /**
     * Updates fields of a conversation by presence. Meaning if the field is omitted it will not be updated.
     * Currently the only field that can be updated is the conversation name. The contextId field is required.
     */
    post: operations["updateChatbotConversation"];
  };
  "/climate/deleteEnvironmentalGateway": {
    /** Remove an environmental gateway from the org */
    post: operations["deleteEnvironmentalGateway"];
  };
  "/climate/getClimateEventsForSensor": {
    /** Get list of climate events for environmental sensor */
    post: operations["getClimateEventsForSensor"];
  };
  "/climate/getClimateEventsForTags": {
    /** Get list of climate events for environmental sensor */
    post: operations["getClimateEventsForTags"];
  };
  "/climate/getClimatePresenceWindows": {
    /** Get stored video information for sensor */
    post: operations["getClimatePresenceWindows"];
  };
  "/climate/getConfig": {
    /** Get the config for a climate sensor */
    post: operations["getConfig"];
  };
  "/climate/getEnvironmentalGatewayShadows": {
    /** Get list of shadows of all environmental gateways of an org */
    post: operations["getEnvironmentalGatewayShadows"];
  };
  "/climate/getEventsForEnvironmentalGateway": {
    /** Get list of events for environmental gateway */
    post: operations["getEventsForEnvironmentalGateway"];
  };
  "/climate/getMinimalClimateStateList": {
    /** Get basic state information of all environmental sensors */
    post: operations["getMinimalClimateStateList"];
  };
  "/climate/getMinimalEnvironmentalGatewayStates": {
    /** Get list of basic states of all environmental gateways of an org */
    post: operations["getMinimalEnvironmentalGatewayStates"];
  };
  "/climate/getMinimalStateEventsForEnvironmentalGateway": {
    /** Get list of events for environmental gateways in minimal state */
    post: operations["getMinimalStateEventsForEnvironmentalGateway"];
  };
  "/climate/reboot": {
    /** Send reboot command to environmental gateway */
    post: operations["rebootEnvironmentalGateway"];
  };
  "/climate/updateDetails": {
    /** Update details for environmental sensor. Note: uuid is a required field */
    post: operations["updateClimateSensorDetails"];
  };
  "/climate/updateEnvironmentalGatewayDetails": {
    /** Update details for environmental gateway. Note: uuid is a required field */
    post: operations["updateEnvironmentalGatewayDetails"];
  };
  "/component/addAccessControlledDoorLabel": {
    /** Create a label that can be assigned to an access controlled door and referenced by an access grant or access revocation */
    post: operations["addAccessControlledDoorLabel"];
  };
  "/component/applyAccessControlledDoorStateOverride": {
    /** Attempts to apply a door state override to an access controlled door that ignores the regular door schedule and door schedule exceptions. */
    post: operations["applyAccessControlledDoorStateOverride"];
  };
  "/component/cancelAccessControlledDoorStateOverride": {
    /** Attempts to cancel the door state override, if one has been applied, to an access controlled door. */
    post: operations["cancelAccessControlledDoorStateOverride"];
  };
  "/component/createAccessControlledDoor": {
    /** Create an access controlled door */
    post: operations["createAccessControlledDoor"];
  };
  "/component/createAccessControlledDoorSeekpoints": {
    /** Create custom activity seekpoints for a specified access controlled door */
    post: operations["createAccessControlledDoorSeekpoints"];
  };
  "/component/createIntegratedDoorPositionIndicator": {
    /** Create a door position indicator component */
    post: operations["createIntegratedDoorPositionIndicator"];
  };
  "/component/createIntegratedDoorRelay": {
    /** Create a door relay component */
    post: operations["createIntegratedDoorRelay"];
  };
  "/component/createIntegratedGenericButton": {
    /** Create a generic button component */
    post: operations["createIntegratedGenericButton"];
  };
  "/component/createIntegratedGenericInput": {
    /** Create a generic input component */
    post: operations["createIntegratedGenericInput"];
  };
  "/component/createIntegratedGenericRelay": {
    /** Create a generic relay component */
    post: operations["createIntegratedGenericRelay"];
  };
  "/component/createIntegratedRequestToExit": {
    /** Create a request to exit component */
    post: operations["createIntegratedRequestToExit"];
  };
  "/component/createOsdpDoorReader": {
    /** Create a third party OSDP Reader component */
    post: operations["createOsdpDoorReader"];
  };
  "/component/createRhombusOsdpDoorReader": {
    /** Create a Rhombus OSDP Reader component */
    post: operations["createRhombusOsdpDoorReader"];
  };
  "/component/createWiegandReader": {
    /** Create a third party Wiegand Reader component */
    post: operations["createWiegandReader"];
  };
  "/component/deleteAccessControlledDoor": {
    /** Delete the specified access controlled door */
    post: operations["deleteAccessControlledDoor"];
  };
  "/component/deleteComponent": {
    /** Delete a component */
    post: operations["deleteComponent"];
  };
  "/component/deleteComponentsByOwnerDevice": {
    /** Delete all components owned by the specified device */
    post: operations["deleteComponentsByOwnerDevice"];
  };
  "/component/findAccessControlledDoorShadows": {
    /** Find access controlled door shadows within the org */
    post: operations["findAccessControlledDoorShadows"];
  };
  "/component/findAccessControlledDoorShadowsByLocation": {
    /** Find access controlled door shadows within the specified location */
    post: operations["findAccessControlledDoorShadowsByLocation"];
  };
  "/component/findAccessControlledDoors": {
    /** Find access controlled doors within the org */
    post: operations["findAccessControlledDoors"];
  };
  "/component/findAccessControlledDoorsByLocation": {
    /** Find access controlled doors within the specified location */
    post: operations["findAccessControlledDoorsByLocation"];
  };
  "/component/findAccessControlledDoorsByOwnerDevice": {
    /** Find access controlled doors for the specified owner device */
    post: operations["findAccessControlledDoorsByOwnerDevice"];
  };
  "/component/findAllComponentShadows": {
    /** Retrieve all component shadows for the specified component uuids */
    post: operations["findAllComponentShadows"];
  };
  "/component/findComponentEventsByAccessControlledDoor": {
    /** Retrieve all component events relevant to the specified AccessControlledDoor */
    post: operations["findComponentEventsByAccessControlledDoor"];
  };
  "/component/findComponentEventsByApiToken": {
    /** Retrieve all component events relevant to the specified api token */
    post: operations["findComponentEventsByApiToken"];
  };
  "/component/findComponentEventsByComponent": {
    /** Retrieve all component events relevant to the specified component */
    post: operations["findComponentEventsByComponent"];
  };
  "/component/findComponentEventsByCorrelation": {
    /** Retrieve all component events relevant to the specified correlation id */
    post: operations["findComponentEventsByCorrelation"];
  };
  "/component/findComponentEventsByCredentialHexValue": {
    /** Retrieve all component events relevant to the specified credential hex value */
    post: operations["findComponentEventsByCredentialHexValue"];
  };
  "/component/findComponentEventsByCredentialUuid": {
    /** Retrieve all component events relevant to the specified credential uuid */
    post: operations["findComponentEventsByCredentialUuid"];
  };
  "/component/findComponentEventsByCredentialValue": {
    /** Retrieve all component events relevant to the specified credential value */
    post: operations["findComponentEventsByCredentialValue"];
  };
  "/component/findComponentEventsByLocation": {
    /** Retrieve all component events relevant to the specified location */
    post: operations["findComponentEventsByLocation"];
  };
  "/component/findComponentEventsByOwnerDevice": {
    /** Retrieve all component events relevant to the specified owner device (i.e. DC20's device uuid) */
    post: operations["findComponentEventsByOwnerDevice"];
  };
  "/component/findComponentEventsBySupportAuthority": {
    /** Retrieve all component events relevant to the specified api token */
    post: operations["findComponentEventsBySupportAuthority"];
  };
  "/component/findComponentEventsByUser": {
    /** Retrieve all component events relevant to the specified User */
    post: operations["findComponentEventsByUser"];
  };
  "/component/findComponentEventsForCurrentUser": {
    /** Retrieve all component events relevant to the rhombus key user */
    post: operations["findComponentEventsForCurrentUser"];
  };
  "/component/findComponentEventsForOrgDashboard": {
    /** Retrieve component events across the entire org for the Dashboard. */
    post: operations["findComponentEventsForOrgDashboard"];
  };
  "/component/findComponentEventsForVideoIntercom": {
    /** Retrieve all component events relevant to the specified Video Intercom and optional AccessControlledDoor */
    post: operations["findComponentEventsForVideoIntercom"];
  };
  "/component/findComponentSeekPointsByAccessControlledDoor": {
    /** Find component seekpoints by access controlled door */
    post: operations["findComponentSeekPointsByAccessControlledDoor"];
  };
  "/component/findComponentSeekPointsByAccessControlledDoors": {
    /** Find component seekpoints by access controlled doors */
    post: operations["findComponentSeekPointsByAccessControlledDoors"];
  };
  "/component/findComponentSeekPointsByComponent": {
    /** Find component seekpoints by component */
    post: operations["findComponentSeekPointsByComponent"];
  };
  "/component/findComponentSeekPointsByLocation": {
    /** Find component seekpoints by location */
    post: operations["findComponentSeekPointsByLocation"];
  };
  "/component/findComponentSeekPointsByOwnerDevice": {
    /** Find component seekpoints by owner device */
    post: operations["findComponentSeekPointsByOwnerDevice"];
  };
  "/component/findComponentSeekPointsByUser": {
    /** Find component seekpoints by user */
    post: operations["findComponentSeekPointsByUser"];
  };
  "/component/findComponentShadowsByOwnerDevice": {
    /** Retrieve component shadows by the specified owner device uuid */
    post: operations["findComponentShadowsByOwnerDevice"];
  };
  "/component/findComponentsByOwnerDevice": {
    /** Retrieve a list of components owned by a Rhombus device (i.e. DC20's device uuid) */
    post: operations["findComponentsByOwnerDevice"];
  };
  "/component/findDistinctByOriginatorCredentialReceivedEventsByAccessControlledDoor": {
    /** Retrieve a list of credential received events by access controlled door with distinct originators. Can be used for a list of distinct users that have entered a door within the queried timeframe */
    post: operations["findDistinctByOriginatorCredentialReceivedEventsByAccessControlledDoor"];
  };
  "/component/findDistinctByOriginatorCredentialReceivedEventsByLocation": {
    /** Retrieve a list of credential received events by location with distinct originators. Can be used for a list of distinct users that have entered a location within the queried timeframe */
    post: operations["findDistinctByOriginatorCredentialReceivedEventsByLocation"];
  };
  "/component/findMinimalStateAccessControlledDoors": {
    /** Find minimal state access controlled doors within the org */
    post: operations["findMinimalStateAccessControlledDoors"];
  };
  "/component/findMinimalStateAccessControlledDoorsByLocation": {
    /** Find minimal state access controlled doors within the specified location */
    post: operations["findMinimalStateAccessControlledDoorsByLocation"];
  };
  "/component/getAccessControlledDoorLabelsForOrg": {
    /** Get all access controlled door labels for the organization */
    post: operations["getAccessControlledDoorLabelsForOrg"];
  };
  "/component/getCurrentExpectedAccessControlledDoorState": {
    /** Attempts to determine what the current door state is expected to be based on the current door configuration and current time. */
    post: operations["getCurrentExpectedAccessControlledDoorState"];
  };
  "/component/getFullAccessControlledDoorShadow": {
    /** Retrieve the door shadow and all of its component shadows */
    post: operations["getFullAccessControlledDoorShadow"];
  };
  "/component/getOrCreateDevicePhysicalPortConfig": {
    /** Gets a physical port layout for the specified device, components owned by that device and details about the port configuration validity. Map is instantiated if it doesn't currently exist as part of the call. */
    post: operations["getOrCreateDevicePhysicalPortConfig"];
  };
  "/component/removeAccessControlledDoorLabel": {
    /** Remove a label to an access controlled door */
    post: operations["removeAccessControlledDoorLabel"];
  };
  "/component/updateAccessControlledDoor": {
    /** Updates an access controlled door */
    post: operations["updateAccessControlledDoor"];
  };
  "/component/updateIntegratedDoorPositionIndicator": {
    /** Update a door position indicator component */
    post: operations["updateIntegratedDoorPositionIndicator"];
  };
  "/component/updateIntegratedDoorRelay": {
    /** Update a door relay component */
    post: operations["updateIntegratedDoorRelay"];
  };
  "/component/updateIntegratedGenericButton": {
    /** Update a generic button component */
    post: operations["updateIntegratedGenericButton"];
  };
  "/component/updateIntegratedGenericInput": {
    /** Update a generic input component */
    post: operations["updateIntegratedGenericInput"];
  };
  "/component/updateIntegratedGenericRelay": {
    /** Update a generic relay component */
    post: operations["updateIntegratedGenericRelay"];
  };
  "/component/updateIntegratedGenericRelaySteadyState": {
    /** Update a generic relay component's steady state */
    post: operations["updateIntegratedGenericRelaySteadyState"];
  };
  "/component/updateIntegratedGenericRelayTransientState": {
    /** Activate a generic relay for a brief period */
    post: operations["updateIntegratedGenericRelayTransientState"];
  };
  "/component/updateIntegratedRequestToExit": {
    /** Update a request to exit component */
    post: operations["updateIntegratedRequestToExit"];
  };
  "/component/updateOsdpDoorReader": {
    /** Update a third party OSDP Reader component */
    post: operations["updateOsdpDoorReader"];
  };
  "/component/updateRhombusOsdpDoorReader": {
    /** Update a Rhombus OSDP Reader component */
    post: operations["updateRhombusOsdpDoorReader"];
  };
  "/component/updateWiegandDoorReader": {
    /** Update a third party Wiegand Reader component */
    post: operations["updateWiegandDoorReader"];
  };
  "/customer/acceptUsagePolicy": {
    post: operations["acceptUsagePolicy"];
  };
  "/customer/deleteAllNotificationSnoozeSettings": {
    /** Delete a policy pause setting for a device */
    post: operations["deleteAllNotificationSnoozeSettings"];
  };
  "/customer/deleteNotificationSnoozeSettingForComponentComposite": {
    /** Delete a policy pause setting for a component composite */
    post: operations["deleteNotificationSnoozeSettingForComponentComposite"];
  };
  "/customer/deleteNotificationSnoozeSettingForDevice": {
    /** Delete a policy pause setting for a device */
    post: operations["deleteNotificationSnoozeSettingForDevice"];
  };
  "/customer/deleteNotificationSnoozeSettingForLocation": {
    /** Delete a policy pause setting for a location */
    post: operations["deleteNotificationSnoozeSettingForLocation"];
  };
  "/customer/getCurrentPartnerUser": {
    post: operations["getCurrentPartnerUser"];
  };
  "/customer/getCurrentRhombusKeyUser": {
    /** Retrieve the RhombusKey User config, user details and org summary details for the current rhombus key user. */
    post: operations["getCurrentRhombusKeyUser"];
  };
  "/customer/getCurrentUser": {
    post: operations["getCurrentUser"];
  };
  "/customer/getCurrentUserConsoleOrgsForContextSwitch": {
    post: operations["getCurrentUserConsoleOrgsForContextSwitch"];
  };
  "/customer/getCurrentUserRhombusKeyOrgsForContextSwitch": {
    post: operations["getCurrentUserRhombusKeyOrgsForContextSwitch"];
  };
  "/customer/getCurrentUserSessions": {
    post: operations["getCurrentUserSessions"];
  };
  "/customer/getDashboardStatus": {
    post: operations["getDashboardStatus"];
  };
  "/customer/getRhombusKeyConfigForCurrentUser": {
    /** Retrieve the RhombusKey mobile app config for a user. If it does not exist a default one is created and returned. */
    post: operations["getRhombusKeyConfigForCurrentUser"];
  };
  "/customer/getUserSnoozedNotificationSettings": {
    /** Get the current and planned user notification snooze details */
    post: operations["getUserSnoozedNotificationSettings"];
  };
  "/customer/logoutAllOtherCurrentUserSessions": {
    post: operations["logoutAllOtherCurrentUserSessions"];
  };
  "/customer/setFlag": {
    post: operations["setCustomerFlag"];
  };
  "/customer/snoozeAllNotifications": {
    post: operations["snoozeAllUserNotifications"];
  };
  "/customer/snoozeComponentCompositeNotifications": {
    post: operations["snoozeUserNotificationsForComponentComposite"];
  };
  "/customer/snoozeDeviceNotifications": {
    post: operations["snoozeUserNotificationsForDevice"];
  };
  "/customer/snoozeLocationNotifications": {
    post: operations["snoozeUserNotificationsForLocation"];
  };
  "/customer/updateCurrentPartnerUser": {
    post: operations["updateCurrentPartnerUser"];
  };
  "/customer/updateCurrentUser": {
    post: operations["updateCurrentUser"];
  };
  "/customer/updateCurrentUserNotificationSettings": {
    /** Update notification settings for user */
    post: operations["updateCurrentUserNotificationSettings"];
  };
  "/customer/updateDashboardCustomizations": {
    post: operations["updateDashboardCustomizations"];
  };
  "/customer/updateFrontendCustomizations": {
    post: operations["updateFrontendCustomizations"];
  };
  "/customer/updateRhombusKeyPreferencesForCurrentUser": {
    /** Update the RhombusKey mobile app preferences for the current user */
    post: operations["updateRhombusKeyPreferencesForCurrentUser"];
  };
  "/developer/createEventListener": {
    /** Create an event listener */
    post: operations["createEventListener"];
  };
  "/developer/deleteEventListener": {
    /** Delete an event listener */
    post: operations["deleteEventListener"];
  };
  "/developer/getAllEventListeners": {
    /** Get a list of all event listeners */
    post: operations["getAllEventListeners"];
  };
  "/developer/getEventListenersForDevice": {
    /** Get a list of event listeners for a device */
    post: operations["getEventListenersForDevice"];
  };
  "/deviceconfig/getFacetedConfig": {
    /** Get a device's config */
    post: operations["getFacetedConfig"];
  };
  "/deviceconfig/updateFacetedConfig": {
    /** Update a device's config */
    post: operations["updateFacetedConfig"];
  };
  "/door/getDoorEventsForSensor": {
    /** Get list of door open/close events for door sensor */
    post: operations["getDoorEventsForSensor"];
  };
  "/door/getDoorEventsForTags": {
    /** Get list of door open/close events for door sensor */
    post: operations["getDoorEventsForTags"];
  };
  "/door/getDoorPresenceWindows": {
    /** Get stored video information for sensor */
    post: operations["getDoorPresenceWindows"];
  };
  "/door/getMinimalDoorStateList": {
    /** Get basic state information for all door sensors */
    post: operations["getMinimalDoorStateList"];
  };
  "/door/updateDetails": {
    /** Update details for door sensor. Note: uuid is a required field */
    post: operations["updateDoorSensorDetails"];
  };
  "/doorbellcamera/calibrateFloorplanProjection": {
    /** Generate the homography to project detections onto a floorplan. */
    post: operations["doorbellCameraCalibrateFloorplanProjection"];
  };
  "/doorbellcamera/createRawHttpStream": {
    /** Create a raw HTTP stream for a doorbell camera. */
    post: operations["createDoorbellCameraRawHttpStream"];
  };
  "/doorbellcamera/createRuleForDoorbellCamera": {
    /** Create rule for a doorbell camera. */
    post: operations["createRuleForDoorbellCamera"];
  };
  "/doorbellcamera/createSharedLiveVideoStream": {
    /** Share an live video stream for a doorbell camera */
    post: operations["createDoorbellCameraSharedLiveVideoStream"];
  };
  "/doorbellcamera/delete": {
    /** Remove the doorbell camera from the organization */
    post: operations["deleteDoorbellCamera"];
  };
  "/doorbellcamera/deleteRawHttpStream": {
    /** Delete a raw HTTP stream for a doorbell camera. */
    post: operations["deleteDoorbellCameraRawHttpStream"];
  };
  "/doorbellcamera/deleteRuleForDoorbellCamera": {
    /** Delete rule for a doorbell camera. */
    post: operations["deleteRuleForDoorbellCamera"];
  };
  "/doorbellcamera/findAllRawHttpStreams": {
    /** Get a list of all doorbell cameras raw HTTP streams. */
    post: operations["findAllDoorbellCameraRawHttpStreams"];
  };
  "/doorbellcamera/findComponentEventsForDoorbellCamera": {
    /** Retrieve all component events relevant to the specified Doorbell Camera */
    post: operations["findComponentEventsForDoorbellCamera"];
  };
  "/doorbellcamera/findComponentSeekPointsForDoorbellCamera": {
    /** Retrieve all component seekpoints relevant to the specified Doorbell Camera */
    post: operations["findComponentSeekPointsForDoorbellCamera"];
  };
  "/doorbellcamera/findSharedLiveVideoStreams": {
    /** Get list of all shared live streams for doorbell camera */
    post: operations["findDoorbellCameraSharedLiveVideoStreams"];
  };
  "/doorbellcamera/getBoundingBoxes": {
    /** Get object bounding boxes for a specified doorbell camera. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
    post: operations["getDoorbellCameraBoundingBoxes"];
  };
  "/doorbellcamera/getConfig": {
    /** Get a doorbell camera's config */
    post: operations["getDoorbellCameraConfig"];
  };
  "/doorbellcamera/getDoorbellCameraRulesForOrg": {
    /** Get rules for all doorbell cameras in an org. */
    post: operations["getDoorbellCameraRulesForOrg"];
  };
  "/doorbellcamera/getFullState": {
    /** Get detailed information about state of specified doorbell camera */
    post: operations["getDoorbellCameraFullState"];
  };
  "/doorbellcamera/getMediaUris": {
    /** Get media uris for doorbell camera to retrieve footage and audio */
    post: operations["getDoorbellCameraMediaUris"];
  };
  "/doorbellcamera/getMinimalStateList": {
    /** Get basic state information about all doorbell cameras in organization */
    post: operations["getDoorbellCameraMinimalStateList"];
  };
  "/doorbellcamera/getOfflineLanStreamingInfo": {
    /** Get required information for offline lan streaming on all video intercoms */
    post: operations["getDoorbellCameraOfflineLanStreamingInfo"];
  };
  "/doorbellcamera/getPresenceWindows": {
    /** Get stored video information for a doorbell camera */
    post: operations["getDoorbellCameraPresenceWindows"];
  };
  "/doorbellcamera/getRawHttpStreams": {
    /** Get info for all raw HTTP streams from a doorbell camera. */
    post: operations["getDoorbellCameraRawHttpStreams"];
  };
  "/doorbellcamera/getRulesForDoorbellCamera": {
    /** Get all rules for a doorbell camera. */
    post: operations["getRulesForDoorbellCamera"];
  };
  "/doorbellcamera/getSeekpoints": {
    /** Get activity seekpoints for specified doorbell camera */
    post: operations["getDoorbellCameraSeekPoints"];
  };
  "/doorbellcamera/getUptimeWindows": {
    /** Get uptime information for a doorbell camera */
    post: operations["getDoorbellCameraUptimeWindows"];
  };
  "/doorbellcamera/reboot": {
    /** Reboot the specified doorbell camera */
    post: operations["rebootDoorbellCamera"];
  };
  "/doorbellcamera/updateConfig": {
    /** Update a doorbell camera's config */
    post: operations["updateDoorbellCameraConfig"];
  };
  "/doorbellcamera/updateDetails": {
    /** Update hardware details of doorbell camera. */
    post: operations["updateDoorbellCameraDetails"];
  };
  "/doorcontroller/createDoorControllerRule": {
    /** Create a rule owned by a specific door controller. */
    post: operations["createDoorControllerRule"];
  };
  "/doorcontroller/delete": {
    /** Remove the door controller from the organization as long as it has no doors */
    post: operations["deleteDoorController"];
  };
  "/doorcontroller/deleteDoorControllerRule": {
    /** Delete a rule owned by a specific door controller. */
    post: operations["deleteDoorControllerRule"];
  };
  "/doorcontroller/getConfig": {
    /** Get a door controller's config */
    post: operations["getDoorControllerConfig"];
  };
  "/doorcontroller/getDoorControllerRule": {
    /** Get a specific rule owned by the door controller. */
    post: operations["getDoorControllerRule"];
  };
  "/doorcontroller/getDoorControllerRules": {
    /** Get all rules owned by the door controller. */
    post: operations["getDoorControllerRules"];
  };
  "/doorcontroller/getDoorControllerStateList": {
    /** Get state information about all door controllers in an organization */
    post: operations["getDoorControllerStateList"];
  };
  "/doorcontroller/registerDiscoveredRhombusReader": {
    /** Register a Rhombus reader that a Door Controller has discovered */
    post: operations["registerDiscoveredRhombusReader"];
  };
  "/doorcontroller/updateConfig": {
    /** Update a door controller's config */
    post: operations["updateDoorControllerConfig"];
  };
  "/doorcontroller/updateDetails": {
    /** Update details for door controller. Note: uuid is a required field */
    post: operations["updateDoorControllerDetails"];
  };
  "/doorcontroller/updateDoorControllerRule": {
    /** Update a rule owned by a specific door controller. */
    post: operations["updateDoorControllerRule"];
  };
  "/ethernettester/getEthernetTesterConfig": {
    /** Get test configuration */
    post: operations["getEthernetTesterConfig"];
  };
  "/event/createClipGroup": {
    /** Create a group of clips */
    post: operations["createClipGroup"];
  };
  "/event/createSharedClipGroup": {
    /** Use /createSharedClipGroupV3 instead */
    post: operations["createSharedClipGroup"];
  };
  "/event/createSharedClipGroupV2": {
    /** Use /createSharedClipGroupV3 instead */
    post: operations["createSharedClipGroupV2"];
  };
  "/event/createSharedClipGroupV3": {
    /** Share multiple clips in a single page */
    post: operations["createSharedClipGroupV3"];
  };
  "/event/deleteAlertMonitoringThreatCase": {
    post: operations["deleteAlertMonitoringThreatCase"];
  };
  "/event/deleteAlertMonitoringThreatCaseByStatus": {
    post: operations["deleteAlertMonitoringThreatCaseByStatus"];
  };
  "/event/deleteClipGroup": {
    /** Delete a clip group */
    post: operations["deleteClipGroup"];
  };
  "/event/deleteSavedClip": {
    /** Delete all types of saved clips (splices in progress, completed splices, saved alerts) */
    post: operations["deleteSavedClip"];
  };
  "/event/deleteSharedClipGroup": {
    /** Use /deleteSharedClipGroupV2 instead */
    post: operations["deleteSharedClipGroup"];
  };
  "/event/deleteSharedClipGroupV2": {
    /** Delete a shared clip page */
    post: operations["deleteSharedClipGroupV2"];
  };
  "/event/dismissAllPolicyAlertsForDevice": {
    /** Dismiss all policy alerts for each specified device(s) */
    post: operations["dismissAllPolicyAlertsForDevice"];
  };
  "/event/dismissAllPolicyAlertsV2": {
    /** Dismiss all policy alerts in organization */
    post: operations["dismissAllPolicyAlertsV2"];
  };
  "/event/dismissPolicyAlertV2": {
    /** Dismiss a policy alert */
    post: operations["dismissPolicyAlertV2"];
  };
  "/event/dismissPolicyAlertsV2": {
    /** Dismiss multiple policy alerts */
    post: operations["dismissPolicyAlertsV2"];
  };
  "/event/getAlertMonitoringThreatCase": {
    post: operations["getAlertMonitoringThreatCase"];
  };
  "/event/getAlertMonitoringThreatCases": {
    post: operations["getAlertMonitoringThreatCases"];
  };
  "/event/getClipGroupDetails": {
    /** Get details like seekpoints for a clip group */
    post: operations["getClipGroupDetails"];
  };
  "/event/getClipGroupsForOrg": {
    /** Get all clip groups for an org */
    post: operations["getClipGroupsForOrg"];
  };
  "/event/getClipWithProgress": {
    /** Get a specified saved clip with current progress */
    post: operations["getClipWithProgress"];
  };
  "/event/getClipsWithProgress": {
    /** Get list of saved clips in organization, with current progress */
    post: operations["getClipsWithProgress"];
  };
  "/event/getExpiringClipsForOrg": {
    /** Get list of expiring saved clips in organization. */
    post: operations["getExpiringClipsForOrg"];
  };
  "/event/getMotionGrid": {
    /** Get motion data for specified camera */
    post: operations["getMotionGrid"];
  };
  "/event/getMotionHeatMap": {
    /** Get aggregated motion heatmap for specified time period and camera. Divides a camera's resolution into a 36x64 grid and counts the number of motion events that occurred in each cell. */
    post: operations["getMotionHeatMap"];
  };
  "/event/getPolicyAlert": {
    /** Get information about a policy alert */
    post: operations["getPolicyAlert"];
  };
  "/event/getPolicyAlertCount": {
    /** Get count of policy alerts */
    post: operations["getPolicyAlertCount"];
  };
  "/event/getPolicyAlertDetails": {
    /** Get detailed information about policy alert, including seekpoints and bounding boxes */
    post: operations["getPolicyAlertDetails"];
  };
  "/event/getPolicyAlertGroupsForDevice": {
    /** Get recent policy alerts for device, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
    post: operations["getPolicyAlertGroupsForDevice"];
  };
  "/event/getPolicyAlertGroupsForLocation": {
    /** Get recent policy alerts for a location, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
    post: operations["getPolicyAlertGroupsForLocation"];
  };
  "/event/getPolicyAlertGroupsV2": {
    /** Get recent policy alerts for organization, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
    post: operations["getPolicyAlertGroupsV2"];
  };
  "/event/getPolicyAlertV2": {
    /** Get information about a policy alert */
    post: operations["getPolicyAlertV2"];
  };
  "/event/getPolicyAlerts": {
    /** Get recent policy alerts for organization */
    post: operations["getPolicyAlerts"];
  };
  "/event/getPolicyAlertsV2": {
    /** Get recent policy alerts for organization */
    post: operations["getPolicyAlertsV2"];
  };
  "/event/getSavedClipCount": {
    /** Get a count of saved clips in and organization */
    post: operations["getSavedClipCount"];
  };
  "/event/getSavedClipDetails": {
    /** Get detailed information about a saved clip, including seekpoints and bounding boxes */
    post: operations["getSavedClipDetails"];
  };
  "/event/getSavedClips": {
    /** Use /getSavedClipsV2 instead */
    post: operations["getSavedClips"];
  };
  "/event/getSavedClipsByExternalTransactionId": {
    /** Get list of saved clips matching the external transaction id */
    post: operations["getSavedClipsByExternalTransactionId"];
  };
  "/event/getSavedClipsV2": {
    /** Get list of saved clips in organization */
    post: operations["getSavedClipsV2"];
  };
  "/event/getSharedClipGroupDetails": {
    /** Get detailed information about a shared clip page, including seekpoints and bounding boxes */
    post: operations["getSharedClipGroupDetails"];
  };
  "/event/getSharedClipGroups": {
    /** Use /getSharedClipGroupsV2 instead */
    post: operations["getSharedClipGroups"];
  };
  "/event/getSharedClipGroupsV2": {
    /** Get list of shared clip pages in organization */
    post: operations["getSharedClipGroupsV2"];
  };
  "/event/getSplicedClipsInProgress": {
    post: operations["DEPRECATED_getSplicedClipsInProgress"];
  };
  "/event/getUnhealthyDeviceAlerts": {
    /** Get list of unhealthy devices in organization */
    post: operations["getUnhealthyDeviceAlerts"];
  };
  "/event/muteNotificationsForDevice": {
    /** Mute notifications from a device for specified number of seconds */
    post: operations["muteNotificationsForDevice"];
  };
  "/event/reportBadPolicyAlert": {
    /** Report a bad policy event (AI false positive) and send information for feedback. Note: this adds the clip to our AI training data set */
    post: operations["reportBadPolicyAlert"];
  };
  "/event/savePolicyAlertV2": {
    /** Save a policy alert as a saved clip */
    post: operations["savePolicyAlertV2"];
  };
  "/event/searchMotionGrid": {
    /** Search motion grid for motion events occuring in specified grid cells. Note: motion grid is a 64x36 grid of cells with the upper left hand corner being (0, 0) */
    post: operations["searchMotionGrid"];
  };
  "/event/searchMotionGridWithActivities": {
    /** Search motion grid for motion events occuring in specified grid cells. Note: motion grid is a 64x36 grid of cells with the upper left hand corner being (0, 0) */
    post: operations["searchMotionGridWithActivities"];
  };
  "/event/unSavePolicyAlertV2": {
    /** Unsave policy alert and remove associated saved clip */
    post: operations["unSavePolicyAlertV2"];
  };
  "/event/updateClipGroup": {
    /** Update a clip group's title, description, or clips */
    post: operations["updateClipGroup"];
  };
  "/event/updatePolicyAlertTextDescription": {
    /** Update the text description field of a policy alert. Development only for now */
    post: operations["updatePolicyAlertTextDescription"];
  };
  "/event/updateSavedClip": {
    /** Update saved clip title or summary */
    post: operations["updateSavedClip"];
  };
  "/event/updateSharedClipGroup": {
    /** Use /updateSharedClipGroupV2 instead */
    post: operations["updateSharedClipGroup"];
  };
  "/event/updateSharedClipGroupV2": {
    /** Update shared clip page title, description, password, or expiration time */
    post: operations["updateSharedClipGroupV2"];
  };
  "/eventSearch/getCameraOrDoorbellCameraSeekpoints": {
    /** Get camera or doorbell camera seekpoints */
    post: operations["getCameraOrDoorbellCameraSeekpoints"];
  };
  "/eventSearch/getEventSeekpoints": {
    /** Get normal seekpoint events and access control seekpoint events */
    post: operations["getDeprecatedEventSeekpoints"];
  };
  "/eventSearch/getEventSeekpointsV2": {
    /** Get normal seekpoint events and access control seekpoint events */
    post: operations["getDeprecatedEventSeekpointsV2"];
  };
  "/eventSearchV2/getEventSeekpoints": {
    /** Get normal seekpoint events and access control seekpoint events */
    post: operations["getEventSeekpoints"];
  };
  "/export/audit": {
    /** Download audit log */
    post: operations["exportAudit"];
  };
  "/export/climateEvents": {
    /** Download climate event log */
    post: operations["exportClimateEvents"];
  };
  "/export/countReports": {
    /** Download count report */
    post: operations["exportCountReports"];
  };
  "/export/diagnostic": {
    /** Download diagnostic log */
    post: operations["exportDiagnostic"];
  };
  "/export/doorEvents": {
    /** Download door event log */
    post: operations["exportDoorEvents"];
  };
  "/export/environmentalGatewayEvents": {
    /** Download environmental gateway event log */
    post: operations["exportEnvironmentalGatewayEvents"];
  };
  "/export/inventory": {
    /** Download device inventory */
    post: operations["exportInventory"];
  };
  "/export/motionEvents": {
    /** Download motion event log for motion sensors */
    post: operations["exportMotionEvents"];
  };
  "/export/peopleCountEvents": {
    /** Download people count report */
    post: operations["exportPeopleCountEvents"];
  };
  "/export/peopleEvents": {
    /** Download people event log */
    post: operations["exportPeopleEvents"];
  };
  "/export/proximityEvents": {
    /** Download proximity tag event log */
    post: operations["exportProximityEvents"];
  };
  "/export/proximityLocomotionEvents": {
    /** Download proximity tag event log */
    post: operations["exportProximityLocomotionEvents"];
  };
  "/export/uptime": {
    /** Download device uptime reports */
    post: operations["exportUptime"];
  };
  "/export/users": {
    /** Download org users */
    post: operations["exportUsers"];
  };
  "/export/vehicleEvents": {
    /** Download vehicle event log.  Use /export/vehicleEventsV2 instead for more functionality */
    post: operations["exportVehicleEvents"];
  };
  "/export/vehicleEventsV2": {
    /** Download vehicle event log */
    post: operations["exportVehicleEventsV2"];
  };
  "/faceRecognition/faceEvent/deleteFaceEvent": {
    /** Delete face event. */
    post: operations["deleteFaceEvent"];
  };
  "/faceRecognition/faceEvent/exportFaceEventsByOrg": {
    /** Export face events for an organization */
    post: operations["exportFaceEventsByOrg"];
  };
  "/faceRecognition/faceEvent/findFaceEventsByDeviceForReporting": {
    /** Find face events by device for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findFaceEventsByDeviceForReporting"];
  };
  "/faceRecognition/faceEvent/findFaceEventsByLocationForReporting": {
    /** Find face events by location for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findFaceEventsByLocationForReporting"];
  };
  "/faceRecognition/faceEvent/findFaceEventsByOrg": {
    /** Find face events for an organization. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findFaceEventsByOrg"];
  };
  "/faceRecognition/faceEvent/findFaceEventsByOrgForReporting": {
    /** Find face events by org for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findFaceEventsByOrgForReporting"];
  };
  "/faceRecognition/faceEvent/findSimilarFaceEvents": {
    /** Find face events for an organization that are similar to a specified face event. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findSimilarFaceEvents"];
  };
  "/faceRecognition/faceEvent/findSimilarFaceEventsByEmbedding": {
    /** Find face events for an organization that are similar to a specified face embedding. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findSimilarFaceEventsByEmbedding"];
  };
  "/faceRecognition/faceEvent/findSimilarFaceEventsByFaceMatchmaker": {
    /** Find face events for an organization that are similar to a specified face matchmaker. The events are returned in reverse chronological order, with the latest events appearing first. */
    post: operations["findSimilarFaceEventsByFaceMatchmaker"];
  };
  "/faceRecognition/faceEvent/getFaceEvent": {
    /** Get face event. */
    post: operations["getFaceEvent"];
  };
  "/faceRecognition/faceEvent/processFaceEventSearchImage": {
    /** Generates an embedding for the face search image if a face is detected. The embedding can be used to search for similar face events. */
    post: operations["processFaceEventSearchImage"];
  };
  "/faceRecognition/faceEvent/updateFaceEvent": {
    /** Update face event. */
    post: operations["updateFaceEvent"];
  };
  "/faceRecognition/matchmaker/createFaceMatchmakerFromSighting": {
    /** Create face matchmaker from face sighting. */
    post: operations["createFaceMatchmakerFromSighting"];
  };
  "/faceRecognition/matchmaker/createPersonAndFaceMatchmakers": {
    /** Create person and face matchmakers. */
    post: operations["createPersonAndFaceMatchmakers"];
  };
  "/faceRecognition/matchmaker/deleteFaceMatchmaker": {
    /** Delete face matchmaker. */
    post: operations["deleteFaceMatchmaker"];
  };
  "/faceRecognition/matchmaker/findFaceMatchmakersByOrg": {
    /** Find face matchmakers by org. */
    post: operations["findFaceMatchmakersByOrg"];
  };
  "/faceRecognition/matchmaker/findFaceMatchmakersByPerson": {
    /** Find face matchmakers by person. */
    post: operations["findFaceMatchmakersByPerson"];
  };
  "/faceRecognition/matchmaker/findFaceUploadMetadataByTransaction": {
    /** Find face upload metadata by transaction. */
    post: operations["findFaceUploadMetadataByTransaction"];
  };
  "/faceRecognition/matchmaker/getFaceMatchingConfig": {
    /** Get face matching configuration. */
    post: operations["getFaceMatchingConfig"];
  };
  "/faceRecognition/matchmaker/getFaceMatchmaker": {
    /** Get face matchmaker. */
    post: operations["getFaceMatchmaker"];
  };
  "/faceRecognition/matchmaker/updateFaceMatchingConfig": {
    /** Update face matching configuration. */
    post: operations["updateFaceMatchingConfig"];
  };
  "/faceRecognition/matchmaker/uploadFaceMatchmakerForPerson/{personUuid}": {
    /** Upload face matchmaker image for a specific person. */
    post: operations["uploadFaceMatchmakerForPerson"];
  };
  "/faceRecognition/matchmaker/uploadFaceMatchmakers": {
    /** Upload face matchmaker images for one or more people. The uploaded file name is matched to a person's name. If a person is not found and createPersonIfNotFound is set to true, a new person is created. */
    post: operations["uploadFaceMatchmakers"];
  };
  "/faceRecognition/matchmaker/validateFaceMatchmakerImage": {
    /** Validates if image is suitable to be a face matchmaker. */
    post: operations["validateFaceMatchmakerImage"];
  };
  "/faceRecognition/person/addPersonLabel": {
    /** Add a label to a person */
    post: operations["addPersonLabel"];
  };
  "/faceRecognition/person/createPerson": {
    /** Create a person for face recognition purposes. */
    post: operations["createPerson"];
  };
  "/faceRecognition/person/deletePerson": {
    /** Delete person created for face recognition purposes. */
    post: operations["deletePerson"];
  };
  "/faceRecognition/person/findPeopleByOrg": {
    /** Find people created for face recognition purposes in an organization. */
    post: operations["findPeopleByOrg"];
  };
  "/faceRecognition/person/findPersonLabelsByOrg": {
    /** Find all person labels for organization. */
    post: operations["findPersonLabelsByOrg"];
  };
  "/faceRecognition/person/getPerson": {
    /** Get a person created for face recognition purposes. */
    post: operations["getPerson"];
  };
  "/faceRecognition/person/removePersonLabel": {
    /** Remove a label from a person. */
    post: operations["removePersonLabel"];
  };
  "/faceRecognition/person/updatePerson": {
    /** Update person created for face recognition purposes. */
    post: operations["updatePerson"];
  };
  "/feature/getDeviceEventTypes": {
    /** Get possible event types for specified device dependent on features enabled */
    post: operations["getDeviceEventTypes"];
  };
  "/feature/getDeviceFeatures": {
    /** Get enabled features for a device */
    post: operations["getDeviceFeatures"];
  };
  "/feature/getDeviceFeaturesList": {
    /** Get enabled features for all devices in an org */
    post: operations["getDeviceFeaturesList"];
  };
  "/feature/getFeatureCompatabilityMatrix": {
    /** Get feature compatability matrix */
    post: operations["getFeatureCompatabilityMatrix"];
  };
  "/feature/updateDeviceFeatures": {
    /** Update enabled features for a device */
    post: operations["updateDeviceFeatures"];
  };
  "/guestExternal/updateGuestByToken": {
    post: operations["updateGuestByToken"];
  };
  "/guestmanagement/activateKiosk": {
    /** Activate kiosk and redirect to kiosk page */
    post: operations["activateKiosk"];
  };
  "/guestmanagement/addUsersToGuestManagementHostGroup": {
    /** Adds specified users to a guest management host group */
    post: operations["addUsersToGuestManagementHostGroup"];
  };
  "/guestmanagement/createGuest": {
    /** Create Guest Without Email Invite */
    post: operations["createGuest"];
  };
  "/guestmanagement/createGuestInvite": {
    /** Create Guest Invite */
    post: operations["createGuestInvite"];
  };
  "/guestmanagement/createGuestManagementHostGroup": {
    /** Creates a guest management host group */
    post: operations["createGuestManagementHostGroup"];
  };
  "/guestmanagement/createGuestManagementSettings": {
    /** Create guest management settings */
    post: operations["createGuestManagementSettings"];
  };
  "/guestmanagement/deleteGuest": {
    /** Delete Guest */
    post: operations["deleteGuest"];
  };
  "/guestmanagement/deleteGuestManagementHostGroup": {
    /** Delete a guest management host group */
    post: operations["deleteGuestManagementHostGroup"];
  };
  "/guestmanagement/deleteGuestManagementSettings": {
    /** Delete guest management settings */
    post: operations["deleteGuestManagementSettings"];
  };
  "/guestmanagement/exportGuestActivity": {
    /** Export Guest Activity .csv */
    post: operations["exportGuestActivity"];
  };
  "/guestmanagement/exportGuestActivityForGuest": {
    /** Export Single Guest Activity .csv */
    post: operations["exportGuestActivityForGuest"];
  };
  "/guestmanagement/exportGuestList": {
    /** Export Guest List .csv */
    post: operations["exportGuestList"];
  };
  "/guestmanagement/findAllUsersForGuestManagementHostGroup": {
    /** Find all users belonging to an guest management host group */
    post: operations["findAllUsersForGuestManagementHostGroup"];
  };
  "/guestmanagement/findGuestManagementHostGroupByExactName": {
    /** Retrieve the guest management host group with the specified name */
    post: operations["findGuestManagementHostGroupByExactName"];
  };
  "/guestmanagement/findGuestManagementHostGroupMembershipsByUser": {
    /** Find all guest management host group memberships by user */
    post: operations["findGuestManagementHostGroupMembershipsByUser"];
  };
  "/guestmanagement/findGuestManagementHostGroupsByNamePrefix": {
    /** Retrieve all guest management host groups with a name starting with the specified prefix */
    post: operations["findGuestManagementHostGroupsByNamePrefix"];
  };
  "/guestmanagement/findGuestManagementHostGroupsByOrg": {
    /** Retrieve all guest management host groups defined in the org */
    post: operations["findGuestManagementHostGroupsByOrg"];
  };
  "/guestmanagement/findGuestManagementHostGroupsByUserMembership": {
    /** Find all guest management host groups a user belongs to */
    post: operations["findGuestManagementHostGroupsByUserMembership"];
  };
  "/guestmanagement/getActivitiesForGuest": {
    /** Get activity logs for a guest */
    post: operations["getActivitiesForGuest"];
  };
  "/guestmanagement/getActivitiesForLocation": {
    /** Get activity logs for a location */
    post: operations["getActivitiesForLocation"];
  };
  "/guestmanagement/getAllGuestInvitesByOrg": {
    /** Get All Guest Invites by Org */
    post: operations["getAllGuestInvitesByOrg"];
  };
  "/guestmanagement/getAllGuestsByOrg": {
    /** Get All Guests by Org */
    post: operations["getAllGuestsByOrg"];
  };
  "/guestmanagement/getGuest": {
    /** Get Guest */
    post: operations["getGuest"];
  };
  "/guestmanagement/getGuestActivityLogs": {
    /** Get org wide activity logs for guests */
    post: operations["getGuestActivityLogs"];
  };
  "/guestmanagement/getGuestInvite": {
    /** Get Guest Invite */
    post: operations["getGuestInvite"];
  };
  "/guestmanagement/getGuestInviteByEmail": {
    /** Get Guest Invite by Email */
    post: operations["getGuestInvitesByEmail"];
  };
  "/guestmanagement/getGuestManagementSettings": {
    /** Get guest management Settings for org */
    post: operations["getGuestManagementSettings"];
  };
  "/guestmanagement/getKioskInfo": {
    /** Get info for kiosk */
    post: operations["getKioskInfo"];
  };
  "/guestmanagement/getKiosksForOrg": {
    /** Get kiosks for org */
    post: operations["getGuestManagementKiosksForOrg"];
  };
  "/guestmanagement/getNametagTemplateForGuest": {
    /** Get name tag template for guest */
    post: operations["getNametagTemplateForGuest"];
  };
  "/guestmanagement/inviteGuest": {
    /** Invite Guest Via Email */
    post: operations["inviteGuest"];
  };
  "/guestmanagement/removeUsersFromGuestManagementHostGroup": {
    /** Removes specified users from a guest management host group */
    post: operations["removeUsersFromGuestManagementHostGroup"];
  };
  "/guestmanagement/sendFormInvite": {
    /** Invite Guest Via Email */
    post: operations["sendFormInvite"];
  };
  "/guestmanagement/signInGuest": {
    /** Sign In Guest */
    post: operations["signInGuest"];
  };
  "/guestmanagement/signOutGuest": {
    /** Sign Out Guest */
    post: operations["signOutGuest"];
  };
  "/guestmanagement/updateGuest": {
    /** Update Guest */
    post: operations["updateGuest"];
  };
  "/guestmanagement/updateGuestInvite": {
    /** Update Guest Invite */
    post: operations["updateGuestInvite"];
  };
  "/guestmanagement/updateGuestManagementHostGroup": {
    /** Updates a guest management host group's meta information like name and description */
    post: operations["updateGuestManagementHostGroup"];
  };
  "/guestmanagement/updateGuestManagementSettings": {
    /** Update guest management settings */
    post: operations["updateGuestManagementSettings"];
  };
  "/help/feedback": {
    /** Leave feedback of our system */
    post: operations["sendFeedback"];
  };
  "/help/openTickets": {
    /**
     * Get Open Support Tickets For A Client Organization. Tickets are associated to an organziation based on the requester's organization association.
     * This endpoint returns a paginated response sorted by the request date. The first page is indexed at 1 and each page has up to 100 ticket entries.
     */
    post: operations["getOpenTickets"];
  };
  "/help/openTicketsV2": {
    /** Get Open Support Tickets For A Client Organization. Tickets are associated to an organziation based on the requester's organization association. */
    post: operations["getOpenTicketsV2"];
  };
  "/help/rma": {
    /** Open an RMA for a camera */
    post: operations["processRMA"];
  };
  "/help/ticket": {
    /** Open a support ticket */
    post: operations["createTicket"];
  };
  "/help/ticketWithFile": {
    /** Open a support ticket and optionally include a file upload. Uploading multiple Files are not supported throught this call. */
    post: operations["createTicketWithFile"];
  };
  "/help/triageDevice": {
    /** Triage a device connection/recording issue */
    post: operations["triageDevice"];
  };
  "/integrations/IoT/deleteDeviceIntegration": {
    /** Delete Device integration */
    post: operations["deleteDeviceIntegration"];
  };
  "/integrations/IoT/deleteFlicIntegration": {
    /** Delete Flic Integration */
    post: operations["deleteFlicIntegration"];
  };
  "/integrations/IoT/deleteHaloIntegration": {
    /** Delete Halo Smart Sensor integration */
    post: operations["deleteHaloIntegration"];
  };
  "/integrations/IoT/deleteIntuifaceIntegration": {
    /** Delete Intuiface integration */
    post: operations["deleteIntuifaceIntegration"];
  };
  "/integrations/IoT/deleteNineOneOneCellularIntegration": {
    /** Delete 911Cellular Integration */
    post: operations["deleteNineOneOneCellularIntegration"];
  };
  "/integrations/IoT/deleteOmnialertIntegration": {
    /** Delete Omnialert integration */
    post: operations["deleteOmnialertIntegration"];
  };
  "/integrations/IoT/deleteShellyIntegration": {
    /** Delete Shelly integration */
    post: operations["deleteShellyIntegration"];
  };
  "/integrations/IoT/generateFlicToken": {
    /** Generate Rhombus Token for use */
    post: operations["generateFlicToken"];
  };
  "/integrations/IoT/generateNineOneOneCellularToken": {
    /** Generate Rhombus Token for use */
    post: operations["generateNineOneOneCellularToken"];
  };
  "/integrations/IoT/getDeviceIntegration": {
    /** Get Device integration */
    post: operations["getDeviceIntegration"];
  };
  "/integrations/IoT/getFlicDevices": {
    /** Grabs all Flic Devices */
    post: operations["getFlicDevices"];
  };
  "/integrations/IoT/getFlicIntegration": {
    /** Get Flic Integration */
    post: operations["getFlicIntegration"];
  };
  "/integrations/IoT/getFlicModule": {
    /** Get Uploaded Module UUID */
    post: operations["getFlicModule"];
  };
  "/integrations/IoT/getNineOneOneCellularIntegration": {
    /** Get 911Cellular Integration */
    post: operations["getNineOneOneCellularIntegration"];
  };
  "/integrations/IoT/getNineOneOneCellularSecurityZones": {
    /** Get 911Cellular Security Zones */
    post: operations["getNineOneOneCellularSecurityZones"];
  };
  "/integrations/IoT/getOmnialertIntegration": {
    /** Get Omnialert integration */
    post: operations["getOmnialertIntegration"];
  };
  "/integrations/IoT/getShellyIntegration": {
    /** Get Shelly integration */
    post: operations["getShellyIntegration"];
  };
  "/integrations/IoT/initiateShellyAuth": {
    /** Initiate the Shelly Auth Process */
    post: operations["initiateShellyAuth"];
  };
  "/integrations/IoT/togglePower": {
    /** Toggle power for a managed power switch */
    post: operations["togglePower"];
  };
  "/integrations/IoT/updateDeviceIntegration": {
    /** Update Device integration */
    post: operations["updateDeviceIntegration"];
  };
  "/integrations/IoT/updateFlicIntegration": {
    /** Update Flic Integration */
    post: operations["updateFlicIntegration"];
  };
  "/integrations/IoT/updateHaloIntegration": {
    /** Update Halo Smart Sensor integration */
    post: operations["updateHaloIntegration"];
  };
  "/integrations/IoT/updateIntuifaceIntegration": {
    /** Update Intuiface integration */
    post: operations["updateIntuifaceIntegration"];
  };
  "/integrations/IoT/updateNineOneOneCellularIntegration": {
    /** Update 911Cellular Integration */
    post: operations["updateNineOneOneCellularIntegration"];
  };
  "/integrations/IoT/updateOmnialertIntegration": {
    /** Update Omnialert integration */
    post: operations["updateOmnialertIntegration"];
  };
  "/integrations/IoT/updateShellyIntegration": {
    /** Update Shelly rules engine integration */
    post: operations["updateShellyIntegration"];
  };
  "/integrations/accessControl/aperio/clearDtc": {
    /** Issues a command to clear the device's DTC */
    post: operations["clearDtc"];
  };
  "/integrations/accessControl/aperio/createAperioDoors": {
    /** Create one or more Aperio Door component(s). */
    post: operations["createAperioAccessControlledDoors"];
  };
  "/integrations/accessControl/aperio/createAperioGateway": {
    /** Create an Aperio Gateway component. */
    post: operations["createAperioGateway"];
  };
  "/integrations/accessControl/aperio/downloadCertificate": {
    /** Download a certificate to use with Aperio's devices. */
    post: operations["downloadCertificate"];
  };
  "/integrations/accessControl/aperio/getAperioIntegration": {
    /** Retrieve the Aperio integration configuration. */
    post: operations["getAperioIntegration"];
  };
  "/integrations/accessControl/aperio/rebootAperioGateway": {
    /** Reboot an Aperio gateway that is connected to a Door Controller. */
    post: operations["rebootAperioGateway"];
  };
  "/integrations/accessControl/aperio/updateAperioIntegration": {
    /** Update the Aperio integration configuration. */
    post: operations["updateAperioIntegration"];
  };
  "/integrations/accessControl/aperio/uploadFirmwareFile": {
    /** Upload a firmware file which will be deployed to Aperio's communication hubs. */
    post: operations["uploadFirmwareFile"];
  };
  "/integrations/accessControl/deleteAmtIntegration": {
    /** Delete Amt badge integration */
    post: operations["deleteAmtIntegration"];
  };
  "/integrations/accessControl/deleteAvigilonAltaIntegrationV2": {
    /** Delete Avigilon Alta badge integration V2 */
    post: operations["deleteAvigilonAltaIntegrationV2"];
  };
  "/integrations/accessControl/deleteBrivoIntegration": {
    /** Delete Brivo badge integration */
    post: operations["deleteBrivoIntegration"];
  };
  "/integrations/accessControl/deleteBrivoIntegrationV2": {
    /** Delete Brivo badge integration V2 */
    post: operations["deleteBrivoIntegrationV2"];
  };
  "/integrations/accessControl/deleteBrivoIntegrationV3": {
    /** Delete Brivo badge integration V3 */
    post: operations["deleteBrivoIntegrationV3"];
  };
  "/integrations/accessControl/deleteButterflymxIntegration": {
    /** Delete ButterflyMX badge integration */
    post: operations["deleteButterflymxIntegration"];
  };
  "/integrations/accessControl/deleteButterflymxIntegrationV2": {
    /** Delete ButterflyMX badge integration V2 */
    post: operations["deleteButterflymxIntegrationV2"];
  };
  "/integrations/accessControl/deleteGeneaIntegration": {
    /** Delete Genea badge integration */
    post: operations["deleteGeneaIntegration"];
  };
  "/integrations/accessControl/deleteGeneaIntegrationV2": {
    /** Delete Genea badge integration V2 */
    post: operations["deleteGeneaIntegrationV2"];
  };
  "/integrations/accessControl/deleteInnerRangeIntegration": {
    /** Delete Inner Range integration */
    post: operations["deleteInnerRangeIntegration"];
  };
  "/integrations/accessControl/deleteKisiIntegration": {
    /** Delete Kisi badge integration */
    post: operations["deleteKisiIntegration"];
  };
  "/integrations/accessControl/deleteKisiIntegrationV2": {
    /** Delete Kisi badge integration V2 */
    post: operations["deleteKisiIntegrationV2"];
  };
  "/integrations/accessControl/deleteOpenpathIntegration": {
    /** Delete Openpath badge integration */
    post: operations["deleteOpenpathIntegration"];
  };
  "/integrations/accessControl/deleteOpentechAllianceIntegration": {
    /** Delete Opentech Alliance integration */
    post: operations["deleteOpentechAllianceIntegration"];
  };
  "/integrations/accessControl/deleteOpentechAllianceIntegrationV2": {
    /** Delete Opentech Alliance integration */
    post: operations["deleteOpentechAllianceIntegrationV2"];
  };
  "/integrations/accessControl/deletePdkIntegration": {
    /** Delete ProDataKey badge integration */
    post: operations["deletePdkIntegration"];
  };
  "/integrations/accessControl/deletePdkIntegrationV2": {
    /** Delete ProDataKey badge integration */
    post: operations["deletePdkIntegrationV2"];
  };
  "/integrations/accessControl/deletePlaceOsIntegration": {
    /** Delete PlaceOs badge integration */
    post: operations["deletePlaceOsIntegration"];
  };
  "/integrations/accessControl/deletePlaceOsIntegrationV2": {
    /** Delete PlaceOs badge integration */
    post: operations["deletePlaceOsIntegrationV2"];
  };
  "/integrations/accessControl/enablePdkIntegration": {
    /** Enabled and Redirect to ProDataKey */
    get: operations["enablePdkIntegration"];
  };
  "/integrations/accessControl/getAccessControlIntegrationsForAlm": {
    /** Get list of v2 Access Control integrations for org that can be used for Rhombus Alarm Monitoring */
    post: operations["getAccessControlIntegrationsForAlm"];
  };
  "/integrations/accessControl/getAmtReaders": {
    /** Get list of AMT readers to assign cameras */
    post: operations["getAmtReaders"];
  };
  "/integrations/accessControl/getAvigilonAltaIntegration": {
    /** Get Avigilon Alta integration */
    post: operations["getAvigilonAltaIntegration"];
  };
  "/integrations/accessControl/getBrivoDoors": {
    /** Get list of available Brivo doors to assign cameras */
    post: operations["getBrivoDoors"];
  };
  "/integrations/accessControl/getBrivoDoorsV2": {
    /** Get list of available Brivo doors to assign cameras */
    post: operations["getBrivoDoorsV2"];
  };
  "/integrations/accessControl/getBrivoDoorsV3": {
    /** Get list of available Brivo doors to assign cameras */
    post: operations["getBrivoDoorsV3"];
  };
  "/integrations/accessControl/getBrivoIntegrationV2": {
    /** Get Brivo badge integration */
    post: operations["getBrivoIntegrationV2"];
  };
  "/integrations/accessControl/getButterflymxIntegrationV2": {
    /** Get ButterflyMX badge integration */
    post: operations["getButterflymxIntegrationV2"];
  };
  "/integrations/accessControl/getButterflymxPanels": {
    /** Get list of available ButterflyMX panels to assign cameras */
    post: operations["getButterflymxPanels"];
  };
  "/integrations/accessControl/getButterflymxPanelsV2": {
    /** Get list of available ButterflyMX panels to assign cameras */
    post: operations["getButterflymxPanelsV2"];
  };
  "/integrations/accessControl/getGeneaDoors": {
    /** Get list of Genea doors to assign cameras */
    post: operations["getGeneaDoors"];
  };
  "/integrations/accessControl/getGeneaIntegration": {
    /** Get Genea integration */
    post: operations["getGeneaIntegration"];
  };
  "/integrations/accessControl/getInnerRangeConsoles": {
    /** Get Inner Range console settings */
    post: operations["getInnerRangeConsoles"];
  };
  "/integrations/accessControl/getInnerRangeDoors": {
    /** Get list of Inner Range doors */
    post: operations["getInnerRangeDoors"];
  };
  "/integrations/accessControl/getInnerRangeIntegration": {
    /** Get Inner Range integration */
    post: operations["getInnerRangeIntegration"];
  };
  "/integrations/accessControl/getKisiDoors": {
    /** Get list of Kisi doors to assign cameras */
    post: operations["getKisiDoors"];
  };
  "/integrations/accessControl/getKisiIntegration": {
    /** Get Kisi badge integration */
    post: operations["getKisiIntegration"];
  };
  "/integrations/accessControl/getKisiIntegrationV2": {
    /** Get Kisi badge integration V2 */
    post: operations["getKisiIntegrationV2"];
  };
  "/integrations/accessControl/getKisiPlaces": {
    /** Get list of Kisi places to assign cameras */
    post: operations["getKisiPlaces"];
  };
  "/integrations/accessControl/getOpenpathDoors": {
    /** Get list of Openpath doors to assign cameras */
    post: operations["getOpenpathDoors"];
  };
  "/integrations/accessControl/getOpenpathLockdownPlans": {
    /** Get list of Openpath lockdown plans to trigger */
    post: operations["getOpenpathLockdownPlans"];
  };
  "/integrations/accessControl/getOpentechAllianceFacilities": {
    /** Get list of Opentech Alliance facilities */
    post: operations["getOpentechAllianceFacilities"];
  };
  "/integrations/accessControl/getOpentechAllianceFacilitiesV2": {
    /** Get list of Opentech Alliance facilities */
    post: operations["getOpentechAllianceFacilitiesV2"];
  };
  "/integrations/accessControl/getOpentechAllianceIntegrationV2": {
    /** Get Opentech Alliance integration */
    post: operations["getOpentechAllianceIntegrationV2"];
  };
  "/integrations/accessControl/getPdkDoors": {
    /** Get list of ProDataKey doors to assign cameras */
    post: operations["getPdkDoors"];
  };
  "/integrations/accessControl/getPdkIntegration": {
    /** Get ProDataKey badge integration */
    post: operations["getPdkIntegration"];
  };
  "/integrations/accessControl/getPdkSystemId": {
    /** Get SystemID for ProDataKey badge integration */
    post: operations["getPdkSystemId"];
  };
  "/integrations/accessControl/getPlaceOsDoors": {
    /** Get list of PlaceOs doors to assign cameras */
    post: operations["getPlaceOsDoors"];
  };
  "/integrations/accessControl/getPlaceOsIntegrationV2": {
    /** Get PlaceOs integration */
    post: operations["getPlaceOsIntegrationV2"];
  };
  "/integrations/accessControl/initiateBrivoOauth": {
    /** Initiate Brivo Oauth 2.0 process */
    post: operations["initiateBrivoOauth"];
  };
  "/integrations/accessControl/initiateButterflymxOauth": {
    /** Initiate Butterflymx Oauth */
    post: operations["initiateButterflymxOauth"];
  };
  "/integrations/accessControl/revertOpenpathLockdown": {
    /** Revert Openpath lockdown plan */
    post: operations["revertOpenpathLockdown"];
  };
  "/integrations/accessControl/triggerOpenpathLockdown": {
    /** Trigger Openpath lockdown plan */
    post: operations["triggerOpenpathLockdown"];
  };
  "/integrations/accessControl/unlockBrivoDoor": {
    /** Unlock Brivo door */
    post: operations["unlockBrivoDoor"];
  };
  "/integrations/accessControl/unlockBrivoDoorV2": {
    /** Unlock Brivo door */
    post: operations["unlockBrivoDoorV2"];
  };
  "/integrations/accessControl/unlockBrivoDoorV3": {
    /** Unlock Brivo door V3 */
    post: operations["unlockBrivoDoorV3"];
  };
  "/integrations/accessControl/unlockGeneaDoor": {
    /** Unlock Genea door */
    post: operations["unlockGeneaDoor"];
  };
  "/integrations/accessControl/unlockInnerRangeDoor": {
    /** Unlock Inner Range door */
    post: operations["unlockInnerRangeDoor"];
  };
  "/integrations/accessControl/unlockKisiDoor": {
    /** Unlock Kisi door */
    post: operations["unlockKisiDoor"];
  };
  "/integrations/accessControl/unlockOpenpathDoor": {
    /** Unlock Openpath door */
    post: operations["unlockOpenpathDoor"];
  };
  "/integrations/accessControl/unlockOpentechAllianceDoor": {
    /** Unlock Opentech Alliance door */
    post: operations["unlockOpentechAllianceDoor"];
  };
  "/integrations/accessControl/unlockOpentechAllianceDoorV2": {
    /** Unlock Opentech Alliance door */
    post: operations["unlockOpentechAllianceDoorV2"];
  };
  "/integrations/accessControl/unlockPdkDoor": {
    /** Unlock ProDataKey door */
    post: operations["unlockPdkDoor"];
  };
  "/integrations/accessControl/unlockPlaceOsDoor": {
    /** Unlock PlaceOs door */
    post: operations["unlockPlaceOsDoor"];
  };
  "/integrations/accessControl/updateAmtIntegration": {
    /** Update Amt badge integration */
    post: operations["updateAmtIntegration"];
  };
  "/integrations/accessControl/updateAvigilonAltaIntegrationV2": {
    /** Update Avigilon Alta badge integration V2 */
    post: operations["updateAvigilonAltaIntegrationV2"];
  };
  "/integrations/accessControl/updateBrivoIntegration": {
    /** Update Brivo badge integration */
    post: operations["updateBrivoIntegration"];
  };
  "/integrations/accessControl/updateBrivoIntegrationV2": {
    /** Update Brivo badge integration */
    post: operations["updateBrivoIntegrationV2"];
  };
  "/integrations/accessControl/updateBrivoIntegrationV3": {
    /** Update Brivo badge integration V3 */
    post: operations["updateBrivoIntegrationV3"];
  };
  "/integrations/accessControl/updateButterflymxIntegration": {
    /** Update ButterflyMX badge integration */
    post: operations["updateButterflymxIntegration"];
  };
  "/integrations/accessControl/updateButterflymxIntegrationV2": {
    /** Update ButterflyMX badge integration V2 */
    post: operations["updateButterflymxIntegrationV2"];
  };
  "/integrations/accessControl/updateGeneaIntegration": {
    /** Update Genea badge integration */
    post: operations["updateGeneaIntegration"];
  };
  "/integrations/accessControl/updateGeneaIntegrationV2": {
    /** Update Genea badge integration V2 */
    post: operations["updateGeneaIntegrationV2"];
  };
  "/integrations/accessControl/updateInnerRangeIntegration": {
    /** Update Inner Range integration */
    post: operations["updateInnerRangeIntegration"];
  };
  "/integrations/accessControl/updateKisiIntegration": {
    /** Update Kisi badge integration */
    post: operations["updateKisiIntegration"];
  };
  "/integrations/accessControl/updateKisiIntegrationV2": {
    /** Update Kisi badge integration V2 */
    post: operations["updateKisiIntegrationV2"];
  };
  "/integrations/accessControl/updateOpenpathIntegration": {
    /** Update Openpath badge integration */
    post: operations["updateOpenpathIntegration"];
  };
  "/integrations/accessControl/updateOpentechAllianceIntegration": {
    /** Update Opentech Alliance integration */
    post: operations["updateOpentechAllianceIntegration"];
  };
  "/integrations/accessControl/updateOpentechAllianceIntegrationV2": {
    /** Update Opentech Alliance integration */
    post: operations["updateOpentechAllianceIntegrationV2"];
  };
  "/integrations/accessControl/updatePdkIntegration": {
    /** Update ProDataKey badge integration */
    post: operations["updatePdkIntegration"];
  };
  "/integrations/accessControl/updatePdkIntegrationV2": {
    /** Update ProDataKey badge integration */
    post: operations["updatePdkIntegrationV2"];
  };
  "/integrations/accessControl/updatePlaceOsSettings": {
    /** Update PlaceOs badge integration */
    post: operations["updatePlaceOsSettings"];
  };
  "/integrations/accessControl/updatePlaceOsSettingsV2": {
    /** Update PlaceOs badge integration */
    post: operations["updatePlaceOsSettingsV2"];
  };
  "/integrations/accessControl/validateKisiApiKey": {
    /** Validate Kisi api key */
    post: operations["validateKisiApiKey"];
  };
  "/integrations/accessControl/validateKisiApiKeyV2": {
    /** Validate Kisi api key V2 */
    post: operations["validateKisiApiKeyV2"];
  };
  "/integrations/deleteAmtIntegration": {
    /** Delete Amt badge integration */
    post: operations["deleteAmtIntegrationDep"];
  };
  "/integrations/deleteDeviceIntegration": {
    /** Delete Device integration */
    post: operations["deleteDeviceIntegrationDep"];
  };
  "/integrations/deleteMattermostIntegration": {
    /** Delete Mattermost alert integration */
    post: operations["deleteMattermostIntegrationDep"];
  };
  "/integrations/deleteOpenAIIntegration": {
    /** Delete OpenAI integration */
    post: operations["deleteOpenAIIntegrationDep"];
  };
  "/integrations/deleteWebhookIntegration": {
    /** Delete outbound webhook alert integration */
    post: operations["deleteWebhookIntegrationDep"];
  };
  "/integrations/deleteWebhookIntegrationV2": {
    /** Delete entire webhook integration */
    post: operations["deleteWebhookIntegrationV2Dep"];
  };
  "/integrations/getAmtReaders": {
    /** Get list of AMT readers to assign cameras */
    post: operations["getAmtReadersDep"];
  };
  "/integrations/getApiTokenApplications": {
    /** Get details of all open api token requests for organization */
    post: operations["getApiTokenApplicationsDep"];
  };
  "/integrations/getApiTokens": {
    /** Get list of all api tokens for organization */
    post: operations["getApiTokensDep"];
  };
  "/integrations/getCalendlyEventDetails": {
    /** Get Calendly event details */
    post: operations["getCalendlyEventDetailsDep"];
  };
  "/integrations/getDeviceIntegration": {
    /** Get Device integration */
    post: operations["getDeviceIntegrationDep"];
  };
  "/integrations/getOpenAIIntegration": {
    /** Get OpenAI integration */
    post: operations["getOpenAIIntegrationDep"];
  };
  "/integrations/getOpenAIModels": {
    /** Get list of OpenAI models */
    post: operations["getOpenAIModelsDep"];
  };
  "/integrations/getOrgIntegrations": {
    /** Get details of all third-party integrations for organization */
    post: operations["getOrgIntegrationsDep"];
  };
  "/integrations/getOrgIntegrationsV2": {
    /** Get details of all V2 third-party integrations for an organization */
    post: operations["getOrgIntegrationsV2Dep"];
  };
  "/integrations/getWebhookIntegration": {
    /** Get webhook integration */
    post: operations["getWebhookIntegrationDep"];
  };
  "/integrations/incidentManagement/deleteDiceIntegration": {
    /** Delete Dice integration */
    post: operations["deleteDiceIntegration"];
  };
  "/integrations/incidentManagement/deleteEmailIntegration": {
    /** Delete email alert integration */
    post: operations["deleteEmailIntegration"];
  };
  "/integrations/incidentManagement/deleteInformacastIntegration": {
    /** Delete Informacast integration */
    post: operations["deleteInformacastIntegration"];
  };
  "/integrations/incidentManagement/deleteLumeoIntegration": {
    /** Delete Lumeo integration */
    post: operations["deleteLumeoIntegration"];
  };
  "/integrations/incidentManagement/deleteMattermostIntegration": {
    /** Delete Mattermost alert integration */
    post: operations["deleteMattermostIntegration"];
  };
  "/integrations/incidentManagement/deleteMicrosoftTeamsIntegration": {
    /** Delete Microsoft Teams alert integration */
    post: operations["deleteMicrosoftTeamsIntegration"];
  };
  "/integrations/incidentManagement/deleteMicrosoftTeamsIntegrationV2": {
    /** Delete Microsoft Teams alert integration */
    post: operations["deleteMicrosoftTeamsIntegrationV2"];
  };
  "/integrations/incidentManagement/deleteMicrosoftTeamsUser": {
    /** Remove configurations for Microsoft Teams user */
    post: operations["deleteMicrosoftTeamsUser"];
  };
  "/integrations/incidentManagement/deleteOpenAIIntegration": {
    /** Delete OpenAI integration */
    post: operations["deleteOpenAIIntegration"];
  };
  "/integrations/incidentManagement/deletePagerDutyIntegration": {
    /** Delete PagerDuty alert integration */
    post: operations["deletePagerDutyIntegration"];
  };
  "/integrations/incidentManagement/deletePimlocIntegration": {
    /** Delete Pimloc integration */
    post: operations["deletePimlocIntegration"];
  };
  "/integrations/incidentManagement/deleteRaptorIntegration": {
    /** Delete Raptor Integration */
    post: operations["deleteRaptorIntegration"];
  };
  "/integrations/incidentManagement/deleteServiceNowIntegration": {
    /** Delete ServiceNow alert integration */
    post: operations["deleteServiceNowIntegration"];
  };
  "/integrations/incidentManagement/deleteSlackIntegrationV2": {
    /** Delete Slack alert integration v2 */
    post: operations["deleteSlackIntegrationV2"];
  };
  "/integrations/incidentManagement/getDiceIntegration": {
    /** Get Dice integration */
    post: operations["getDiceIntegration"];
  };
  "/integrations/incidentManagement/getInformacastIntegration": {
    /** Get Informacast integration */
    post: operations["getInformacastIntegration"];
  };
  "/integrations/incidentManagement/getInformacastScenarios": {
    /** Get Informacast scenarios */
    post: operations["getInformacastScenarios"];
  };
  "/integrations/incidentManagement/getLumeoIntegration": {
    /** Get Lumeo integration */
    post: operations["getLumeoIntegration"];
  };
  "/integrations/incidentManagement/getMicrosoftTeamsIntegration": {
    /** Get Microsoft Teams alert integration */
    post: operations["getMicrosoftTeamsIntegration"];
  };
  "/integrations/incidentManagement/getMicrosoftUsersJoinedTeams": {
    /** Get a list of teams a Microsoft Teams user joined */
    post: operations["getMicrosoftUsersJoinedTeams"];
  };
  "/integrations/incidentManagement/getOpenAIIntegration": {
    /** Get OpenAI integration */
    post: operations["getOpenAIIntegration"];
  };
  "/integrations/incidentManagement/getOpenAIModels": {
    /** Get list of OpenAI models */
    post: operations["getOpenAIModels"];
  };
  "/integrations/incidentManagement/getPimlocIntegration": {
    /** Get Pimloc integration */
    post: operations["getPimlocIntegration"];
  };
  "/integrations/incidentManagement/getRaptorBuildings": {
    /** Get Raptor Buildings */
    post: operations["getRaptorBuildings"];
  };
  "/integrations/incidentManagement/getRaptorIntegration": {
    /** Get Raptor Integration */
    post: operations["getRaptorIntegration"];
  };
  "/integrations/incidentManagement/getRaptorTemplates": {
    /** Get Raptor Templates */
    post: operations["getRaptorTemplates"];
  };
  "/integrations/incidentManagement/initiateMicrosoftTeamsOAuth": {
    /** Initiate the Microsoft Teams OAuth Process */
    post: operations["initiateMicrosoftTeamsOAuth"];
  };
  "/integrations/incidentManagement/initiateSlackOAuth": {
    /** Initiate the Slack OAuth Process */
    post: operations["initiateSlackOAuth"];
  };
  "/integrations/incidentManagement/installMicrosoftTeamsBotForTeam": {
    /** Install notification bot for Microsoft Teams team */
    post: operations["installMicrosoftTeamsBotForTeam"];
  };
  "/integrations/incidentManagement/installMicrosoftTeamsBotForUser": {
    /** Install notification bot for Microsoft Teams user */
    post: operations["installMicrosoftTeamsBotForUser"];
  };
  "/integrations/incidentManagement/uninstallMicrosoftTeamsBotForTeam": {
    /** Uninstall notification bot for Microsoft Teams team */
    post: operations["uninstallMicrosoftTeamsBotForTeam"];
  };
  "/integrations/incidentManagement/uninstallMicrosoftTeamsBotForUser": {
    /** Uninstall notification bot for Microsoft Teams user */
    post: operations["uninstallMicrosoftTeamsBotForUser"];
  };
  "/integrations/incidentManagement/updateDiceIntegration": {
    /** Update Dice integration */
    post: operations["updateDiceIntegration"];
  };
  "/integrations/incidentManagement/updateEmailIntegration": {
    /** Update email alert integration */
    post: operations["updateEmailIntegration"];
  };
  "/integrations/incidentManagement/updateInformacastIntegration": {
    /** Update Informacast rules engine integration */
    post: operations["updateInformacastIntegration"];
  };
  "/integrations/incidentManagement/updateLumeoIntegration": {
    /** Update Lumeo integration */
    post: operations["updateLumeoIntegration"];
  };
  "/integrations/incidentManagement/updateMattermostIntegration": {
    /** Update Mattermost alert integration */
    post: operations["updateMattermostIntegration"];
  };
  "/integrations/incidentManagement/updateMicrosoftTeamsIntegration": {
    /** Update Microsoft Teams alert integration */
    post: operations["updateMicrosoftTeamsIntegration"];
  };
  "/integrations/incidentManagement/updateMicrosoftTeamsIntegrationV2": {
    /** Update Microsoft Teams alert integration */
    post: operations["updateMicrosoftTeamsIntegrationV2"];
  };
  "/integrations/incidentManagement/updateOpenAIIntegration": {
    /** Update OpenAI integration */
    post: operations["updateOpenAIIntegration"];
  };
  "/integrations/incidentManagement/updatePagerDutyIntegration": {
    /** Update PagerDuty alert integration */
    post: operations["updatePagerDutyIntegration"];
  };
  "/integrations/incidentManagement/updatePimlocIntegration": {
    /** Update Pimloc integration */
    post: operations["updatePimlocIntegration"];
  };
  "/integrations/incidentManagement/updateRaptorIntegration": {
    /** Update Raptor Integration */
    post: operations["updateRaptorIntegration"];
  };
  "/integrations/incidentManagement/updateServiceNowIntegration": {
    /** Update ServiceNow alert integration */
    post: operations["updateServiceNowIntegration"];
  };
  "/integrations/incidentManagement/updateSlackIntegration": {
    /** Update Slack alert integration */
    post: operations["updateSlackIntegration"];
  };
  "/integrations/incidentManagement/updateSlackIntegrationV2": {
    /** Update Slack alert integration v2 */
    post: operations["updateSlackIntegrationV2"];
  };
  "/integrations/org/getApiTokenApplications": {
    /** Get details of all open api token requests for organization */
    post: operations["getApiTokenApplications"];
  };
  "/integrations/org/getApiTokens": {
    /** Get list of all api tokens for organization */
    post: operations["getApiTokens"];
  };
  "/integrations/org/getOrgIntegrations": {
    /** Get details of all third-party integrations for organization */
    post: operations["getOrgIntegrations"];
  };
  "/integrations/org/getOrgIntegrationsV2": {
    /** Get details of all V2 third-party integrations for an organization */
    post: operations["getOrgIntegrationsV2"];
  };
  "/integrations/org/revokeApiToken": {
    /** Remove an api token from organization. Note: this is irreversible */
    post: operations["revokeApiToken"];
  };
  "/integrations/org/submitApiTokenApplication": {
    /** Request an api token for organization */
    post: operations["submitApiTokenApplication"];
  };
  "/integrations/org/updateApiToken": {
    /** Update display name and permissions of an api token */
    post: operations["updateApiToken"];
  };
  "/integrations/revokeApiToken": {
    /** Remove an api token from organization. Note: this is irreversible */
    post: operations["revokeApiTokenDep"];
  };
  "/integrations/serviceManagement/createEnvoyInvite": {
    /** Create an invite with Envoy */
    post: operations["createEnvoyInvite"];
  };
  "/integrations/serviceManagement/deleteEnvoyIntegration": {
    /** Delete Envoy badge integration */
    post: operations["deleteEnvoyIntegration"];
  };
  "/integrations/serviceManagement/deleteEnvoyIntegrationV2": {
    /** Delete Envoy integration */
    post: operations["deleteEnvoyIntegrationV2"];
  };
  "/integrations/serviceManagement/deleteGuest": {
    /** Delete Guest */
    post: operations["deleteGuestI"];
  };
  "/integrations/serviceManagement/deleteGuestManagementIntegration": {
    post: operations["deleteGuestManagementIntegration"];
  };
  "/integrations/serviceManagement/deleteToastIntegration": {
    /** Delete Toast integration */
    post: operations["deleteToastIntegration"];
  };
  "/integrations/serviceManagement/deleteToastIntegrationV2": {
    /** Delete Toast integration */
    post: operations["deleteToastIntegrationV2"];
  };
  "/integrations/serviceManagement/getAllGuestsByOrg": {
    /** Get All Guests by Org */
    post: operations["getAllGuestsByOrgI"];
  };
  "/integrations/serviceManagement/getCalendlyEventDetails": {
    /** Get Calendly event details */
    post: operations["getCalendlyEventDetails"];
  };
  "/integrations/serviceManagement/getEnvoyIntegration": {
    /** Get Envoy integration */
    post: operations["getEnvoyIntegration"];
  };
  "/integrations/serviceManagement/getGuest": {
    /** Get Guest */
    post: operations["getGuestI"];
  };
  "/integrations/serviceManagement/getGuestManagementIntegration": {
    post: operations["getGuestManagementIntegration"];
  };
  "/integrations/serviceManagement/getToastIntegration": {
    /** Get Toast integration */
    post: operations["getToastIntegration"];
  };
  "/integrations/serviceManagement/getToastServiceAreas": {
    /** Get list of Toast service areas to assign cameras */
    post: operations["getToastServiceAreas"];
  };
  "/integrations/serviceManagement/initiateEnvoyOAuth": {
    /** Initiate the Envoy OAuth Process */
    post: operations["initiateEnvoyOAuth"];
  };
  "/integrations/serviceManagement/updateEnvoyIntegration": {
    /** Update Envoy badge integration */
    post: operations["updateEnvoyIntegration"];
  };
  "/integrations/serviceManagement/updateEnvoyIntegrationV2": {
    /** Update Envoy integration */
    post: operations["updateEnvoyIntegrationV2"];
  };
  "/integrations/serviceManagement/updateGuest": {
    /** Update Guest */
    post: operations["updateGuestI"];
  };
  "/integrations/serviceManagement/updateGuestManagementIntegration": {
    post: operations["updateGuestManagementIntegration"];
  };
  "/integrations/serviceManagement/updateToastIntegration": {
    /** Update Toast integration */
    post: operations["updateToastIntegration"];
  };
  "/integrations/serviceManagement/updateToastIntegrationV2": {
    /** Update Toast integration */
    post: operations["updateToastIntegrationV2"];
  };
  "/integrations/storage/deleteAwsIntegration": {
    /** Delete AWS S3 clip storage integration */
    post: operations["deleteAwsIntegration"];
  };
  "/integrations/storage/deleteBoxIntegration": {
    /** Delete Box clip storage integration */
    post: operations["deleteBoxIntegration"];
  };
  "/integrations/storage/deleteDropboxIntegration": {
    /** Delete Dropbox clip storage integration */
    post: operations["deleteDropboxIntegration"];
  };
  "/integrations/storage/deleteGoogleIntegration": {
    /** Delete Google Drive clip storage integration */
    post: operations["deleteGoogleIntegration"];
  };
  "/integrations/storage/deleteGoogleIntegrationV2": {
    /** Delete Google Drive clip storage integration */
    post: operations["deleteGoogleIntegrationV2"];
  };
  "/integrations/storage/deleteOffice365Integration": {
    /** Delete Office365 Sharepoint clip storage integration */
    post: operations["deleteOffice365Integration"];
  };
  "/integrations/storage/getGoogleIntegration": {
    /** Get Google Drive clip storage integration */
    post: operations["getGoogleIntegration"];
  };
  "/integrations/storage/initiateDropboxOAuth": {
    /** Initiate the Dropbox OAuth Process */
    post: operations["initiateDropboxOAuth"];
  };
  "/integrations/storage/initiateGoogleOAuth": {
    /** Initiate the Google OAuth Process */
    post: operations["initiateGoogleOAuth"];
  };
  "/integrations/storage/initiateOffice365OAuth": {
    /** Initiate the Office365 OAuth Process */
    post: operations["initiateOffice365OAuth"];
  };
  "/integrations/storage/migrateGoogleIntegration": {
    /** Migrate Google Drive settings from the V1 table to the V2 table */
    post: operations["migrateGoogleIntegration"];
  };
  "/integrations/storage/refreshGoogleAccessToken": {
    /** Refresh Google access token */
    post: operations["refreshGoogleAccessToken"];
  };
  "/integrations/storage/revokeGoogleDriveAccess": {
    /** Revokes access to a Google Drive account */
    post: operations["revokeGoogleDriveAccess"];
  };
  "/integrations/storage/updateAwsIntegration": {
    /** Update AWS S3 clip storage integration */
    post: operations["updateAwsIntegration"];
  };
  "/integrations/storage/updateBoxIntegration": {
    /** Update Box clip storage integration */
    post: operations["updateBoxIntegration"];
  };
  "/integrations/storage/updateDropboxIntegration": {
    /** Update Dropbox clip storage integration */
    post: operations["updateDropboxIntegration"];
  };
  "/integrations/storage/updateGoogleIntegration": {
    /** Update Google Drive clip storage integration */
    post: operations["updateGoogleIntegration"];
  };
  "/integrations/storage/updateGoogleIntegrationV2": {
    /** Update Google Drive clip storage integration */
    post: operations["updateGoogleIntegrationV2"];
  };
  "/integrations/storage/updateOffice365Integration": {
    /** Update Office365 Sharepoint clip storage integration */
    post: operations["updateOffice365Integration"];
  };
  "/integrations/submitApiTokenApplication": {
    /** Request an api token for organization */
    post: operations["submitApiTokenApplicationDep"];
  };
  "/integrations/subscribeZapierWebhook": {
    /** Setup a Zapier webhook */
    post: operations["subscribeZapierWebhookDep"];
  };
  "/integrations/unsubscribeZapierWebhook": {
    /** Delete a Zapier webhook */
    post: operations["unsubscribeZapierWebhookDep"];
  };
  "/integrations/updateAmtIntegration": {
    /** Update Amt badge integration */
    post: operations["updateAmtIntegrationDep"];
  };
  "/integrations/updateApiToken": {
    /** Update display name and permissions of an api token */
    post: operations["updateApiTokenDep"];
  };
  "/integrations/updateDeviceIntegration": {
    /** Update Device integration */
    post: operations["updateDeviceIntegrationDep"];
  };
  "/integrations/updateMattermostIntegration": {
    /** Update Mattermost alert integration */
    post: operations["updateMattermostIntegrationDep"];
  };
  "/integrations/updateNoonlightSettings": {
    /** Update Noonlight integration */
    post: operations["updateNoonlightSettings"];
  };
  "/integrations/updateOpenAIIntegration": {
    /** Update OpenAI integration */
    post: operations["updateOpenAIIntegrationDep"];
  };
  "/integrations/updateWebhookIntegration": {
    /** Update outbound webhook alert integration */
    post: operations["updateWebhookIntegrationDep"];
  };
  "/integrations/updateWebhookIntegrationV2": {
    /** Update preexisting webhooks */
    post: operations["updateWebhookIntegrationV2Dep"];
  };
  "/integrations/webhooks/deleteWebhookIntegration": {
    /** Delete outbound webhook alert integration */
    post: operations["deleteWebhookIntegration"];
  };
  "/integrations/webhooks/deleteWebhookIntegrationV2": {
    /** Delete entire webhook integration */
    post: operations["deleteWebhookIntegrationV2"];
  };
  "/integrations/webhooks/getWebhookIntegration": {
    /** Get webhook integration */
    post: operations["getWebhookIntegration"];
  };
  "/integrations/webhooks/subscribeZapierWebhook": {
    /** Setup a Zapier webhook */
    post: operations["subscribeZapierWebhook"];
  };
  "/integrations/webhooks/unsubscribeZapierWebhook": {
    /** Delete a Zapier webhook */
    post: operations["unsubscribeZapierWebhook"];
  };
  "/integrations/webhooks/updateWebhookIntegration": {
    /** Update outbound webhook alert integration */
    post: operations["updateWebhookIntegration"];
  };
  "/integrations/webhooks/updateWebhookIntegrationV2": {
    /** Update preexisting webhooks */
    post: operations["updateWebhookIntegrationV2"];
  };
  "/internal/addPartnerAsSuperAdmin": {
    post: operations["addPartnerAsSuperAdmin"];
  };
  "/internal/createOrg": {
    post: operations["createOrg"];
  };
  "/internal/createPartnerOrg": {
    post: operations["createPartnerOrg"];
  };
  "/internal/createReturnInventoryAuditReservation": {
    post: operations["createReturnInventoryAuditReservation"];
  };
  "/internal/createSupportAuthority": {
    post: operations["createInternalSalesforceSupportAuthority"];
  };
  "/internal/developerNewsletterEnroll": {
    post: operations["developerNewsletterEnroll"];
  };
  "/internal/getSuperAdminGroupUUID": {
    post: operations["getSuperAdminGroupUUID"];
  };
  "/internal/initiateShipment": {
    post: operations["initiateShipment"];
  };
  "/internal/listOrgs": {
    post: operations["listOrgs"];
  };
  "/internal/parentLifetimeSpend": {
    post: operations["parentLifetimeSpend"];
  };
  "/internal/proCamerasOnly": {
    post: operations["proDevicesOnly"];
  };
  "/internal/requestHardwareForDevelopment": {
    post: operations["requestHardwareForDevelopment"];
  };
  "/internal/sendShipmentShippedEmail": {
    post: operations["sendShipmentShippedEmail"];
  };
  "/internal/setOpportunityForPurchaseOrder": {
    post: operations["setOpportunityForPurchaseOrder"];
  };
  "/invoice/charge": {
    post: operations["invoiceCharge"];
  };
  "/invoice/chargeV1": {
    post: operations["invoiceChargeV1"];
  };
  "/invoice/details": {
    post: operations["invoiceDetails"];
  };
  "/invoice/detailsV1": {
    post: operations["invoiceDetailsV1"];
  };
  "/keypad/authenticatePin": {
    /** Authenticate a keypad PIN */
    post: operations["authenticatePin"];
  };
  "/keypad/checkin": {
    /** Method for keypad online/offline processing */
    post: operations["keypadCheckin"];
  };
  "/keypad/claimKeypadActivationToken": {
    /** Connects a keypad to Rhombus services */
    post: operations["claimKeypadActivationToken"];
  };
  "/keypad/getCurrentKeypad": {
    /** Get the current keypad */
    post: operations["getCurrentKeypad"];
  };
  "/keypad/getKeypadsForLocation": {
    /** Get a list of all registered keypads for a location */
    post: operations["getKeypadsForLocation"];
  };
  "/keypad/getKeypadsForOrg": {
    /** Get a list of all registered keypads for an org */
    post: operations["getKeypadsForOrg"];
  };
  "/keypad/unregisterKeypad": {
    /** Unregister a keypad */
    post: operations["unregisterKeypad"];
  };
  "/keypad/updateKeypad": {
    /** Update keypad settings */
    post: operations["updateKeypad"];
  };
  "/kiosk/claimKioskActivationToken": {
    /** Update kiosk settings */
    post: operations["claimKioskActivationToken"];
  };
  "/kiosk/deleteKiosk": {
    /** Deleted a kiosk */
    post: operations["deleteKiosk"];
  };
  "/kiosk/getCurrentKiosk": {
    /** Get the current kiosk */
    post: operations["getCurrentKiosk"];
  };
  "/kiosk/getKiosksForLocation": {
    /** Get a list of all registered kiosks for a location */
    post: operations["getKiosksForLocation"];
  };
  "/kiosk/getKiosksForOrg": {
    /** Get a list of all registered kiosks for an org */
    post: operations["getKiosksForOrg"];
  };
  "/kiosk/heartbeat": {
    /** Method for kiosk online/offline processing */
    post: operations["kioskCheckin"];
  };
  "/kiosk/unregisterKiosk": {
    /** Unregister a kiosk */
    post: operations["unregisterKiosk"];
  };
  "/kiosk/updateKiosk": {
    /** Update kiosk settings */
    post: operations["updateKiosk"];
  };
  "/license/assignACUDoorLicense": {
    post: operations["assignACUDoorLicense"];
  };
  "/license/assignAlertMonitoringLicense": {
    post: operations["assignAlertMonitoringLicense"];
  };
  "/license/assignDeviceLicense": {
    /** Assign or unassign a device license. */
    post: operations["assignDeviceLicense"];
  };
  "/license/assignLicense": {
    /** Assign an add-on license to a device */
    post: operations["assignLicense"];
  };
  "/license/calculateLicenseStatsForClientOrg": {
    post: operations["calculateLicenseStatsForClientOrg"];
  };
  "/license/calculateLicenseStatsForOrg": {
    post: operations["calculateLicenseStatsForOrg"];
  };
  "/license/catalog/findCatalogItems": {
    post: operations["findCatalogItems"];
  };
  "/license/catalog/getCatalogItemByProductCode": {
    post: operations["getCatalogItemByProductCode"];
  };
  "/license/claimkey/claimLicenses": {
    /** Start claiming licenses represented by claim key with the specified code. This operation is asynchronous. */
    post: operations["claimLicenses"];
  };
  "/license/claimkey/claimLicensesForClientOrg": {
    post: operations["claimLicensesForClientOrg"];
  };
  "/license/claimkey/createClaimKey": {
    /** Create claim key */
    post: operations["createClaimKey"];
  };
  "/license/claimkey/createRenewalClaimKey": {
    /** Create renewal claim key */
    post: operations["createRenewalClaimKey"];
  };
  "/license/claimkey/findClaimKeysByOrg": {
    /** Find claim keys by org */
    post: operations["findClaimKeysByOrg"];
  };
  "/license/claimkey/getClaimKey": {
    /** Get claim key with the specified uuid */
    post: operations["getClaimKey"];
  };
  "/license/claimkey/getClaimKeyByCode": {
    /** Get claim key with the specified code */
    post: operations["getClaimKeyByCode"];
  };
  "/license/claimkey/getClaimKeyByCodeForClientOrg": {
    /** Get claim key with the specified code for a client organization. */
    post: operations["getClaimKeyByCodeForClientOrg"];
  };
  "/license/claimkey/returnClaimKeyProductQuantities": {
    /** Return claim key product quantities */
    post: operations["returnClaimKeyProductQuantities"];
  };
  "/license/createACUDoorLicense": {
    post: operations["createACUDoorLicense"];
  };
  "/license/createAlertMonitoringLicense": {
    post: operations["createAlertMonitoringLicense"];
  };
  "/license/createDeviceLicense": {
    /** Create a device license for an organization */
    post: operations["createDeviceLicense"];
  };
  "/license/createLicense": {
    /** Create an add-on license for an organization */
    post: operations["createLicense"];
  };
  "/license/deleteAlertMonitoringLicense": {
    post: operations["deleteAlertMonitoringLicense"];
  };
  "/license/deleteDeviceLicense": {
    /** Delete an unassigned device license from an organization */
    post: operations["deleteDeviceLicense"];
  };
  "/license/deleteLicense": {
    /** Delete an unassigned add-on license from an organization */
    post: operations["deleteLicense"];
  };
  "/license/findLicensesByClaimKey": {
    post: operations["findLicensesByClaimKey"];
  };
  "/license/getACUDoorLicenses": {
    /** Get list of access controlled door licenses licenses available in organization */
    post: operations["getACUDoorLicenses"];
  };
  "/license/getACUDoorLicensesForClientOrg": {
    /** Get list of access controlled door licenses licenses available for a client organization */
    post: operations["getACUDoorLicensesForClientOrg"];
  };
  "/license/getAlertMonitoringLicenses": {
    /** Get list of alert monitoring licenses available in organization */
    post: operations["getAlertMonitoringLicenses"];
  };
  "/license/getAlertMonitoringLicensesForClientOrg": {
    /** Get list of alert monitoring licenses available for a client organization */
    post: operations["getAlertMonitoringLicensesForClientOrg"];
  };
  "/license/getDeviceLicenses": {
    /** Get list of device licenses available in organization */
    post: operations["getDeviceLicenses"];
  };
  "/license/getDeviceLicensesForClientOrg": {
    /** Get list of device licenses available for a client organization */
    post: operations["getDeviceLicensesForClientOrg"];
  };
  "/license/getLicenses": {
    /** Get list of add-on licenses available in organization */
    post: operations["getLicenses"];
  };
  "/license/getLicensesForClientOrg": {
    /** Get a list of licenses available for a client organization */
    post: operations["getLicensesForClientOrg"];
  };
  "/location/addLocationLabel": {
    /** Add a label to a location */
    post: operations["addLocationLabel"];
  };
  "/location/createLocation": {
    /** Create a location */
    post: operations["createlocation"];
  };
  "/location/deleteLocation": {
    /** Remove a location */
    post: operations["deleteLocation"];
  };
  "/location/geoCode": {
    /** Get the latitude and longitude of an address */
    post: operations["geoCode"];
  };
  "/location/getLocation": {
    /** Get location by id */
    post: operations["getLocation"];
  };
  "/location/getLocationLabelsForOrg": {
    /** Get all location labels for an organization */
    post: operations["getLocationLabelsForOrg"];
  };
  "/location/getLocations": {
    /** Get list of locations in organization */
    post: operations["getLocations"];
  };
  "/location/getLocationsAssociatedToLocationLabelsByOrg": {
    /** Get all locations associated to location labels for an organization */
    post: operations["getLocationsAssociatedToLocationLabelsByOrg"];
  };
  "/location/getLocationsByGeo": {
    /** Get list of locations given latitude and longitude */
    post: operations["getLocationsByGeo"];
  };
  "/location/getLocationsBySubLocationsHierarchyKey": {
    /** Get nested locations by subLocationHierarchyKey */
    post: operations["getLocationsBySubLocationsHierarchyKey"];
  };
  "/location/getLocationsV2": {
    /** Get list of locations in organization */
    post: operations["getLocationsV2"];
  };
  "/location/removeLocationLabel": {
    /** Remove a label from a location */
    post: operations["removeLocationLabel"];
  };
  "/location/selectiveUpdateLocation": {
    /** Selectively update a location */
    post: operations["selectiveUpdateLocation"];
  };
  "/location/updateLocation": {
    /** Update a location **NOTE: This will replace old settings meaning if you leave a field blank it will be overrode to blank. For selective field updates use the endpoint /selectiveUpdateLocation */
    post: operations["updateLocation"];
  };
  "/location/validateLocation": {
    /** Validate a location address for Alarm Monitoring */
    post: operations["validateLocation"];
  };
  "/logistics/getRMAs": {
    /** Get RMAs */
    post: operations["getRMAs"];
  };
  "/logistics/getShipments": {
    /** Get shipments */
    post: operations["getShipments"];
  };
  "/logistics/getWarrantyApprovedRMAs": {
    post: operations["getWarrantyApprovedRMAs"];
  };
  "/maps/generateMapUrl": {
    post: operations["generateMapUrl"];
  };
  "/mediadevice/getBulkMediaDeviceDetails": {
    /** Get media information of any video-supporting media device */
    post: operations["getBulkMediaDeviceDetails"];
  };
  "/metric/logEvents": {
    post: operations["logEvent"];
  };
  "/metric/mobile/logEvents": {
    post: operations["uploadMobileLogs"];
  };
  "/metric/reportError": {
    post: operations["reportError"];
  };
  "/mobile/loginToOrg": {
    /** Allows a multi-org user on mobile to login to a different org they are able to access. */
    post: operations["loginToOrg"];
  };
  "/mobile/loginVerifiedSupportAuthority": {
    /** Mobile login of partner to client org. */
    post: operations["loginVerifiedSupportAuthority"];
  };
  "/mobile/logout": {
    /** Ends a mobile session. */
    post: operations["logoutMobileUser"];
  };
  "/mobile/refreshMobileSession": {
    post: operations["refreshMobileSession"];
  };
  "/mobile/updateNotificationToken": {
    /** Updates a mobile notification token for the Console mobile app */
    post: operations["updateNotificationToken"];
  };
  "/mobile/updateRhombusKeyNotificationToken": {
    /** Updates a mobile notification token for the Rhombus Key mobile app */
    post: operations["updateRhombusKeyNotificationToken"];
  };
  "/modularai/addModelToDevice": {
    /** Add model to device */
    post: operations["addModelToDevice"];
  };
  "/modularai/getDevicesForModel": {
    /** Get devices running model */
    post: operations["getDevicesForModel"];
  };
  "/modularai/getModels": {
    /** Get available models */
    post: operations["getModels"];
  };
  "/modularai/getModelsAddedToDevice": {
    /** Get models added to device */
    post: operations["getModelsAddedToDevice"];
  };
  "/modularai/removeModelFromDevice": {
    /** Remove model from device */
    post: operations["removeModelFromDevice"];
  };
  "/modularai/updateModel": {
    /** Update model config name, description, or model parameters */
    post: operations["updateModel"];
  };
  "/modularai/uploadCustomModel": {
    /** Upload a custom model */
    post: operations["uploadCustomModel"];
  };
  "/modularai/uploadQuantizedModel": {
    /** [DEV ONLY] Upload a quantized model for an existing modular AI config */
    post: operations["uploadQuantizedModel"];
  };
  "/network/configuration": {
    /** manage device network configuration */
    post: operations["networkConfiguration"];
  };
  "/oauth/authorize": {
    /** User authorizes to share permission and ac settings, receives temporary authorization code */
    get: operations["authorize"];
  };
  "/oauth/deleteApplication": {
    /** Delete application */
    post: operations["deleteApplication"];
  };
  "/oauth/getAllApplicationsForOrg": {
    /** Get all applications for org */
    post: operations["getAllApplicationsForOrg"];
  };
  "/oauth/getApplicationByClientId": {
    /** Get application by clientId */
    post: operations["getApplicationByClientId"];
  };
  "/oauth/submitApplication": {
    /** Application for client_id and client_secret */
    post: operations["submitApplication"];
  };
  "/oauth/updateApplication": {
    /** Update application */
    post: operations["updateApplication"];
  };
  "/occupancy/getMinimalOccupancySensorStateList": {
    /** Get basic state information about all proximity tags in organization */
    post: operations["getMinimalOccupancySensorStateList"];
  };
  "/occupancy/getOccupancyEventsForSensor": {
    /** Get recent events for specified proximity tag */
    post: operations["getOccupancyEventsForSensor"];
  };
  "/occupancy/getOccupancyPresenceWindows": {
    /** Get stored video information for sensor */
    post: operations["getOccupancyPresenceWindows"];
  };
  "/occupancy/updateDetails": {
    /** Update the details of an occupancy sensor */
    post: operations["updateOccupancySensorDetails"];
  };
  "/openapiwebservice/getSchemas": {
    /** Exposes custom objects and enums to the component schema - this endpoint should not be invoked */
    post: operations["getSchemas"];
  };
  "/org/claimActivationToken": {
    /** Claim activation token for organization */
    post: operations["claimActivationToken"];
  };
  "/org/claimShipmentRegistrationToken": {
    /** Claim shipment registration token for an organization */
    post: operations["claimShipmentRegistrationToken"];
  };
  "/org/createPendingRegistration": {
    /** Create a pending registration. Registration will be completed when the hardware establishes connectivity */
    post: operations["createPendingRegistration"];
  };
  "/org/deleteCloudArchivingConfig": {
    /** Delete scoped cloud archiving config.  Note that the priority of scoping is Org > Location > Device */
    post: operations["deleteCloudArchivingConfig"];
  };
  "/org/deleteKeypadLogo": {
    /** Delete keypad logo. */
    post: operations["deleteKeypadLogo"];
  };
  "/org/deleteRhombusKeyLogo": {
    /** Delete rhombus key logo. */
    post: operations["deleteRhombusKeyLogo"];
  };
  "/org/findAllHardwareWithPendingRegistration": {
    /** Find all hardware for which a pending registrations exists */
    post: operations["findAllHardwareWithPendingRegistration"];
  };
  "/org/findHardwareAvailableForPendingRegistration": {
    /** Find hardware for which pending registrations can be created */
    post: operations["findHardwareAvailableForPendingRegistration"];
  };
  "/org/findIfTeamNameAvailable": {
    /** Get organization team name if it is available */
    post: operations["findIfTeamNameAvailable"];
  };
  "/org/findSCIMSettingsForOrg": {
    /** Get SCIM configuration for organization */
    post: operations["findSCIMSettingsForOrg"];
  };
  "/org/generateFederatedSessionToken": {
    /** Generate a federated session token login for organization */
    post: operations["generateFederatedSessionToken"];
  };
  "/org/getAwsIntCloudformationFile": {
    /** Get AWS integration cloudformation file */
    post: operations["getAwsIntCloudFormationFile"];
  };
  "/org/getClientOrg": {
    /** Get details about the client organization */
    post: operations["getClientOrg"];
  };
  "/org/getCloudArchivingConfigs": {
    /** Get scoped cloud archiving configs.  Note that the priority of scoping is Org > Location > Device */
    post: operations["getCloudArchivingConfigs"];
  };
  "/org/getDeviceFlags": {
    /** Get flags for a device */
    post: operations["getDeviceFlags"];
  };
  "/org/getFeatures": {
    /** Get organization wide features */
    post: operations["getFeatures"];
  };
  "/org/getLocationFlags": {
    /** Get flags for all locations */
    post: operations["getLocationFlags"];
  };
  "/org/getOrg": {
    /** Get details about organization */
    post: operations["getOrg"];
  };
  "/org/getOrgIntegrations": {
    /** Use endpoints in Integrations Webservice instead */
    post: operations["DEPRECATED_getOrgIntegrations"];
  };
  "/org/getOrgNotificationTemplate": {
    /** This endpoint is no longer in use. Please use getOrgNotificationTemplateV2 instead. */
    post: operations["getOrgNotificationTemplate"];
  };
  "/org/getOrgNotificationTemplateV2": {
    /** Get organization's default notification schedule template */
    post: operations["getOrgNotificationTemplateV2"];
  };
  "/org/getOrgV2": {
    /** Get details about organization */
    post: operations["getOrgV2"];
  };
  "/org/getSAMLSettings": {
    /** Deprecated. Use getSAMLSettingsV2 */
    post: operations["getSAMLSettings"];
  };
  "/org/getSAMLSettingsV2": {
    /** Get details about organization */
    post: operations["getSAMLSettingsV2"];
  };
  "/org/getScimDisplayInfo": {
    /** Get SCIM display info for organization */
    post: operations["getScimDisplayInfo"];
  };
  "/org/getTemporaryOrgToken": {
    /** Generate a temporary org token for use in OAuth flows */
    post: operations["getTemporaryOrgToken"];
  };
  "/org/peekShipmentRegistrationToken": {
    /** Peek at a shipping registration token for an organization */
    post: operations["peekShipmentRegistrationToken"];
  };
  "/org/removePendingRegistration": {
    /** Remove a pending registration */
    post: operations["removePendingRegistration"];
  };
  "/org/revokeSCIMAccessForOrg": {
    /** Revoke SCIM access for organization */
    post: operations["revokeSCIMAccessForOrg"];
  };
  "/org/setFlag": {
    /** Store a flag for organization */
    post: operations["setOrgFlag"];
  };
  "/org/setupSCIMAccessForOrg": {
    /** Initially configure SCIM access for organization */
    post: operations["setupSCIMAccessForOrg"];
  };
  "/org/updateAiTrainingSettings": {
    /** Update organization AI training settings */
    post: operations["updateAiTrainingSettings"];
  };
  "/org/updateCloudArchivingConfig": {
    /** Update scoped cloud archiving config.  Note that the priority of scoping is Org > Location > Device */
    post: operations["updateCloudArchivingConfig"];
  };
  "/org/updateFirmwareSettings": {
    /** Update organization firmware schedule settings */
    post: operations["updateFirmwareSettings"];
  };
  "/org/updateGeneralSettings": {
    /** Update organization General settings */
    post: operations["updateGeneralSettings"];
  };
  "/org/updateMFASettings": {
    /** Update organization MFA settings */
    post: operations["updateMFASettings"];
  };
  "/org/updateOrg": {
    /** Update organization details */
    post: operations["updateOrg"];
  };
  "/org/updateOrgAudioAnalysisPolicy": {
    /** Update organization AI audio analysis policy */
    post: operations["updateOrgAudioAnalysisPolicy"];
  };
  "/org/updateOrgAudioRecordingPolicy": {
    /** Update organization audio recording policy */
    post: operations["updateOrgAudioRecordingPolicy"];
  };
  "/org/updateOrgIntegrations": {
    /** Use endpoints in Integrations Webservice instead */
    post: operations["updateOrgIntegrations"];
  };
  "/org/updateOrgNotificationTemplate": {
    /** This endpoint is no longer in use. Please use updateOrgNotificationTemplateV2 instead. */
    post: operations["updateOrgNotificationTemplate"];
  };
  "/org/updateOrgNotificationTemplateV2": {
    /** Update default notification schedule template for newly created Users in Org */
    post: operations["updateOrgNotificationTemplateV2"];
  };
  "/org/updatePendingRegistration": {
    /** Update pending registration for hardware */
    post: operations["updatePendingRegistration"];
  };
  "/org/updateSAMLSettings": {
    /** Deprecated. Use updateSAMLSettingsV2 */
    post: operations["updateSAMLSettings"];
  };
  "/org/updateSAMLSettingsV2": {
    /** Update organization SAML settings */
    post: operations["updateSAMLSettingsV2"];
  };
  "/org/updateSCIMSettingsForOrg": {
    /** Update SCIM configuration for organization */
    post: operations["updateSCIMSettingsForOrg"];
  };
  "/partner/createPartnerClient": {
    /** Create a client account */
    post: operations["createPartnerClient"];
  };
  "/partner/customizeClient": {
    /** Customize a client account */
    post: operations["customizeClient"];
  };
  "/partner/customizeClientDevice": {
    /** Customize a client device */
    post: operations["customizeClientDevice"];
  };
  "/partner/deleteClient": {
    /** Delete a client account */
    post: operations["deletePartnerClient"];
  };
  "/partner/getApiTokenApplications": {
    /** Get details of all open api token requests for organization */
    post: operations["partner_getApiTokenApplications"];
  };
  "/partner/getApiTokens": {
    /** Get list of all api tokens for a partner */
    post: operations["partner_getApiTokens"];
  };
  "/partner/getClientDevices": {
    /** Retrieve a list of devices for a specific client. */
    post: operations["getClientDevices"];
  };
  "/partner/getClientRhombusOrgUsersForPartnerActivationTokenV2": {
    post: operations["getClientRhombusOrgUsersForPartnerActivationTokenV2"];
  };
  "/partner/getClientStatusMap": {
    /** Get a map of all client accounts to device and location info */
    post: operations["getPartnerClientsStatusMap"];
  };
  "/partner/getClientSummaryInfo": {
    /** Get information about a client */
    post: operations["getClientSummaryInfo"];
  };
  "/partner/getClients": {
    /** Get a list of all client accounts */
    post: operations["getPartnerClients"];
  };
  "/partner/getClientsV2": {
    /** Get a list of all client accounts. NOTICE: This is the same as getPartnerClients, but only returns the basic info so partners can login to clients quickly. The other info will be returned by getPartnerClientsStatusMap. */
    post: operations["getPartnerClientsV2"];
  };
  "/partner/getDeviceLicensesForOrg": {
    /** Get a list of licenses available for a client organization */
    post: operations["getDeviceLicensesForOrg"];
  };
  "/partner/getLicensesForOrg": {
    /** Get a list of licenses available for a client organization */
    post: operations["getLicensesForOrg"];
  };
  "/partner/getListOfAllClientDevices": {
    /** Retrieve list of all devices registered across all clients */
    post: operations["getListOfAllClientDevices"];
  };
  "/partner/getListOfAvailableHardware": {
    /** Retrieve a list of hardware available for remote registration. Any hardware originally registered by a Partner is available for re-registration after being removed from an active client account. */
    post: operations["getListOfControlledHardware"];
  };
  "/partner/getPartnerClientMobileAccountAccess": {
    /** Get client mobile account access as partner */
    post: operations["getPartnerClientMobileAccountAccess"];
  };
  "/partner/getShipments": {
    /** Get client shipments */
    post: operations["PartnerGetShipments"];
  };
  "/partner/grantSupportAccessToClient": {
    post: operations["grantSupportAccessToClient"];
  };
  "/partner/reassignDeviceOrg": {
    /** Reassign device(s) to a different organization. Only devices which hardware is controlled by the partner can be reassigned */
    post: operations["reassignDeviceOrg"];
  };
  "/partner/registerCameraToClient": {
    /** Register a controlled camera to a client */
    post: operations["registerCameraToClient"];
  };
  "/partner/registerDeal": {
    /** Register a deal */
    post: operations["registerDeal"];
  };
  "/partner/requestAccessToClientAccount": {
    post: operations["requestAccessToClientAccount"];
  };
  "/partner/requestAccessToClientAccountV2": {
    post: operations["requestAccessToClientAccountV2"];
  };
  "/partner/revokeApiToken": {
    /** Remove an api token from organization. Note: this is irreversible */
    post: operations["partner_revokeApiToken"];
  };
  "/partner/submitApiTokenApplication": {
    /** Request a partner api token for 1 or more organizations */
    post: operations["partner_submitApiTokenApplication"];
  };
  "/partner/submitSupportAccessDecisionForPartnerActivationTokenV2": {
    post: operations["submitSupportAccessDecisionForPartnerActivationTokenV2"];
  };
  "/partner/updateApiToken": {
    /** Update display name and permissions of an api token */
    post: operations["partner_updateApiToken"];
  };
  "/partner/updateSendLicenseExpirationEmail": {
    /** Update send license expiration email feature flag by org */
    post: operations["updateManuallySendLicenseExpirationEmail"];
  };
  "/password/forgot": {
    post: operations["forgotPassword"];
  };
  "/password/reset": {
    post: operations["resetPassword"];
  };
  "/password/user/signup": {
    post: operations["userSignup"];
  };
  "/permission/assignPermission": {
    /** Use Permission Group endpoints instead */
    post: operations["assignPermission"];
  };
  "/permission/createPartnerPermissionGroup": {
    /** Create a permission group */
    post: operations["createPartnerPermissionGroup"];
  };
  "/permission/createPermissionGroup": {
    /** Create a permission group */
    post: operations["createPermissionGroup"];
  };
  "/permission/deletePartnerPermissionGroup": {
    /** Delete a permission group */
    post: operations["deletePartnerPermissionGroup"];
  };
  "/permission/deletePermissionGroup": {
    /** Delete a permission group */
    post: operations["deletePermissionGroup"];
  };
  "/permission/getPartnerPermissionGroups": {
    post: operations["getPartnerPermissionGroups"];
  };
  "/permission/getPermissionGroups": {
    /** Get details about all permission groups in organization */
    post: operations["getPermissionGroups"];
  };
  "/permission/getPermissionGroupsForOrg": {
    post: operations["getPermissionGroupsForOrg"];
  };
  "/permission/getPermissionsForCurrentPartner": {
    post: operations["getPermissionsForCurrentPartner"];
  };
  "/permission/getPermissionsForCurrentUser": {
    /** Get device and functionality permissions for user or API token */
    post: operations["getPermissionsForCurrentUser"];
  };
  "/permission/updatePartnerPermissionGroup": {
    /** Update a partner permission group */
    post: operations["updatePartnerPermissionGroup"];
  };
  "/permission/updatePermissionGroup": {
    /** Update a permission group */
    post: operations["updatePermissionGroup"];
  };
  "/policy/createAccessControlledDoorPolicy": {
    /** Create a policy to be assigned to a access controlled door */
    post: operations["createAccessControlledDoorPolicy"];
  };
  "/policy/createAudioPolicy": {
    /** Create a policy to be assigned to audio gateways */
    post: operations["createAudioPolicy"];
  };
  "/policy/createCameraPolicy": {
    /** Create a policy to be assigned to cameras */
    post: operations["createCameraPolicy"];
  };
  "/policy/createClimatePolicy": {
    /** Create a policy to be assigned to a climate sensor */
    post: operations["createClimatePolicy"];
  };
  "/policy/createDoorPolicy": {
    /** Create a policy to be assigned to a door sensor */
    post: operations["createDoorPolicy"];
  };
  "/policy/createOccupancyPolicy": {
    /** Create a policy to be assigned to a occupancy sensor */
    post: operations["createOccupancyPolicy"];
  };
  "/policy/createPolicyAddendumForLocation": {
    /** Create policy addendum for location */
    post: operations["createPolicyAddendumForLocation"];
  };
  "/policy/createPolicyAddendumsForDevices": {
    /** Create policy addendums for devices */
    post: operations["createPolicyAddendumsForDevices"];
  };
  "/policy/createProximityPolicy": {
    /** Create a policy to be assigned to an asset tag */
    post: operations["createProximityPolicy"];
  };
  "/policy/createSchedule": {
    /** Create a schedule to be used for policy creation */
    post: operations["createSchedule"];
  };
  "/policy/createVideoIntercomPolicy": {
    /** Create a video intercom policy */
    post: operations["createVideoIntercomPolicy"];
  };
  "/policy/deleteAccessControlledDoorPolicy": {
    /** Delete an access controlled door policy */
    post: operations["deleteAccessControlledDoorPolicy"];
  };
  "/policy/deleteAudioPolicy": {
    /** Delete a audio gateway policy */
    post: operations["deleteAudioPolicy"];
  };
  "/policy/deleteCameraPolicy": {
    /** Delete a camera policy */
    post: operations["deleteCameraPolicy"];
  };
  "/policy/deleteClimatePolicy": {
    /** Delete a climate policy */
    post: operations["deleteClimatePolicy"];
  };
  "/policy/deleteDevicePolicyAddendums": {
    /** Delete a policy addendums */
    post: operations["deleteDevicePolicyAddendums"];
  };
  "/policy/deleteDoorPolicy": {
    /** Delete a door sensor policy */
    post: operations["deleteDoorPolicy"];
  };
  "/policy/deleteLocationPolicyAddendum": {
    /** Delete a policy addendums */
    post: operations["deleteLocationPolicyAddendum"];
  };
  "/policy/deleteOccupancyPolicy": {
    /** Delete an Occupancy policy */
    post: operations["deleteOccupancyPolicy"];
  };
  "/policy/deletePolicyPauseSettingForComponentComposite": {
    /** Delete a policy pause setting for a component composite */
    post: operations["deletePolicyPauseSettingForComponentComposite"];
  };
  "/policy/deletePolicyPauseSettingForDevice": {
    /** Delete a policy pause setting for a device */
    post: operations["deletePolicyPauseSettingForDevice"];
  };
  "/policy/deletePolicyPauseSettingForLocation": {
    /** Delete a policy pause setting for a location */
    post: operations["deletePolicyPauseSettingForLocation"];
  };
  "/policy/deleteProximityPolicy": {
    /** Delete an asset tag policy */
    post: operations["deleteProximityPolicy"];
  };
  "/policy/deleteSchedule": {
    /** Delete a schedule used for policy creation */
    post: operations["deleteSchedule"];
  };
  "/policy/deleteVideoIntercomPolicy": {
    /** Delete a video intercom policy */
    post: operations["deleteVideoIntercomPolicy"];
  };
  "/policy/findSchedules": {
    /** Find all schedules in organization */
    post: operations["findSchedules"];
  };
  "/policy/getAccessControlledDoorPolicies": {
    /** Get details about all access controlled door policies in organization */
    post: operations["getAccessControlledDoorPolicies"];
  };
  "/policy/getAudioPolicies": {
    /** Get details about all audio gateway policies in organization */
    post: operations["getAudioPolicies"];
  };
  "/policy/getCameraPolicies": {
    /** Get details about all camera policies in organization */
    post: operations["getCameraPolicies"];
  };
  "/policy/getClimatePolicies": {
    /** Get details about all climate policies in organization */
    post: operations["getClimatePolicies"];
  };
  "/policy/getDoorPolicies": {
    /** Get details about all door sensor policies in organization */
    post: operations["getDoorPolicies"];
  };
  "/policy/getOccupancyPolicies": {
    /** Get details about all occupancy policies in organization */
    post: operations["getOccupancyPolicies"];
  };
  "/policy/getPoliciesUsingSchedule": {
    /** Get details about all climate policies in organization */
    post: operations["getPoliciesUsingSchedule"];
  };
  "/policy/getPolicyAddendums": {
    /** Get the current and planned policy alert addendums */
    post: operations["getPolicyAddendums"];
  };
  "/policy/getPolicyPauseSettings": {
    /** Get the current and planned policy alert pause details */
    post: operations["getPolicyPauseSettings"];
  };
  "/policy/getProximityPolicies": {
    /** Get details about all asset tag policies in organization */
    post: operations["getProximityPolicies"];
  };
  "/policy/getVideoIntercomPolicies": {
    /** Get details about all video intercom policies in organization */
    post: operations["getVideoIntercomPolicies"];
  };
  "/policy/pauseAlertPolicyForComponentComposite": {
    /** Pause alert policy for component composite */
    post: operations["pauseAlertPolicyForComponentComposite"];
  };
  "/policy/pauseAlertPolicyForDevice": {
    /** Pause alert policy for device */
    post: operations["pauseAlertPolicyForDevice"];
  };
  "/policy/pauseAlertPolicyForLocation": {
    /** Pause alert policy for location */
    post: operations["pauseAlertPolicyForLocation"];
  };
  "/policy/updateAccessControlledDoorPolicy": {
    /** Update an access controlled door policy */
    post: operations["updateAccessControlledDoorPolicy"];
  };
  "/policy/updateAudioPolicy": {
    /** Update a audio gateway policy */
    post: operations["updateAudioPolicy"];
  };
  "/policy/updateCameraPolicy": {
    /** Update a camera policy */
    post: operations["updateCameraPolicy"];
  };
  "/policy/updateClimatePolicy": {
    /** Update a climate policy */
    post: operations["updateClimatePolicy"];
  };
  "/policy/updateDoorPolicy": {
    /** Update a door sensor policy */
    post: operations["updateDoorPolicy"];
  };
  "/policy/updateOccupancyPolicy": {
    /** Update an occupancy policy */
    post: operations["updateOccupancyPolicy"];
  };
  "/policy/updateProximityPolicy": {
    /** Update an asset tag policy */
    post: operations["updateProximityPolicy"];
  };
  "/policy/updateSchedule": {
    /** Update a schedule to be used for policy creation */
    post: operations["updateSchedule"];
  };
  "/policy/updateVideoIntercomPolicy": {
    /** Update video intercom policy */
    post: operations["updateVideoIntercomPolicy"];
  };
  "/proximity/getLocomotionEventsForTag": {
    /** Get locomotion events for specified proximity tag */
    post: operations["getLocomotionEventsForTag"];
  };
  "/proximity/getMinimalProximityStateList": {
    /** Get basic state information about all proximity tags in organization */
    post: operations["getMinimalProximityStateList"];
  };
  "/proximity/getProximityEventsForTag": {
    /** Get recent events for specified proximity tag */
    post: operations["getProximityEventsForTags"];
  };
  "/proximity/updateDetails": {
    /** Update details for a proximity tag */
    post: operations["updateProximitySensorDetails"];
  };
  "/rapidsos/getNearbyFeeds": {
    /** Get closest 10 feeds by lat and long */
    post: operations["getNearbyFeeds"];
  };
  "/relay/assignThirdPartyCameraToNVR": {
    /** Assign a third party camera to an NVR */
    post: operations["assignThirdPartyCameraToNVR"];
  };
  "/relay/assignThirdPartyCameraToRelayCamera": {
    /** Assign a third party camera to a relay Camera */
    post: operations["assignThirdPartyCameraToRelayCamera"];
  };
  "/relay/authenticateThirdPartyCamera": {
    /** Authenticate a third party camera, effectively validating the credentials specified to be used for it. */
    post: operations["authenticateThirdPartyCamera"];
  };
  "/relay/createThirdPartyCameraPassword": {
    /** Create a third party camera password */
    post: operations["createThirdPartyCameraPassword"];
  };
  "/relay/deleteThirdPartyCameraPassword": {
    /** Delete a third party camera password */
    post: operations["deleteThirdPartyCameraPasswords"];
  };
  "/relay/executeThirdPartyCameraDiscovery": {
    /** Trigger a discovery of cameras on the local LANs */
    post: operations["executeThirdPartyCameraDiscovery"];
  };
  "/relay/findDefaultRtspUrlsByManufacturer": {
    /** Find default rtsp urls by camera manufacturer. */
    post: operations["findDefaultRtspUrlsByManufacturer"];
  };
  "/relay/findDiscoveriesWithUnassignedRtspEndpoints": {
    /** Finds discoveries that have unassigned RTSP endpoints. Only discoveries containing at least one endpoint are returned. */
    post: operations["findDiscoveriesWithUnassignedRtspEndpoints"];
  };
  "/relay/getAssignedThirdPartyCameras": {
    /** Get a list of the third party cameras assigned to an NVR */
    post: operations["getAssignedThirdPartyCameras"];
  };
  "/relay/getDetails": {
    /** Get hardware details of multiple NVRs */
    post: operations["getNVRDetails"];
  };
  "/relay/getFullNVRState": {
    /** Get detailed information about state of specified NVR */
    post: operations["getFullNVRState"];
  };
  "/relay/getImportThirdPartyCamerasFormat": {
    /** Returns format for importing third party cameras. */
    post: operations["getImportThirdPartyCamerasFormat"];
  };
  "/relay/getMinimalNVRStateList": {
    /** Get basic state information about all NVRs in organization */
    post: operations["getMinimalNVRStateList"];
  };
  "/relay/getMinimalThirdPartyCameraStateList": {
    /** Get basic state information about all third party cameras in the organization */
    post: operations["getMinimalThirdPartyCameraStateList"];
  };
  "/relay/getRtspEndpoints": {
    /** Gets rtsp endpoints for device with the specified mac address. */
    post: operations["getRtspEndpoints"];
  };
  "/relay/getThirdPartyCameraPasswords": {
    /** Get a list of the third party camera passwords */
    post: operations["getThirdPartyCameraPasswords"];
  };
  "/relay/importThirdPartyCameras/{locationUuid}": {
    /** Imports third party cameras in csv format */
    post: operations["importThirdPartyCameras"];
  };
  "/relay/manualDiscoverCamera": {
    /** Manually identify a camera on the network */
    post: operations["manualDiscoverCamera"];
  };
  "/relay/ptzMove": {
    /** Trigger a pan, tilt, or zoom */
    post: operations["ptzMove"];
  };
  "/relay/ptzStatus": {
    /** Trigger a pan, tilt, or zoom */
    post: operations["ptz"];
  };
  "/relay/reboot": {
    /** Reboot an NVR */
    post: operations["rebootNVR"];
  };
  "/relay/register": {
    /** Register an NVR to an organization */
    post: operations["registerNVR"];
  };
  "/relay/unassignThirdPartyCamera": {
    /** Unassign a third party camera from an NVR */
    post: operations["unassignThirdPartyCamera"];
  };
  "/relay/unregister": {
    /** Remove an NVR from organization */
    post: operations["unregisterNVR"];
  };
  "/relay/updateDetailsV2": {
    /** Update hardware details of NVR. */
    post: operations["updateNVRDetailsV2"];
  };
  "/relay/updateFirmware": {
    /** Send command to update firmware to NVR */
    post: operations["updateNVRFirmware"];
  };
  "/report/getAuditFeed": {
    /** Get the latest audit logs for organization */
    post: operations["getAuditFeed"];
  };
  "/report/getAuditFeedForTarget": {
    /** Get audit logs for a specified entity */
    post: operations["getAuditFeedForTarget"];
  };
  "/report/getAverageReport": {
    /** Get the average report if it is available for the specified count report */
    post: operations["getAverageReport"];
  };
  "/report/getAverageReports": {
    /** Get the average reports if they are available for the specified count report */
    post: operations["getAverageReports"];
  };
  "/report/getCountReport": {
    /** Use /getCountReportV2 instead */
    post: operations["getCountReport"];
  };
  "/report/getCountReportV2": {
    /** Get the specified count reports */
    post: operations["getCountReportV2"];
  };
  "/report/getCountReports": {
    /** Get multiple specified count reports */
    post: operations["getCountReports"];
  };
  "/report/getCountReportsForDevicesAtLocation": {
    /** Get count reports by device for a specified location */
    post: operations["getCountReportsForDevicesAtLocation"];
  };
  "/report/getDiagnosticFeed": {
    /** Get the latest diagnostic logs for organization */
    post: operations["getDiagnosticFeed"];
  };
  "/report/getEnvoyDeliveries": {
    /** Get a list of deliveries from Envoy to populate reporting logs */
    post: operations["getEnvoyDeliveries"];
  };
  "/report/getEnvoyEmployees": {
    /** Get a list of employees from Envoy */
    post: operations["getEnvoyEmployees"];
  };
  "/report/getEnvoyLocations": {
    /** Get list of Envoy locations */
    post: operations["getEnvoyLocations"];
  };
  "/report/getEnvoyVisitors": {
    /** Get a list of visitors from Envoy to populate reporting logs */
    post: operations["getEnvoyVisitors"];
  };
  "/report/getIntegrationDiagnosticEvents": {
    /** Get the diagnostic logs of supported third-party devices for organization */
    post: operations["getIntegrationDiagnosticEvents"];
  };
  "/report/getLicensePlatesByDevice": {
    /** Get license plate counting events for a specified camera */
    post: operations["getLicensePlatesByDevice"];
  };
  "/report/getMostRecentPeopleCountEvents": {
    /** Get the X most recent people counting events for a specified device */
    post: operations["getMostRecentPeopleCountEvents"];
  };
  "/report/getOccupancyCount": {
    post: operations["getOccupancyCount"];
  };
  "/report/getOccupancyCounts": {
    /**
     * Returns the occupancy count for a specified room or area within a given time range. This endpoint allows you to monitor occupancy trends over time or retrieve a single count for a defined interval.
     * Important: An occupancy region must be defined in the Rhombus Console before using this endpoint.
     * You can optionally specify an interval (e.g., MINUTELY, QUARTERHOURLY, HOURLY ...) to retrieve occupancy counts broken down by sub-intervals between startTime and endTime.
     * If no interval is provided, a single occupancy count is returned for the entire duration between startTime and endTime.
     */
    post: operations["getOccupancyCounts"];
  };
  "/report/getProximityTagLocationsByDate": {
    /** Get proximity tag locations by date */
    post: operations["getProximityTagLocationsByDate"];
  };
  "/report/getRunningAverage": {
    /** Get the running average for the specified count report if it is available, based on recent data */
    post: operations["getRunningAverage"];
  };
  "/report/getSummaryCountReport": {
    /** Get a summary report for a camera, location, or organization */
    post: operations["getSummaryCountReport"];
  };
  "/report/getThresholdCrossingCountReport": {
    post: operations["getThresholdCrossingCountReport"];
  };
  "/report/getThresholdCrossingCounts": {
    /** Get the occupancy counts from threshold crossing for a group of cameras over a period of time */
    post: operations["getThresholdCrossingCounts"];
  };
  "/report/getThresholdCrossingEvents": {
    /** Get the raw threshold crossing events for a group of cameras over a period of time */
    post: operations["getThresholdCrossingEvents"];
  };
  "/report/getThresholdCrossingEventsForDevice": {
    post: operations["getThresholdCrossingEventsForDevice"];
  };
  "/report/getToastEventsTable": {
    /** Get list of Toast orders to populate events table */
    post: operations["getToastEventsTable"];
  };
  "/report/getToastEventsTableAllLocations": {
    /** Get list of Toast orders from all restaurants to populate events table */
    post: operations["getToastEventsTableAllLocations"];
  };
  "/report/resetRunningAverage": {
    /** Reset the running average for the specified count report */
    post: operations["resetRunningAverage"];
  };
  "/rules/createRule": {
    /** Create a rule */
    post: operations["createRule"];
  };
  "/rules/deleteRule": {
    /** Delete a rule */
    post: operations["deleteRule"];
  };
  "/rules/deleteRulePauseSetting": {
    /** Delete a rule pause setting */
    post: operations["deleteRulePauseSetting"];
  };
  "/rules/getRulePauseSettings": {
    /** Get the current and planned rule pause details */
    post: operations["getRulePauseSettings"];
  };
  "/rules/getRulesFiltered": {
    /** Get rules with Uuid and Type filtering */
    post: operations["getRulesFiltered"];
  };
  "/rules/getRulesForOrg": {
    /** List rules for org */
    post: operations["getRulesForOrg"];
  };
  "/rules/pauseRule": {
    /** Pause rule */
    post: operations["pauseRule"];
  };
  "/rules/updateRule": {
    /** Update a rule */
    post: operations["updateRule"];
  };
  "/rulesRecords/deleteRulesEventRecord": {
    /** Delete a rules event historical record */
    post: operations["deleteRulesEventRecord"];
  };
  "/rulesRecords/getLatestRulesEventRecords": {
    /** Get N latest rules event historical records */
    post: operations["getLatestRulesEventRecords"];
  };
  "/rulesRecords/getRulesEventRecords": {
    /** Find rules event historical records */
    post: operations["getRulesEventRecords"];
  };
  "/scenequery/createPromptConfiguration": {
    /** Create scene query configuration */
    post: operations["createPromptConfiguration"];
  };
  "/scenequery/deletePromptConfiguration": {
    /** Delete scene query configuration */
    post: operations["deletePromptConfiguration"];
  };
  "/scenequery/findPromptConfigurations": {
    /** Find all scene query configurations */
    post: operations["findAllPromptConfigurations"];
  };
  "/scenequery/getPromptConfiguration": {
    /** Get scene query configuration */
    post: operations["getPromptConfiguration"];
  };
  "/scenequery/getReport": {
    /** Get report data */
    post: operations["getReport"];
  };
  "/scenequery/selectiveUpdatePromptConfiguration": {
    /** Selectively update a scene query configuration */
    post: operations["selectiveUpdatePromptConfiguration"];
  };
  "/scenequery/triggerPrompt": {
    /** Trigger scene query with a custom prompt */
    post: operations["triggerPrompt"];
  };
  "/scenequery/updatePromptConfiguration": {
    /** Update scene query configuration */
    post: operations["updatePromptConfiguration"];
  };
  "/schedule/createAbsoluteSchedule": {
    /** Create a absolute schedule */
    post: operations["createAbsoluteSchedule"];
  };
  "/schedule/createRelativeDateTimeIntervalsSchedule": {
    /** Create a one-time relative datetime schedule */
    post: operations["createRelativeDateTimeIntervalsSchedule"];
  };
  "/schedule/createRelativeSchedule": {
    /** Create a realtime relative schedule */
    post: operations["createRelativeSchedule"];
  };
  "/schedule/createWeeklySchedule": {
    /** Create a weekly schedule */
    post: operations["createWeeklySchedule"];
  };
  "/schedule/deleteSchedule": {
    /** Delete a schedule */
    post: operations["deleteScheduleV2"];
  };
  "/schedule/findAbsoluteSchedule": {
    /** Find an absolute schedule */
    post: operations["findAbsoluteSchedule"];
  };
  "/schedule/findRelativeDateTimeIntervalsSchedule": {
    /** Find a one-time relative datetime schedule */
    post: operations["findRelativeDateTimeIntervalsSchedule"];
  };
  "/schedule/findRelativeSchedule": {
    /** Find a relative schedule */
    post: operations["findRelativeSchedule"];
  };
  "/schedule/findWeeklySchedule": {
    /** Find a weekly schedule */
    post: operations["findWeeklySchedule"];
  };
  "/schedule/getScheduleData": {
    /** Get weekly schedules in org with usage data */
    post: operations["getScheduleData"];
  };
  "/schedule/getScheduleDataV2": {
    /** Get weekly schedules in org with usage data */
    post: operations["getScheduleDataV2"];
  };
  "/schedule/getSchedules": {
    /** Get schedules in org */
    post: operations["getSchedules"];
  };
  "/search/deleteVideoEmbeddings": {
    /** Delete video embedding, do not use unless you know what you're doing. */
    post: operations["deleteVideoEmbedding"];
  };
  "/search/indexVideoEmbeddings": {
    /** Index video embedding, do not use unless you know what you're doing. */
    post: operations["indexVideoEmbedding"];
  };
  "/search/searchLicensePlates": {
    /** Fuzzy search for license plate sightings based on a partial or full plate number. Use /vehicle/getVehicleEvents instead. */
    post: operations["searchLicensePlates"];
  };
  "/search/searchObjectsByColor": {
    /** Search for objects by color */
    post: operations["searchObjectsByColor"];
  };
  "/search/searchSimilarObjectEmbeddings": {
    /** Search for similar objects by embedding */
    post: operations["searchSimilarObjectEmbeddings"];
  };
  "/search/searchSimilarObjectEmbeddingsByText": {
    /** Search for similar objects by text */
    post: operations["searchSimilarObjectEmbeddingsByText"];
  };
  "/search/searchSimilarObjectEmbeddingsByVector": {
    /** Search for similar objects by explicit vector */
    post: operations["searchSimilarObjectEmbeddingsByVector"];
  };
  "/search/searchSimilarVideoEmbeddings": {
    /** Search for similar videos by embedding */
    post: operations["searchSimilarVideoEmbeddings"];
  };
  "/search/searchSimilarVideoEmbeddingsByTimeWindow": {
    /** Search for similar videos by time window */
    post: operations["searchSimilarVideoEmbeddingsByTimeWindow"];
  };
  "/sensors/getFootageSensorSeekpointsForCamera": {
    /** Get sensor activity seekpoints for camera */
    post: operations["getSensorFootageSensorSeekpointsForCamera"];
  };
  "/sensors/getFootageSensorSeekpointsForLocation": {
    /** Get sensor activity seekpoints for a location */
    post: operations["getFootageSensorSeekpointsForLocation"];
  };
  "/sensors/getFootageSensorSeekpointsForSensor": {
    /** Get sensor activity seekpoints for a sensor */
    post: operations["getFootageSensorSeekpointsForSensor"];
  };
  "/share/camera/getCurrentState": {
    post: operations["getCurrentState"];
  };
  "/share/camera/getFootageBoundingBoxes": {
    post: operations["getShareFootageBoundingBoxes"];
  };
  "/share/camera/getFootageSeekpoints": {
    post: operations["getShareFootageSeekpoints"];
  };
  "/share/camera/getFootageSeekpointsV2": {
    post: operations["getShareFootageSeekpointsV2"];
  };
  "/share/camera/getMediaUris": {
    post: operations["getMediaUris"];
  };
  "/share/camera/getPresenceWindows": {
    post: operations["getSharePresenceWindows"];
  };
  "/share/camera/getSharedVideoWallMediaUris": {
    post: operations["getSharedVideoWallMediaUris"];
  };
  "/share/clips/getSharedClipData": {
    post: operations["getSharedClipData"];
  };
  "/share/getSharedLiveStreamInfo": {
    post: operations["getSharedLiveStreamInfo"];
  };
  "/share/getSharedVideoWallInfo": {
    post: operations["getSharedVideoWallInfo"];
  };
  "/share/sensors/getFootageSensorSeekpointsForCamera": {
    post: operations["getShareFootageSensorSeekpointsForCamera"];
  };
  "/share/shareLink": {
    /** Send an email or sms message containing the shared media link */
    post: operations["shareLink"];
  };
  "/share/timelapse/getSharedTimelapseClipData": {
    post: operations["getSharedTimelapseClipData"];
  };
  "/share/timelapse/getSharedTimelapseClipDataV2": {
    post: operations["getSharedTimelapseClipDataV2"];
  };
  "/supportAuthority/addSupportAuthority": {
    post: operations["addSupportAuthority"];
  };
  "/supportAuthority/allowSupportAuthorityAccess": {
    post: operations["allowSupportAuthorityAccess"];
  };
  "/supportAuthority/findSupportAuthoritySessions": {
    post: operations["findSupportAuthoritySessions"];
  };
  "/supportAuthority/getSupportAuthorities": {
    post: operations["getSupportAuthorities"];
  };
  "/supportAuthority/logoutAllSupportAuthoritySessions": {
    post: operations["logoutAllSupportAuthoritySessions"];
  };
  "/supportAuthority/lookupSupportPartnerAuthorities": {
    post: operations["lookupSupportPartnerAuthorities"];
  };
  "/supportAuthority/removeSupportAuthority": {
    post: operations["removeSupportAuthority"];
  };
  "/supportAuthority/revokeSupportAuthorityAccess": {
    post: operations["revokeSupportAuthorityAccess"];
  };
  "/supportAuthority/updateSupportAuthority": {
    post: operations["updateSupportAuthority"];
  };
  "/tvos/getTvOsConfig": {
    /** get specific tvOs config */
    post: operations["getTvOsConfig"];
  };
  "/tvos/getTvOsConfigsForOrg": {
    /** get tvOs configs for org */
    post: operations["getTvOsConfigsForOrg"];
  };
  "/tvos/updateTvOsConfig": {
    /** Update tvOs config */
    post: operations["updateTvOsConfig"];
  };
  "/upload/accessControlledDoor/delete/{accessControlledDoorUuidStr}": {
    /** Upload an image of the specified AccessControlledDoor */
    post: operations["deleteAccessControlledDoorPicture"];
  };
  "/upload/accessControlledDoor/{accessControlledDoorUuidStr}": {
    /** Upload an image of the specified AccessControlledDoor */
    post: operations["uploadAccessControlledDoorPicture"];
  };
  "/upload/badgeTemplate/images": {
    /** Upload badge template images */
    post: operations["uploadBadgeTemplateImages"];
  };
  "/upload/bulkUploadUserProfilePhotos": {
    /** Bulk upload user profile picture. Each photo must be <= 5MB with a limit of 100 photos at a time */
    post: operations["bulkUploadUserProfilePhotos"];
  };
  "/upload/companyLogo": {
    /** Upload company logo */
    post: operations["uploadCompanyLogo"];
  };
  "/upload/errors/{fileName}": {
    /** Upload error logs */
    post: operations["uploadErrors"];
  };
  "/upload/floorplan": {
    /** Upload a new floorplan for a location */
    post: operations["uploadNewFloorPlan"];
  };
  "/upload/floorplan/{floorPlanUuid}": {
    /** Upload a existing floorplan for a location */
    post: operations["uploadExistingFloorPlan"];
  };
  "/upload/guest/{guestEmail}": {
    /** Upload user profile picture */
    post: operations["uploadGuestProfilePicture"];
  };
  "/upload/keypadLogo": {
    post: operations["uploadKeypadLogo"];
  };
  "/upload/rhombusKeyLogo": {
    post: operations["uploadRhombusKeyLogo"];
  };
  "/upload/sensor/{sensorUuid}/thumbnail": {
    /** Upload an image to be associated with a sensor */
    post: operations["uploadSensorThumbnails"];
  };
  "/upload/user/deleteProfile/{userUuidStr}": {
    /** Delete user profile picture */
    post: operations["deleteUserProfilePicture"];
  };
  "/upload/user/{userUuidStr}": {
    /** Upload user profile picture */
    post: operations["uploadUserProfilePicture"];
  };
  "/user/assignEmailToUser": {
    /** Assign a user to an email as long as the user is not currently assigned to one */
    post: operations["assignEmailToUser"];
  };
  "/user/changeEmail": {
    /** Change a user's email */
    post: operations["changeEmail"];
  };
  "/user/changePassword": {
    /** Change a user's password */
    post: operations["changePassword"];
  };
  "/user/createUser": {
    /** Create a user for organization */
    post: operations["createUser"];
  };
  "/user/deleteUser": {
    /** Delete a user */
    post: operations["deleteUser"];
  };
  "/user/deleteVirtualMfaDeviceForCurrentUser": {
    /** Remove MFA for current user */
    post: operations["deleteVirtualMfaDeviceForCurrentUser"];
  };
  "/user/findUser": {
    /** Retrieve a specific user by uuid. */
    post: operations["findUser"];
  };
  "/user/findUserByEmail": {
    /** Retrieve a specific user by email. */
    post: operations["findUserByEmail"];
  };
  "/user/getImportUsersFormat": {
    /** Returns format for importing users. */
    post: operations["getImportUsersFormat"];
  };
  "/user/getPartnerUsersInOrg": {
    /** Get list of all partners in organization */
    post: operations["getPartnerUsersInOrg"];
  };
  "/user/getRhombusKeyConfigForUser": {
    /** Retrieve the RhombusKey mobile app config for a user. If it does not exist a default one is created and returned. */
    post: operations["getRhombusKeyConfigForUser"];
  };
  "/user/getUserCustomizationFlags": {
    /** Get user's customization flags */
    post: operations["getUserCustomizationFlags"];
  };
  "/user/getUsersInOrg": {
    /** Get list of all users in organization */
    post: operations["getUsersInOrg"];
  };
  "/user/getUsersInOrgForReports": {
    /** Gets a reduced amount of information about users in the organization to be used for reports. */
    post: operations["getUsersInOrgForReports"];
  };
  "/user/getVirtualMfaDeviceForCurrentUser": {
    /** Get details about MFA for current user */
    post: operations["getVirtualMfaDeviceForCurrentUser"];
  };
  "/user/importUsers": {
    /** Imports users in csv format */
    post: operations["importUsers"];
  };
  "/user/metadata/createUserMetadataFieldTemplate": {
    /** Create a new template user metadata field that will be applicable to all users */
    post: operations["createUserMetadataFieldTemplate"];
  };
  "/user/metadata/deleteUserMetadataField": {
    /** Deletes the specified user's value stored for the specified template */
    post: operations["deleteUserMetadataField"];
  };
  "/user/metadata/deleteUserMetadataFieldTemplate": {
    /** Delete a template user metadata field. THIS WILL DELETE THE CUSTOM FIELD AND USER DATA FOR THIS FIELD */
    post: operations["deleteUserMetadataFieldTemplate"];
  };
  "/user/metadata/findUserMetadataFieldTemplates": {
    /** Find all template user metadata fields for the org */
    post: operations["findUserMetadataFieldTemplates"];
  };
  "/user/metadata/findUserMetadataFields": {
    /** Returns the org template metadata fields and the queried users stored values for those fields if they've been set. */
    post: operations["findUserMetadataFields"];
  };
  "/user/metadata/saveUserMetadataFields": {
    /** Saves custom metadata values for the user specified. Template IDs that do not map to an actual org metadata template are ignored and values for omitted Template IDs are left as-is. */
    post: operations["saveUserMetadataFields"];
  };
  "/user/metadata/updateUserMetadataFieldTemplate": {
    /** Update a template user metadata field that will be applicable to all users */
    post: operations["updateUserMetadataFieldTemplate"];
  };
  "/user/sendMobileDownloadSMS": {
    /** Send SMS with link to download mobile app */
    post: operations["sendMobileDownloadSMS"];
  };
  "/user/sendPartnerAccessGranted": {
    /** Send partner an email to access client account */
    post: operations["sendPartnerAccessGrantedEmail"];
  };
  "/user/sendRhombusKeyUserWelcomeEmail": {
    /** Send a rhombus key welcome email to a user */
    post: operations["sendRhombusKeyUserWelcomeEmail"];
  };
  "/user/sendUserWelcomeEmail": {
    /** Send a welcome email to a user */
    post: operations["sendUserWelcomeEmail"];
  };
  "/user/setupVirtualMfaDeviceForCurrentUser": {
    /** Configure MFA for current user */
    post: operations["setupVirtualMfaDeviceForCurrentUser"];
  };
  "/user/updatePartnerUser": {
    /** Update a partner's details */
    post: operations["updatePartnerUser"];
  };
  "/user/updatePartnerUserNotificationSettings": {
    /** Update notification settings for partner user */
    post: operations["updatePartnerUserNotificationSettings"];
  };
  "/user/updateRhombusKeySettingsForUser": {
    /** Update the RhombusKey mobile app settings for the user */
    post: operations["updateRhombusKeySettingsForUser"];
  };
  "/user/updateUser": {
    /** Update a user's details, DEPRECATED[4/28/2025]: use updateUserSelective */
    post: operations["updateUser"];
  };
  "/user/updateUserCustomizationFlags": {
    /** Update user's customization flags */
    post: operations["updateUserCustomizationFlags"];
  };
  "/user/updateUserNotificationSettings": {
    /** Update notification settings for user */
    post: operations["updateUserNotificationSettings"];
  };
  "/user/updateUserSelective": {
    /** Selectively updates a user's details. Omitted fields are ignored but fields with null will unset a value */
    post: operations["updateUserSelective"];
  };
  "/vehicle/addVehicleLabel": {
    /** Add a label to a vehicle */
    post: operations["addVehicleLabel"];
  };
  "/vehicle/associateEventsToVehicle": {
    /** Associate vehicle events to a saved vehicle */
    post: operations["associateEventsToVehicle"];
  };
  "/vehicle/deleteVehicle": {
    /** Delete a saved vehicle */
    post: operations["deleteVehicle"];
  };
  "/vehicle/getRecentVehicleEvents": {
    /** Get recent vehicle events for organization. Use /vehicle/getVehicleEvents instead. */
    post: operations["getRecentVehicleEvents"];
  };
  "/vehicle/getRecentVehicleEventsByLocation": {
    /** Get recent vehicle events for a location. Use /vehicle/getVehicleEvents instead. */
    post: operations["getRecentVehicleEventsByLocation"];
  };
  "/vehicle/getRecentVehicleEventsForVehicle": {
    /** Get recent vehicle events for specified vehicle. Use /vehicle/getVehicleEvents instead. */
    post: operations["getRecentVehicleEventsForVehicle"];
  };
  "/vehicle/getVehicleEvents": {
    /** Get vehicle events with filters and additive queries */
    post: operations["getVehicleEvents"];
  };
  "/vehicle/getVehicleLabelsForOrg": {
    /** Get all vehicle labels for organization */
    post: operations["getVehicleLabelsForOrg"];
  };
  "/vehicle/getVehicles": {
    /** Get details of all saved vehicles in organization */
    post: operations["getVehicles"];
  };
  "/vehicle/removeVehicleLabel": {
    /** Remove a label to a vehicle */
    post: operations["removeVehicleLabel"];
  };
  "/vehicle/reportVehicleEvent": {
    /** Report a mis-detected license plate event.  This sends the image/clip to Rhombus to better train AI models and removes the event */
    post: operations["reportVehicleEvent"];
  };
  "/vehicle/saveVehicle": {
    /** Name and save a vehicle based on license plate number */
    post: operations["saveVehicle"];
  };
  "/video/cancelSplice": {
    /** Use /cancelSpliceV2 instead */
    post: operations["cancelSplice"];
  };
  "/video/cancelSpliceV2": {
    /** Cancel a spliced clip request */
    post: operations["cancelSpliceV2"];
  };
  "/video/createSharedTimelapseGroup": {
    /** Share multiple timelapses in one link */
    post: operations["createSharedTimelapseGroup"];
  };
  "/video/deleteSharedTimelapseGroup": {
    /** Delete a shared timelapse link */
    post: operations["deleteSharedTimelapseGroup"];
  };
  "/video/deleteTimelapseClips": {
    /** Delete a timelapse */
    post: operations["deleteTimelapseClips"];
  };
  "/video/generateTimelapseClip": {
    /** Generate a timelapse */
    post: operations["generateTimelapseClip"];
  };
  "/video/getExactFrameUri": {
    /** Generate URL to get an exact frame with optional crop from a camera */
    post: operations["getExactFrameUri"];
  };
  "/video/getMaxSpliceDuration": {
    /** Get the max splice duration an organization can set */
    post: operations["getMaxSpliceDuration"];
  };
  "/video/getSharedTimelapseGroups": {
    /** Get details of all shared timelapse links for organization */
    post: operations["getSharedTimelapseGroups"];
  };
  "/video/getSplicedClipsInProgress": {
    /** Get all spliced clips in progress */
    post: operations["getSplicedClipsInProgress"];
  };
  "/video/getTimelapseClips": {
    /** Get all timelapse clips for organization */
    post: operations["getTimelapseClips"];
  };
  "/video/getTimelapseMetadata": {
    /** Get information about earliest available timelapse images for cameras */
    post: operations["getTimelapseMetadata"];
  };
  "/video/retrySplice": {
    /** Send a request to retry splicing a clip */
    post: operations["retrySplice"];
  };
  "/video/shareTimelapseClips": {
    /** Use /CreateSharedTimelapseGroup instead */
    post: operations["shareTimelapseClips"];
  };
  "/video/splice": {
    /** Use /spliceV3 instead */
    post: operations["splice"];
  };
  "/video/spliceFrame": {
    /** Send a request to create a single image from a point in time */
    post: operations["spliceFrame"];
  };
  "/video/spliceV2": {
    /** Use /spliceV3 instead */
    post: operations["spliceV2"];
  };
  "/video/spliceV3": {
    /** Send a request to create an arbitrary clip for multiple cameras */
    post: operations["spliceV3"];
  };
  "/video/updateSharedTimelapseGroup": {
    /** Update title, description, or expiration on a shared timelapse link */
    post: operations["updateSharedTimelapseGroup"];
  };
  "/video/updateTimelapseClipMetadata": {
    /** Update a timelapse clip's editable metadata */
    post: operations["updateTimelapseClipMetadata"];
  };
}

export interface components {
  schemas: {
    ACUDoorCatalogItem: {
      durationMonths?: number | null;
      productCode?: string | null;
      productType?: ACUDoorCatalogItemProductTypeEnum | null;
    } | null;
    ACUDoorLicenseType: {
      claimKeyUuid?: string | null;
      createdOn?: string | null;
      doorUuid?: string | null;
      firstAssignedDate?: string | null;
      licenseToUnassignEmailState?: ACUDoorLicenseLicenseToUnassignEmailStateEnum | null;
      maxDeleteDate?: string | null;
      orgUuid?: string | null;
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: ACUDoorLicenseProductTypeEnum | null;
      state?: ACUDoorLicenseStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      uuid?: string | null;
    };
    AITShipmentInfoType: {
      aitTrackingNumber?: string | null;
      carrierTrackingNumber?: string | null;
      depositorOrderNumber?: string | null;
      destinationAddress?: string | null;
      isIngramDistributorShipment?: boolean | null;
      shipmentDate?: string | null;
      shippedItems?: components["schemas"]["ShippedItemType"][] | null;
    } | null;
    AMSirenSettingsType: {
      clipUuid?: string | null;
      durationSeconds?: number | null;
      playCount?: number | null;
    };
    AbsoluteSecondsIntervalType: {
      b?: number | null;
      e?: number | null;
    } | null;
    AbsoluteSecondsScheduleType:
      | ({
          intervalList?:
            | components["schemas"]["AbsoluteSecondsIntervalType"][]
            | null;
        } & {
          mutable?: boolean | null;
          name?: string | null;
          oneTimeUse?: boolean | null;
          orgUuid?: string | null;
          strategy?: AbsoluteSecondsScheduleStrategyEnum | null;
          uuid?: string | null;
        })
      | null;
    AccessControlAuthenticationResultEnumType: AccessControlAuthenticationResultEnumType;
    AccessControlAuthorizationResultEnumType: AccessControlAuthorizationResultEnumType;
    AccessControlCredentialEnumType: AccessControlCredentialEnumType;
    AccessControlCredentialType: (
      | components["schemas"]["StandardCsnType"]
      | components["schemas"]["RhombusSecureCsnType"]
      | components["schemas"]["RhombusSecureMobileType"]
      | components["schemas"]["PinCredential"]
      | components["schemas"]["WiegandH10301CredentialType"]
      | components["schemas"]["WiegandH10304Credential"]
      | components["schemas"]["WiegandD10202Credential"]
      | components["schemas"]["Wiegand64BitRawCredentialType"]
    ) & {
      createdAtMillis?: number | null;
      endDateEpochSecExclusive?: number | null;
      lastUsedAccessControlledDoorUuid?: string | null;
      lastUsedAtMillis?: number | null;
      lastUsedLocationUuid?: string | null;
      lowercaseHexValue?: string | null;
      managedCredUuid?: string | null;
      note?: string | null;
      orgUuid?: string | null;
      startDateEpochSecInclusive?: number | null;
      type?: components["schemas"]["AccessControlCredentialEnumType"];
      updatedAtMillis?: number | null;
      userUuid?: string | null;
      uuid?: string | null;
      value?: string | null;
      workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
    };
    AccessControlCredentialWorkflowStatusEnumType: AccessControlCredentialWorkflowStatusEnumType;
    AccessControlUnitBatteryStateChangeEventType:
      | ({
          batteryFound?: boolean | null;
          batteryMa?: number | null;
          batteryMv?: number | null;
          onBackupPower?: boolean | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    AccessControlUnitDoorFirstInStateEvent:
      | ({
          doorAuthFirstInEventReference?: components["schemas"]["DoorFirstInStateChangeEventReference"];
          doorScheduleFirstInEventReference?: components["schemas"]["DoorFirstInStateChangeEventReference"];
          settingsUuid?: string | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    AccessControlUnitLocationLockdownStateEventType:
      | ({
          activatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          activeLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          deactivatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          doorEventReferenceMap?: {
            [
              key: string
            ]: components["schemas"]["DoorLockdownStateEventReference"];
          } | null;
          followingTestPlan?: boolean | null;
          locationLockdownStateChangedAtMillis?: number | null;
          originator?: components["schemas"]["BaseEventOriginator"];
          state?: components["schemas"]["LocationLockdownStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    AccessControlUnitTamperEventType:
      | ({
          componentCompositeUuid?: string | null;
          source?: components["schemas"]["AccessControlUnitTamperSourceEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    AccessControlUnitTamperSourceEnumType: AccessControlUnitTamperSourceEnumType;
    AccessControlledDoorPolicyAlertType:
      | ({
          accessControlUnitUuid?: string | null;
          accessControlledDoorUuid?: string | null;
          componentUuid?: string | null;
          initiatingUsername?: string | null;
          originatorEntityName?: string | null;
        } & {
          alertMonitoringThreatCaseUuid?: string | null;
          alertMonitoringVerified?: boolean | null;
          clipLocationMap?: {
            [key: string]: components["schemas"]["MetaDataLocationType"];
          } | null;
          clipLocationMapV2?: { [key: string]: string | null } | null;
          delayedProcessing?: boolean | null;
          deleted?: boolean | null;
          durationSec?: number | null;
          finalized?: boolean | null;
          locationUuid?: string | null;
          notificationSent?: boolean | null;
          orgUuid?: string | null;
          policyAlertTriggers?: components["schemas"]["ActivityEnum"][] | null;
          saved?: boolean | null;
          shared?: boolean | null;
          subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
          /** Natural language description of the alert */
          textDescription?: string | null;
          thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
          thumbnailLocationV2?: string | null;
          timestampMs?: number | null;
          type?: AccessControlledDoorPolicyAlertTypeEnum | null;
          uuid?: string | null;
        })
      | null;
    AccessControlledDoorPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["AccessControlledDoorScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    AccessControlledDoorScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
    };
    AccessControlledDoorShadow: {
      authFirstIn?: components["schemas"]["FirstInShadow"];
      componentCompositeUuid?: string | null;
      createdAtMillis?: number | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      scheduleFirstIn?: components["schemas"]["FirstInShadow"];
      state?: components["schemas"]["DoorStateShadow"];
      type?: components["schemas"]["ComponentCompositeShadowEnum"];
      updatedAtMillis?: number | null;
    };
    AccessControlledDoorStateEnumType: AccessControlledDoorStateEnumType;
    AccessControlledDoorType: {
      ajarTimeSec?: number | null;
      aperioDoorExtensionComponent?: components["schemas"]["ComponentReferenceType"];
      aperioDoorId?: string | null;
      aperioGatewayComponent?: components["schemas"]["ComponentReferenceType"];
      associatedCameras?: (string | null)[] | null;
      associatedFaceDetectionCameras?: (string | null)[] | null;
      createdAtMillis?: number | null;
      defaultState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      directionRadians?: number | null;
      doorAuthFirstInStateOverride?: components["schemas"]["FirstInState"];
      doorScheduleFirstInStateOverride?: components["schemas"]["FirstInState"];
      doorStateOverride?: components["schemas"]["BaseDoorStateOverride"];
      doorStateToScheduleUuidMap?: { [key: string]: string | null } | null;
      dpiComponents?: components["schemas"]["ComponentReferenceType"][] | null;
      floorNumber?: number | null;
      forceAllReadersFirstInAuthRequiredLedFeedbackEnabled?: boolean | null;
      forceAllReadersFirstInUnlockPendingLedFeedbackEnabled?: boolean | null;
      forceAllReadersOtherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      forceAllReadersRemoteUnlockAudioFeedbackEnabled?: boolean | null;
      forcedOpenEnabled?: boolean | null;
      forcedOpenTimeSec?: number | null;
      geofenceEnabled?: boolean | null;
      geofenceRadius?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      nfcSecureDowngradeEnabled?: boolean | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      policyUuid?: string | null;
      privacyModeSupportEnabled?: boolean | null;
      proximityUnlockSettings?: components["schemas"]["ProximityUnlockSettingsType"];
      readerComponents?:
        | components["schemas"]["ComponentReferenceType"][]
        | null;
      relayComponents?:
        | components["schemas"]["ComponentReferenceType"][]
        | null;
      relockAfterOpenTimeMs?: number | null;
      remoteUnlockEnabled?: boolean | null;
      rexComponents?: components["schemas"]["ComponentReferenceType"][] | null;
      sendExpiredIntentEvents?: boolean | null;
      subType?: AccessControlledDoorSubTypeEnum | null;
      type?: components["schemas"]["ComponentCompositeEnumType"];
      unlockTimeSec?: number | null;
      unlockTimeSecRex?: number | null;
      updatedAtMillis?: number | null;
      uuid?: string | null;
      waveToUnlockSettings?: components["schemas"]["WaveToUnlockSettingsType"];
    };
    AccessControlledDoorType_Minimal: {
      aperioDoorExtensionComponent?: components["schemas"]["ComponentReferenceType_Minimal"];
      aperioDoorId?: string | null;
      aperioGatewayComponent?: components["schemas"]["ComponentReferenceType_Minimal"];
      directionRadians?: number | null;
      doorAuthFirstInStateOverride?: components["schemas"]["FirstInState_Minimal"];
      doorScheduleFirstInStateOverride?: components["schemas"]["FirstInState_Minimal"];
      doorStateOverride?: components["schemas"]["BaseDoorStateOverride_Minimal"];
      dpiComponents?:
        | components["schemas"]["ComponentReferenceType_Minimal"][]
        | null;
      floorNumber?: number | null;
      geofenceEnabled?: boolean | null;
      geofenceRadius?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      nfcSecureDowngradeEnabled?: boolean | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      privacyModeSupportEnabled?: boolean | null;
      proximityUnlockSettings?: components["schemas"]["ProximityUnlockSettingsType_Minimal"];
      readerComponents?:
        | components["schemas"]["ComponentReferenceType_Minimal"][]
        | null;
      relayComponents?:
        | components["schemas"]["ComponentReferenceType_Minimal"][]
        | null;
      remoteUnlockEnabled?: boolean | null;
      rexComponents?:
        | components["schemas"]["ComponentReferenceType_Minimal"][]
        | null;
      subType?: MinimalSubTypeEnum | null;
      type?: components["schemas"]["ComponentCompositeEnumType_Minimal"];
      unlockTimeSec?: number | null;
      uuid?: string | null;
      waveToUnlockSettings?: components["schemas"]["WaveToUnlockSettingsType_Minimal"];
    };
    Accesscontrol_BaseSendUserPresenceForCurrentUserWsResponse: (
      | components["schemas"]["Accesscontrol_SendUserPresenceForCurrentUserSuccessWsResponse"]
      | components["schemas"]["Accesscontrol_SendUserPresenceForCurrentUserErrorWsResponse"]
    ) & {
      type?: BaseSendUserPresenceForCurrentUserWsResponseTypeEnum | null;
    };
    Accesscontrol_DeviceUnlockableAccessControlledDoorType: {
      name?: string | null;
      uuid?: string | null;
    };
    Accesscontrol_FindUnlockableAccessControlledDoorsByDeviceWSRequest: {
      deviceUuid?: string | null;
    };
    Accesscontrol_FindUnlockableAccessControlledDoorsByDeviceWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["Accesscontrol_DeviceUnlockableAccessControlledDoorType"][]
        | null;
    };
    Accesscontrol_ForceRefreshAccessControlUnitConfigWSRequest: {
      accessControlUnitUuid?: string | null;
    };
    Accesscontrol_ForceRefreshAccessControlUnitConfigWSResponse: {
      [key: string]: unknown;
    };
    Accesscontrol_GetMinimalAccessControlledDoorsByLocationForCurrentUserWSRequest: {
      locationUuid?: string | null;
    };
    Accesscontrol_GetMinimalAccessControlledDoorsByLocationForCurrentUserWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["AccessControlledDoorType_Minimal"][]
        | null;
      accessGrants?:
        | components["schemas"]["Accesscontrol_UserAccessGrant"][]
        | null;
      accessRevocations?:
        | components["schemas"]["Accesscontrol_UserAccessRevocation"][]
        | null;
      schedules?:
        | components["schemas"]["BaseSavedScheduleType_Minimal"][]
        | null;
    };
    Accesscontrol_SendUserPresenceForCurrentUserErrorWsResponse: {
      type?: SendUserPresenceForCurrentUserErrorWsResponseTypeEnum | null;
    } | null;
    Accesscontrol_SendUserPresenceForCurrentUserSuccessWsResponse: {
      type?: SendUserPresenceForCurrentUserSuccessWsResponseTypeEnum | null;
    } | null;
    Accesscontrol_SendUserPresenceForCurrentUserWSRequest: {
      cmdVersion?: string | null;
      credentialValue?: string | null;
      destinations?:
        | components["schemas"]["Accesscontrol_SendUserPresenceForCurrentUserWSRequest_Destination"][]
        | null;
    };
    Accesscontrol_SendUserPresenceForCurrentUserWSRequest_Destination: {
      accessControlUnitUuid?: string | null;
      beaconIdentifier?: (string | null)[] | null;
      readerUuid?: string | null;
      rssi?: string | null;
    };
    Accesscontrol_UnlockAccessControlledDoorErrorWSResponse:
      | ({
          errorType?: UnlockAccessControlledDoorErrorWSResponseErrorTypeEnum | null;
        } & {
          type?: UnlockAccessControlledDoorErrorWSResponseTypeEnum | null;
        })
      | null;
    Accesscontrol_UnlockAccessControlledDoorForCurrentUserErrorWSResponse:
      | ({
          errorType?: UnlockAccessControlledDoorForCurrentUserErrorWSResponseErrorTypeEnum | null;
        } & {
          type?: UnlockAccessControlledDoorForCurrentUserErrorWSResponseTypeEnum | null;
        })
      | null;
    Accesscontrol_UnlockAccessControlledDoorForCurrentUserSuccessWSResponse: {
      type?: UnlockAccessControlledDoorForCurrentUserSuccessWSResponseTypeEnum | null;
    } | null;
    Accesscontrol_UnlockAccessControlledDoorForCurrentUserWSRequest: {
      accessControlledDoorUuid?: string | null;
      cmdVersion?: string | null;
      credentialValue?: string | null;
      latitude?: number | null;
      longitude?: number | null;
      requestTimeMillis?: number | null;
    };
    Accesscontrol_UnlockAccessControlledDoorSuccessWSResponse: {
      type?: UnlockAccessControlledDoorSuccessWSResponseTypeEnum | null;
    } | null;
    Accesscontrol_UnlockAccessControlledDoorWSRequest: {
      accessControlledDoorUuid?: string | null;
    };
    Accesscontrol_UserAccessGrant: {
      accessControlledDoorUuids?: (string | null)[] | null;
      scheduleUuid?: string | null;
    };
    Accesscontrol_UserAccessRevocation: {
      accessControlledDoorUuids?: (string | null)[] | null;
      scheduleUuid?: string | null;
    };
    Accesscontrol_accessgrant_CreateAccessGrantWSRequest: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
    };
    Accesscontrol_accessgrant_CreateAccessGrantWSResponse: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
    };
    Accesscontrol_accessgrant_DeleteLocationAccessGrantWSRequest: {
      accessGrantUuid?: string | null;
    };
    Accesscontrol_accessgrant_DeleteLocationAccessGrantWSResponse: {
      [key: string]: unknown;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByAccessControlledDoorWSRequest: {
      accessControlledDoorUuid?: string | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByAccessControlledDoorWSResponse: {
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByDoorLabelWSRequest: {
      doorLabelId?: string | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByDoorLabelWSResponse: {
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByGroupWSRequest: {
      groupUuid?: string | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByGroupWSResponse: {
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationAndUserWSRequest: {
      locationUuid?: string | null;
      userUuid?: string | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationAndUserWSResponse: {
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationWSRequest: {
      locationUuid?: string | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationWSResponse: {
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByOrgWSRequest: {
      [key: string]: unknown;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByOrgWSResponse: {
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByUserWSRequest: {
      userUuid?: string | null;
    };
    Accesscontrol_accessgrant_FindLocationAccessGrantsByUserWSResponse: {
      accessGrants?: components["schemas"]["LocationAccessGrantType"][] | null;
    };
    Accesscontrol_accessgrant_GetLocationAccessGrantWSRequest: {
      accessGrantUuid?: string | null;
    };
    Accesscontrol_accessgrant_GetLocationAccessGrantWSResponse: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
    };
    Accesscontrol_accessgrant_GetLocationsByAccessGrantForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    Accesscontrol_accessgrant_GetLocationsByAccessGrantForCurrentUserWSResponse: {
      locationLockdownStates?:
        | components["schemas"]["LocationLockdownStateType"][]
        | null;
      locations?: components["schemas"]["LocationType"][] | null;
      lockdownPlans?: components["schemas"]["BaseLockdownPlanType"][] | null;
    };
    Accesscontrol_accessgrant_GetRhombusKeyLocationLockdownDetailsForCurrentUserWSRequest: {
      locationUuid?: string | null;
    };
    Accesscontrol_accessgrant_GetRhombusKeyLocationLockdownDetailsForCurrentUserWSResponse: {
      locationLockdownState?: components["schemas"]["LocationLockdownStateType"];
    };
    Accesscontrol_accessgrant_UpdateAccessGrantWSRequest: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
    };
    Accesscontrol_accessgrant_UpdateAccessGrantWSResponse: {
      accessGrant?: components["schemas"]["LocationAccessGrantType"];
      error?: boolean | null;
      errorMsg?: string | null;
      expiredACDLicensesDoorUuids?: (string | null)[] | null;
      unassignedACDLicensesDoorUuids?: (string | null)[] | null;
    };
    Accesscontrol_accessrevocation_CreateAccessRevocationWSRequest: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
    };
    Accesscontrol_accessrevocation_CreateAccessRevocationWSResponse: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
    };
    Accesscontrol_accessrevocation_DeleteLocationAccessRevocationWSRequest: {
      accessRevocationUuid?: string | null;
    };
    Accesscontrol_accessrevocation_DeleteLocationAccessRevocationWSResponse: {
      [key: string]: unknown;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByAccessControlledDoorWSRequest: {
      accessControlledDoorUuid?: string | null;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByAccessControlledDoorWSResponse: {
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByDoorLabelWSRequest: {
      doorLabelId?: string | null;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByDoorLabelWSResponse: {
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByGroupWSRequest: {
      groupUuid?: string | null;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByGroupWSResponse: {
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByOrgWSRequest: {
      [key: string]: unknown;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByOrgWSResponse: {
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByUserWSRequest: {
      userUuid?: string | null;
    };
    Accesscontrol_accessrevocation_FindLocationAccessRevocationsByUserWSResponse: {
      accessRevocations?:
        | components["schemas"]["LocationAccessRevocationType"][]
        | null;
    };
    Accesscontrol_accessrevocation_GetLocationAccessRevocationWSRequest: {
      accessRevocationUuid?: string | null;
    };
    Accesscontrol_accessrevocation_GetLocationAccessRevocationWSResponse: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
    };
    Accesscontrol_accessrevocation_UpdateAccessRevocationWSRequest: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
    };
    Accesscontrol_accessrevocation_UpdateAccessRevocationWSResponse: {
      accessRevocation?: components["schemas"]["LocationAccessRevocationType"];
      error?: boolean | null;
      errorMsg?: string | null;
      expiredACDLicensesDoorUuids?: (string | null)[] | null;
      unassignedACDLicensesDoorUuids?: (string | null)[] | null;
    };
    Accesscontrol_badgetemplate_CreateBadgeTemplateWSRequest: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    Accesscontrol_badgetemplate_CreateBadgeTemplateWSResponse: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    Accesscontrol_badgetemplate_DeleteBadgeTemplateImageWSRequest: {
      imageUuid?: string | null;
    };
    Accesscontrol_badgetemplate_DeleteBadgeTemplateImageWSResponse: {
      image?: components["schemas"]["BadgeTemplateImage"];
    };
    Accesscontrol_badgetemplate_DeleteBadgeTemplateWSRequest: {
      templateUuid?: string | null;
    };
    Accesscontrol_badgetemplate_DeleteBadgeTemplateWSResponse: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    Accesscontrol_badgetemplate_FindBadgeTemplateImagesWSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    Accesscontrol_badgetemplate_FindBadgeTemplateImagesWSResponse: {
      images?: components["schemas"]["BadgeTemplateImage"][] | null;
      lastEvaluatedKey?: string | null;
    };
    Accesscontrol_badgetemplate_FindBadgeTemplatesWSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    Accesscontrol_badgetemplate_FindBadgeTemplatesWSResponse: {
      lastEvaluatedKey?: string | null;
      templates?: components["schemas"]["BadgeTemplate"][] | null;
    };
    Accesscontrol_badgetemplate_GetBadgeTemplateImageWSRequest: {
      imageUuid?: string | null;
    };
    Accesscontrol_badgetemplate_GetBadgeTemplateImageWSResponse: {
      image?: components["schemas"]["BadgeTemplateImage"];
    };
    Accesscontrol_badgetemplate_GetBadgeTemplateWSRequest: {
      templateUuid?: string | null;
    };
    Accesscontrol_badgetemplate_GetBadgeTemplateWSResponse: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    Accesscontrol_badgetemplate_UpdateBadgeTemplateImageWSRequest: {
      selectiveUpdate?: components["schemas"]["BadgeTemplateImageSelectiveUpdate"];
    };
    Accesscontrol_badgetemplate_UpdateBadgeTemplateImageWSResponse: {
      image?: components["schemas"]["BadgeTemplateImage"];
    };
    Accesscontrol_badgetemplate_UpdateBadgeTemplateWSRequest: {
      selectiveUpdate?: components["schemas"]["BadgeTemplateSelectiveUpdate"];
    };
    Accesscontrol_badgetemplate_UpdateBadgeTemplateWSResponse: {
      template?: components["schemas"]["BadgeTemplate"];
    };
    Accesscontrol_credentials_AssignAccessControlCredentialWSRequest: {
      credentialHexValue?: string | null;
      userUuid?: string | null;
    };
    Accesscontrol_credentials_AssignAccessControlCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_BaseProvisionMobileAccessControlCredentialForCurrentUserWSResponse: (
      | components["schemas"]["Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserSuccessWSResponse"]
      | components["schemas"]["Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponse"]
    ) & {
      type?: BaseProvisionMobileAccessControlCredentialForCurrentUserWSResponseTypeEnum | null;
    };
    Accesscontrol_credentials_BaseUnlockAccessControlledDoorForCurrentUserWSResponse: (
      | components["schemas"]["Accesscontrol_UnlockAccessControlledDoorForCurrentUserSuccessWSResponse"]
      | components["schemas"]["Accesscontrol_UnlockAccessControlledDoorForCurrentUserErrorWSResponse"]
    ) & {
      type?: BaseUnlockAccessControlledDoorForCurrentUserWSResponseTypeEnum | null;
    };
    Accesscontrol_credentials_BaseUnlockAccessControlledDoorWSResponse: (
      | components["schemas"]["Accesscontrol_UnlockAccessControlledDoorSuccessWSResponse"]
      | components["schemas"]["Accesscontrol_UnlockAccessControlledDoorErrorWSResponse"]
    ) & {
      type?: BaseUnlockAccessControlledDoorWSResponseTypeEnum | null;
    };
    Accesscontrol_credentials_BulkProvisionPinCredentialsWSRequest: {
      /** End date in epoch seconds when these credentials expire. Credentials will never expire if this value is left null. */
      endDateEpochSecExclusive?: number | null;
      /** If enabled, sends an email to the assigned users notifying them of their new PIN code. */
      notifyUsers?: boolean | null;
      /** Length of PINs to be generated. Accepts length between 4 and 16. Default length is 5. */
      pinLength?: number | null;
      /** Start date in epoch seconds when these credentials become active. Credentials activate immediately if this value is left null. */
      startDateEpochSecInclusive?: number | null;
      /** Set of user uuids to provision PINs for. */
      userUuids: (string | null)[] | null;
    };
    Accesscontrol_credentials_BulkProvisionPinCredentialsWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
      failedUsers?: (string | null)[] | null;
    };
    Accesscontrol_credentials_BulkRotatePinCredentialsWSRequest: {
      /** Set of credential uuids designated for PIN rotation. */
      credentialUuids: (string | null)[] | null;
      /** End date in epoch seconds when these credentials expire. If left null, copies the end date from the previous PIN. */
      endDateEpochSecExclusive?: number | null;
      /** If enabled, sends an email to the assigned users notifying them of their new PIN code. */
      notifyUsers?: boolean | null;
      /** Length of PIN to be generated. Accepts length between 4 and 16. Default is 5. */
      pinLength?: number | null;
      /** Start date in epoch seconds when these credentials become active. If left null, copies the start date from the previous PIN. */
      startDateEpochSecInclusive?: number | null;
    };
    Accesscontrol_credentials_BulkRotatePinCredentialsWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_credentials_CreateAccessControlCredentialByHexValueAndTypeWSRequest: {
      credentialType?: components["schemas"]["AccessControlCredentialEnumType"];
      endDateEpochSecExclusive?: number | null;
      hexValue?: string | null;
      littleEndian?: boolean | null;
      numValueBits?: number | null;
      startDateEpochSecInclusive?: number | null;
      userUuid?: string | null;
    };
    Accesscontrol_credentials_CreateAccessControlCredentialByHexValueAndTypeWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_CreateAppleWalletPassWSRequest: {
      credUuid?: string | null;
    };
    Accesscontrol_credentials_CreateAppleWalletPassWSResponse: {
      [key: string]: unknown;
    };
    Accesscontrol_credentials_CreatePinCredentialWSRequest: {
      /** End date in epoch seconds when this credential expires. Credential will never expire if this value is left null. */
      endDateEpochSecExclusive?: number | null;
      /** If enabled, sends an email to the assigned user notifying them of their new PIN code. */
      notifyUser?: boolean | null;
      /** PIN code (4 to 16 digits), will be generated automatically if one is not provided. */
      pinCode?: string | null;
      /** Length of PIN to be generated if a PIN code is not provided. Accepts length between 4 and 16. Default length is 5. */
      pinLength?: number | null;
      /** Start date in epoch seconds when this credential becomes active. Credential activates immediately if this value is left null. */
      startDateEpochSecInclusive?: number | null;
      /** User uuid assigned this PIN. */
      userUuid: string | null;
    };
    Accesscontrol_credentials_CreatePinCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_credentials_CreateRhombusSecureCsnCredentialWSRequest: {
      credentialValue?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
      userUuid?: string | null;
    };
    Accesscontrol_credentials_CreateRhombusSecureCsnCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_CreateStandardCsnCredentialWSRequest: {
      credentialValue?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
      userUuid?: string | null;
    };
    Accesscontrol_credentials_CreateStandardCsnCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_CreateWiegand64BitRawCredentialWSRequest: {
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
      userUuid?: string | null;
      value?: string | null;
    };
    Accesscontrol_credentials_CreateWiegand64BitRawCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_CreateWiegandCredentialWSRequest: {
      cardNumber?: number | null;
      companyId?: number | null;
      endDateEpochSecExclusive?: number | null;
      facilityCode?: number | null;
      siteCode?: number | null;
      startDateEpochSecInclusive?: number | null;
      userUuid?: string | null;
      value?: string | null;
      wiegandFormat?: components["schemas"]["WiegandFormatEnumType"];
    };
    Accesscontrol_credentials_CreateWiegandCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_CreateWiegandD10202CredentialWSRequest: {
      cardNumber?: number | null;
      endDateEpochSecExclusive?: number | null;
      facilityCode?: number | null;
      startDateEpochSecInclusive?: number | null;
      userUuid?: string | null;
    };
    Accesscontrol_credentials_CreateWiegandD10202CredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_CreateWiegandH10301CredentialWSRequest: {
      cardNumber?: number | null;
      endDateEpochSecExclusive?: number | null;
      facilityCode?: number | null;
      startDateEpochSecInclusive?: number | null;
      userUuid?: string | null;
    };
    Accesscontrol_credentials_CreateWiegandH10301CredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_CreateWiegandH10304CredentialWSRequest: {
      cardNumber?: number | null;
      endDateEpochSecExclusive?: number | null;
      facilityCode?: number | null;
      startDateEpochSecInclusive?: number | null;
      userUuid?: string | null;
    };
    Accesscontrol_credentials_CreateWiegandH10304CredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_DeleteAccessControlCredentialWSRequest: {
      credentialUuid?: string | null;
    };
    Accesscontrol_credentials_DeleteAccessControlCredentialWSResponse: {
      [key: string]: unknown;
    };
    Accesscontrol_credentials_DeletePinCredentialWSRequest: {
      /** Uuid of PIN credential to delete. */
      credentialUuid: string | null;
    };
    Accesscontrol_credentials_DeletePinCredentialWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_credentials_DeleteUnassignedAccessControlCredentialWSRequest: {
      credentialHexValue?: string | null;
    };
    Accesscontrol_credentials_DeleteUnassignedAccessControlCredentialWSResponse: {
      [key: string]: unknown;
    };
    Accesscontrol_credentials_FindAccessControlCredentialByOrgWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    Accesscontrol_credentials_FindAccessControlCredentialByOrgWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    Accesscontrol_credentials_FindAccessControlCredentialByUserWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
      userUuid?: string | null;
    };
    Accesscontrol_credentials_FindAccessControlCredentialByUserWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    Accesscontrol_credentials_FindAccessControlCredentialByUsersWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
      userUuids?: (string | null)[] | null;
    };
    Accesscontrol_credentials_FindAccessControlCredentialByUsersWSResponse: {
      userCredentialsMap?: {
        [key: string]:
          | components["schemas"]["AccessControlCredentialType"][]
          | null;
      } | null;
    };
    Accesscontrol_credentials_FindCredentialHistoryByCredentialHexValueWSRequest: {
      credentialHexValue?: string | null;
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    Accesscontrol_credentials_FindCredentialHistoryByCredentialHexValueWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    Accesscontrol_credentials_FindCredentialHistoryByCredentialValueWSRequest: {
      credentialType?: components["schemas"]["AccessControlCredentialEnumType"];
      credentialValue?: string | null;
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    Accesscontrol_credentials_FindCredentialHistoryByCredentialValueWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    Accesscontrol_credentials_FindCredentialHistoryByUserWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
      userUuid?: string | null;
    };
    Accesscontrol_credentials_FindCredentialHistoryByUserWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    Accesscontrol_credentials_FindCredentialHistoryWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    Accesscontrol_credentials_FindCredentialHistoryWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    Accesscontrol_credentials_FindPinCredentialsByOrgWSRequest: {
      filter?: components["schemas"]["CredentialQueryFilter"];
    };
    Accesscontrol_credentials_FindPinCredentialsByOrgWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_credentials_FindRhombusSecureMobileCredentialsForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    Accesscontrol_credentials_FindRhombusSecureMobileCredentialsForCurrentUserWSResponse: {
      credentials?:
        | components["schemas"]["AccessControlCredentialType"][]
        | null;
    };
    Accesscontrol_credentials_GetAvailablePinCodeWSRequest: {
      /** Length of PIN to be generated. */
      pinLength: number | null;
    };
    Accesscontrol_credentials_GetAvailablePinCodeWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      pinCode?: string | null;
    };
    Accesscontrol_credentials_GetPinCredentialDetailsWSRequest: {
      /** Uuid of PIN credential to get full details for. */
      credentialUuid: string | null;
    };
    Accesscontrol_credentials_GetPinCredentialDetailsWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_credentials_GetRhombusSecureCsnCredentialDetailsWSRequest: {
      credentialUuid?: string | null;
    };
    Accesscontrol_credentials_GetRhombusSecureCsnCredentialDetailsWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_GetRhombusSecureMobileAppStateStatsForOrgWSRequest: {
      [key: string]: unknown;
    };
    Accesscontrol_credentials_GetRhombusSecureMobileAppStateStatsForOrgWSResponse: {
      appStateStats?: components["schemas"]["RhombusSecureMobileAppStateStats"];
    };
    Accesscontrol_credentials_GetStandardCsnCredentialDetailsWSRequest: {
      credentialUuid?: string | null;
    };
    Accesscontrol_credentials_GetStandardCsnCredentialDetailsWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponse:
      | ({
          errorType?: ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponseErrorTypeEnum | null;
        } & {
          type?: ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponseTypeEnum | null;
        })
      | null;
    Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserSuccessWSResponse:
      | ({
          credential?: components["schemas"]["AccessControlCredentialType"];
          encodedPrivateKey?: string | null;
        } & {
          type?: ProvisionMobileAccessControlCredentialForCurrentUserSuccessWSResponseTypeEnum | null;
        })
      | null;
    Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserWSRequest: {
      appName?: string | null;
      appNotifications?: components["schemas"]["RhombusSecureMobileFeature"];
      appOS?: string | null;
      appVersion?: string | null;
      clientType?: components["schemas"]["MobileTokenOSEnum"];
      deviceModel?: string | null;
      installationId?: string | null;
      tapToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
      waveToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
    };
    Accesscontrol_credentials_RevokeAccessControlCredentialWSRequest: {
      credentialUuid?: string | null;
    };
    Accesscontrol_credentials_RevokeAccessControlCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_RevokePinCredentialWSRequest: {
      /** Uuid of PIN credential to revoke. */
      credentialUuid: string | null;
    };
    Accesscontrol_credentials_RevokePinCredentialWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_credentials_RevokeRhombusSecureMobileCredentialForCurrentUserWSRequest: {
      credentialUuid?: string | null;
    };
    Accesscontrol_credentials_RevokeRhombusSecureMobileCredentialForCurrentUserWSResponse: {
      [key: string]: unknown;
    };
    Accesscontrol_credentials_RotatePinCredentialWSRequest: {
      /** Credential uuid of the PIN to rotate. */
      credentialUuid: string | null;
      /** End date in epoch seconds when this credential expires. If left null, copies the end date from the previous PIN. */
      endDateEpochSecExclusive?: number | null;
      /** If enabled, sends an email to the assigned user notifying them of their new PIN code. */
      notifyUser?: boolean | null;
      /** PIN code (4 to 16 digits), will be generated automatically if one is not provided. */
      pinCode?: string | null;
      /** Length of PIN to be generated if a PIN code is not provided. Accepts length between 4 and 16. If left null, the generated PIN will have the same length as the previous PIN. */
      pinLength?: number | null;
      /** Start date in epoch seconds when this PIN activates. If left null, copies the start date from the previous PIN. */
      startDateEpochSecInclusive?: number | null;
    };
    Accesscontrol_credentials_RotatePinCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_credentials_SuspendAccessControlCredentialWSRequest: {
      credentialUuid?: string | null;
    };
    Accesscontrol_credentials_SuspendAccessControlCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_UnsuspendAccessControlCredentialWSRequest: {
      credentialUuid?: string | null;
    };
    Accesscontrol_credentials_UnsuspendAccessControlCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_UpdateAccessControlCredentialNoteWSRequest: {
      /** uuid of the credential to be updated. */
      credentialUuid: string | null;
      /** Note to be associated with the credential. Max length is 250 characters. */
      note: string | null;
    };
    Accesscontrol_credentials_UpdateAccessControlCredentialNoteWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_UpdatePinCredentialWSRequest: {
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    Accesscontrol_credentials_UpdatePinCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_credentials_UpdateRhombusKeyMobileAppStateForCurrentUserWSRequest: {
      appName?: string | null;
      appNotifications?: components["schemas"]["RhombusSecureMobileFeature"];
      appOS?: string | null;
      appVersion?: string | null;
      clientType?: components["schemas"]["MobileTokenOSEnum"];
      credentialUuid?: string | null;
      deviceModel?: string | null;
      tapToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
      waveToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
    };
    Accesscontrol_credentials_UpdateRhombusKeyMobileAppStateForCurrentUserWSResponse: {
      appState?: components["schemas"]["RhombusSecureMobileAppState"];
    };
    Accesscontrol_credentials_UpdateRhombusSecureCsnCredentialWSRequest: {
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    Accesscontrol_credentials_UpdateRhombusSecureCsnCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_UpdateRhombusSecureMobileCredentialWSRequest: {
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    Accesscontrol_credentials_UpdateRhombusSecureMobileCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_UpdateStandardCsnCredentialWSRequest: {
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    Accesscontrol_credentials_UpdateStandardCsnCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_credentials_UpdateWiegandCredentialWSRequest: {
      credentialUuid?: string | null;
      endDateEpochSecExclusive?: number | null;
      startDateEpochSecInclusive?: number | null;
    };
    Accesscontrol_credentials_UpdateWiegandCredentialWSResponse: {
      credential?: components["schemas"]["AccessControlCredentialType"];
    };
    Accesscontrol_doorexception_CreateDoorScheduleExceptionWSRequest: {
      exception?: components["schemas"]["DoorScheduleExceptionType"];
    };
    Accesscontrol_doorexception_CreateDoorScheduleExceptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      exception?: components["schemas"]["DoorScheduleExceptionType"];
    };
    Accesscontrol_doorexception_DeleteDoorScheduleExceptionWSRequest: {
      exceptionUuid?: string | null;
    };
    Accesscontrol_doorexception_DeleteDoorScheduleExceptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_doorexception_FindDoorScheduleExceptionsForDoorWSRequest: {
      dateRangeFilter?: components["schemas"]["DateRangeFilter"];
      doorUuid?: string | null;
    };
    Accesscontrol_doorexception_FindDoorScheduleExceptionsForDoorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      exceptions?: components["schemas"]["DoorScheduleExceptionType"][] | null;
    };
    Accesscontrol_doorexception_FindDoorScheduleExceptionsForLocationWSRequest: {
      dateRangeFilter?: components["schemas"]["DateRangeFilter"];
      locationUuid?: string | null;
    };
    Accesscontrol_doorexception_FindDoorScheduleExceptionsForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      exceptions?: components["schemas"]["DoorScheduleExceptionType"][] | null;
    };
    Accesscontrol_doorexception_FindDoorScheduleExceptionsWSRequest: {
      dateRangeFilter?: components["schemas"]["DateRangeFilter"];
    };
    Accesscontrol_doorexception_FindDoorScheduleExceptionsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      exceptions?: components["schemas"]["DoorScheduleExceptionType"][] | null;
    };
    Accesscontrol_doorexception_GetDoorScheduleExceptionWSRequest: {
      exceptionUuid?: string | null;
    };
    Accesscontrol_doorexception_GetDoorScheduleExceptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      exception?: components["schemas"]["DoorScheduleExceptionType"];
    };
    Accesscontrol_doorexception_UpdateDoorScheduleExceptionWSRequest: {
      exception?: components["schemas"]["DoorScheduleExceptionType"];
    };
    Accesscontrol_doorexception_UpdateDoorScheduleExceptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      exception?: components["schemas"]["DoorScheduleExceptionType"];
      expiredACDLicensesDoorUuids?: (string | null)[] | null;
      unassignedACDLicensesDoorUuids?: (string | null)[] | null;
    };
    Accesscontrol_firstin_ApplyDoorAuthFirstInGroupStateWSRequest: {
      settingsUuid?: string | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    Accesscontrol_firstin_ApplyDoorAuthFirstInGroupStateWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    Accesscontrol_firstin_ApplyDoorAuthFirstInStateWSRequest: {
      doorUuid?: string | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    Accesscontrol_firstin_ApplyDoorAuthFirstInStateWSResponse: {
      door?: components["schemas"]["AccessControlledDoorType"];
    };
    Accesscontrol_firstin_ApplyDoorScheduleFirstInGroupStateWSRequest: {
      settingsUuid?: string | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    Accesscontrol_firstin_ApplyDoorScheduleFirstInGroupStateWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    Accesscontrol_firstin_ApplyDoorScheduleFirstInStateWSRequest: {
      doorUuid?: string | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    Accesscontrol_firstin_ApplyDoorScheduleFirstInStateWSResponse: {
      door?: components["schemas"]["AccessControlledDoorType"];
    };
    Accesscontrol_firstin_CreateLocationFirstInSettingsWSRequest: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    Accesscontrol_firstin_CreateLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    Accesscontrol_firstin_DeleteLocationFirstInSettingsWSRequest: {
      settingsUuid?: string | null;
    };
    Accesscontrol_firstin_DeleteLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    Accesscontrol_firstin_FindLocationFirstInSettingsByLocationWSRequest: {
      lastEvaluatedKey?: string | null;
      locationUuid?: string | null;
      maxPageSize?: number | null;
    };
    Accesscontrol_firstin_FindLocationFirstInSettingsByLocationWSResponse: {
      lastEvaluatedKey?: string | null;
      settingsList?: components["schemas"]["LocationFirstInSettings"][] | null;
    };
    Accesscontrol_firstin_FindLocationFirstInSettingsByOrgWSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    Accesscontrol_firstin_FindLocationFirstInSettingsByOrgWSResponse: {
      lastEvaluatedKey?: string | null;
      settingsList?: components["schemas"]["LocationFirstInSettings"][] | null;
    };
    Accesscontrol_firstin_GetLocationFirstInSettingsForDoorWSRequest: {
      doorUuid?: string | null;
    };
    Accesscontrol_firstin_GetLocationFirstInSettingsForDoorWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    Accesscontrol_firstin_GetLocationFirstInSettingsWSRequest: {
      settingsUuid?: string | null;
    };
    Accesscontrol_firstin_GetLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    Accesscontrol_firstin_RemoveDoorLocationFirstInSettingsWSRequest: {
      doorUuid?: string | null;
    };
    Accesscontrol_firstin_RemoveDoorLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    Accesscontrol_firstin_UpdateLocationFirstInSettingsWSRequest: {
      description?: string | null;
      doorAuthRequirementEnabled?: boolean | null;
      doorScheduleRequirementEnabled?: boolean | null;
      doorUuids?: (string | null)[] | null;
      groupUuids?: (string | null)[] | null;
      name?: string | null;
      resets?: components["schemas"]["BaseFirstInReset"][] | null;
      settingsUuid?: string | null;
      userUuids?: (string | null)[] | null;
    };
    Accesscontrol_firstin_UpdateLocationFirstInSettingsWSResponse: {
      settings?: components["schemas"]["LocationFirstInSettings"];
    };
    Accesscontrol_lockdownplan_ActivateLockdownForLocationViaRhombusKeyWSRequest: {
      locationUuid?: string | null;
      lockdownPlanUuids?: (string | null)[] | null;
      stateUpdatedAtMillis?: number | null;
    };
    Accesscontrol_lockdownplan_ActivateLockdownForLocationViaRhombusKeyWSResponse: {
      result?: components["schemas"]["LockdownActivationResultEnumType"];
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    Accesscontrol_lockdownplan_ActivateLockdownForLocationWSRequest: {
      locationUuid?: string | null;
      lockdownPlanUuids?: (string | null)[] | null;
      stateUpdatedAtMillis?: number | null;
    };
    Accesscontrol_lockdownplan_ActivateLockdownForLocationWSResponse: {
      result?: components["schemas"]["LockdownActivationResultEnumType"];
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    Accesscontrol_lockdownplan_CreateLocationLockdownPlanWSRequest: {
      lockdownPlan?: components["schemas"]["LocationLockdownPlanType"];
    };
    Accesscontrol_lockdownplan_CreateLocationLockdownPlanWSResponse: {
      lockdownPlan?: components["schemas"]["LocationLockdownPlanType"];
    };
    Accesscontrol_lockdownplan_CreateLockdownRuleForLocationWSRequest: {
      rule?: components["schemas"]["Accesscontrol_lockdownplan_ExternalLockdownPlanRuleType"];
    };
    Accesscontrol_lockdownplan_CreateLockdownRuleForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      ruleUuid?: string | null;
    };
    Accesscontrol_lockdownplan_DeactivateLockdownForLocationViaRhombusKeyWSRequest: {
      locationUuid?: string | null;
      stateUpdatedAtMillis?: number | null;
    };
    Accesscontrol_lockdownplan_DeactivateLockdownForLocationViaRhombusKeyWSResponse: {
      result?: components["schemas"]["LockdownDeactivationResultEnumType"];
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    Accesscontrol_lockdownplan_DeactivateLockdownForLocationWSRequest: {
      locationUuid?: string | null;
      stateUpdatedAtMillis?: number | null;
    };
    Accesscontrol_lockdownplan_DeactivateLockdownForLocationWSResponse: {
      result?: components["schemas"]["LockdownDeactivationResultEnumType"];
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    Accesscontrol_lockdownplan_DeleteLocationLockdownStateWSRequest: {
      locationUuid?: string | null;
    };
    Accesscontrol_lockdownplan_DeleteLocationLockdownStateWSResponse: {
      [key: string]: unknown;
    };
    Accesscontrol_lockdownplan_DeleteLockdownPlanWSRequest: {
      lockdownPlanUuid?: string | null;
    };
    Accesscontrol_lockdownplan_DeleteLockdownPlanWSResponse: {
      lockdownPlanUuid?: string | null;
      orgUuid?: string | null;
    };
    Accesscontrol_lockdownplan_DeleteLockdownRuleForLocationWSRequest: {
      locationUuid?: string | null;
      ruleUuid?: string | null;
    };
    Accesscontrol_lockdownplan_DeleteLockdownRuleForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Accesscontrol_lockdownplan_DisableLockdownTestModeForLocationWSRequest: {
      locationUuid?: string | null;
    };
    Accesscontrol_lockdownplan_DisableLockdownTestModeForLocationWSResponse: {
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    Accesscontrol_lockdownplan_EnableLockdownTestModeForLocationWSRequest: {
      locationUuid?: string | null;
    };
    Accesscontrol_lockdownplan_EnableLockdownTestModeForLocationWSResponse: {
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    Accesscontrol_lockdownplan_ExternalLockdownPlanRuleType: {
      action?: components["schemas"]["RuleActionType"];
      locationUuid?: string | null;
      ruleFilters?: components["schemas"]["RuleFilterType"];
      ruleName?: string | null;
      ruleUuid?: string | null;
      triggerActivity?: components["schemas"]["ActivityEnum"];
    };
    Accesscontrol_lockdownplan_FindLocationLockdownEventsWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      locationUuid?: string | null;
    };
    Accesscontrol_lockdownplan_FindLocationLockdownEventsWSResponse: {
      events?: components["schemas"]["BaseLockdownStateEventType"][] | null;
    };
    Accesscontrol_lockdownplan_FindLocationLockdownStatesWSRequest: {
      stateFilter?:
        | components["schemas"]["LocationLockdownStateEnumType"][]
        | null;
    };
    Accesscontrol_lockdownplan_FindLocationLockdownStatesWSResponse: {
      states?: components["schemas"]["LocationLockdownStateType"][] | null;
    };
    Accesscontrol_lockdownplan_FindLockdownPlansByLocationWSRequest: {
      locationUuid?: string | null;
    };
    Accesscontrol_lockdownplan_FindLockdownPlansByLocationWSResponse: {
      lockdownPlans?: components["schemas"]["BaseLockdownPlanType"][] | null;
    };
    Accesscontrol_lockdownplan_FindLockdownPlansWSRequest: {
      [key: string]: unknown;
    };
    Accesscontrol_lockdownplan_FindLockdownPlansWSResponse: {
      lockdownPlans?: components["schemas"]["BaseLockdownPlanType"][] | null;
    };
    Accesscontrol_lockdownplan_GetLockdownPlanWSRequest: {
      lockdownPlanUuid?: string | null;
    };
    Accesscontrol_lockdownplan_GetLockdownPlanWSResponse: {
      lockdownPlan?: components["schemas"]["BaseLockdownPlanType"];
    };
    Accesscontrol_lockdownplan_GetLockdownRulesForLocationWSRequest: {
      locationUuid?: string | null;
    };
    Accesscontrol_lockdownplan_GetLockdownRulesForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rules?:
        | components["schemas"]["Accesscontrol_lockdownplan_ExternalLockdownPlanRuleType"][]
        | null;
    };
    Accesscontrol_lockdownplan_GetOrCreateLocationLockdownStateWSRequest: {
      locationUuid?: string | null;
    };
    Accesscontrol_lockdownplan_GetOrCreateLocationLockdownStateWSResponse: {
      state?: components["schemas"]["LocationLockdownStateType"];
    };
    Accesscontrol_lockdownplan_UpdateLocationLockdownPlanWSRequest: {
      activationPlan?: components["schemas"]["LockdownActivationPlanType"];
      deactivationPlan?: components["schemas"]["LockdownDeactivationPlanType"];
      defaultLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
      doorLockdownStateMap?: {
        [key: string]: components["schemas"]["DoorLockdownStateEnumType"];
      } | null;
      lockdownPlanUuid?: string | null;
      name?: string | null;
      physicalAccess?: components["schemas"]["LockdownPhysicalAccessType"];
      testPlan?: components["schemas"]["LockdownTestPlanType"];
    };
    Accesscontrol_lockdownplan_UpdateLocationLockdownPlanWSResponse: {
      lockdownPlan?: components["schemas"]["LocationLockdownPlanType"];
    };
    Accesscontrol_qr_GenerateQRAccessCodeWSRequest: {
      accessControlledDoorUuid?: string | null;
      validDurationSec?: number | null;
    };
    Accesscontrol_qr_GenerateQRAccessCodeWSResponse: {
      accessTokenUuid?: string | null;
      qrCode?: (string | null)[] | null;
    };
    Accesscontrol_qr_GetQRAccessCodesWSRequest: { [key: string]: unknown };
    Accesscontrol_qr_GetQRAccessCodesWSResponse: {
      qrAccessCodes?:
        | components["schemas"]["Accesscontrol_qr_QRAccessCodeType"][]
        | null;
    };
    Accesscontrol_qr_QRAccessCodeType: {
      accesTokenUuid?: string | null;
      doorUuid?: string | null;
      expirationTimeSec?: number | null;
    };
    ActivateLocationLockdownActionRecordType: {
      locationUuid?: string | null;
      lockdownPlanUuid?: string | null;
      succeeded?: boolean | null;
    };
    ActivateLocationLockdownActionType: {
      locationLockdownPlanUuid?: string | null;
      locationUuid?: string | null;
    };
    ActivityEnum: ActivityEnum;
    AddOnLicense: AddOnLicenseEnum;
    AddOnLicenseInvoiceType: {
      cloudArchiveDays?: number | null;
      count?: number | null;
      description?: string | null;
      license?: components["schemas"]["AddOnLicense"];
      perceptionTypes?: components["schemas"]["PerceptionType"][] | null;
      price?: number | null;
    };
    AddOnLicenseStats: {
      addOnLicenseType?: components["schemas"]["AddOnLicense"];
      assignedCount?: number | null;
      deviceLicenseFamilyStats?:
        | components["schemas"]["DeviceLicenseFamilyStats"][]
        | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    AdvancedRMAType: {
      invoiceNeeded?: boolean | null;
      knownIssue?: boolean | null;
      managerialApproved?: boolean | null;
      managerialApprovedRMAs?: components["schemas"]["rctpRMAType"];
      rctpPartnerRequested?: boolean | null;
      rctpPartnerUuid?: string | null;
      rctpRMAs?: components["schemas"]["rctpRMAType"];
    };
    AirQualityIndexPollutantEnum: AirQualityIndexPollutantEnum;
    AlertActionRecordType: {
      policyAlertUuid?: string | null;
      status?: components["schemas"]["AlertActionStatusEnum"];
    };
    AlertActionStatusEnum: AlertActionStatusEnum;
    AlertMonitoringCatalogItem:
      | ({
          monthlyVerificationLimit?: number | null;
        } & {
          durationMonths?: number | null;
          productCode?: string | null;
          productType?: AlertMonitoringCatalogItemProductTypeEnum | null;
        })
      | null;
    AlertMonitoringEventRecordType: {
      alertMonitoringEventType?: components["schemas"]["AlertMonitoringRulesEventTypeEnum"];
      locationUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      threatCaseUuid?: string | null;
      timestampMs?: number | null;
    };
    AlertMonitoringLicenseType: {
      allowedDeviceCount?: number | null;
      claimKeyUuid?: string | null;
      createdOn?: string | null;
      deviceUuids?: (string | null)[] | null;
      firstAssignedDate?: string | null;
      licenseToUnassignEmailState?: AlertMonitoringLicenseLicenseToUnassignEmailStateEnum | null;
      licenseType?: components["schemas"]["License"];
      locationUuid?: string | null;
      maxDeleteDate?: string | null;
      monthlyVerificationLimit?: number | null;
      monthsReset?: number | null;
      orgUuid?: string | null;
      percentUsage?: number | null;
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: AlertMonitoringLicenseProductTypeEnum | null;
      remainingAlarms?: number | null;
      remainingVerifications?: number | null;
      state?: AlertMonitoringLicenseStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      uuid?: string | null;
      warningStage?: number | null;
    };
    /** Alert monitoring PIN to update. */
    AlertMonitoringPIN: {
      /** Timestamp in epoch ms when this PIN was created. */
      createdAtMillis?: number | null;
      /** PIN description. */
      description?: string | null;
      /** End date in epoch seconds when this PIN expires. */
      endDateEpochSecExclusive?: number | null;
      /** Set of location uuids associated with this PIN. */
      locationUuids: (string | null)[] | null;
      /** PIN name. */
      name?: string | null;
      /** Org uuid. */
      orgUuid?: string | null;
      /** Timestamp in epoch ms when this PIN was last rotated. */
      rotatedAtMillis?: number | null;
      /** Duration in days that determines when this PIN will be automatically rotated. If an expiration date is specified, that is when the first rotation will occur. Auto-rotation is disabled if this value is null. */
      rotationPeriodDays?: number | null;
      /** Determines whether this PIN can be shared. */
      shared?: boolean | null;
      /** Start date in epoch seconds when this PIN becomes active. */
      startDateEpochSecInclusive?: number | null;
      /** Timestamp in epoch ms when this PIN was last modified. */
      updatedAtMillis?: number | null;
      /** Set of user uuids associated with this PIN. */
      userUuids?: (string | null)[] | null;
      /** PIN uuid. */
      uuid?: string | null;
      /** PIN value. */
      value: string | null;
    };
    AlertMonitoringPinType: {
      description?: string | null;
      name?: string | null;
      pin?: string | null;
    };
    AlertMonitoringRuleTriggerType:
      | ({
          alertMonitoringRulesEventType?: components["schemas"]["AlertMonitoringRulesEventTypeEnum"];
          locationUuids?: (string | null)[] | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    AlertMonitoringRulesEventTypeEnum: AlertMonitoringRulesEventTypeEnum;
    AlertMonitoringSubmissionDelayIntervalType: {
      escalationDelayMinutes?: number | null;
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
      promptTheme?: components["schemas"]["NoonlightPromptTheme"];
    };
    AlertMonitoringThreatCaseType: {
      associatedDeviceUuids?: { [key: string]: number | null } | null;
      createdAtMillis?: number | null;
      deleted?: boolean | null;
      deviceUuid?: string | null;
      locationName?: string | null;
      locationUuid?: string | null;
      noonlightAlarmId?: string | null;
      noonlightVerificationId?: string | null;
      orgUuid?: string | null;
      policyAlertUuid?: string | null;
      policyAlertUuids?: (string | null)[] | null;
      promptTheme?: components["schemas"]["NoonlightPromptTheme"];
      sharedClipGroupUuid?: string | null;
      sirenSettings?: components["schemas"]["AMSirenSettingsType"];
      status?: components["schemas"]["ThreatCaseStatus"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      submissionTimestampMs?: number | null;
      submitDelayExpireTimestampMs?: number | null;
      timelineEventList?:
        | components["schemas"]["ThreatCaseTimelineEventType"][]
        | null;
      uuid?: string | null;
      verificationHistory?: components["schemas"]["VerificationHistory"];
    };
    Alertmonitoring_AMDeviceHistogramItem: {
      count?: number | null;
      deviceName?: string | null;
      deviceUuid?: string | null;
    };
    Alertmonitoring_AcceptAlertMonitoringTermsOfServiceForLocationRequest: {
      locationUuid?: string | null;
    };
    Alertmonitoring_AcceptAlertMonitoringTermsOfServiceRequest: {
      [key: string]: unknown;
    };
    Alertmonitoring_AcceptAlertMonitoringTermsOfServiceResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_AmModifiedBy: {
      armed?: boolean | null;
      email?: string | null;
      event?: AmModifiedByEventEnum | null;
      timestamp?: number | null;
      userUuid?: string | null;
    };
    Alertmonitoring_CancelThreatCaseWSRequest: {
      pin?: string | null;
      uuid?: string | null;
    };
    Alertmonitoring_CancelThreatCaseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      success?: boolean | null;
    };
    Alertmonitoring_CountType: {
      dayOfMonth?: number | null;
      deactivated?: number | null;
      month?: number | null;
      value?: number | null;
    };
    Alertmonitoring_CreateCustomPinForNoonlightWSRequest: {
      description?: string | null;
      locationUuid?: string | null;
      name?: string | null;
      pin?: string | null;
    };
    Alertmonitoring_CreateCustomPinForNoonlightWSResponse: {
      alreadyExists?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_CreateNoonlightSettingsForLocationRequest: {
      noonlightSettings?: components["schemas"]["NoonlightVersionedSettingsType"];
    };
    Alertmonitoring_CreateNoonlightSettingsForLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_CreatePinForNoonlightWSRequest: {
      description?: string | null;
      locationUuid?: string | null;
      name?: string | null;
    };
    Alertmonitoring_CreatePinForNoonlightWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      pin?: string | null;
    };
    Alertmonitoring_CumulativeChartData: {
      cumulativeMonthlyVerifications?:
        | components["schemas"]["Alertmonitoring_CountType"][]
        | null;
      dailyVerifications?:
        | components["schemas"]["Alertmonitoring_CountType"][]
        | null;
    };
    Alertmonitoring_DeleteNoonlightSettingsForLocationRequest: {
      locationUuid?: string | null;
    };
    Alertmonitoring_DeleteNoonlightSettingsForLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_DeletePinForNoonlightWSRequest: {
      locationUuid?: string | null;
      pin?: string | null;
    };
    Alertmonitoring_DeletePinForNoonlightWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_DisableLocationRequest: {
      locationUuid?: string | null;
      pin?: string | null;
    };
    Alertmonitoring_DisableLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_DismissThreatCaseWSRequest: {
      orgUuid?: string | null;
      pin?: string | null;
      uuid?: string | null;
    };
    Alertmonitoring_DismissThreatCaseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      success?: boolean | null;
    };
    Alertmonitoring_EnableLocationRequest: {
      locationUuid?: string | null;
      pin?: string | null;
    };
    Alertmonitoring_EnableLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_EscalateThreatCaseToAlarmWSRequest: {
      orgUuid?: string | null;
      uuid?: string | null;
    };
    Alertmonitoring_EscalateThreatCaseToAlarmWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_GenerateMonthlyVerificationsForYearReportForLocationWSRequest: {
      locationUuids?: (string | null)[] | null;
    };
    Alertmonitoring_GenerateMonthlyVerificationsForYearReportForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      verificationsPerMonthPerLocation?: {
        [key: string]: { [key: string]: number | null } | null;
      } | null;
    };
    Alertmonitoring_GenerateReportDataForLocationWSRequest: {
      endTimeMs?: number | null;
      locationUuid?: string | null;
      startTimeMs?: number | null;
    };
    Alertmonitoring_GenerateReportDataForLocationWSResponse: {
      cumulativeChartData?: components["schemas"]["Alertmonitoring_CumulativeChartData"];
      error?: boolean | null;
      errorMsg?: string | null;
      modifiedBy?:
        | components["schemas"]["Alertmonitoring_AmModifiedBy"][]
        | null;
      threatCaseReportItems?:
        | components["schemas"]["Alertmonitoring_ThreatCaseReportItem"][]
        | null;
      verificationsByDevice?:
        | components["schemas"]["Alertmonitoring_AMDeviceHistogramItem"][]
        | null;
    };
    Alertmonitoring_GetAlertMonitoringTripwireGroupCountWSRequest: {
      scheduleUuid?: string | null;
    };
    Alertmonitoring_GetAlertMonitoringTripwireGroupCountWSResponse: {
      count?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_GetNoonlightSettingsForLocationWSRequest: {
      includePreviousVersions?: boolean | null;
      locationUuid?: string | null;
    };
    Alertmonitoring_GetNoonlightSettingsForLocationWSResponse: {
      alertMonitoringSettings?: components["schemas"]["Alertmonitoring_NoonlightWSSettings"];
      error?: boolean | null;
      errorMsg?: string | null;
      previousVersions?:
        | components["schemas"]["NoonlightVersionedSettingsType"][]
        | null;
    };
    Alertmonitoring_GetNoonlightSettingsWSRequest: { [key: string]: unknown };
    Alertmonitoring_GetNoonlightSettingsWSResponse: {
      alertMonitoringSettings?: {
        [
          key: string
        ]: components["schemas"]["Alertmonitoring_NoonlightWSSettings"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_LocationStatusWSRequest: {
      locationUuid?: string | null;
    };
    Alertmonitoring_LocationStatusWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      status?: components["schemas"]["MonitoringEnableStatus"];
    };
    Alertmonitoring_NoonlightWSSettings: {
      acceptedTermsOfService?: boolean | null;
      badgeAuthDisablesMonitoring?: boolean | null;
      defaultDelay?: number | null;
      defaultEmergencyContact?: components["schemas"]["EmergencyContact"];
      defaultPromptTheme?: components["schemas"]["NoonlightPromptTheme"];
      deleted?: boolean | null;
      disabledOnMs?: number | null;
      emergencyContacts?:
        | components["schemas"]["EmergencyResponseContactsScheduleType"][]
        | null;
      enabled?: boolean | null;
      enabledOnMs?: number | null;
      entryInstructions?: string | null;
      locationUuid?: string | null;
      manualEscalationSettings?: components["schemas"]["NoonlightScheduleType"];
      modifiedByEmail?: string | null;
      modifiedByIntegration?: boolean | null;
      modifiedByMetadata?: string | null;
      modifiedByUuid?: string | null;
      modifiedTimeMs?: number | null;
      monitoringMode?: NoonlightWSSettingsMonitoringModeEnum | null;
      oneTimePauses?: components["schemas"]["NoonlightScheduleType"][] | null;
      oneTimeSchedules?:
        | components["schemas"]["NoonlightScheduleType"][]
        | null;
      orgUuid?: string | null;
      pins?: components["schemas"]["AlertMonitoringPinType"][] | null;
      rules?: (string | null)[] | null;
      schedules?: components["schemas"]["NoonlightScheduleType"][] | null;
      status?: components["schemas"]["MonitoringEnableStatus"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      talkdownEnabled?: boolean | null;
    };
    Alertmonitoring_OrgStatusWSRequest: { [key: string]: unknown };
    Alertmonitoring_OrgStatusWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      locationStatuses?: {
        [key: string]: components["schemas"]["MonitoringEnableStatus"];
      } | null;
    };
    Alertmonitoring_ResetAlertMonitoringTripwireGroupCountWSRequest: {
      scheduleUuid?: string | null;
      timestampMs?: number | null;
    };
    Alertmonitoring_ResetAlertMonitoringTripwireGroupCountWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_ThreatCaseReportItem: {
      alertNotFound?: boolean | null;
      alertTypes?: components["schemas"]["ActivityEnum"][] | null;
      associatedDeviceUuids?: { [key: string]: number | null } | null;
      createdAtMillis?: number | null;
      deleted?: boolean | null;
      deviceName?: string | null;
      deviceNotFound?: boolean | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      deviceUuid?: string | null;
      locationName?: string | null;
      locationUuid?: string | null;
      noonlightAlarmId?: string | null;
      noonlightVerificationId?: string | null;
      orgUuid?: string | null;
      policyAlertUuid?: string | null;
      policyAlertUuids?: (string | null)[] | null;
      promptTheme?: components["schemas"]["NoonlightPromptTheme"];
      reason?: string | null;
      result?: string | null;
      sharedClipGroupUuid?: string | null;
      sirenSettings?: components["schemas"]["AMSirenSettingsType"];
      status?: components["schemas"]["ThreatCaseStatus"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      submissionTimestampMs?: number | null;
      submitDelayExpireTimestampMs?: number | null;
      timelineEventList?:
        | components["schemas"]["ThreatCaseTimelineEventType"][]
        | null;
      uuid?: string | null;
      verificationHistory?: components["schemas"]["VerificationHistory"];
    };
    Alertmonitoring_UpdateNoonlightSettingsForLocationRequest: {
      noonlightSettings?: components["schemas"]["NoonlightVersionedSettingsType"];
    };
    Alertmonitoring_UpdateNoonlightSettingsForLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Alertmonitoring_pin_BasePinWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      pin?: components["schemas"]["AlertMonitoringPIN"];
    };
    Alertmonitoring_pin_BulkPinsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failedUsers?: (string | null)[] | null;
      pins?: components["schemas"]["AlertMonitoringPIN"][] | null;
    };
    Alertmonitoring_pin_BulkProvisionPinsWSRequest: {
      /** End date in epoch seconds when these PINs expire. PINs will never expire if this value is left null. */
      endDateEpochSecExclusive?: number | null;
      /** Set of location uuids these PINs are assigned to. */
      locationUuids: (string | null)[] | null;
      /** If enabled, sends an email to the assigned users notifying them of their new PIN code. */
      notifyUsers?: boolean | null;
      /** Length of PINs to be generated. Accepts length between 4 and 16. */
      pinLength: number | null;
      /** Duration in days that determines when this PIN will be automatically rotated. If an expiration date is specified, that is when the first rotation will occur. Auto-rotation is disabled if this value is null. */
      rotationPeriodDays?: number | null;
      /** Start date in epoch seconds when these PINs become active. PINs activate immediately if this value is left null. */
      startDateEpochSecInclusive?: number | null;
      /** Set of user uuids to provision PINs for. */
      userUuids: (string | null)[] | null;
    };
    Alertmonitoring_pin_BulkRotatePinsWSRequest: {
      /** If enabled, sends an email to the assigned users notifying them of their new PIN code. */
      notifyUsers?: boolean | null;
      /** Length of PINs to be generated. Accepts length between 4 and 16. */
      pinLength: number | null;
      /** Uuids of PINs to rotate in bulk. */
      pinUuids: (string | null)[] | null;
    };
    Alertmonitoring_pin_CreatePinWSRequest: {
      /** If enabled, sends an email to the user assigned this PIN notifying them of their new PIN code. If no user is assigned, notifications will not be sent. */
      notifyUser?: boolean | null;
      pin: components["schemas"]["AlertMonitoringPIN"];
    };
    Alertmonitoring_pin_DeletePinWSRequest: {
      /** Uuid of the alert monitoring PIN to delete. */
      pinUuid: string | null;
    };
    Alertmonitoring_pin_FindPinsByLocationAndUserWSRequest: {
      /** Location uuid to filter search results with. */
      locationUuid?: string | null;
      /** User uuid to filter search results with. */
      userUuid?: string | null;
    };
    Alertmonitoring_pin_FindPinsByOrgWSRequest: {
      filter?: components["schemas"]["PinQueryFilter"];
      pageRequest?: components["schemas"]["DynamoPageRequest"];
    };
    Alertmonitoring_pin_FindPinsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lastEvaluatedKey?: string | null;
      pins?: components["schemas"]["AlertMonitoringPIN"][] | null;
    };
    Alertmonitoring_pin_GetAvailableALMPinCodeWSRequest: {
      /** Length of PIN to be generated. */
      pinLength: number | null;
    };
    Alertmonitoring_pin_GetAvailableALMPinCodeWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      pinCode?: string | null;
    };
    Alertmonitoring_pin_GetPinWSRequest: {
      /** Uuid of the alert monitoring PIN to retrieve. */
      pinUuid: string | null;
    };
    Alertmonitoring_pin_RotatePinWSRequest: {
      /** If enabled, sends an email to the user assigned this PIN notifying them of their new PIN code. If no user is assigned, notifications will not be sent. */
      notifyUser?: boolean | null;
      /** Uuid of the PIN to rotate. */
      pinUuid: string | null;
    };
    Alertmonitoring_pin_UpdatePinWSRequest: {
      /** If enabled, sends an email to the user assigned this PIN notifying them of their current PIN code. If no user is assigned, notifications will not be sent. */
      notifyUser?: boolean | null;
      pin: components["schemas"]["AlertMonitoringPIN"];
      /** If set to true, only the non-null fields will be considered for this update. */
      selectiveUpdate?: boolean | null;
    };
    AlteredView: {
      crop?: components["schemas"]["CroppedPermyriadRect"];
      dewarp?: components["schemas"]["DewarpedView"];
    };
    AmtSettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      email?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      password?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: number | null;
      webhookSignatureSecret?: string | null;
    };
    AperioDoorExtension:
      | ({
          aperioDoorDeviceId?: (string | null)[] | null;
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          uuid?: string | null;
        } & {
          aperioDoorDeviceId: unknown;
          aperioDoorId: unknown;
          aperioGatewayId: unknown;
        })
      | null;
    AperioDoorExtensionShadow:
      | ({
          activatorState?: number | null;
          activatorStateUpdatedAtMs?: number | null;
          aperioDoorDeviceId?: (string | null)[] | null;
          aperioGatewayId?: (string | null)[] | null;
          aperioId?: string | null;
          clockRetrievedAtMs?: number | null;
          connected?: boolean | null;
          connectionStateUpdatedAtMs?: number | null;
          deviceClockSec?: number | null;
          deviceTimezone?: number | null;
          doorMode?: number | null;
          doorModeUpdatedAtMs?: number | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
          dtcsUpdatedAtMs?: number | null;
          gatewayComponentId?: string | null;
          handleState?: number | null;
          handleStateUpdatedAtMs?: number | null;
          keyCylinderState?: number | null;
          keyCylinderStateUpdatedAtMs?: number | null;
          lastSeenMs?: number | null;
          name?: string | null;
          removed?: boolean | null;
          stateUpdatedAtMs?: number | null;
          tamperState?: number | null;
          tamperStateUpdatedAtMs?: number | null;
        } & {
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    AperioDoorExtensionStateEvent:
      | ({
          activatorState?: number | null;
          activatorStateUpdatedAtMs?: number | null;
          aperioId?: string | null;
          clockRetrievedAtMs?: number | null;
          componentCompositeUuid?: string | null;
          connected?: boolean | null;
          connectionStateUpdatedAtMs?: number | null;
          deviceClockSec?: number | null;
          deviceTimezone?: number | null;
          doorMode?: number | null;
          doorModeUpdatedAtMs?: number | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
          handleState?: number | null;
          handleStateUpdatedAtMs?: number | null;
          keyCylinderState?: number | null;
          keyCylinderStateUpdatedAtMs?: number | null;
          removed?: boolean | null;
          tamperState?: number | null;
          tamperStateUpdatedAtMs?: number | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    AperioDoorPositionIndicator:
      | ({
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
          dpiType?: components["schemas"]["DoorPositionIndicatorEnumType"];
          normalState?: components["schemas"]["NormalStateEnumType"];
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          uuid?: string | null;
        })
      | null;
    AperioDoorReader:
      | ({
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
          disableCardReader?: boolean | null;
          disableKeypad?: boolean | null;
          disableWaveToUnlock?: boolean | null;
          otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
          readerType?: components["schemas"]["DoorReaderEnumType"];
          remoteUnlockAudioFeedbackEnabled?: boolean | null;
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          uuid?: string | null;
        })
      | null;
    AperioDoorRelay:
      | ({
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
          deviceId?: (string | null)[] | null;
          relayType?: components["schemas"]["DoorRelayEnumType"];
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          uuid?: string | null;
        })
      | null;
    AperioDoorRequestToExit:
      | ({
          aperioDoorId?: string | null;
          aperioGatewayId?: (string | null)[] | null;
          intentOnly?: boolean | null;
          intentOnlyEvents?: boolean | null;
          normalState?: components["schemas"]["NormalStateEnumType"];
          rexType?: components["schemas"]["RequestToExitEnumType"];
        } & {
          baseType?: components["schemas"]["ComponentBaseEnumType"];
          createdAtMillis?: number | null;
          name?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
          portImmutable?: boolean | null;
          type?: components["schemas"]["ComponentEnumType"];
          updatedAtMillis?: number | null;
          uuid?: string | null;
        })
      | null;
    AperioDtcEvent:
      | ({
          aperioDeviceId?: (string | null)[] | null;
          componentCompositeUuid?: string | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    AperioGateway: {
      aperioGatewayId?: (string | null)[] | null;
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      hwVersion?: (string | null)[] | null;
      name?: string | null;
      oemCode?: string | null;
      oemGeneratedAtMs?: number | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    AperioGatewayConnectionStateChangeEvent:
      | ({
          aperioId?: (string | null)[] | null;
          connected?: boolean | null;
          stateChangedAtMs?: number | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    AperioGatewayShadow:
      | ({
          aperioId?: (string | null)[] | null;
          connected?: boolean | null;
          connectionStateUpdatedAtMs?: number | null;
          deviceClockSec?: number | null;
          deviceTimezone?: number | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
          firmwareVersion?: string | null;
          hwVersion?: (string | null)[] | null;
          ipAddress?: string | null;
          lastSeenMs?: number | null;
          oemCode?: string | null;
          oemCodeFetchedAtMs?: number | null;
          protocolVersionMajor?: number | null;
          protocolVersionMinor?: number | null;
          protocolVersionPatch?: number | null;
          rawTamperState?: number | null;
          stateUpdatedAtMs?: number | null;
        } & {
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    AperioGatewayStateEvent:
      | ({
          aperioId?: (string | null)[] | null;
          connected?: boolean | null;
          connectionStateUpdatedAtMs?: number | null;
          deviceClockSec?: number | null;
          deviceTimezone?: number | null;
          dtcs?: components["schemas"]["DtcInfo"][] | null;
          firmwareVersion?: string | null;
          hwVersion?: (string | null)[] | null;
          ipAddress?: string | null;
          lastSeenMs?: number | null;
          oemCode?: string | null;
          oemCodeFetchedAtMs?: number | null;
          protocolVersionMajor?: number | null;
          protocolVersionMinor?: number | null;
          protocolVersionPatch?: number | null;
          rawTamperState?: number | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    AperioTamperStateEvent:
      | ({
          aperioDoorId?: string | null;
          rawState?: number | null;
          stateChangedAtMs?: number | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    AperioType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    } | null;
    ApiClientTypeEnum: ApiClientTypeEnum;
    ApiTokenApplicationType: {
      authType?: components["schemas"]["ApiTokenAuthTypeEnum"];
      authenticationTokenHash?: string | null;
      clientDetails?: { [key: string]: string | null } | null;
      clientType?: components["schemas"]["ApiClientTypeEnum"];
      csr?: string | null;
      displayName?: string | null;
      orgUuid?: string | null;
      permissionGroupUuid?: string | null;
      tokenUuid?: string | null;
    };
    ApiTokenAuthTypeEnum: ApiTokenAuthTypeEnum;
    ApiTokenEventOriginator:
      | ({
          tokenName?: string | null;
          tokenUuid?: string | null;
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    ApiTokenLockdownEventOriginator:
      | ({
          tokenName?: string | null;
          tokenUuid?: string | null;
        } & {
          type?: components["schemas"]["LockdownEventOriginatorEnumType"];
        })
      | null;
    ApiTokenType: {
      allowedRequetsPerSecond?: number | null;
      authType?: components["schemas"]["ApiTokenAuthTypeEnum"];
      authenticationTokenHash?: string | null;
      cert?: string | null;
      certFingerprint?: string | null;
      clientDetails?: { [key: string]: string | null } | null;
      clientType?: components["schemas"]["ApiClientTypeEnum"];
      csr?: string | null;
      displayName?: string | null;
      hashed?: boolean | null;
      orgUuid?: string | null;
      permissionGroupUuid?: string | null;
      tokenUuid?: string | null;
    };
    AspectRatio: {
      height?: number | null;
      width?: number | null;
    };
    AudioExpressionDetectionConfig: {
      category?: components["schemas"]["ActivityEnum"];
      confidence_min?: number | null;
      expression?: string | null;
      loudness_min?: number | null;
    };
    AudioGatewayStatusEnum: AudioGatewayStatusEnum;
    AudioLoudActivityEventType:
      | ({
          audioLufsThreshold?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    AudioParamConfig: {
      expressions?:
        | components["schemas"]["AudioExpressionDetectionConfig"][]
        | null;
      significant_loudness_min?: number | null;
    };
    AudioPlaybackActionRecordType: {
      audioClipUuid?: string | null;
      audioGatewayStatuses?: {
        [key: string]: components["schemas"]["AudioGatewayStatusEnum"];
      } | null;
    };
    AudioPlaybackActionType: {
      audioClipUuid?: string | null;
      audioGateways?: (string | null)[] | null;
      loopDurationSec?: number | null;
      playCount?: number | null;
    };
    AudioPolicyType: {
      defaultTriggers?: components["schemas"]["AudioTriggerType"][] | null;
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["AudioScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    AudioScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["AudioTriggerType"][] | null;
    };
    AudioTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      threshold?: number | null;
    };
    AudioUploadMetadataType: {
      audioPlaintext?: string | null;
      audioSSML?: string | null;
      description?: string | null;
      displayName?: string | null;
      durationMs?: number | null;
      mutable?: boolean | null;
      orgUuid?: string | null;
      s3ObjectKey?: string | null;
      uuid?: string | null;
      voiceId?: string | null;
    };
    Audiogateway_AudioGatewayOfflineLanStreamingInfo: {
      accessToken?: string | null;
      lanAddresses?: (string | null)[] | null;
    };
    Audiogateway_DeleteAudioGatewayWSRequest: {
      gatewayUuid?: string | null;
      mummify?: boolean | null;
    };
    Audiogateway_DeleteAudioGatewayWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: DeleteAudioGatewayWSResponseResponseStatusEnum | null;
    };
    Audiogateway_GetAudioGatewayConfigWSRequest: {
      audioGatewayUuid?: string | null;
    };
    Audiogateway_GetAudioGatewayConfigWSResponse: {
      config?: components["schemas"]["IAudioUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Audiogateway_GetAudioGatewayOfflineLanStreamingInfoWSRequest: {
      [key: string]: unknown;
    };
    Audiogateway_GetAudioGatewayOfflineLanStreamingInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      info?: {
        [
          key: string
        ]: components["schemas"]["Audiogateway_AudioGatewayOfflineLanStreamingInfo"];
      } | null;
    };
    Audiogateway_GetAudioSeekpointsWSRequest: {
      deviceUuid?: string | null;
      duration?: number | null;
      startTime?: number | null;
    };
    Audiogateway_GetAudioSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
    };
    Audiogateway_GetFullAudioGatewayStateWSRequest: {
      deviceUuid?: string | null;
      force?: boolean | null;
    };
    Audiogateway_GetFullAudioGatewayStateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      fullAudioGatewayState?: components["schemas"]["FullDeviceStateType"];
    };
    Audiogateway_GetMediaUrisWSRequest: {
      gatewayUuid?: string | null;
    };
    Audiogateway_GetMediaUrisWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lanCheckUrls?: (string | null)[] | null;
      lanLiveMpdUris?: (string | null)[] | null;
      lanLiveOpusUris?: (string | null)[] | null;
      lanVodMpdUrisTemplates?: (string | null)[] | null;
      wanLiveMpdUri?: string | null;
      wanLiveOpusUri?: string | null;
      wanVodMpdUriTemplate?: string | null;
    };
    Audiogateway_GetMinimalAudioGatewayStatesWSRequest: {
      [key: string]: unknown;
    };
    Audiogateway_GetMinimalAudioGatewayStatesWSResponse: {
      audioGatewayStates?:
        | components["schemas"]["MinimalAudioGatewayStateType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Audiogateway_RebootAudioGatewayWSRequest: {
      audioGatewayUuid: string | null;
    };
    Audiogateway_UpdateAudioGatewayConfigWSRequest: {
      /** Adjust boost for external mic.  Integer between 0 and 3. */
      audioExternalMicBoost?: number | null;
      /** Adjust volume for external mic.  Integer between 0 and 63. */
      audioExternalMicVolume?: number | null;
      /** Adjust volume for external speaker.  Integer between 0 and 127. */
      audioExternalSpeakerVolume?: number | null;
      audioInternalMicAecEnabled?: boolean | null;
      /** Adjust boost for internal mic.  Integer between 0 and 3. */
      audioInternalMicBoost?: number | null;
      /** Adjust volume for internal mic.  Integer between 0 and 63. */
      audioInternalMicVolume?: number | null;
      /** Adjust volume for internal speaker.  Integer between 0 and 127. */
      audioInternalSpeakerVolume?: number | null;
      /** Enable/disable audio recording.  Cannot set to true unless organization settings allow it */
      audioRecord?: boolean | null;
      audioUseExternalMic?: boolean | null;
      audioUseExternalSpeaker?: boolean | null;
      /** Enable/disable device mic.  Cannot set to true unless organization settings allow it */
      deviceMicEnabled?: boolean | null;
      deviceSpeakerEnabled?: boolean | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      uuid?: string | null;
    };
    Audiogateway_UpdateAudioGatewayConfigWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Audiogateway_UpdateAudioGatewayDetailsWSRequest: {
      associatedCameras?: (string | null)[] | null;
      associatedCamerasUpdated?: boolean | null;
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      description?: string | null;
      descriptionUpdated?: boolean | null;
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      name?: string | null;
      nameUpdated?: boolean | null;
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      uuid?: string | null;
    };
    Audiogateway_UpdateAudioGatewayDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Audioplayback_CancelLoopingAudioPlaybackWSRequest: {
      audioDevices?: (string | null)[] | null;
    };
    Audioplayback_CancelLoopingAudioPlaybackWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      successMap?: { [key: string]: boolean | null } | null;
    };
    Audioplayback_DeleteAudioUploadMetadataWSRequest: {
      audioUploadUuid?: string | null;
    };
    Audioplayback_DeleteAudioUploadMetadataWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Audioplayback_GetAudioUploadMetadataForOrgWSRequest: {
      [key: string]: unknown;
    };
    Audioplayback_GetAudioUploadMetadataForOrgWSResponse: {
      audioUploadMetadata?:
        | components["schemas"]["AudioUploadMetadataType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Audioplayback_PlayAudioUploadWSRequest: {
      audioGatewayUuids?: (string | null)[] | null;
      audioUploadUuid?: string | null;
      loopDurationSec?: number | null;
      playCount?: number | null;
    };
    Audioplayback_PlayAudioUploadWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      success?: boolean | null;
    };
    Audioplayback_UpdateAudioUploadMetadataWSRequest: {
      audioUploadUuid?: string | null;
      newDescription?: string | null;
      newDisplayName?: string | null;
    };
    Audioplayback_UpdateAudioUploadMetadataWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Audioplayback_UploadAudioPcmWSResponse: {
      encodingFailure?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      uuid?: string | null;
    };
    Audioplayback_UploadAudioTextWSRequest: {
      audioPlaintext?: string | null;
      audioSSML?: string | null;
      description?: string | null;
      displayName?: string | null;
      voiceId?: string | null;
    };
    Audioplayback_UploadAudioTextWSResponse: {
      encodingFailure?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      invalidSSML?: boolean | null;
      synthesisFailure?: boolean | null;
      uuid?: string | null;
    };
    AuditRuleTriggerType:
      | ({
          auditEvent?: components["schemas"]["SimpleAuditEventType"];
          userUuids?: (string | null)[] | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    AuthDecisionSourceEnum: AuthDecisionSourceEnum;
    AuxiliaryEnumType: AuxiliaryEnumType;
    AuxiliaryInputPhysicalPortEnumType: AuxiliaryInputPhysicalPortEnumType;
    AuxiliaryInputPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["AuxiliaryInputPhysicalPortEnumType"];
      supervisionConfiguration?: components["schemas"]["PortSupervisionConfigurationType"];
    };
    AuxiliaryRelayPhysicalPortEnumType: AuxiliaryRelayPhysicalPortEnumType;
    AuxiliaryRelayPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["AuxiliaryRelayPhysicalPortEnumType"];
    };
    AvigilonAltaType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
          doorsValidated?: boolean | null;
          email?: string | null;
          eventToWebhookIdMap?: { [key: string]: number | null } | null;
          eventToWebhookMap?: {
            [key: string]: components["schemas"]["WebhookMapEntry"];
          } | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          password?: string | null;
          refreshToken?: string | null;
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          webhookId?: number | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    AwsSettings: {
      accessKey?: string | null;
      bucketName?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      secretKey?: string | null;
    };
    BackblazeSettings: {
      applicationKey?: string | null;
      applicationKeyId?: string | null;
      bucketName?: string | null;
      enabled?: boolean | null;
    };
    BadgeIntegrationDefaultOptions: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      defaultOptionsEnabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      saveClips?: boolean | null;
    } | null;
    BadgeIntegrationDoorInfoType: {
      assignedCameraList?: (string | null)[] | null;
      clipDuration?: number | null;
      doorName?: string | null;
      leadingSeconds?: number | null;
      locationUuid?: string | null;
      remoteUnlock?: boolean | null;
    } | null;
    BadgeIntegrationRuleTriggerType: {
      type?: components["schemas"]["RuleTriggerTypeEnum"];
    } | null;
    BadgeIntegrationSettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      misconfiguredDoors?: (number | null)[] | null;
      placeId?: number | null;
      placeName?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: number | null;
    } | null;
    BadgeTemplate: {
      createdAtMillis?: number | null;
      elements?: components["schemas"]["BaseBadgeTemplateElement"][] | null;
      front?: boolean | null;
      name?: string | null;
      orgUuid?: string | null;
      portrait?: boolean | null;
      updatedAtMillis?: number | null;
      uuid?: string | null;
      version?: string | null;
    };
    BadgeTemplateElementEnum: BadgeTemplateElementEnum;
    BadgeTemplateImage: {
      createdAtMillis?: number | null;
      imageS3Key?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      originalFileName?: string | null;
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    BadgeTemplateImageSelectiveUpdate: {
      createdAtMillis?: number | null;
      imageS3Key?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      originalFileName?: string | null;
      updatedAtMillis?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      uuid?: string | null;
    };
    BadgeTemplateSelectiveUpdate: {
      createdAtMillis?: number | null;
      elements?: components["schemas"]["BaseBadgeTemplateElement"][] | null;
      front?: boolean | null;
      name?: string | null;
      orgUuid?: string | null;
      portrait?: boolean | null;
      updatedAtMillis?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      uuid?: string | null;
      version?: string | null;
    };
    Badgereader_DeleteBadgeReaderWSRequest: {
      badgeReaderUuid: string | null;
      mummify: boolean | null;
    };
    Badgereader_DeleteBadgeReaderWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: DeleteBadgeReaderWSResponseResponseStatusEnum | null;
    };
    Badgereader_GetBadgeReaderConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_ExternalReadableFacetedUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Badgereader_GetBadgeReaderFullStateWSResponse: {
      fullState?: components["schemas"]["FullDeviceStateType"];
    };
    Badgereader_GetBadgeReaderMinimalStateListWSResponse: {
      minimalStates?: components["schemas"]["MinimalDeviceStateType"][] | null;
    };
    Badgereader_RebootBadgeReaderWSRequest: {
      badgeReaderUuid: string | null;
    };
    Badgereader_UpdateBadgeReaderConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_ExternalUpdateableFacetedUserConfig"];
    };
    Badgereader_UpdateBadgeReaderDetailsWSRequest: {
      description?: string | null;
      deviceUuid?: string | null;
      directionRadians?: number | null;
      floorNumber?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
    };
    BaseApiResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    BaseBadgeTemplateElement: (
      | components["schemas"]["CustomTextElement"]
      | components["schemas"]["UserMetadataTextElement"]
      | components["schemas"]["UserCustomMetadataTextElement"]
      | components["schemas"]["CustomImageElement"]
      | components["schemas"]["UserProfilePhotoElement"]
    ) & {
      type?: components["schemas"]["BadgeTemplateElementEnum"];
      x?: number | null;
      y?: number | null;
    };
    BaseCatalogItem: {
      durationMonths?: number | null;
      productCode?: string | null;
      productType?: BaseCatalogItemProductTypeEnum | null;
    };
    BaseClaimKey: {
      /** Date/time when claiming of licenses represented by this claim key ended successfully. */
      claimEndDate?: string | null;
      /** Date/time when claiming of licenses represented by this claim key started. */
      claimStartDate?: string | null;
      createdOn?: string | null;
      endDate?: string | null;
      expirationEmailState?: BaseClaimKeyExpirationEmailStateEnum | null;
      gracePeriodEndDate?: string | null;
      /** Masked claim code for redeemed claim keys. This field can be used for reference purposes. */
      maskedClaimCode?: string | null;
      orgUuid?: string | null;
      renewedByClaimKeyUuid?: string | null;
      /** Externally supplied request id to prevent creation of unnecessary claim keys due to reprocessing or bugs. Unnecessary claim keys are claim keys that are not tied to anything in the external system.  This property is unique for all claim keys. */
      requestId?: string | null;
      returnHistory?: components["schemas"]["ClaimKeyReturnEvent"][] | null;
      state?: BaseClaimKeyStateEnum | null;
      trial?: boolean | null;
      type?: BaseClaimKeyTypeEnum | null;
      updatedOn?: string | null;
      uuid?: string | null;
    };
    BaseComponentType: (
      | components["schemas"]["RhombusOsdpDoorReaderType"]
      | components["schemas"]["OsdpDoorReaderType"]
      | components["schemas"]["WiegandDoorReaderType"]
      | components["schemas"]["IntegratedDoorPositionIndicatorType"]
      | components["schemas"]["IntegratedRequestToExitType"]
      | components["schemas"]["IntegratedDoorRelayType"]
      | components["schemas"]["IntegratedGenericRelayType"]
      | components["schemas"]["IntegratedGenericInputType"]
      | components["schemas"]["IntegratedGenericButtonType"]
      | components["schemas"]["AperioDoorReader"]
      | components["schemas"]["AperioGateway"]
      | components["schemas"]["AperioDoorExtension"]
      | components["schemas"]["AperioDoorRelay"]
      | components["schemas"]["AperioDoorPositionIndicator"]
    ) & {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    BaseDoorStateOverride: {
      originator?: components["schemas"]["BaseEventOriginator"];
      requestedAtMillis?: number | null;
      type?: components["schemas"]["ManualDoorStateChangeEnum"];
    };
    BaseDoorStateOverride_Minimal: {
      originator?: components["schemas"]["BaseEventOriginator_Minimal"];
      requestedAtMillis?: number | null;
      type?: components["schemas"]["ManualDoorStateChangeEnum_Minimal"];
    };
    BaseEventOriginator: (
      | components["schemas"]["SupportAuthorityEventOriginator"]
      | components["schemas"]["ApiTokenEventOriginator"]
      | components["schemas"]["UserEventOriginator"]
      | components["schemas"]["RuleEventOriginator"]
      | components["schemas"]["ComponentCompositeEventOriginator"]
    ) & {
      type?: components["schemas"]["EventOriginatorEnum"];
    };
    BaseEventOriginator_Minimal: (
      | components["schemas"]["SupportAuthorityEventOriginator"]
      | components["schemas"]["ApiTokenEventOriginator"]
      | components["schemas"]["UserEventOriginator"]
      | components["schemas"]["RuleEventOriginator"]
      | components["schemas"]["ComponentCompositeEventOriginator"]
    ) & {
      type?: components["schemas"]["EventOriginatorEnum_Minimal"];
    };
    BaseFirstInReset: components["schemas"]["DailyFirstInReset"] & {
      type?: components["schemas"]["FirstInResetEnum"];
    };
    BaseLicenseType: {
      claimKeyUuid?: string | null;
      createdOn?: string | null;
      firstAssignedDate?: string | null;
      licenseToUnassignEmailState?: BaseLicenseLicenseToUnassignEmailStateEnum | null;
      maxDeleteDate?: string | null;
      orgUuid?: string | null;
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: BaseLicenseProductTypeEnum | null;
      state?: BaseLicenseStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      uuid?: string | null;
    };
    BaseLocationLockdownEventOriginator: {
      type?: components["schemas"]["LockdownEventOriginatorEnumType"];
    };
    BaseLockdownPlanType: components["schemas"]["LocationLockdownPlanType"] & {
      activationPlan?: components["schemas"]["LockdownActivationPlanType"];
      createdAtMillis?: number | null;
      deactivationPlan?: components["schemas"]["LockdownDeactivationPlanType"];
      defaultLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
      doorLockdownStateMap?: {
        [key: string]: components["schemas"]["DoorLockdownStateEnumType"];
      } | null;
      name?: string | null;
      orgUuid?: string | null;
      physicalAccess?: components["schemas"]["LockdownPhysicalAccessType"];
      scopeUuid?: string | null;
      testPlan?: components["schemas"]["LockdownTestPlanType"];
      type?: components["schemas"]["LockdownPlanScopeEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    BaseLockdownStateEventType: {
      createdAtMillis?: number | null;
      followingTestPlan?: boolean | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
      originator?: components["schemas"]["BaseLocationLockdownEventOriginator"];
      stateChangedAtMillis?: number | null;
      type?: components["schemas"]["LockdownStateEventEnumType"];
    };
    BasePolicyAlertType: (
      | components["schemas"]["PolicyAlertV2Type"]
      | components["schemas"]["AccessControlledDoorPolicyAlertType"]
    ) & {
      alertMonitoringThreatCaseUuid?: string | null;
      alertMonitoringVerified?: boolean | null;
      clipLocationMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      clipLocationMapV2?: { [key: string]: string | null } | null;
      delayedProcessing?: boolean | null;
      deleted?: boolean | null;
      durationSec?: number | null;
      finalized?: boolean | null;
      locationUuid?: string | null;
      notificationSent?: boolean | null;
      orgUuid?: string | null;
      policyAlertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      saved?: boolean | null;
      shared?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Natural language description of the alert */
      textDescription?: string | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      thumbnailLocationV2?: string | null;
      timestampMs?: number | null;
      type?: BasePolicyAlertTypeEnum | null;
      uuid?: string | null;
    };
    BaseRuleTriggerType: (
      | components["schemas"]["DeviceActivityRuleTriggerType"]
      | components["schemas"]["AuditRuleTriggerType"]
      | components["schemas"]["AlertMonitoringRuleTriggerType"]
      | components["schemas"]["DiagnosticRuleTriggerType"]
      | components["schemas"]["BadgeIntegrationRuleTriggerType"]
      | components["schemas"]["ScheduledRuleTriggerType"]
      | components["schemas"]["VisionLLMRuleTriggerType"]
      | components["schemas"]["RecurringRuleTriggerType"]
      | components["schemas"]["LocationLockdownActivatedRuleTriggerType"]
      | components["schemas"]["LocationLockdownDeactivatedRuleTriggerType"]
      | components["schemas"]["ButtonIntegrationRuleTriggerType"]
    ) & {
      type?: components["schemas"]["RuleTriggerTypeEnum"];
    };
    BaseSavedScheduleType: {
      mutable?: boolean | null;
      name?: string | null;
      oneTimeUse?: boolean | null;
      orgUuid?: string | null;
      strategy?: BaseSavedScheduleStrategyEnum | null;
      uuid?: string | null;
    };
    BaseSavedScheduleType_Minimal: {
      mutable?: boolean | null;
      name?: string | null;
      oneTimeUse?: boolean | null;
      orgUuid?: string | null;
      strategy?: MinimalStrategyEnum | null;
      uuid?: string | null;
    };
    BatchRegistrationTokenUsageResult: {
      di?: string | null;
      hi?: string | null;
      rs?: string | null;
      ts?: number | null;
    };
    Ble_BleDeviceMap: {
      keyToSecureBeacon?: { [key: string]: (string | null)[] | null } | null;
    };
    Ble_BleRegisteredDeviceWSType: {
      deleted?: boolean | null;
      deviceUuid?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      name?: string | null;
      secret?: (string | null)[] | null;
      updateToFirmwareVersion?: string | null;
    };
    Ble_BleUnregisteredHardwareWSType: {
      mac?: string | null;
      secret?: (string | null)[] | null;
    };
    Ble_GetBaseStationsWSRequest: { [key: string]: unknown };
    Ble_GetBaseStationsWSResponse: {
      baseStations?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Ble_GetSecureSecretForRegisteredWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      hardwareVariationToFirmwareDownloadUrl?: {
        [key: string]: { [key: string]: string | null } | null;
      } | null;
      keyToRegisteredDevice?: {
        [key: string]: components["schemas"]["Ble_BleRegisteredDeviceWSType"];
      } | null;
    };
    Ble_GetSecureSecretForUnregisteredWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      keyToUnregisteredDevice?: {
        [
          key: string
        ]: components["schemas"]["Ble_BleUnregisteredHardwareWSType"];
      } | null;
    };
    Ble_GetSensorHardwareFirmwareUpdateDetailsRequest: {
      [key: string]: unknown;
    };
    Ble_GetSensorHardwareFirmwareUpdateDetailsResponse: {
      hardwareVariationToFirmwareDownloadUrl?: {
        [key: string]: { [key: string]: string | null } | null;
      } | null;
    };
    Ble_RegisterSensorWSRequest: {
      bleData?: (string | null)[] | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      serialNum?: string | null;
    };
    Ble_RegisterSensorWSResponse: {
      deviceUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Ble_UnregisterSensorWSRequest: {
      deviceUuid?: string | null;
    };
    Ble_UnregisterSensorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failureReason?: string | null;
      success?: boolean | null;
    };
    BoardPhysicalPortConfigType: {
      boardNum?: number | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      portMap?: {
        [key: string]: components["schemas"]["PhysicalPortType"];
      } | null;
    };
    BodyPart: {
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: { [key: string]: unknown } | null;
      headers?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parameterizedHeaders?:
        | ({
            empty?: boolean | null;
          } & {
            [key: string]:
              | components["schemas"]["ParameterizedHeader"][]
              | null;
          })
        | null;
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
    } | null;
    BoundingBoxType: {
      bottom?: number | null;
      left?: number | null;
      right?: number | null;
      top?: number | null;
    };
    BoxSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      enterpriseId?: string | null;
      folderId?: string | null;
    };
    BrivoSettings: {
      accessToken?: string | null;
      alertUnauthorizedFaces?: boolean | null;
      clientId?: string | null;
      clientSecret?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      password?: string | null;
      refreshToken?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      username?: string | null;
      webhookId?: number | null;
    };
    BrivoType:
      | ({
          accessToken?: string | null;
          alertUnauthorizedFaces?: boolean | null;
          apiKey?: string | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          clientId?: string | null;
          clientSecret?: string | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          password?: string | null;
          refreshToken?: string | null;
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          username?: string | null;
          version?: number | null;
          webhookId?: number | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    BurstyRateLimit: {
      base_interval_ms?: number | null;
      burst_token_generation_ms?: number | null;
      burst_token_initial_count?: number | null;
      burst_token_max_count?: number | null;
    };
    ButterflyMXSettings: {
      /** A HashMap of <ButterflyMx Building Id, Webhook Id>. */
      buildingWebhookIdMap?: { [key: string]: string | null } | null;
      createSeekPoints?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      indexFaces?: boolean | null;
      migrated?: boolean | null;
      /** A HashMap of <Panel Id, ButterflymxPanelInfoType>. */
      panelInfoMap?: {
        [key: string]: components["schemas"]["ButterflymxPanelInfoType"];
      } | null;
      refreshToken?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
    };
    ButterflyMXType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          /** A HashMap of <ButterflyMx Building Id, Webhook Id>. */
          buildingWebhookIdMap?: { [key: string]: string | null } | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          /** A HashMap of <Panel Id, ButterflymxPanelInfoType>. */
          panelInfoMap?: {
            [key: string]: components["schemas"]["ButterflymxPanelInfoType"];
          } | null;
          refreshToken?: string | null;
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    ButterflymxBuilding: {
      id?: number | null;
      name?: string | null;
      panels?: components["schemas"]["DoorType"][] | null;
    };
    /** A HashMap of <Panel Id, ButterflymxPanelInfoType>. */
    ButterflymxPanelInfoType: {
      /** The list of Rhombus Camera RUUIDs. */
      assignedCameraList?: (string | null)[] | null;
      /** The ButterflyMx Building Id. */
      buildingId?: number | null;
      /** Rhombus location of the Butterflymx panel */
      locationUuid?: string | null;
      /** The ButterflyMx Panel Name. */
      panelName?: string | null;
    } | null;
    ButtonEnumType: ButtonEnumType;
    ButtonEventType:
      | ({
          buttonPress?: components["schemas"]["ButtonPressEnum"];
          componentCompositeUuid?: string | null;
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    ButtonIntegrationRuleTriggerType:
      | ({
          thirdPartyBatteryLevel?: string | null;
          thirdPartyButtonAction?: string | null;
          thirdPartyButtonName?: string | null;
          thirdPartyButtonSerialNumber?: string | null;
          thirdPartyButtonUuid?: string | null;
          timestamp?: number | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    ButtonModeEnum: ButtonModeEnum;
    ButtonPhysicalPortEnumType: ButtonPhysicalPortEnumType;
    ButtonPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["ButtonPhysicalPortEnumType"];
    };
    ButtonPressEnum: ButtonPressEnum;
    /** Update Button settings */
    ButtonSettingsSelectiveUpdate: {
      button_emergency_onsite_contact?: components["schemas"]["EmergencyContact"];
      button_test_mode_enabled?: boolean | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    Button_ButtonHealthDetailsEnum: Button_ButtonHealthDetailsEnum;
    Button_ButtonHealthEnum: Button_ButtonHealthEnum;
    Button_CreateRuleForButtonWSRequest: {
      rule?: components["schemas"]["Button_ExternalButtonRuleType"];
    };
    Button_CreateRuleForButtonWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      ruleUuid?: string | null;
    };
    Button_DeleteRuleForButtonWSRequest: {
      ruleUuid?: string | null;
      sensorUuid?: string | null;
    };
    Button_DeleteRuleForButtonWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Button_ExternalButtonRuleType: {
      action?: components["schemas"]["RuleActionType"];
      ruleFilters?: components["schemas"]["RuleFilterType"];
      ruleName?: string | null;
      ruleUuid?: string | null;
      sensorUuid?: string | null;
      triggerPress?: components["schemas"]["ButtonPressEnum"];
    };
    Button_GetButtonPressEventsForSensorWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      sensorUuid?: string | null;
    };
    Button_GetButtonPressEventsForSensorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      events?: components["schemas"]["ButtonEventType"][] | null;
    };
    Button_GetButtonRulesForOrgWSRequest: { [key: string]: unknown };
    Button_GetButtonRulesForOrgWSResponse: {
      buttonUuidToRulesMap?: {
        [key: string]:
          | components["schemas"]["Button_ExternalButtonRuleType"][]
          | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Button_GetMinimalButtonStatesWSRequest: { [key: string]: unknown };
    Button_GetMinimalButtonStatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      states?: components["schemas"]["Button_MinimalButtonStateType"][] | null;
    };
    Button_GetRulesForButtonWSRequest: {
      sensorUuid?: string | null;
    };
    Button_GetRulesForButtonWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rules?: components["schemas"]["Button_ExternalButtonRuleType"][] | null;
    };
    Button_MinimalButtonStateType: {
      associatedCameras?: (string | null)[] | null;
      batteryPercent?: number | null;
      buttonEmergencyOnsiteContact?: components["schemas"]["EmergencyContact"];
      buttonMode?: components["schemas"]["ButtonModeEnum"];
      closestBaseStation?: string | null;
      createdAtMillis?: number | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      health?: components["schemas"]["Button_ButtonHealthEnum"];
      healthDetails?: components["schemas"]["Button_ButtonHealthDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lastSeenSec?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      sensorUuid?: string | null;
      serialNumber?: string | null;
      signalStrength?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      testModeEnabled?: boolean | null;
    };
    Button_UpdateButtonConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableButtonUserConfig"];
    };
    Button_UpdateButtonDetailsWSRequest: {
      associatedCameras?: (string | null)[] | null;
      buttonMode?: components["schemas"]["ButtonModeEnum"];
      description?: string | null;
      floorNumber?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      sensorUuid?: string | null;
    };
    Buyer: {
      address1?: string | null;
      address2?: string | null;
      address3?: string | null;
      city?: string | null;
      companyName?: string | null;
      contactName?: string | null;
      country?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      state?: string | null;
    };
    COSensorType: {
      adcRaw?: number | null;
      adcVoltage?: number | null;
      coConcentration?: number | null;
      timestampSec?: number | null;
    };
    CameraAiDewarpConfigType: {
      dewarp_tile_height?: number | null;
      dewarp_tile_width?: number | null;
      orientation?: number | null;
    };
    CameraConfiguration: {
      cameraUuid?: string | null;
      checkEquationsOverride?: components["schemas"]["CheckEquations"];
      promptExtension?: string | null;
      promptOverride?: string | null;
      region?: components["schemas"]["RegionPolygonType"];
    };
    CameraCrossCountingSettingsType: {
      directions?: (CameraCrossCountingSettingsDirectionsEnum | null)[] | null;
      in_roi?: components["schemas"]["RegionPolygonType"][] | null;
      object_type?: CameraCrossCountingSettingsObjectTypeEnum | null;
      out_roi?: components["schemas"]["RegionPolygonType"][] | null;
    };
    CameraHumanLoiteringSettingsType: {
      roi?: components["schemas"]["RegionPolygonType"][] | null;
    };
    CameraMeteringConfigType: {
      rotation?: number | null;
      table?: string | null;
    };
    CameraMotorConfigType: {
      af_enabled?: boolean | null;
      af_region?: components["schemas"]["PermyriadRect"];
      focus?: number | null;
      piris?: number | null;
      zoom?: number | null;
    };
    CameraPTZConfigType: {
      offset_x_percent?: number | null;
      offset_y_percent?: number | null;
      rotation?: number | null;
      size_percent?: number | null;
    };
    CameraPolicyV2Type: {
      defaultTriggers?: components["schemas"]["CameraTriggerType"][] | null;
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["CameraScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    CameraScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["CameraTriggerType"][] | null;
    };
    CameraTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      faceAlertLabelSet?: (string | null)[] | null;
      faceAlertUnidentified?: boolean | null;
      faceAllowedLabelSet?: (string | null)[] | null;
      threshold?: number | null;
      vehicleAlertLabelSet?: (string | null)[] | null;
      vehicleAlertUnidentified?: boolean | null;
      vehicleAllowedLabelSet?: (string | null)[] | null;
    };
    CameraType: {
      archiveRegion?: string | null;
      cameraFramerate?: number | null;
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      directionRadians?: number | null;
      facetNameMap?: { [key: string]: string | null } | null;
      floorNumber?: number | null;
      hardwareId?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      orgUuid?: string | null;
      pending?: boolean | null;
      policyUuid?: string | null;
      serialNumber?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      type?: components["schemas"]["DeviceTypeEnum"];
      uuid?: string | null;
    };
    CameraVisualTamperConfigType: {
      analyze_fps?: number | null;
      analyze_res?: number | null;
      canny_thresh?: number | null;
      edge_cov_diff_thresh?: number | null;
      enabled?: boolean | null;
      long_buf_size?: number | null;
      short_buf_size?: number | null;
    };
    Camera_CameraBackwardsCompatUpdateType: {
      archiveRegion?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      floorNumber?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mummified?: boolean | null;
      name?: string | null;
      policyUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      uuid?: string | null;
    };
    Camera_CameraCurrentStateType: {
      baseVideoOperationUri?: string | null;
      connectionStatus?: CameraCurrentStateConnectionStatusEnum | null;
      connectionTimestampMs?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      firmwareVersion?: string | null;
      healthStatus?: CameraCurrentStateHealthStatusEnum | null;
      healthStatusDetails?: CameraCurrentStateHealthStatusDetailsEnum | null;
      latestFirmwareVersion?: string | null;
      mediaRegion?: string | null;
      onCameraState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      onCloudState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      region?: string | null;
      serialNumber?: string | null;
      ssid?: string | null;
      versionsBehind?: number | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    Camera_CameraExternalFacetedType: {
      archiveRegion?: string | null;
      cameraFramerate?: number | null;
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      deviceUuid?: string | null;
      directionRadians?: number | null;
      facetNameMap?: { [key: string]: string | null } | null;
      floorNumber?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      pending?: boolean | null;
      policyUuid?: string | null;
      serialNumber?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      type?: components["schemas"]["DeviceTypeEnum"];
      uuid?: string | null;
    };
    Camera_CameraExternalType: {
      archiveRegion?: string | null;
      cameraFramerate?: number | null;
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      directionRadians?: number | null;
      facetNameMap?: { [key: string]: string | null } | null;
      floorNumber?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      pending?: boolean | null;
      policyUuid?: string | null;
      serialNumber?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      type?: components["schemas"]["DeviceTypeEnum"];
      uuid?: string | null;
    };
    Camera_CameraOfflineLanStreamingInfo: {
      accessToken?: string | null;
      lanAddresses?: (string | null)[] | null;
    };
    Camera_CreateCustomFootageSeekpointsWSRequest: {
      cameraUuid?: string | null;
      footageSeekPoints?:
        | components["schemas"]["CustomFootageSeekPointType"][]
        | null;
    };
    Camera_CreateFootageBoundingBoxesWSRequest: {
      cameraUuid?: string | null;
      footageBoundingBoxes?:
        | components["schemas"]["FootageBoundingBoxType"][]
        | null;
    };
    Camera_CreateFootageBoundingBoxesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_CreateFootageSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_CreateSharedLiveVideoStreamWSRequest: {
      /** Audio Gateway uuid is needed if audio is included */
      audioGatewayUuid?: string | null;
      /** Camera facet uuid to get stream from */
      cameraUuid: string | null;
      /** Add a expiration date for accessing the stream in seconds */
      expirationTimeSecs?: number | null;
      /** Camera must be associated with an audio gateway to have audio */
      includeAudio: boolean | null;
      /** If given a schedule uuid, will hide the stream during the schedule instead and show it otherwise */
      invertSchedule?: boolean | null;
      /** If not provided, will be named 'Unnamed' */
      name?: string | null;
      /** Add a password to allow access to your shared stream */
      password?: string | null;
      /** Uuid of a relative or absolute schedule */
      scheduleUuid?: string | null;
      /** Org must have SSO setup to use SSO protected streams */
      ssoProtected: boolean | null;
      streamType: components["schemas"]["StreamTypeEnum"];
      /** Enables recording of live footage to a VOD */
      vodEnabled: boolean | null;
    };
    Camera_CreateSharedLiveVideoStreamWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedLiveM3U8StreamUrl?: string | null;
      sharedLiveVideoStreamUrl?: string | null;
      sharedLiveVideoStreamUuid?: string | null;
    };
    Camera_CreateSharedVideoWallWSRequest: {
      expirationTimeSecs?: number | null;
      invertSchedule?: boolean | null;
      password?: string | null;
      scheduleUuid?: string | null;
      videoWallUuid?: string | null;
      vodEnabled?: boolean | null;
    };
    Camera_CreateSharedVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedLiveVideoStreamUrl?: string | null;
      sharedLiveVideoStreamUuid?: string | null;
    };
    Camera_CreateVideoWallWSRequest: {
      videoWall?: components["schemas"]["VideoWallType"];
    };
    Camera_CreateVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      uuid?: string | null;
    };
    Camera_DeleteCameraWSRequest: {
      cameraUuid?: string | null;
      mummify?: boolean | null;
    };
    Camera_DeleteCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: DeleteCameraWSResponseResponseStatusEnum | null;
    };
    Camera_DeleteCustomFootageSeekpointsWSRequest: {
      /** List of camera uuids to delete custom seekpoints for */
      cameraUuids: (string | null)[] | null;
      /** Filter which custom seekpoints to delete with the custom name provided */
      customName?: string | null;
      /** UNIX milliseconds timestamp to end custom seekpoint deletion, up to 24 hours from the start timestamp */
      endTimestampMs: number | null;
      /** UNIX milliseconds timestamp to start custom seekpoint deletion */
      startTimestampMs: number | null;
    };
    Camera_DeleteCustomFootageSeekpointsWSResponse: {
      deleteSeekpointResponseMap?: {
        [
          key: string
        ]: components["schemas"]["Camera_DeleteCustomFootageSeekpointsWSResponse_SeekPointDeleteResponse"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_DeleteCustomFootageSeekpointsWSResponse_SeekPointDeleteResponse: {
      err?: boolean | null;
      errMsg?: string | null;
    };
    Camera_DeleteSharedLiveVideoStreamWSRequest: {
      cameraUuid?: string | null;
      uuid?: string | null;
    };
    Camera_DeleteSharedVideoWallWSRequest: {
      uuid?: string | null;
      videoWallUuid?: string | null;
    };
    Camera_DeleteSharedVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_DeleteVideoWallWSRequest: {
      uuid?: string | null;
    };
    Camera_DeleteVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_EraseCameraWSRequest: {
      cameraUuid?: string | null;
    };
    Camera_EraseCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_FindAllSharedLiveVideoStreamsWSRequest: { [key: string]: unknown };
    Camera_FindAllSharedLiveVideoStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedLiveVideoStreams?:
        | components["schemas"]["Camera_SharedLiveVideoStreamWS"][]
        | null;
    };
    Camera_FindSharedLiveVideoStreamsForWSRequest: {
      cameraUuid?: string | null;
    };
    Camera_FindSharedLiveVideoStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedLiveVideoStreams?:
        | components["schemas"]["Camera_SharedLiveVideoStreamWS"][]
        | null;
    };
    Camera_FindSharedVideoWallsWSRequest: {
      videoWallUuid?: string | null;
    };
    Camera_FindSharedVideoWallsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedVideoWalls?:
        | components["schemas"]["Camera_SharedVideoWallWS"][]
        | null;
    };
    Camera_FootageBoundingBoxSummaryType: {
      deviceMap?: {
        [key: string]: components["schemas"]["FootageBoundingBoxType"];
      } | null;
    };
    Camera_FootageSeekPointSummaryType: {
      activityCountMap?: {
        [key: string]: { [key: string]: number | null } | null;
      } | null;
      alert?: boolean | null;
      faceNames?: (string | null)[] | null;
      poses?: (string | null)[] | null;
      recognizedObjects?: (string | null)[] | null;
      unidentifiedFaceIds?: (string | null)[] | null;
      vehicleLicensePlates?: (string | null)[] | null;
      vehicleNames?: (string | null)[] | null;
    };
    Camera_GenerateBatchRegistrationInfoRequest: {
      adminUserPermissionGroups?: (string | null)[] | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      policyUuid?: string | null;
      readOnlyUserPermissionGroups?: (string | null)[] | null;
    };
    Camera_GenerateBatchRegistrationInfoResponse: {
      env?: string | null;
      token?: string | null;
    };
    Camera_GenerateWifiChangeAuthorizationTokenWSRequest: {
      perceivedIp?: string | null;
      ssid?: string | null;
    };
    Camera_GenerateWifiChangeAuthorizationTokenWSResponse: {
      authorizationToken?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      userUuid?: string | null;
    };
    Camera_GetBatchRegistrationTokenUsageRequest: {
      sinceMillis?: number | null;
      token?: string | null;
    };
    Camera_GetBatchRegistrationTokenUsageResponse: {
      usageList?:
        | components["schemas"]["BatchRegistrationTokenUsageResult"][]
        | null;
    };
    Camera_GetCameraAIThresholdsWSRequest: {
      cameraUuid?: string | null;
    };
    Camera_GetCameraAIThresholdsWSResponse: {
      /** Require this many consecutive frames of seeing a human to include that human detection in results. Set to 1 to always include detections, or higher to avoid false positives due to transient motion like bugs/spiders/rain. Default is 2 consecutive frames. */
      consecutiveHumanFilter?: number | null;
      /** Require this many consecutive frames of seeing a vehicle to include that vehicle detection in results. Set to 1 to always include detections, or higher to avoid false positives due to transient motion like bugs/spiders/rain. Default is 2 consecutive frames. */
      consecutiveVehicleFilter?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** Confidence threshold for face detection. 0 or null means the built-in default. */
      faceConfidenceThreshold?: number | null;
      /** Confidence threshold for face matching (determining if two faces are the same person). 0 or null means the built-in default. We no longer support device specific face matching threshold. This property is deprecated and will be removed. */
      faceMatchConfidenceThreshold?: number | null;
      /** Confidence threshold for human detection. 0 or null means the built-in default. */
      humanConfidenceThreshold?: number | null;
      /** Confidence threshold for license plate detection and character recognition. 0 or null means the built-in default. */
      lprConfidenceThreshold?: number | null;
      /** The max event duration for an alert in milliseconds.  Default is 30000, lowering down to 4000 will result in faster alert delivery but shorter alert clips. */
      maxEventDurationMs?: number | null;
      /** Confidence threshold for vehicle detection. 0 or null means the built-in default. */
      vehicleConfidenceThreshold?: number | null;
    };
    Camera_GetCameraDetailsWSRequest: {
      cameraUuids?: (string | null)[] | null;
    };
    Camera_GetCameraDetailsWSResponse: {
      cameras?: components["schemas"]["Camera_CameraExternalType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetCloudArchivedMediaInfoWSRequest: {
      cameraUuid?: string | null;
    };
    Camera_GetCloudArchivedMediaInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      oldestArchivedVideoSegmentSecs?: number | null;
    };
    Camera_GetCloudArchivingConfigWSRequest: {
      deviceUuid?: string | null;
    };
    Camera_GetCloudArchivingConfigWSResponse: {
      archivingConfig?: components["schemas"]["ScopedCloudArchivingConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetConfigWSRequest: {
      cameraUuid?: string | null;
    };
    Camera_GetConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_IExternalReadableAudioVideoUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetCurrentStateWSRequest: {
      cameraUuid?: string | null;
      force?: boolean | null;
    };
    Camera_GetCurrentStateWSResponse: {
      cameraState?: components["schemas"]["Camera_CameraCurrentStateType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetCustomFootageSeekpointsV2WSRequest: {
      /** (Optional) Filters which custom footage seekpoint to search for by description */
      customDescription?: string | null;
      /** (Optional) Filters which custom footage seekpoint to search for by name */
      customDisplayName?: string | null;
      /** (Optional) List of device uuids to filter the search */
      deviceUuids?: (string | null)[] | null;
      /** How far from the start timestamp to search in seconds */
      duration: number | null;
      /** (Optional) List of location uuids to filter the search */
      locationUuids?: (string | null)[] | null;
      /** Starting timestamp of the search in UNIX seconds */
      startTime: number | null;
    };
    Camera_GetCustomFootageSeekpointsV2WSResponse: {
      customFootageSeekPoints?:
        | components["schemas"]["SeekpointIndexType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetFacetedCameraDetailsWSResponse: {
      cameras?:
        | components["schemas"]["Camera_CameraExternalFacetedType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetFootageBoundingBoxesForMultipleWSRequest: {
      cameraUuids?: (string | null)[] | null;
      durationSec?: number | null;
      startTimeSec?: number | null;
    };
    Camera_GetFootageBoundingBoxesForMultipleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageBoundingBoxMap?: {
        [
          key: string
        ]: components["schemas"]["Camera_FootageBoundingBoxSummaryType"];
      } | null;
    };
    Camera_GetFootageBoundingBoxesWSRequest: {
      cameraUuid?: string | null;
      duration?: number | null;
      startTime?: number | null;
    };
    Camera_GetFootageBoundingBoxesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageBoundingBoxes?:
        | components["schemas"]["FootageBoundingBoxType"][]
        | null;
    };
    Camera_GetFootageSeekpointsForMultipleWSRequest: {
      cameraUuids?: (string | null)[] | null;
      durationSec?: number | null;
      includeAnyMotion?: boolean | null;
      startTimeSec?: number | null;
    };
    Camera_GetFootageSeekpointsForMultipleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageSeekPointMap?: {
        [
          key: string
        ]: components["schemas"]["Camera_FootageSeekPointSummaryType"];
      } | null;
    };
    Camera_GetFootageSeekpointsV2WSRequest: {
      cameraUuid?: string | null;
      duration?: number | null;
      includeAnyMotion?: boolean | null;
      startTime?: number | null;
    };
    Camera_GetFootageSeekpointsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
    };
    Camera_GetFootageSeekpointsWSRequest: {
      cameraUuid?: string | null;
      duration?: number | null;
      startTime?: number | null;
    };
    Camera_GetFootageSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointType"][]
        | null;
    };
    Camera_GetFullCameraStateWSRequest: {
      cameraUuid?: string | null;
      force?: boolean | null;
    };
    Camera_GetFullCameraStateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      fullCameraState?: components["schemas"]["FullDeviceStateType"];
    };
    Camera_GetLineCrossingEnabledCamerasForLocationWSRequest: {
      locationUuid?: string | null;
    };
    Camera_GetLineCrossingEnabledCamerasForLocationWSResponse: {
      camerasToConfigs?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_userconfig_ExternalReadableFacetedUserConfig"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetMediaUrisWSRequest: {
      cameraUuid?: string | null;
    };
    Camera_GetMediaUrisWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lanCheckUrls?: (string | null)[] | null;
      lanLiveH264Uris?: (string | null)[] | null;
      lanLiveM3u8Uris?: (string | null)[] | null;
      lanLiveMpdUris?: (string | null)[] | null;
      lanVodM3u8UrisTemplates?: (string | null)[] | null;
      lanVodMpdUrisTemplates?: (string | null)[] | null;
      wanLiveH264Uri?: string | null;
      wanLiveM3u8Uri?: string | null;
      wanLiveMpdUri?: string | null;
      wanVodH264UriTemplate?: string | null;
      wanVodM3u8UriTemplate?: string | null;
      wanVodMpdUriTemplate?: string | null;
    };
    Camera_GetMinimalCameraLocationMapWSRequest: { [key: string]: unknown };
    Camera_GetMinimalCameraLocationMapWSResponse: {
      cameraLocationMap?: {
        [
          key: string
        ]: components["schemas"]["Camera_GetMinimalCameraLocationMapWSResponse_CameraLocationInfo"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetMinimalCameraLocationMapWSResponse_CameraLocationInfo: {
      cameraName?: string | null;
      locationName?: string | null;
      locationUuid?: string | null;
    };
    Camera_GetMinimalCameraStateListWSRequest: {
      includeMummified?: boolean | null;
    };
    Camera_GetMinimalCameraStateListWSResponse: {
      cameraStates?: components["schemas"]["MinimalDeviceStateType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetMinimalListWSRequest: {
      includeMummified?: boolean | null;
    };
    Camera_GetMinimalListWSResponse: {
      cameras?: components["schemas"]["Camera_MinimalCameraType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetOccupancyEnabledCamerasWSRequest: { [key: string]: unknown };
    Camera_GetOfflineLanStreamingInfoWSRequest: { [key: string]: unknown };
    Camera_GetOfflineLanStreamingInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      info?: {
        [
          key: string
        ]: components["schemas"]["Camera_CameraOfflineLanStreamingInfo"];
      } | null;
    };
    Camera_GetPresenceWindowsWSRequest: {
      cameraUuid?: string | null;
      durationSec?: number | null;
      startTimeSec?: number | null;
    };
    Camera_GetPresenceWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      presenceWindows?: {
        [key: string]: components["schemas"]["TimeWindowSeconds"][] | null;
      } | null;
    };
    Camera_GetSharedCameraCurrentStateWSResponse: {
      cameraState?: components["schemas"]["Camera_SharedCameraCurrentStateType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_GetStorageRecoveryFileWSRequest: {
      deviceUuid?: string | null;
    };
    Camera_GetStorageRecoveryFileWSResponse: {
      fileContents?: (string | null)[] | null;
    };
    Camera_GetUptimeWindowsWSRequest: {
      cameraUuid?: string | null;
      endTime?: number | null;
      startTime?: number | null;
    };
    Camera_GetUptimeWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      uptimeWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
    };
    Camera_GetVideoWallsWSRequest: { [key: string]: unknown };
    Camera_GetVideoWallsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      userNameMap?: { [key: string]: string | null } | null;
      videoWalls?:
        | components["schemas"]["Camera_VideoWallSummaryType"][]
        | null;
    };
    Camera_MinimalCameraType: {
      connectionStatus?: MinimalCameraConnectionStatusEnum | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      floorNumber?: number | null;
      healthStatus?: MinimalCameraHealthStatusEnum | null;
      healthStatusDetails?: MinimalCameraHealthStatusDetailsEnum | null;
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mediaRegion?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      policyUuid?: string | null;
      region?: string | null;
      serialNumber?: string | null;
      ssid?: string | null;
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    Camera_RebootCameraWSRequest: {
      cameraUuid?: string | null;
    };
    Camera_RebootCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      status?: RebootCameraWSResponseStatusEnum | null;
    };
    Camera_SharedCameraCurrentStateType: {
      baseVideoOperationUrl?: string | null;
      connectionStatus?: SharedCameraCurrentStateConnectionStatusEnum | null;
      oldestArchivedMediaSeconds?: number | null;
      onCameraState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      onCloudState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      region?: string | null;
    };
    Camera_SharedLiveVideoStreamWS: {
      audioDeviceHwVar?: components["schemas"]["HardwareVariationEnum"];
      audioGatewayUuid?: string | null;
      audioPushToTalkEnabled?: boolean | null;
      cameraUuid?: string | null;
      deviceHwVar?: components["schemas"]["HardwareVariationEnum"];
      deviceUuid?: string | null;
      expirationTime?: number | null;
      hideOverlay?: boolean | null;
      invertSchedule?: boolean | null;
      name?: string | null;
      orgUuid?: string | null;
      passwordProtected?: boolean | null;
      scheduleUuid?: string | null;
      sharedLiveM3U8StreamUrl?: string | null;
      sharedLiveVideoStreamUrl?: string | null;
      sharedWithMonitoringService?: boolean | null;
      ssoProtected?: boolean | null;
      streamType?: components["schemas"]["StreamTypeEnum"];
      timestampMs?: number | null;
      unscheduledMessage?: string | null;
      uuid?: string | null;
      vodEnabled?: boolean | null;
    };
    Camera_SharedVideoWallWS: {
      deviceScheduleMap?: {
        [key: string]: components["schemas"]["DeviceSchedule"];
      } | null;
      expirationTime?: number | null;
      hideOverlay?: boolean | null;
      invertSchedule?: boolean | null;
      orgUuid?: string | null;
      passwordProtected?: boolean | null;
      permissionGroupUuid?: string | null;
      scheduleUuid?: string | null;
      sharedVideoWallUrl?: string | null;
      timestampMs?: number | null;
      unscheduledMessage?: string | null;
      uuid?: string | null;
      videoWallUuid?: string | null;
      vodEnabled?: boolean | null;
    };
    Camera_UpdateCameraAIThresholdsWSRequest: {
      /** Device uuid to update thresholds for */
      cameraUuid: string | null;
      /** Require this many consecutive frames of seeing a human to include that human detection in results. Set to 1 to always include detections, or higher to avoid false positives due to transient motion like bugs/spiders/rain. Default is 2 consecutive frames. */
      consecutiveHumanFilter?: number | null;
      /** Require this many consecutive frames of seeing a vehicle to include that vehicle detection in results. Set to 1 to always include detections, or higher to avoid false positives due to transient motion like bugs/spiders/rain. Default is 2 consecutive frames. */
      consecutiveVehicleFilter?: number | null;
      /** Confidence threshold for face detection. Set to 0 or null to use the default. Maximum range of 1. Default = 0.7 */
      faceConfidenceThreshold?: number | null;
      /** Confidence threshold for face matching (determining if two faces are the same person). Set to 0 or null to use the default. Maximum range of 1. Default = 0.7. We no longer support device specific face matching threshold. This property is deprecated and will be removed. */
      faceMatchConfidenceThreshold?: number | null;
      /** Confidence threshold for human detection. Set to 0 or null to use the default. Maximum range of 1. Default = 0.6 */
      humanConfidenceThreshold?: number | null;
      /** Confidence threshold for license plate detection and character recognition. Set to 0 or null to use the default. Maximum range of 1. Default = 0.8 */
      lprConfidenceThreshold?: number | null;
      /** Set the max event duration for an alert in milliseconds.  Default is 30000, lowering down to 4000 will result in faster alert delivery but shorter alert clips. */
      maxEventDurationMs?: number | null;
      /** Confidence threshold for vehicle detection. Set to 0 or null to use the default. Maximum range of 1. Default = 0.6 */
      vehicleConfidenceThreshold?: number | null;
    };
    Camera_UpdateCameraAIThresholdsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_UpdateCameraFirmwareWSRequest: {
      cameraUuid?: string | null;
    };
    Camera_UpdateCameraFirmwareWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      status?: UpdateCameraFirmwareWSResponseStatusEnum | null;
    };
    Camera_UpdateCameraHumanLoiteringConfigWSRequest: {
      /** Device uuid to update the human loitering feature for. */
      cameraUuid: string | null;
      /** Region of interests of the human loitering feature. NULL or empty list will disable the feature */
      rois?: components["schemas"]["RegionPolygonType"][] | null;
    };
    Camera_UpdateCameraHumanLoiteringWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_UpdateCameraLineCrossingThresholdsWSRequest: {
      /** Device uuid to update the line-crossing feature for. */
      cameraUuid: string | null;
      directions?: (UpdateCameraLineCrossingThresholdsWSRequestDirectionsEnum | null)[] | null;
      /** By default, INGRESS events occur when the following condition is met for the following line types: an entity moves from top -> bottom when a horizontal line is defined, an entity moves from left -> right when a vertical line is defined, an entity moves from top-left -> bottom-right when an upwards sloping line is defined, and an entity moves from top-right to bottom-left when a downwards sloping line is defined. Setting this value to true will switch INGRESS to EGRESS events and vice-versa. */
      inverted?: boolean | null;
      objectType?: UpdateCameraLineCrossingThresholdsWSRequestObjectTypeEnum | null;
      pointA?: components["schemas"]["Camera_UpdateCameraLineCrossingThresholdsWSRequest_Coordinate"];
      pointB?: components["schemas"]["Camera_UpdateCameraLineCrossingThresholdsWSRequest_Coordinate"];
    };
    /** (X,Y) coordinate expressed as a percentage of the camera's resolution.Minimum range is 0.1 and maximum range is 0.9. Leaving this value as null will disable line-crossing. */
    Camera_UpdateCameraLineCrossingThresholdsWSRequest_Coordinate: {
      /** Value ranges from 0.1 to 0.9 */
      x?: number | null;
      /** Value ranges from 0.1 to 0.9 */
      y?: number | null;
    };
    Camera_UpdateCameraLineCrossingThresholdsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_UpdateCameraV2WSRequest: {
      customData?: string | null;
      customDataUpdated?: boolean | null;
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      description?: string | null;
      descriptionUpdated?: boolean | null;
      directionRadians?: number | null;
      directionRadiansUpdated?: boolean | null;
      facetNameMap?: { [key: string]: string | null } | null;
      facetNameMapUpdated?: boolean | null;
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      mummified?: boolean | null;
      mummifiedUpdated?: boolean | null;
      name?: string | null;
      nameUpdated?: boolean | null;
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      uuid?: string | null;
    };
    Camera_UpdateCameraV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_UpdateCameraWSRequest: {
      camera?: components["schemas"]["Camera_CameraBackwardsCompatUpdateType"];
    };
    Camera_UpdateCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_UpdateCamerasBulkV2WSRequest: {
      cameraBulkDetails?:
        | components["schemas"]["Camera_UpdateCameraV2WSRequest"][]
        | null;
    };
    Camera_UpdateConfigWSRequest: {
      config?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableAudioVideoUserConfig"];
    };
    Camera_UpdateVideoWallWSRequest: {
      videoWall?: components["schemas"]["VideoWallType"];
    };
    Camera_UpdateVideoWallWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Camera_UpdateWifiWSRequest: {
      cameraUuid?: string | null;
      cameraUuids?: (string | null)[] | null;
      password?: string | null;
      ssid?: string | null;
    };
    Camera_UpdateWifiWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      status?: { [key: string]: boolean | null } | null;
    };
    Camera_VideoWallSummaryType: {
      deviceList?: (string | null)[] | null;
      displayName?: string | null;
      numShares?: number | null;
      orgUuid?: string | null;
      othersCanEdit?: boolean | null;
      ownerUserUuid?: string | null;
      settings?: { [key: string]: { [key: string]: unknown } | null } | null;
      shared?: boolean | null;
      uuid?: string | null;
    };
    CancelLoopingAudioPlaybackActionRecordType: {
      statusMap?: {
        [key: string]: components["schemas"]["AudioGatewayStatusEnum"];
      } | null;
    };
    CancelLoopingAudioPlaybackActionType: {
      _audioDevices?: (string | null)[] | null;
      audioDevices?: (string | null)[] | null;
    };
    CancelledDoorStateOverride:
      | ({
          cancelledDoorStateOverride?: components["schemas"]["DoorStateOverride"];
        } & {
          originator?: components["schemas"]["BaseEventOriginator"];
          requestedAtMillis?: number | null;
          type?: components["schemas"]["ManualDoorStateChangeEnum"];
        })
      | null;
    ChangeType: ChangeTypeEnum;
    ChatRecord: {
      contextId?: string | null;
      orgUuid?: string | null;
      principalUuid?: string | null;
      queriedAtMs?: number | null;
      query?: string | null;
      respondedAtMs?: number | null;
      response?: string | null;
      timeline?: components["schemas"]["QueryTimelineEvent"][] | null;
      toolingTimeline?: components["schemas"]["QueryTool"][] | null;
      uuid?: string | null;
    };
    Chatbot_DeleteChatbotConversationWSRequest: {
      /** Context identifier of the conversation to delete. */
      contextId: string | null;
    };
    Chatbot_GetChatHistoryByContextIdWSRequest: {
      /** Context ID to get chat history for. */
      contextId: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
    };
    Chatbot_GetChatHistoryWSResponse: {
      chatHistory?: components["schemas"]["ChatRecord"][] | null;
      lastEvaluatedKey?: string | null;
    };
    Chatbot_GetChatbotConversationsWSRequest: {
      pageRequest?: components["schemas"]["DynamoPageRequest"];
    };
    Chatbot_GetChatbotConversationsWSResponse: {
      conversations?: components["schemas"]["ContextRecord"][] | null;
      lastEvaluatedKey?: string | null;
    };
    Chatbot_SubmitChatWSRequest: {
      /** Uuid used to track the current conversation with Rhombus MIND. */
      contextId: string | null;
      /** The name of the conversation if this query is the start of a new conversation. If not specified, the conversation will be named after the first query. */
      conversationName?: string | null;
      /** The query to submit to Rhombus MIND. */
      query: string | null;
    };
    Chatbot_SubmitChatWSResponse: {
      chatRecordUuid?: string | null;
    };
    Chatbot_UpdateChatbotConversationWSRequest: {
      selectiveUpdate?: components["schemas"]["ContextRecordSelectiveUpdate"];
    };
    Chatbot_UpdateChatbotConversationsWSResponse: {
      conversation?: components["schemas"]["ContextRecord"];
    };
    CheckEquations: {
      description?: string | null;
      equation?: string | null;
      name?: string | null;
      shortName?: string | null;
    };
    ClaimKey:
      | ({
          entry?: components["schemas"]["ClaimKeyEntry"];
          startDate?: string | null;
        } & {
          /** Date/time when claiming of licenses represented by this claim key ended successfully. */
          claimEndDate?: string | null;
          /** Date/time when claiming of licenses represented by this claim key started. */
          claimStartDate?: string | null;
          createdOn?: string | null;
          endDate?: string | null;
          expirationEmailState?: ClaimKeyExpirationEmailStateEnum | null;
          gracePeriodEndDate?: string | null;
          /** Masked claim code for redeemed claim keys. This field can be used for reference purposes. */
          maskedClaimCode?: string | null;
          orgUuid?: string | null;
          renewedByClaimKeyUuid?: string | null;
          /** Externally supplied request id to prevent creation of unnecessary claim keys due to reprocessing or bugs. Unnecessary claim keys are claim keys that are not tied to anything in the external system.  This property is unique for all claim keys. */
          requestId?: string | null;
          returnHistory?: components["schemas"]["ClaimKeyReturnEvent"][] | null;
          state?: ClaimKeyStateEnum | null;
          trial?: boolean | null;
          type?: ClaimKeyTypeEnum | null;
          updatedOn?: string | null;
          uuid?: string | null;
        })
      | null;
    ClaimKeyEntry: {
      productQuantities?: { [key: string]: number | null } | null;
    } | null;
    ClaimKeyReturnEvent: {
      returnedProductQuantities?: { [key: string]: number | null } | null;
      timestamp?: string | null;
    };
    ClaimKeySearchFilter: {
      excludeUnclaimed?: boolean | null;
      excludedStates?: (ClaimKeySearchFilterExcludedStatesEnum | null)[] | null;
      includedStates?: (ClaimKeySearchFilterIncludedStatesEnum | null)[] | null;
    };
    ClimateActivityEventType:
      | ({
          climateThreshold?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    ClimateEventType: {
      alertActivities?: components["schemas"]["ActivityEnum"][] | null;
      baseStationUuid?: string | null;
      batteryPercentage?: number | null;
      bleDeviceUuid?: string | null;
      bleRssi?: number | null;
      closeBaseStations?: (string | null)[] | null;
      co2?: number | null;
      ethanol?: number | null;
      heatIndexDegF?: number | null;
      heatIndexRangeWarning?: components["schemas"]["HeatIndexRangeWarningEnum"];
      humidity?: number | null;
      iaq?: number | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
      pm25?: number | null;
      probeTempC?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tampered?: boolean | null;
      temp?: number | null;
      thcDetected?: boolean | null;
      thcPercent?: number | null;
      timestampMs?: number | null;
      tvoc?: number | null;
      vapeSmokeDetected?: boolean | null;
      vapeSmokePercent?: number | null;
    };
    ClimatePolicyType: {
      backoffAlertSecs?: { [key: string]: number | null } | null;
      defaultTriggers?: components["schemas"]["ClimateTriggerType"][] | null;
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["ClimateScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    ClimateScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ClimateTriggerType"][] | null;
    };
    ClimateSettings: {
      alert_window_minutes?: number | null;
      smoke_ai_threshold?: number | null;
      thc_ai_threshold?: number | null;
      vape_ai_threshold?: number | null;
    };
    /** Update Sensor Climate settings */
    ClimateSettingsSelectiveUpdate: {
      alert_window_minutes?: number | null;
      smoke_ai_threshold?: number | null;
      thc_ai_threshold?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      vape_ai_threshold?: number | null;
    };
    ClimateTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      audioThreshold?: number | null;
      threshold?: number | null;
    };
    Climate_DeleteEnvironmentalGatewayWSRequest: {
      deviceUuid?: string | null;
      mummify?: boolean | null;
    };
    Climate_DeleteEnvironmentalGatewayWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: DeleteEnvironmentalGatewayWSResponseResponseStatusEnum | null;
    };
    Climate_GetClimateEventsForSensorWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      sensorUuid?: string | null;
    };
    Climate_GetClimateEventsForSensorWSResponse: {
      climateEvents?: components["schemas"]["ClimateEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Climate_GetClimateSensorConfigWSRequest: {
      uuid?: string | null;
    };
    Climate_GetClimateSensorConfigWSResponse: {
      config?: components["schemas"]["IClimateUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Climate_GetEnvironmentalGatewayShadowsWSRequest: { [key: string]: unknown };
    Climate_GetEnvironmentalGatewayShadowsWSResponse: {
      environmentalGatewayShadows?:
        | components["schemas"]["EnvironmentalGatewayShadowType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Climate_GetEventsForEnvironmentalGatewayWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      deviceUuid?: string | null;
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    Climate_GetEventsForEnvironmentalGatewayWSResponse: {
      events?: components["schemas"]["E50ClimateEventType"][] | null;
      lastEvaluatedKey?: string | null;
    };
    Climate_GetMinimalClimateStatesWSRequest: { [key: string]: unknown };
    Climate_GetMinimalClimateStatesWSResponse: {
      climateStates?:
        | components["schemas"]["Climate_MinimalClimateStateType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Climate_GetMinimalEnvironmentalGatewayStatesWSRequest: {
      [key: string]: unknown;
    };
    Climate_GetMinimalEnvironmentalGatewayStatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lastEvaluatedKey?: string | null;
      minimalEnvironmentalGatewayStates?:
        | components["schemas"]["Climate_MinimalEnvironmentalGatewayStateType"][]
        | null;
    };
    Climate_MinimalClimateStateType: {
      associatedCameras?: (string | null)[] | null;
      batteryPercent?: number | null;
      calibrating?: boolean | null;
      closestBaseStation?: string | null;
      co2?: number | null;
      createdAtMillis?: number | null;
      ethanol?: number | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      health?: MinimalClimateStateHealthEnum | null;
      healthDetails?: MinimalClimateStateHealthDetailsEnum | null;
      heatIndexDegF?: number | null;
      heatIndexRangeWarning?: components["schemas"]["HeatIndexRangeWarningEnum"];
      humidity?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      iaq?: number | null;
      lastSeenSec?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      pm25?: number | null;
      policyUuid?: string | null;
      probeConnected?: boolean | null;
      probeTempC?: number | null;
      sensorUuid?: string | null;
      serialNumber?: string | null;
      signalStrength?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      temperatureCelcius?: number | null;
      thcPercent?: number | null;
      tvoc?: number | null;
      vapePercent?: number | null;
    };
    Climate_MinimalEnvironmentalGatewayStateType: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      airQualityIndex?: number | null;
      airQualityIndexPollutant?: components["schemas"]["AirQualityIndexPollutantEnum"];
      alertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      associatedCameras?: (string | null)[] | null;
      calibrating?: boolean | null;
      ch2oPpb?: number | null;
      co2Ppm?: number | null;
      coConcentration?: number | null;
      connected?: boolean | null;
      createdAtMillis?: number | null;
      defaultInterfaceMac?: string | null;
      deviceUuid?: string | null;
      externalIPAddress?: string | null;
      falsePositiveConfidencePercent?: number | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      heatIndexDegF?: number | null;
      heatIndexRangeWarning?: components["schemas"]["HeatIndexRangeWarningEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      iaq?: number | null;
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      leakDetected?: boolean | null;
      leakProbePresent?: boolean | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      nc0p5?: number | null;
      nc10p0?: number | null;
      nc1p0?: number | null;
      nc2p5?: number | null;
      nc4p0?: number | null;
      noxIdx?: number | null;
      orgUuid?: string | null;
      pm10p0?: number | null;
      pm1p0?: number | null;
      pm2p5?: number | null;
      pm4p0?: number | null;
      policyUuid?: string | null;
      pressure?: number | null;
      probeTempC?: number | null;
      relHumid?: number | null;
      serialNumber?: string | null;
      smokeConfidencePercent?: number | null;
      smokeTobaccoConfidencePercent?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tempC?: number | null;
      tempProbePresent?: boolean | null;
      timestampMs?: number | null;
      typPartSize?: number | null;
      vapeConfidencePercent?: number | null;
      vapeDetected?: boolean | null;
      vapeThcConfidencePercent?: number | null;
      vocIdx?: number | null;
    };
    Climate_RebootEnvironmentalGatewayWSRequest: {
      environmentalGatewayUuid?: string | null;
    };
    Climate_UpdateClimateSensorDetailsWSRequest: {
      associatedCameras?: (string | null)[] | null;
      associatedCamerasUpdated?: boolean | null;
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      description?: string | null;
      descriptionUpdated?: boolean | null;
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      name?: string | null;
      nameUpdated?: boolean | null;
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      uuid?: string | null;
    };
    Climate_UpdateClimateSensorDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Climate_UpdateEnvironmentalGatewayDetailsWSRequest: {
      associatedCameras?: (string | null)[] | null;
      associatedCamerasUpdated?: boolean | null;
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      description?: string | null;
      descriptionUpdated?: boolean | null;
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      name?: string | null;
      nameUpdated?: boolean | null;
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      uuid?: string | null;
    };
    Climate_UpdateEnvironmentalGatewayDetailsWSResponse: {
      [key: string]: unknown;
    };
    ClipAccessSettings: {
      allowedUsers?: (string | null)[] | null;
      visibility?: components["schemas"]["ClipVisibility"];
    };
    ClipBoundingBoxType: {
      activity?: components["schemas"]["ActivityEnum"];
      alert?: boolean | null;
      bottom?: number | null;
      confidence?: number | null;
      croppedImageLocator?: string | null;
      customActivityColor?: ClipBoundingBoxCustomActivityColorEnum | null;
      customActivityDescription?: string | null;
      customActivityDisplayName?: string | null;
      faceName?: string | null;
      inMotion?: boolean | null;
      keypointsV2?: {
        [key: string]: components["schemas"]["PointType"];
      } | null;
      left?: number | null;
      licensePlate?: string | null;
      loudness?: number | null;
      objectId?: number | null;
      pose?: string | null;
      relativeSecond?: number | null;
      right?: number | null;
      sensorValType?: components["schemas"]["SensorValType"];
      toastOrderIdInfo?: components["schemas"]["ToastOrderIdType"];
      top?: number | null;
      unidentifiedFaceId?: string | null;
      vehicleName?: string | null;
    };
    ClipGroupType: {
      clips?: components["schemas"]["SharedClipV2Type"][] | null;
      createdAtMillis?: number | null;
      description?: string | null;
      isShared?: boolean | null;
      orgUuid?: string | null;
      sharedGroups?: (string | null)[] | null;
      title?: string | null;
      uuid?: string | null;
    };
    ClipGroupWithDetailsType: {
      clips?: components["schemas"]["SharedClipWithDetailsType"][] | null;
      createdAtMillis?: number | null;
      description?: string | null;
      isShared?: boolean | null;
      orgUuid?: string | null;
      sharedGroups?: (string | null)[] | null;
      title?: string | null;
      uuid?: string | null;
    };
    ClipMetaDataType: {
      activitySeekPoints?: { [key: string]: (number | null)[] | null } | null;
      activitySeekPointsV2?:
        | components["schemas"]["ClipSeekPointType"][]
        | null;
      activitySeekPointsV3?:
        | components["schemas"]["ClipSeekPointV2Type"][]
        | null;
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      durationSec?: number | null;
      mGrids?: (string | null)[] | null;
      soundSignificantLufs?: (number | null)[] | null;
      startTime?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      thumbnailLocationV2?: string | null;
    };
    ClipSeekPointType: {
      activity?: components["schemas"]["ActivityEnum"];
      alert?: boolean | null;
      bottom?: number | null;
      faceName?: string | null;
      keypointsV2?: {
        [key: string]: components["schemas"]["PointType"];
      } | null;
      left?: number | null;
      licensePlate?: string | null;
      pose?: string | null;
      relativeSecond?: number | null;
      right?: number | null;
      top?: number | null;
      unidentifiedFaceId?: string | null;
      vehicleName?: string | null;
    };
    ClipSeekPointV2Type: {
      activity?: components["schemas"]["ActivityEnum"];
      alert?: boolean | null;
      customActivityColor?: ClipSeekPointV2CustomActivityColorEnum | null;
      customActivityDescription?: string | null;
      customActivityDisplayName?: string | null;
      dcao?: boolean | null;
      faceName?: string | null;
      id?: number | null;
      inMotion?: boolean | null;
      licensePlate?: string | null;
      loudness?: number | null;
      pose?: string | null;
      relativeSecond?: number | null;
      sensorValType?: components["schemas"]["SensorValType"];
      toastOrderIdInfo?: components["schemas"]["ToastOrderIdType"];
      tu?: string | null;
      unidentifiedFaceId?: string | null;
      vehicleName?: string | null;
    };
    ClipVisibility: ClipVisibilityEnum;
    CloudArchivingStrategy: CloudArchivingStrategyEnum;
    Co2SensorType: {
      co2Ppm?: number | null;
      relHumid?: number | null;
      tempC?: number | null;
      timestampSec?: number | null;
    };
    Common_devices_CalibrateFloorplanProjectionWSRequest: {
      cameraImagePointsPermyriad?: ((number | null)[] | null)[] | null;
      deviceUuid?: string | null;
      floorplanImagePointsPermyriad?: ((number | null)[] | null)[] | null;
    };
    Common_devices_CalibrateFloorplanProjectionWSResponse: {
      homography?: ((number | null)[] | null)[] | null;
    };
    Common_devices_GetBoundingBoxesWSRequest: {
      deviceUuid?: string | null;
      durationSecs?: number | null;
      startTimeSec?: number | null;
    };
    Common_devices_GetBoundingBoxesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageBoundingBoxes?:
        | components["schemas"]["FootageBoundingBoxType"][]
        | null;
    };
    Common_devices_GetCameraOrDoorbellCameraSeekpointsWSRequest: {
      activitySet?: components["schemas"]["ActivityEnum"][] | null;
      deviceUuid?: string | null;
      durationSecs?: number | null;
      includeAnyMotion?: boolean | null;
      seekpointDurationIntervalSecs?: number | null;
      startTimeSec?: number | null;
    };
    Common_devices_GetFullDeviceStateWSRequest: {
      deviceUuid?: string | null;
      force?: boolean | null;
    };
    Common_devices_GetMediaUrisWSRequest: {
      deviceUuid?: string | null;
    };
    Common_devices_GetMinimalDeviceStateListWSRequest: {
      includeMummified?: boolean | null;
    };
    Common_devices_GetPresenceWindowsWSRequest: {
      deviceUuid?: string | null;
      durationSec?: number | null;
      startTimeSec?: number | null;
    };
    Common_devices_GetPresenceWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      presenceWindows?: {
        [key: string]: components["schemas"]["TimeWindowSeconds"][] | null;
      } | null;
    };
    Common_devices_GetSeekpointsWSRequest: {
      deviceUuid?: string | null;
      durationSecs?: number | null;
      includeAnyMotion?: boolean | null;
      startTimeSec?: number | null;
    };
    Common_devices_GetSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
    };
    Common_devices_GetUptimeWindowsWSRequest: {
      deviceUuid?: string | null;
      endTimeMs?: number | null;
      startTimeMs?: number | null;
    };
    Common_devices_GetUptimeWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      uptimeWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
    };
    Common_devices_RebootDeviceWSResponse: {
      result?: RebootDeviceWSResponseResultEnum | null;
    };
    Common_devices_UpdateConfigWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Common_devices_UpdateDeviceDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Common_devices_rawstream_CreateRawHttpStreamWSRequest: {
      deviceUuid?: string | null;
      rawStreamName?: string | null;
      streamType: components["schemas"]["StreamTypeEnum"];
    };
    Common_devices_rawstream_CreateRawHttpStreamWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lanAudioUrl?: string | null;
      lanVideoLowResUrl?: string | null;
      lanVideoUrl?: string | null;
    };
    Common_devices_rawstream_DeleteRawHttpStreamWSRequest: {
      customPathPart?: string | null;
      deviceUuid?: string | null;
    };
    Common_devices_rawstream_DeleteRawHttpStreamWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Common_devices_rawstream_FindAllRawHttpStreamsWSRequest: {
      [key: string]: unknown;
    };
    Common_devices_rawstream_FindAllRawHttpStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rawHttpStreams?:
        | components["schemas"]["Common_devices_rawstream_LanSpecificRawStreamType"][]
        | null;
    };
    Common_devices_rawstream_GetRawHttpStreamsWSRequest: {
      deviceUuid?: string | null;
    };
    Common_devices_rawstream_GetRawHttpStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rawHttpStreams?:
        | components["schemas"]["Common_devices_rawstream_LanSpecificRawStreamType"][]
        | null;
    };
    Common_devices_rawstream_LanSpecificRawStreamType: {
      audioPath?: string | null;
      createdAtMs?: number | null;
      createdBy?: string | null;
      customPathPart?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      deviceUuid?: string | null;
      lanAudioUrl?: string | null;
      lanVideoLowResUrl?: string | null;
      lanVideoUrl?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      streamType?: components["schemas"]["StreamTypeEnum"];
      videoLowResPath?: string | null;
      videoPath?: string | null;
    };
    ComponentBaseEnumType: ComponentBaseEnumType;
    ComponentCompositeEnumType: ComponentCompositeEnumType;
    ComponentCompositeEnumType_Minimal: ComponentCompositeEnumType_Minimal;
    ComponentCompositeEventOriginator:
      | ({
          componentCompositeName?: string | null;
          componentCompositeUuid?: string | null;
          correlationId?: string | null;
          eventUuid?: string | null;
          originator?: components["schemas"]["BaseEventOriginator"];
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    ComponentCompositeShadowEnum: ComponentCompositeShadowEnum;
    ComponentEnumType: ComponentEnumType;
    ComponentEventEnumType: ComponentEventEnumType;
    ComponentEventType: (
      | components["schemas"]["DoorbellEventType"]
      | components["schemas"]["DoorReaderStateChangeEventType"]
      | components["schemas"]["DoorRelayStateChangeEventType"]
      | components["schemas"]["DoorPositionIndicatorStateChangeEventType"]
      | components["schemas"]["RequestToExitStateChangeEventType"]
      | components["schemas"]["CredentialReceivedEventType"]
      | components["schemas"]["ButtonEventType"]
      | components["schemas"]["GenericInputStateChangeEventType"]
      | components["schemas"]["GenericRelayStateChangeEventType"]
      | components["schemas"]["AccessControlUnitTamperEventType"]
      | components["schemas"]["AccessControlUnitLocationLockdownStateEventType"]
      | components["schemas"]["DoorLocationLockdownStateEventType"]
      | components["schemas"]["PanicButtonEventType"]
      | components["schemas"]["AccessControlUnitBatteryStateChangeEventType"]
      | components["schemas"]["WaveToUnlockIntentExpiredEvent"]
      | components["schemas"]["DoorStateChangeEvent"]
      | components["schemas"]["DoorAuthFirstInStateEvent"]
      | components["schemas"]["DoorScheduleFirstInStateEvent"]
      | components["schemas"]["AccessControlUnitDoorFirstInStateEvent"]
      | components["schemas"]["AperioDtcEvent"]
      | components["schemas"]["AperioDoorExtensionStateEvent"]
    ) & {
      componentUuid?: string | null;
      correlationId?: string | null;
      createdAtMs?: number | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      timestampMs?: number | null;
      type?: components["schemas"]["ComponentEventEnumType"];
      uuid?: string | null;
    };
    ComponentReferenceType: {
      componentUuid?: string | null;
      deviceUuid?: string | null;
    };
    ComponentReferenceType_Minimal: {
      componentUuid?: string | null;
      deviceUuid?: string | null;
    };
    ComponentRelayOutputType: ComponentRelayOutputTypeEnum;
    ComponentSeekPointType: {
      activity?: components["schemas"]["ActivityEnum"];
      componentCompositeUuid?: string | null;
      componentUuid?: string | null;
      customActivityColor?: ComponentSeekPointCustomActivityColorEnum | null;
      customActivityDescription?: string | null;
      customActivityDisplayName?: string | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
      originalEvent?: { [key: string]: unknown } | null;
      ownerDeviceUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      timestampMs?: number | null;
      userUuid?: string | null;
      uuid?: string | null;
    };
    ComponentShadowEnumType: ComponentShadowEnumType;
    ComponentShadowType: (
      | components["schemas"]["DoorReaderShadowType"]
      | components["schemas"]["DoorRelayShadowType"]
      | components["schemas"]["DoorPositionIndicatorShadowType"]
      | components["schemas"]["RequestToExitShadowType"]
      | components["schemas"]["GenericInputShadowType"]
      | components["schemas"]["IntegratedDoorRelayType"]
      | components["schemas"]["GenericRelayShadowType"]
      | components["schemas"]["GenericButtonShadowType"]
      | components["schemas"]["AperioGatewayShadow"]
      | components["schemas"]["AperioDoorExtensionShadow"]
    ) & {
      componentUuid?: string | null;
      createdAtMillis?: number | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      type?: components["schemas"]["ComponentShadowEnumType"];
      updatedAtMillis?: number | null;
    };
    Component_AddAccessControlledDoorLabelWSRequest: {
      accessControlledDoorUuid?: string | null;
      label?: string | null;
    };
    Component_AddAccessControlledDoorLabelWSResponse: {
      [key: string]: unknown;
    };
    Component_AggregatedCredentialReceivedEventInfo: {
      firstEvent?: components["schemas"]["CredentialReceivedEventType"];
      lastEvent?: components["schemas"]["CredentialReceivedEventType"];
      totalCount?: number | null;
    };
    /** Door state overrides are temporary changes to door's lock/unlock state even if otherwise scheduled. They can be superseded or cancelled at anytime. */
    Component_ApplyAccessControlledDoorStateOverrideWSRequest: {
      /** RUUID of the target door */
      accessControlledDoorUuid: string | null;
      doorAuthFirstInState?: components["schemas"]["FirstInStatus"];
      doorScheduleFirstInState?: components["schemas"]["FirstInStatus"];
      expireEarlyMode?: components["schemas"]["EarlyExpireModeEnum"];
      /** A millisecond epoch time that represents when the override will end if not ended earlier by a regular schedule interval. Cannot be longer than 24 hours and default is 24hours long */
      expiresAtMillis?: number | null;
      /** Default is false if not specified, the door state override will ignore schedule first-in requirements (if applicable) if false */
      followFirstInRules?: boolean | null;
      /** Default is 0 if not specified, determines how long to wait before applying the override */
      startDelaySeconds?: number | null;
      state: components["schemas"]["AccessControlledDoorStateEnumType"];
    };
    Component_ApplyAccessControlledDoorStateOverrideWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
    };
    Component_CancelAccessControlledDoorStateOverrideWSRequest: {
      /** RUUID of the target door */
      accessControlledDoorUuid: string | null;
    };
    Component_CancelAccessControlledDoorStateOverrideWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
    };
    Component_CreateAccessControlledDoorSeekpointsWSRequest: {
      doorUuid?: string | null;
      seekPoints?: components["schemas"]["CustomFootageSeekPointType"][] | null;
    };
    Component_CreateAccessControlledDoorSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      successMsg?: string | null;
    };
    Component_CreateAccessControlledDoorWSRequest: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
      accessControlledDoorLabels?: (string | null)[] | null;
    };
    Component_CreateAccessControlledDoorWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** The Aperio-assigned ID of the door(s) and the Aperio-assigned ID of their lock device. */
    Component_CreateAperioDoorInfo: {
      aperioDoorDeviceId?: string | null;
      aperioDoorId?: string | null;
    };
    Component_CreateAperioDoorsWSRequest: {
      /** The Rhombus-assigned RUUID of the componentized Aperio Gateway that provides access to the door(s). */
      aperioGatewayComponentId: string | null;
      /** The Aperio-assigned ID of the door(s) and the Aperio-assigned ID of their lock device. */
      doors: components["schemas"]["Component_CreateAperioDoorInfo"][] | null;
      /** RUUID of the Rhombus device (e.g. door controller) connected to the Aperio gateway through which communication with Aperio's doors is achieved. */
      ownerDeviceUuid: string | null;
    };
    Component_CreateAperioDoorsWSResponse: {
      doors?: components["schemas"]["AccessControlledDoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      failedDoors?: components["schemas"]["AccessControlledDoorType"][] | null;
    };
    Component_CreateAperioGatewayWSRequest: {
      /** The Aperio-assigned ID of the gateway, given as a hex string, e.g. "034AB5". */
      aperioGatewayId: string | null;
      /** If enabled, also creates Aperio doors with this request. */
      includeAperioDoors?: boolean | null;
      /** RUUID of the Rhombus device (e.g. door controller) to be connected with the Aperio gateway. */
      ownerDeviceUuid: string | null;
    };
    Component_CreateAperioGatewayWSResponse: {
      component?: components["schemas"]["AperioGateway"];
      doors?: components["schemas"]["AccessControlledDoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      failedDoors?: components["schemas"]["AccessControlledDoorType"][] | null;
    };
    Component_CreateIntegratedDoorPositionIndicatorWSRequest: {
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["DoorPositionIndicatorPortType"];
    };
    Component_CreateIntegratedDoorPositionIndicatorWSResponse: {
      component?: components["schemas"]["IntegratedDoorPositionIndicatorType"];
    };
    Component_CreateIntegratedDoorRelayWSRequest: {
      name?: string | null;
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["DoorRelayPortType"];
    };
    Component_CreateIntegratedDoorRelayWSResponse: {
      component?: components["schemas"]["IntegratedDoorRelayType"];
    };
    Component_CreateIntegratedGenericButtonWSRequest: {
      mode?: components["schemas"]["ButtonModeEnum"];
      name?: string | null;
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["ButtonPortType"];
    };
    Component_CreateIntegratedGenericButtonWSResponse: {
      component?: components["schemas"]["IntegratedGenericButtonType"];
    };
    Component_CreateIntegratedGenericInputWSRequest: {
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["AuxiliaryInputPortType"];
    };
    Component_CreateIntegratedGenericInputWSResponse: {
      component?: components["schemas"]["IntegratedGenericInputType"];
    };
    Component_CreateIntegratedGenericRelayWSRequest: {
      name?: string | null;
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["AuxiliaryRelayPortType"];
      steadyState?: components["schemas"]["GenericRelayStateEnumType"];
    };
    Component_CreateIntegratedGenericRelayWSResponse: {
      component?: components["schemas"]["IntegratedGenericRelayType"];
    };
    Component_CreateIntegratedRequestToExitWSRequest: {
      intentOnly?: boolean | null;
      intentOnlyEvents?: boolean | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["RequestToExitPortType"];
    };
    Component_CreateIntegratedRequestToExitWSResponse: {
      component?: components["schemas"]["IntegratedRequestToExitType"];
    };
    Component_CreateOsdpReaderWSRequest: {
      allowUnencrypted?: boolean | null;
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["OsdpReaderPortType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
    };
    Component_CreateOsdpReaderWSResponse: {
      component?: components["schemas"]["OsdpDoorReaderType"];
    };
    Component_CreateRhombusOsdpReaderWSRequest: {
      deviceUuid?: string | null;
      disableCardReader?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      ownerDeviceUuid?: string | null;
      port?: components["schemas"]["OsdpReaderPortType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
    };
    Component_CreateRhombusOsdpReaderWSResponse: {
      component?: components["schemas"]["RhombusOsdpDoorReaderType"];
    };
    Component_CreateWiegandReaderWSRequest: {
      buzzerPort?: components["schemas"]["WiegandOutputPortType"];
      d0Port?: components["schemas"]["WiegandDataPortType"];
      d1Port?: components["schemas"]["WiegandDataPortType"];
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      gledPort?: components["schemas"]["WiegandOutputPortType"];
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      ownerDeviceUuid?: string | null;
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      rledPort?: components["schemas"]["WiegandOutputPortType"];
      tamperPort?: components["schemas"]["WiegandInputPortType"];
    };
    Component_CreateWiegandReaderWSResponse: {
      component?: components["schemas"]["WiegandDoorReaderType"];
    };
    Component_DeleteAccessControlledDoorWSRequest: {
      accessControlledDoorUuid?: string | null;
    };
    Component_DeleteAccessControlledDoorWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
    };
    Component_DeleteComponentWSRequest: {
      componentUuid?: string | null;
    };
    Component_DeleteComponentWSResponse: { [key: string]: unknown };
    Component_DeleteComponentsByOwnerDeviceWSRequest: {
      ownerDeviceUuid?: string | null;
    };
    Component_DeleteComponentsByOwnerDeviceWSResponse: {
      [key: string]: unknown;
    };
    Component_FindAccessControlledDoorShadowsByLocationWSRequest: {
      lastEvaluatedKey?: string | null;
      locationUuid?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindAccessControlledDoorShadowsByLocationWSResponse: {
      lastEvaluatedKey?: string | null;
      shadows?: components["schemas"]["AccessControlledDoorShadow"][] | null;
    };
    Component_FindAccessControlledDoorShadowsWSRequest: {
      lastEvaluatedKey?: string | null;
      locationUuid?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindAccessControlledDoorShadowsWSResponse: {
      lastEvaluatedKey?: string | null;
      shadows?: components["schemas"]["AccessControlledDoorShadow"][] | null;
    };
    Component_FindAccessControlledDoorsByLocationWSRequest: {
      lastEvaluatedKey?: string | null;
      locationUuid?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindAccessControlledDoorsByLocationWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["AccessControlledDoorType"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Component_FindAccessControlledDoorsByOwnerDeviceWSRequest: {
      ownerDeviceUuid?: string | null;
    };
    Component_FindAccessControlledDoorsByOwnerDeviceWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["AccessControlledDoorType"][]
        | null;
    };
    Component_FindAccessControlledDoorsWSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindAccessControlledDoorsWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["AccessControlledDoorType"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Component_FindAllComponentShadowsWSRequest: {
      componentUuids?: (string | null)[] | null;
    };
    Component_FindAllComponentShadowsWSResponse: {
      acuComponentShadowMap?: {
        [key: string]: components["schemas"]["ComponentShadowType"];
      } | null;
    };
    Component_FindComponentEventsByAccessControlledDoorWSRequest: {
      accessControlledDoorUuid?: string | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByAccessControlledDoorWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Component_FindComponentEventsByApiTokenWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      tokenUuid?: string | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByApiTokenWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByComponentWSRequest: {
      componentUuid?: string | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByComponentWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByCorrelationWSRequest: {
      correlationId?: string | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByCorrelationWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByCredentialHexValueWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      credentialHexValue?: string | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByCredentialHexValueWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByCredentialUuidWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      credentialUuid?: string | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByCredentialUuidWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByCredentialValueWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      credentialValue?: string | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByCredentialValueWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByLocationWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      locationUuid?: string | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByLocationWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByOwnerDeviceWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      ownerDeviceUuid?: string | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsByOwnerDeviceWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsBySupportAuthorityWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      supportAuthorityUuid?: string | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsBySupportAuthorityWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsByUserWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
      userUuid?: string | null;
    };
    Component_FindComponentEventsByUserWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsForCurrentUserWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsForCurrentUserWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsForOrgDashboardWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      reverseSearch?: boolean | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Component_FindComponentEventsForOrgDashboardWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
    };
    Component_FindComponentEventsForVideoIntercomWSRequest: {
      accessControlledDoorUuid?: string | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
      videoIntercomUuid?: string | null;
    };
    Component_FindComponentEventsForVideoIntercomWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Component_FindComponentSeekPointsByAccessControlledDoorWSRequest: {
      accessControlledDoorUuid?: string | null;
      durationSec?: number | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByAccessControlledDoorWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentSeekPointsByAccessControlledDoorsWSRequest: {
      accessControlledDoorUuidList?: (string | null)[] | null;
      durationSec?: number | null;
      sortResponse?: boolean | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByAccessControlledDoorsWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentSeekPointsByComponentWSRequest: {
      componentUuid?: string | null;
      durationSec?: number | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByComponentWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentSeekPointsByLocationWSRequest: {
      durationSec?: number | null;
      locationUuid?: string | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByLocationWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentSeekPointsByOwnerDeviceWSRequest: {
      durationSec?: number | null;
      ownerDeviceUuid?: string | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Component_FindComponentSeekPointsByOwnerDeviceWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentSeekPointsByUserWSRequest: {
      durationSec?: number | null;
      startTimeSecEpochExclusive?: number | null;
      userUuid?: string | null;
    };
    Component_FindComponentSeekPointsByUserWSResponse: {
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Component_FindComponentShadowsByOwnerDeviceWSRequest: {
      ownerDeviceUuid?: string | null;
    };
    Component_FindComponentShadowsByOwnerDeviceWSResponse: {
      componentShadows?: components["schemas"]["ComponentShadowType"][] | null;
    };
    Component_FindComponentsByOwnerDeviceWSRequest: {
      ownerDeviceUuid?: string | null;
    };
    Component_FindComponentsByOwnerDeviceWSResponse: {
      components?: components["schemas"]["BaseComponentType"][] | null;
    };
    Component_FindDistinctOriginatorCredentialReceivedEventsByAccessControlledDoorWSRequest: {
      accessControlledDoorUuid?: string | null;
      activityFilter?: components["schemas"]["ActivityEnum"][] | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      credSourceFilter?:
        | components["schemas"]["CredentialSourceEnumType"][]
        | null;
      originatorTypeFilter?:
        | components["schemas"]["EventOriginatorEnum"][]
        | null;
      userFilter?: (string | null)[] | null;
    };
    Component_FindDistinctOriginatorCredentialReceivedEventsByAccessControlledDoorWSResponse: {
      events?:
        | components["schemas"]["Component_AggregatedCredentialReceivedEventInfo"][]
        | null;
    };
    Component_FindDistinctOriginatorCredentialReceivedEventsByLocationWSRequest: {
      activityFilter?: components["schemas"]["ActivityEnum"][] | null;
      componentCompositeFilter?: (string | null)[] | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      credSourceFilter?:
        | components["schemas"]["CredentialSourceEnumType"][]
        | null;
      locationUuid?: string | null;
      originatorTypeFilter?:
        | components["schemas"]["EventOriginatorEnum"][]
        | null;
      userFilter?: (string | null)[] | null;
    };
    Component_FindDistinctOriginatorCredentialReceivedEventsByLocationWSResponse: {
      events?:
        | components["schemas"]["Component_AggregatedCredentialReceivedEventInfo"][]
        | null;
    };
    Component_FindMinimalStateAccessControlledDoorsByLocationWSRequest: {
      lastEvaluatedKey?: string | null;
      locationUuid?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindMinimalStateAccessControlledDoorsByLocationWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["Component_MinimalStateAccessControlledDoor"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Component_FindMinimalStateAccessControlledDoorsWSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    Component_FindMinimalStateAccessControlledDoorsWSResponse: {
      accessControlledDoors?:
        | components["schemas"]["Component_MinimalStateAccessControlledDoor"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Component_GetAccessControlledDoorLabelsForOrgWSRequest: {
      [key: string]: unknown;
    };
    Component_GetAccessControlledDoorLabelsForOrgWSResponse: {
      accessControlledDoorLabels?: {
        [key: string]: (string | null)[] | null;
      } | null;
    };
    /** Determines the expected door state based on the current time and current door configuration */
    Component_GetCurrentExpectedAccessControlledDoorStateWSRequest: {
      /** RUUID of the target door */
      accessControlledDoorUuid: string | null;
    };
    Component_GetCurrentExpectedAccessControlledDoorStateWSResponse: {
      activeDoorState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      activeDoorStateSource?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      defaultDoorStateSource?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      defaultState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      doorStateIfFirstInRequired?: components["schemas"]["AccessControlledDoorStateEnumType"];
      doorStateIfFirstInSatisfied?: components["schemas"]["AccessControlledDoorStateEnumType"];
      doorStateSourceIfFirstInRequired?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      doorStateSourceIfFirstInSatisfied?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      firstInRequirementEnabled?: boolean | null;
      firstInRequirementSatisfied?: boolean | null;
      nextNearestSchedule?: components["schemas"]["Schedule_AccessControlledDoorNextNearestSchedule"];
    };
    Component_GetFullAccessControlledDoorShadowWSRequest: {
      accessControlledDoorUuid?: string | null;
    };
    Component_GetFullAccessControlledDoorShadowWSResponse: {
      doorComponentShadowMap?: {
        [key: string]: components["schemas"]["ComponentShadowType"];
      } | null;
      doorShadow?: components["schemas"]["AccessControlledDoorShadow"];
    };
    Component_GetOrCreateDevicePhysicalPortConfigWSRequest: {
      ownerDeviceUuid?: string | null;
    };
    Component_GetOrCreateDevicePhysicalPortConfigWSResponse: {
      detectedInvalidPortConfigs?:
        | components["schemas"]["InvalidPhysicalPortConfigType"][]
        | null;
      deviceComponents?: components["schemas"]["BaseComponentType"][] | null;
      devicePhysicalPortConfig?: components["schemas"]["DevicePhysicalPortConfigType"];
    };
    Component_MinimalStateAccessControlledDoor: {
      door?: components["schemas"]["AccessControlledDoorType"];
      shadow?: components["schemas"]["AccessControlledDoorShadow"];
    };
    Component_RemoveAccessControlledDoorLabelWSRequest: {
      accessControlledDoorUuid?: string | null;
      label?: string | null;
    };
    Component_RemoveAccessControlledDoorLabelWSResponse: {
      [key: string]: unknown;
    };
    Component_UpdateAccessControlledDoorWSRequest: {
      accessControlledDoorUuid?: string | null;
      ajarTimeSec?: number | null;
      associatedCameras?: (string | null)[] | null;
      associatedFaceDetectionCameras?: (string | null)[] | null;
      defaultState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      directionRadians?: number | null;
      doorStateToScheduleUuidMap?: { [key: string]: string | null } | null;
      dpiComponents?: components["schemas"]["ComponentReferenceType"][] | null;
      floorNumber?: number | null;
      forceAllReadersFirstInAuthRequiredLedFeedbackEnabled?: boolean | null;
      forceAllReadersFirstInUnlockPendingLedFeedbackEnabled?: boolean | null;
      forceAllReadersOtherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      forceAllReadersRemoteUnlockAudioFeedbackEnabled?: boolean | null;
      forcedOpenEnabled?: boolean | null;
      forcedOpenTimeSec?: number | null;
      geofenceEnabled?: boolean | null;
      geofenceRadius?: number | null;
      latitude?: number | null;
      longitude?: number | null;
      name?: string | null;
      policyUuid?: string | null;
      proximityUnlockSettings?: components["schemas"]["ProximityUnlockSettingsType"];
      readerComponents?:
        | components["schemas"]["ComponentReferenceType"][]
        | null;
      relayComponents?:
        | components["schemas"]["ComponentReferenceType"][]
        | null;
      relockAfterOpenTimeMs?: number | null;
      remoteUnlockEnabled?: boolean | null;
      rexComponents?: components["schemas"]["ComponentReferenceType"][] | null;
      unlockTimeSec?: number | null;
      unlockTimeSecRex?: number | null;
      waveToUnlockSettings?: components["schemas"]["WaveToUnlockSettingsType"];
    };
    Component_UpdateAccessControlledDoorWSResponse: {
      accessControlledDoor?: components["schemas"]["AccessControlledDoorType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Component_UpdateIntegratedDoorPositionIndicatorWSRequest: {
      componentUuid?: string | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      port?: components["schemas"]["DoorPositionIndicatorPortType"];
    };
    Component_UpdateIntegratedDoorPositionIndicatorWSResponse: {
      component?: components["schemas"]["IntegratedDoorPositionIndicatorType"];
    };
    Component_UpdateIntegratedDoorRelayWSRequest: {
      componentUuid?: string | null;
      name?: string | null;
      port?: components["schemas"]["DoorRelayPortType"];
    };
    Component_UpdateIntegratedDoorRelayWSResponse: {
      component?: components["schemas"]["IntegratedDoorRelayType"];
    };
    Component_UpdateIntegratedGenericButtonWSRequest: {
      componentUuid?: string | null;
      mode?: components["schemas"]["ButtonModeEnum"];
      name?: string | null;
      port?: components["schemas"]["ButtonPortType"];
    };
    Component_UpdateIntegratedGenericButtonWSResponse: {
      component?: components["schemas"]["IntegratedGenericButtonType"];
    };
    Component_UpdateIntegratedGenericInputWSRequest: {
      componentUuid?: string | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      port?: components["schemas"]["AuxiliaryInputPortType"];
    };
    Component_UpdateIntegratedGenericInputWSResponse: {
      component?: components["schemas"]["IntegratedGenericInputType"];
    };
    Component_UpdateIntegratedGenericRelaySteadyStateWSRequest: {
      componentUuid?: string | null;
      steadyState?: components["schemas"]["GenericRelayStateEnumType"];
    };
    Component_UpdateIntegratedGenericRelaySteadyStateWSResponse: {
      component?: components["schemas"]["IntegratedGenericRelayType"];
    };
    Component_UpdateIntegratedGenericRelayTransientStateWSRequest: {
      activate?: boolean | null;
      componentUuid?: string | null;
      correlationUuid?: string | null;
      deviceUuid?: string | null;
      durationMs?: number | null;
    };
    Component_UpdateIntegratedGenericRelayTransientStateWSResponse: {
      success?: boolean | null;
    };
    Component_UpdateIntegratedGenericRelayWSRequest: {
      componentUuid?: string | null;
      name?: string | null;
      port?: components["schemas"]["AuxiliaryRelayPortType"];
    };
    Component_UpdateIntegratedGenericRelayWSResponse: {
      component?: components["schemas"]["IntegratedGenericRelayType"];
    };
    Component_UpdateIntegratedRequestToExitWSRequest: {
      componentUuid?: string | null;
      intentOnly?: boolean | null;
      intentOnlyEvents?: boolean | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      port?: components["schemas"]["RequestToExitPortType"];
    };
    Component_UpdateIntegratedRequestToExitWSResponse: {
      component?: components["schemas"]["IntegratedRequestToExitType"];
    };
    Component_UpdateOsdpReaderWSRequest: {
      componentUuid?: string | null;
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      port?: components["schemas"]["OsdpReaderPortType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
    };
    Component_UpdateOsdpReaderWSResponse: {
      component?: components["schemas"]["OsdpDoorReaderType"];
    };
    Component_UpdateRhombusOsdpReaderWSRequest: {
      componentUuid?: string | null;
      disableCardReader?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      port?: components["schemas"]["OsdpReaderPortType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
    };
    Component_UpdateRhombusOsdpReaderWSResponse: {
      component?: components["schemas"]["RhombusOsdpDoorReaderType"];
    };
    Component_UpdateWiegandReaderWSRequest: {
      buzzerPort?: components["schemas"]["WiegandOutputPortType"];
      componentUuid?: string | null;
      d0Port?: components["schemas"]["WiegandDataPortType"];
      d1Port?: components["schemas"]["WiegandDataPortType"];
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      gledPort?: components["schemas"]["WiegandOutputPortType"];
      name?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      rledPort?: components["schemas"]["WiegandOutputPortType"];
      tamperPort?: components["schemas"]["WiegandInputPortType"];
    };
    Component_UpdateWiegandReaderWSResponse: {
      component?: components["schemas"]["WiegandDoorReaderType"];
    };
    Consignee: {
      address1?: string | null;
      address2?: string | null;
      address3?: string | null;
      city?: string | null;
      companyName?: string | null;
      contactName?: string | null;
      country?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      state?: string | null;
    };
    ContentDisposition: {
      attachment?: boolean | null;
      charset?: {
        registered?: boolean | null;
      } | null;
      creationDate?: string | null;
      filename?: string | null;
      formData?: boolean | null;
      inline?: boolean | null;
      modificationDate?: string | null;
      name?: string | null;
      readDate?: string | null;
      size?: number | null;
      type?: string | null;
    };
    ContextRecord: {
      contextId?: string | null;
      expiresAtMs?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      principalUuid?: string | null;
      queriedAtMs?: number | null;
    };
    ContextRecordSelectiveUpdate: {
      realTarget?: components["schemas"]["ContextRecord"];
      updatedFieldNameMap?: { [key: string]: boolean | null } | null;
    };
    CountingActivityEventType:
      | ({
          countingThreshold?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    CredentialEntry: {
      credSource?: components["schemas"]["CredentialSourceEnumType"];
      credentialId?: string | null;
      firstInEligible?: boolean | null;
      originator?: components["schemas"]["BaseEventOriginator"];
    } | null;
    CredentialEntryBleWave:
      | ({
          finalRssi?: number | null;
          firstRssi?: number | null;
          firstRssiAtIntentElapsed?: number | null;
          lostAtIntentElapsed?: number | null;
          lostAtRssi?: number | null;
          maxRssi?: number | null;
          maxRssiAtIntentElapsed?: number | null;
          sessionFirstRssi?: number | null;
          sessionFirstRssiAtElapsed?: number | null;
          sessionLostAtElapsed?: number | null;
          sessionLostAtRssi?: number | null;
          sessionMaxRssi?: number | null;
          sessionMaxRssiAtElapsed?: number | null;
        } & {
          credSource?: components["schemas"]["CredentialSourceEnumType"];
          credentialId?: string | null;
          firstInEligible?: boolean | null;
          originator?: components["schemas"]["BaseEventOriginator"];
        })
      | null;
    CredentialQueryFilter: {
      credTypeFilter?:
        | components["schemas"]["AccessControlCredentialEnumType"][]
        | null;
      lastUsedAccessControlledDoorUuidFilter?: (string | null)[] | null;
      lastUsedAfterFilter?: number | null;
      lastUsedBeforeFilter?: number | null;
      lastUsedLocationUuidFilter?: (string | null)[] | null;
      workflowStatusFilter?:
        | components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"][]
        | null;
    };
    CredentialReceivedEventType:
      | ({
          accessGrantOrRevocationUuid?: string | null;
          activeDoorLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
          activeLockdownPlanUuid?: string | null;
          appName?: string | null;
          appOS?: string | null;
          appVersion?: string | null;
          authDecisionSource?: components["schemas"]["AuthDecisionSourceEnum"];
          authDecisionUuid?: string | null;
          authWaitTimeMs?: number | null;
          authenticationResult?: components["schemas"]["AccessControlAuthenticationResultEnumType"];
          authorizationResult?: components["schemas"]["AccessControlAuthorizationResultEnumType"];
          componentCompositeUuid?: string | null;
          credSource?: components["schemas"]["CredentialSourceEnumType"];
          credentialHexValue?: string | null;
          credentialUuid?: string | null;
          credentialValue?: string | null;
          credentialValueLengthBits?: number | null;
          credentials?: components["schemas"]["CredentialEntry"][] | null;
          deviceModel?: string | null;
          managedCredentialUuid?: string | null;
          originator?: components["schemas"]["BaseEventOriginator"];
          satisfiesFirstInSettingsUuid?: string | null;
          userAgent?: string | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    CredentialSourceEnumType: CredentialSourceEnumType;
    CroppedPermyriadRect: {
      height?: number | null;
      width?: number | null;
      x?: number | null;
      y?: number | null;
    };
    CrossingCountsType: {
      egressCount?: number | null;
      ingressCount?: number | null;
      timestampMs?: number | null;
    };
    CustomFootageSeekPointType: {
      /** Custom activity seekpoint color */
      color?: CustomFootageSeekPointColorEnum | null;
      /** Custom activity display description, maximum 100 characters */
      description?: string | null;
      /** Whether to display this seekpoint as an overlay in Console */
      displayOverlay?: boolean | null;
      /** Custom activity display name, maximum 32 characters */
      name: string | null;
      /** UNIX MS timestamp */
      timestampMs: number | null;
    };
    CustomImageElement:
      | ({
          height?: number | null;
          imageUuid?: string | null;
          width?: number | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    CustomTextElement:
      | ({
          color?: string | null;
          content?: string | null;
          maxWidth?: number | null;
          style?: string | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    CustomerShipmentType: {
      "ait-aitTrackingNumber"?: string | null;
      "ait-carrierTrackingNumber"?: string | null;
      "ait-depositorOrderNumber"?: string | null;
      "ait-destinationAddress"?: string | null;
      "ait-isIngramDistributorShipment"?: boolean | null;
      "ait-shipmentDate"?: string | null;
      "ait-shippedItems"?: components["schemas"]["ShippedItemType"][] | null;
      interchangeControlNumber?: string | null;
      lastStateUpdateSec?: number | null;
      "rhombus-additionalEmails"?: string | null;
      "rhombus-chosenCarrierName"?: string | null;
      "rhombus-claimKeyToLicenseMap"?: {
        [key: string]: (string | null)[] | null;
      } | null;
      "rhombus-claimKeyToLicenseMapV2"?: {
        [key: string]: {
          [
            key: string
          ]: components["schemas"]["SalesforceLicenseStartDateTimeAndEndDateTime"];
        } | null;
      } | null;
      "rhombus-customerEmails"?: string | null;
      "rhombus-customerName"?: string | null;
      "rhombus-orgUuid"?: string | null;
      "rhombus-partnerOrgUuid"?: string | null;
      "rhombus-purchaseOrderNumber"?: string | null;
      "rhombus-rmaReturnTrackingNumber"?: string | null;
      "rhombus-rmaUuid"?: string | null;
      "rhombus-rmaUuids"?: (string | null)[] | null;
      "rhombus-salesForceOpportunityId"?: string | null;
      "rhombus-zendeskTicketNumber"?: string | null;
      shipmentCategory?: CustomerShipmentShipmentCategoryEnum | null;
      shipmentEmailState?: CustomerShipmentShipmentEmailStateEnum | null;
      shipmentState?: CustomerShipmentShipmentStateEnum | null;
      uuid?: string | null;
    };
    Customer_AcceptUsagePolicyRequest: { [key: string]: unknown };
    Customer_AcceptUsagePolicyResponse: { [key: string]: unknown };
    Customer_DeleteNotificationSnoozeSettingWSRequest: {
      uuid?: string | null;
    };
    Customer_DeleteNotificationSnoozeSettingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Customer_GetCurrentPartnerUserWSRequest: { [key: string]: unknown };
    Customer_GetCurrentPartnerUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      flags?: { [key: string]: string | null } | null;
      notificationSettings?: components["schemas"]["PartnerNotificationSettingsType"];
      notificationSettingsV2?: components["schemas"]["PartnerNotificationSettingsV2"];
      permissionGroupUuid?: string | null;
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    Customer_GetCurrentRhombusKeyUserWSRequest: { [key: string]: unknown };
    Customer_GetCurrentRhombusKeyUserWSResponse: {
      orgDetails?: components["schemas"]["User_RhombusKeyOrgDetailsType"];
      rhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    Customer_GetCurrentUserConsoleOrgsForContextSwitchWSRequest: {
      [key: string]: unknown;
    };
    Customer_GetCurrentUserConsoleOrgsForContextSwitchWSResponse: {
      orgs?:
        | components["schemas"]["Customer_SelectableOrgForContextSwitch"][]
        | null;
    };
    Customer_GetCurrentUserRhombusKeyOrgsForContextSwitchWSRequest: {
      [key: string]: unknown;
    };
    Customer_GetCurrentUserRhombusKeyOrgsForContextSwitchWSResponse: {
      orgs?:
        | components["schemas"]["Customer_SelectableOrgForContextSwitch"][]
        | null;
    };
    Customer_GetCurrentUserSessionsWSRequest: { [key: string]: unknown };
    Customer_GetCurrentUserSessionsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sessions?: components["schemas"]["SessionInfoWSType"][] | null;
    };
    Customer_GetCurrentUserWSRequest: { [key: string]: unknown };
    Customer_GetCurrentUserWSResponse: {
      customizations?: components["schemas"]["UserCustomizationsType"];
      error?: boolean | null;
      errorMsg?: string | null;
      flags?: { [key: string]: string | null } | null;
      notificationSettings?: components["schemas"]["UserNotificationSettingsV3Type"];
      notificationSettingsV2?: components["schemas"]["UserNotificationSettingsV4Type"];
      permissionGroupUuid?: string | null;
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    Customer_GetDashboardStatusWSResponse: {
      dashboardStatus?: components["schemas"]["DashboardStatus"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Customer_GetDashboardstatusWSRequest: { [key: string]: unknown };
    Customer_GetRhombusKeyConfigForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    Customer_GetRhombusKeyConfigForCurrentUserWSResponse: {
      userRhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
    };
    Customer_GetUserSnoozedNotificationSettingsWSRequest: {
      [key: string]: unknown;
    };
    Customer_GetUserSnoozedNotificationSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      snoozedForAllNotificationsIntervals?:
        | components["schemas"]["ScheduledIntervalType"][]
        | null;
      snoozedForComponentCompositesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      snoozedForDevicesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      snoozedForLocationsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
    };
    Customer_LogoutAllOtherCurrentUserSessionsRequest: {
      [key: string]: unknown;
    };
    Customer_LogoutAllOtherCurrentUserSessionsResponse: {
      [key: string]: unknown;
    };
    Customer_SelectableOrgForContextSwitch: {
      companyThumbnailLogoUrl?: string | null;
      orgName?: string | null;
      orgUuid?: string | null;
      rhombusKeyLogoUrl?: string | null;
      userName?: string | null;
    };
    Customer_SetFlagWSRequest: {
      flagName?: string | null;
      flagValue?: string | null;
    };
    Customer_SetFlagWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Customer_SnoozeAllNotificationsWSRequest: {
      durationSec?: number | null;
      scheduledTimestampSec?: number | null;
    };
    Customer_SnoozeAllNotificationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Customer_SnoozeNotificationsWSRequest: {
      componentCompositeUuids?: (string | null)[] | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      locationUuids?: (string | null)[] | null;
      scheduledTimestampSec?: number | null;
    };
    Customer_SnoozeNotificationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Customer_UpdateCurrentPartnerWSRequest: {
      bypassSaml?: boolean | null;
      mfaEnabled?: boolean | null;
      name?: string | null;
      notificationSettings?: components["schemas"]["PartnerNotificationSettingsType"];
      permissionGroupUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
    };
    Customer_UpdateCurrentPartnerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Customer_UpdateCurrentUserWSRequest: {
      dashboardCustomizations?: components["schemas"]["DashboardCustomizations"];
      mfaEnabled?: boolean | null;
      name?: string | null;
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
    };
    Customer_UpdateCurrentUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Customer_UpdateDashboardCustomizationsWSRequest: {
      fullCamera?: string | null;
      fullCameraUpdated?: boolean | null;
      halfCamera?: string | null;
      halfCameraUpdated?: boolean | null;
      layout?: string | null;
      layoutUpdated?: boolean | null;
      rememberedLocation?: string | null;
      rememberedLocationUpdated?: boolean | null;
      report?: string | null;
      reportUpdated?: boolean | null;
      videoWall?: string | null;
      videoWallUpdated?: boolean | null;
    };
    Customer_UpdateDashboardCustomizationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Customer_UpdateFrontendCustomizationsWSRequest: {
      customizations?: { [key: string]: string | null } | null;
    };
    Customer_UpdateFrontendCustomizationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Customer_UpdateRhombusKeyPreferencesForCurrentUserWSRequest: {
      favoriteAccessControlledDoorUuids?: (string | null)[] | null;
      favoriteAccessControlledDoorUuidsUpdated?: boolean | null;
    };
    Customer_UpdateRhombusKeyPreferencesForCurrentUserWSResponse: {
      userRhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
    };
    DailyFirstInReset:
      | ({
          minuteOfDay?: number | null;
        } & {
          type?: components["schemas"]["FirstInResetEnum"];
        })
      | null;
    DashboardCustomizations: {
      fullCamera?: string | null;
      halfCamera?: string | null;
      layout?: string | null;
      rememberedLocation?: string | null;
      report?: string | null;
      videoWall?: string | null;
    };
    DashboardStatus: {
      camerasDown?: number | null;
      camerasDownByLocation?: { [key: string]: number | null } | null;
      camerasUp?: number | null;
      healthStatusIndicator?: DashboardStatusHealthStatusIndicatorEnum | null;
      healthStatusMsg?: string | null;
      locationCameraStatus?: {
        [key: string]: { [key: string]: boolean | null } | null;
      } | null;
      totalCameras?: number | null;
      totalClimateSensors?: number | null;
      totalDoorSensors?: number | null;
      totalLocations?: number | null;
      totalProximitySensors?: number | null;
    };
    DateRangeFilter: {
      /** End of the date range to filter local end date. This date is inclusive. */
      localEndDateRangeEnd?: string | null;
      /** Start of the date range to filter local end date. This date is inclusive. */
      localEndDateRangeStart?: string | null;
      /** End of the date range to filter local start date. This date is inclusive. */
      localStartDateRangeEnd?: string | null;
      /** Start of the date range to filter local start date. This date is inclusive. */
      localStartDateRangeStart?: string | null;
    };
    DeleteSharedLiveVideoStreamForDeviceResponse: { [key: string]: unknown };
    Developer_CreateEventListenerWSRequest: {
      eventListner?: components["schemas"]["EventListenerType"];
    };
    Developer_CreateEventListenerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      eventListenerUuid?: string | null;
    };
    Developer_DeleteEventListenerWSRequest: {
      eventListenerUuid?: string | null;
    };
    Developer_DeleteEventListenerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Developer_GetAllEventListenersWSRequest: { [key: string]: unknown };
    Developer_GetAllEventListenersWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      eventListeners?: components["schemas"]["EventListenerType"][] | null;
    };
    Developer_GetEventListenersForDeviceWSRequest: {
      deviceUuid?: string | null;
    };
    Developer_GetEventListenersForDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      eventListeners?: components["schemas"]["EventListenerType"][] | null;
    };
    DeviceActivityRuleTriggerType:
      | ({
          activityEvent?: components["schemas"]["SimpleDeviceActivityEventType"];
          componentCompositeUuids?: (string | null)[] | null;
          componentUuids?: (string | null)[] | null;
          deviceLabels?: (string | null)[] | null;
          deviceUuids?: (string | null)[] | null;
          locationUuids?: (string | null)[] | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    DeviceAssignableLicenseGroupStats: {
      assignedCount?: number | null;
      deviceLicenseFamilyStats?:
        | components["schemas"]["DeviceLicenseFamilyStats"][]
        | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    DeviceCatalogItem:
      | ({
          cloudArchiveDays?: number | null;
          deviceType?: components["schemas"]["DeviceTypeEnum"];
          licenseFamily?: DeviceCatalogItemLicenseFamilyEnum | null;
          licenseType?: components["schemas"]["License"];
        } & {
          durationMonths?: number | null;
          productCode?: string | null;
          productType?: DeviceCatalogItemProductTypeEnum | null;
        })
      | null;
    DeviceEventRecordType: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      componentCompositeUuid?: string | null;
      componentUuid?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      deviceUuid?: string | null;
      eventUuid?: string | null;
      hardwareVariation?: components["schemas"]["HardwareVariationEnum"];
      locationUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      timestampMs?: number | null;
    };
    /** facet information for media */
    DeviceFacet: DeviceFacetEnum;
    DeviceFeatureEnum: DeviceFeatureEnum;
    DeviceHealthStatusDetailsEnum: DeviceHealthStatusDetailsEnum;
    DeviceIntegrationSettings: {
      latitude?: number | null;
      longitude?: number | null;
      name?: string | null;
    } | null;
    DeviceIntegrationType:
      | ({
          deviceSettingsMap?: {
            [key: string]: components["schemas"]["DeviceIntegrationSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    DeviceLicenseFamilyStats: {
      assignedCount?: number | null;
      deviceLicenseFamily?: DeviceLicenseFamilyStatsDeviceLicenseFamilyEnum | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    DeviceLicenseType: {
      claimKeyUuid?: string | null;
      createdOn?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      deviceUuid?: string | null;
      features?: components["schemas"]["LicenseFeature"][] | null;
      firstAssignedDate?: string | null;
      licenseFamily?: DeviceLicenseLicenseFamilyEnum | null;
      licenseToUnassignEmailState?: DeviceLicenseLicenseToUnassignEmailStateEnum | null;
      licenseType?: components["schemas"]["License"];
      maxDeleteDate?: string | null;
      orgUuid?: string | null;
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: DeviceLicenseProductTypeEnum | null;
      state?: DeviceLicenseStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      uuid?: string | null;
    };
    DeviceOrientationEnum: DeviceOrientationEnum;
    DevicePhysicalPortConfigType: {
      boardMap?: {
        [key: string]: components["schemas"]["BoardPhysicalPortConfigType"];
      } | null;
      createdAtMillis?: number | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      updatedAtMillis?: number | null;
    };
    DeviceSchedule: {
      invertSchedule?: boolean | null;
      scheduleUuid?: string | null;
      unscheduledMessage?: string | null;
    };
    DeviceStatusEnum: DeviceStatusEnum;
    DeviceTargetScope: DeviceTargetScopeEnum;
    DeviceTypeEnum: DeviceTypeEnum;
    DeviceTypeV2: {
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      hardwareId?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      mummified?: boolean | null;
      name?: string | null;
      orgUuid?: string | null;
      pending?: boolean | null;
      policyUuid?: string | null;
      serialNumber?: string | null;
      type?: components["schemas"]["DeviceTypeEnum"];
      uuid?: string | null;
    };
    /** Update selective video settings */
    DeviceVideoSettingsSelectiveUpdate: {
      alert_rate_limit_human_only?: components["schemas"]["BurstyRateLimit"];
      alert_rate_limit_motion_only?: components["schemas"]["BurstyRateLimit"];
      alert_rate_limit_vehicle_only?: components["schemas"]["BurstyRateLimit"];
      ir_double_tap?: boolean | null;
      ir_filter_mode?: DeviceVideoSettingsSelectiveUpdateIrFilterModeEnum | null;
      ir_leds_mode?: DeviceVideoSettingsSelectiveUpdateIrLedsModeEnum | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    Deviceconfig_GetConfigWSRequest: {
      deviceUuid?: string | null;
    };
    Deviceconfig_GetFacetedUserConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_ExternalReadableFacetedUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Add which settings need to be updated */
    Deviceconfig_UpdateFacetedUserConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_ExternalUpdateableFacetedUserConfig"];
    };
    /** Update Audio settings */
    Deviceconfig_settings_ExternalAudioSettingsSelectiveUpdate: {
      audio_aec_via_software?: boolean | null;
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: ExternalAudioSettingsSelectiveUpdateLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: ExternalAudioSettingsSelectiveUpdateLedModeWhenInactiveEnum | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    Deviceconfig_settings_ExternalDeviceSettingsSelectiveUpdate: {
      bandwidth_reports_disabled?: boolean | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      snapshot_upload_target?: ExternalDeviceSettingsSelectiveUpdateSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: ExternalDeviceSettingsSelectiveUpdateThumbstripUploadTargetEnum | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      vlan_ip_v4_address?: number | null;
    };
    /** Update Door Controller settings */
    Deviceconfig_settings_ExternalDoorControllerSettingsSelectiveUpdate: {
      autocomponentize_readers?: boolean | null;
      autoregister_readers?: boolean | null;
      flip_display_orientation?: boolean | null;
      pressure_switch_tamper_normally_open?: boolean | null;
      proximity_sensor_tamper_disabled?: boolean | null;
      proximity_sensor_tamper_distance_threshold?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    Deviceconfig_settings_ExternalReadableAudioSettings: {
      audio_aec_via_software?: boolean | null;
      audio_analysis_enabled?: boolean | null;
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: ExternalReadableAudioSettingsLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: ExternalReadableAudioSettingsLedModeWhenInactiveEnum | null;
    };
    Deviceconfig_settings_ExternalReadableButtonSettings: {
      button_emergency_onsite_contact?: components["schemas"]["EmergencyContact"];
      button_test_mode_enabled?: boolean | null;
    };
    Deviceconfig_settings_ExternalReadableDeviceSettings: {
      bandwidth_reports_disabled?: boolean | null;
      cloud_archive_days?: number | null;
      cloud_archive_upload_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      cloud_archive_upload_schedule_inverted?: boolean | null;
      cloud_archive_upload_schedule_uuid?: string | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      max_event_duration_ms?: number | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      snapshot_upload_target?: ExternalReadableDeviceSettingsSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: ExternalReadableDeviceSettingsThumbstripUploadTargetEnum | null;
      vlan_ip_v4_address?: number | null;
    };
    Deviceconfig_settings_ExternalReadableDeviceVideoSettings: {
      alert_rate_limit_human_only?: components["schemas"]["BurstyRateLimit"];
      alert_rate_limit_motion_only?: components["schemas"]["BurstyRateLimit"];
      alert_rate_limit_vehicle_only?: components["schemas"]["BurstyRateLimit"];
      ir_double_tap?: boolean | null;
      ir_filter_mode?: ExternalReadableDeviceVideoSettingsIrFilterModeEnum | null;
      ir_leds_mode?: ExternalReadableDeviceVideoSettingsIrLedsModeEnum | null;
    };
    Deviceconfig_settings_ExternalReadableDoorControllerSettings: {
      autocomponentize_readers?: boolean | null;
      autoregister_readers?: boolean | null;
      flip_display_orientation?: boolean | null;
      pressure_switch_tamper_normally_open?: boolean | null;
      proximity_sensor_tamper_disabled?: boolean | null;
      proximity_sensor_tamper_distance_threshold?: number | null;
    };
    Deviceconfig_settings_ExternalReadableVideoSettings: {
      ai_dewarp_config?: components["schemas"]["CameraAiDewarpConfigType"];
      behavior_detection?: boolean | null;
      blocked_debounce_time_ms?: number | null;
      blocked_threshold?: number | null;
      color_detection?: boolean | null;
      con_human_filter?: number | null;
      con_vehicle_filter?: number | null;
      cross_counting?: boolean | null;
      cross_counting_settings?: components["schemas"]["CameraCrossCountingSettingsType"];
      dewarpMode?: ExternalReadableVideoSettingsDewarpModeEnum | null;
      disabled_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      disabled_schedule_inverted?: boolean | null;
      disabled_schedule_uuid?: string | null;
      engagement_counting?: boolean | null;
      exposure_level?: number | null;
      face_ai_threshold?: number | null;
      face_counting?: boolean | null;
      face_counting_nonunique?: boolean | null;
      face_id_ai_threshold?: number | null;
      face_match_threshold?: number | null;
      face_recognition?: boolean | null;
      fisheye_display_mode?: components["schemas"]["FisheyeDisplayMode"];
      floorplan_homography?: ((number | null)[] | null)[] | null;
      hdr_enabled?: boolean | null;
      high_res_detection?: boolean | null;
      human_detection?: boolean | null;
      human_loitering?: boolean | null;
      human_loitering_settings?: components["schemas"]["CameraHumanLoiteringSettingsType"];
      img_brightness?: number | null;
      img_contrast?: number | null;
      img_saturation?: number | null;
      img_sharpness?: number | null;
      licenseplate_detection?: boolean | null;
      lpr_ai_threshold?: number | null;
      metering_config?: components["schemas"]["CameraMeteringConfigType"];
      motion_grid_disabled?: boolean | null;
      motion_grid_window_sec?: number | null;
      motion_lightweight_disabled?: boolean | null;
      motion_threshold?: number | null;
      motor_config?: components["schemas"]["CameraMotorConfigType"];
      mounting_direction?: ExternalReadableVideoSettingsMountingDirectionEnum | null;
      new_motion_feature_flag?: boolean | null;
      night_exposure_level?: number | null;
      night_img_brightness?: number | null;
      night_img_contrast?: number | null;
      night_img_saturation?: number | null;
      night_img_sharpness?: number | null;
      night_metering_config?: components["schemas"]["CameraMeteringConfigType"];
      night_sensor_gain_max?: number | null;
      night_shutter_time_max?: number | null;
      night_shutter_time_min?: number | null;
      obj_ai_threshold?: number | null;
      object_search?: boolean | null;
      people_counting?: boolean | null;
      person_ai_threshold?: number | null;
      pose_detection?: boolean | null;
      ppe_detection?: boolean | null;
      privacy_window_polygons?:
        | components["schemas"]["RegionPolygonType"][]
        | null;
      privacy_windows?: components["schemas"]["PermyriadRect"][] | null;
      ptz_config?: components["schemas"]["CameraPTZConfigType"];
      region_for_occupancy?: components["schemas"]["RegionConfigType"];
      region_of_interest?: components["schemas"]["RegionConfigType"];
      region_of_interest_groups?:
        | components["schemas"]["RegionOfInterestGroup"][]
        | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      rotation?: number | null;
      segment_max_bytes?: number | null;
      sensor_gain_max?: number | null;
      shutter_time_max?: number | null;
      shutter_time_min?: number | null;
      snapshot_height?: number | null;
      snapshot_interval_secs?: number | null;
      target_ai_fps?: number | null;
      thumbstrip_disabled?: boolean | null;
      tile_views?: components["schemas"]["DewarpedView"][] | null;
      timelapse?: boolean | null;
      upload_all_detections?: boolean | null;
      use_onboard_ai?: boolean | null;
      use_pilot_face_id?: boolean | null;
      vehicle_ai_threshold?: number | null;
      vehicle_counting?: boolean | null;
      vehicle_detection?: boolean | null;
      video_persist_disabled?: boolean | null;
      visual_tamper_config?: components["schemas"]["CameraVisualTamperConfigType"];
      wdr_enabled?: boolean | null;
      wdr_strength?: number | null;
      zero_motion_video_bitrate_percent?: number | null;
      zero_motion_video_quality?: number | null;
    };
    Deviceconfig_settings_ExternalVideoResolution: {
      height?: number | null;
      width?: number | null;
    };
    /** Update Video Settings */
    Deviceconfig_settings_ExternalVideoSettingsSelectiveUpdate: {
      blocked_debounce_time_ms?: number | null;
      blocked_threshold?: number | null;
      dewarpMode?: ExternalVideoSettingsSelectiveUpdateDewarpModeEnum | null;
      disabled_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      disabled_schedule_inverted?: boolean | null;
      disabled_schedule_uuid?: string | null;
      exposure_level?: number | null;
      fisheye_display_mode?: components["schemas"]["FisheyeDisplayMode"];
      floorplan_homography?: ((number | null)[] | null)[] | null;
      hdr_enabled?: boolean | null;
      high_res_detection?: boolean | null;
      human_detection?: boolean | null;
      human_loitering?: boolean | null;
      human_loitering_settings?: components["schemas"]["CameraHumanLoiteringSettingsType"];
      img_brightness?: number | null;
      img_contrast?: number | null;
      img_saturation?: number | null;
      img_sharpness?: number | null;
      metering_config?: components["schemas"]["CameraMeteringConfigType"];
      motor_config?: components["schemas"]["CameraMotorConfigType"];
      mounting_direction?: ExternalVideoSettingsSelectiveUpdateMountingDirectionEnum | null;
      night_exposure_level?: number | null;
      night_img_brightness?: number | null;
      night_img_contrast?: number | null;
      night_img_saturation?: number | null;
      night_img_sharpness?: number | null;
      night_metering_config?: components["schemas"]["CameraMeteringConfigType"];
      night_sensor_gain_max?: number | null;
      night_shutter_time_max?: number | null;
      night_shutter_time_min?: number | null;
      object_search?: boolean | null;
      privacy_window_polygons?:
        | components["schemas"]["RegionPolygonType"][]
        | null;
      privacy_windows?: components["schemas"]["PermyriadRect"][] | null;
      ptz_config?: components["schemas"]["CameraPTZConfigType"];
      region_for_occupancy?: components["schemas"]["RegionConfigType"];
      region_of_interest?: components["schemas"]["RegionConfigType"];
      region_of_interest_groups?:
        | components["schemas"]["RegionOfInterestGroup"][]
        | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      rotation?: number | null;
      segment_max_bytes?: number | null;
      sensor_gain_max?: number | null;
      shutter_time_max?: number | null;
      shutter_time_min?: number | null;
      snapshot_height?: number | null;
      snapshot_interval_secs?: number | null;
      tile_views?: components["schemas"]["DewarpedView"][] | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      upload_all_detections?: boolean | null;
      vehicle_detection?: boolean | null;
      video_persist_disabled?: boolean | null;
      wdr_enabled?: boolean | null;
      wdr_strength?: number | null;
      zero_motion_video_bitrate_percent?: number | null;
    };
    Deviceconfig_settings_IntRange: {
      max?: number | null;
      min?: number | null;
    };
    Deviceconfig_settings_VideoConfigurationDefault: {
      humanDetection?: boolean | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      segmentMaxBytes?: number | null;
      sensorGainMax?: number | null;
      shutterTimeMin?: number | null;
      vehicleDetection?: boolean | null;
    };
    Deviceconfig_settings_VideoConfigurationOption: {
      maxBitrateRange?: components["schemas"]["Deviceconfig_settings_IntRange"];
      maxZoomPercent?: number | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      wdrRange?: components["schemas"]["Deviceconfig_settings_IntRange"];
    };
    Deviceconfig_userconfig_ExternalReadableFacetedUserConfig: {
      audioFacetSettings?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_ExternalReadableAudioSettings"];
      } | null;
      buttonSettings?: components["schemas"]["Deviceconfig_settings_ExternalReadableButtonSettings"];
      climateSettings?: components["schemas"]["ClimateSettings"];
      deviceSettings?: components["schemas"]["Deviceconfig_settings_ExternalReadableDeviceSettings"];
      deviceUuid?: string | null;
      deviceVideoSettings?: components["schemas"]["Deviceconfig_settings_ExternalReadableDeviceVideoSettings"];
      doorControllerSettings?: components["schemas"]["Deviceconfig_settings_ExternalReadableDoorControllerSettings"];
      doorReaderSettings?: components["schemas"]["DoorReaderSettings"];
      doorSensorSettings?: components["schemas"]["DoorSensorSettings"];
      environmentalGatewaySettings?: components["schemas"]["EnvironmentalGatewaySettings"];
      lastModified?: number | null;
      orgUuid?: string | null;
      tamperSettings?: components["schemas"]["TamperSettings"];
      thirdPartyCameraSettings?: components["schemas"]["ThirdPartyCameraSettings"];
      videoDoorbellSettings?: components["schemas"]["VideoDoorbellSettings"];
      videoFacetSettings?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_ExternalReadableVideoSettings"];
      } | null;
    };
    /** Select and add settings to be updated */
    Deviceconfig_userconfig_ExternalUpdateableFacetedUserConfig: {
      /** Update Audio settings */
      audioFacetSettings?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_ExternalAudioSettingsSelectiveUpdate"];
      } | null;
      buttonSettings?: components["schemas"]["ButtonSettingsSelectiveUpdate"];
      climateSettings?: components["schemas"]["ClimateSettingsSelectiveUpdate"];
      deviceSettings?: components["schemas"]["Deviceconfig_settings_ExternalDeviceSettingsSelectiveUpdate"];
      /** Add device UUID to update */
      deviceUuid?: string | null;
      deviceVideoSettings?: components["schemas"]["DeviceVideoSettingsSelectiveUpdate"];
      doorControllerSettings?: components["schemas"]["Deviceconfig_settings_ExternalDoorControllerSettingsSelectiveUpdate"];
      doorReaderSettings?: components["schemas"]["DoorReaderSettingsSelectiveUpdate"];
      doorSensorSettings?: components["schemas"]["DoorSensorSettingsSelectiveUpdate"];
      environmentalGatewaySettings?: components["schemas"]["EnvironmentalGatewaySettingsSelectiveUpdate"];
      tamperSettings?: components["schemas"]["TamperSettingsSelectiveUpdate"];
      videoDoorbellSettings?: components["schemas"]["VideoDoorbellSettingsSelectiveUpdate"];
      /** Update Video Settings */
      videoFacetSettings?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_ExternalVideoSettingsSelectiveUpdate"];
      } | null;
    };
    Deviceconfig_userconfig_IExternalReadableAudioVideoUserConfig: {
      ai_dewarp_config?: components["schemas"]["CameraAiDewarpConfigType"];
      audio_aec_via_software?: boolean | null;
      audio_analysis_enabled?: boolean | null;
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      behavior_detection?: boolean | null;
      blocked_debounce_time_ms?: number | null;
      blocked_threshold?: number | null;
      cloud_archive_days?: number | null;
      cloud_archive_upload_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      cloud_archive_upload_schedule_inverted?: boolean | null;
      cloud_archive_upload_schedule_uuid?: string | null;
      color_detection?: boolean | null;
      con_human_filter?: number | null;
      con_vehicle_filter?: number | null;
      cross_counting?: boolean | null;
      cross_counting_settings?: components["schemas"]["CameraCrossCountingSettingsType"];
      deviceUuid?: string | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      dewarpMode?: IExternalReadableAudioVideoUserConfigDewarpModeEnum | null;
      disabled_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      disabled_schedule_inverted?: boolean | null;
      disabled_schedule_uuid?: string | null;
      engagement_counting?: boolean | null;
      exposure_level?: number | null;
      face_ai_threshold?: number | null;
      face_counting?: boolean | null;
      face_counting_nonunique?: boolean | null;
      face_id_ai_threshold?: number | null;
      face_match_threshold?: number | null;
      face_recognition?: boolean | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      fisheye_display_mode?: components["schemas"]["FisheyeDisplayMode"];
      floorplan_homography?: ((number | null)[] | null)[] | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      hdr_enabled?: boolean | null;
      high_res_detection?: boolean | null;
      human_detection?: boolean | null;
      human_loitering?: boolean | null;
      human_loitering_settings?: components["schemas"]["CameraHumanLoiteringSettingsType"];
      img_brightness?: number | null;
      img_contrast?: number | null;
      img_saturation?: number | null;
      img_sharpness?: number | null;
      lastModified?: number | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: IExternalReadableAudioVideoUserConfigLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: IExternalReadableAudioVideoUserConfigLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      licenseplate_detection?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      lpr_ai_threshold?: number | null;
      max_event_duration_ms?: number | null;
      media_ttl_minutes?: number | null;
      metering_config?: components["schemas"]["CameraMeteringConfigType"];
      motion_grid_disabled?: boolean | null;
      motion_grid_window_sec?: number | null;
      motion_lightweight_disabled?: boolean | null;
      motion_threshold?: number | null;
      motor_config?: components["schemas"]["CameraMotorConfigType"];
      mounting_direction?: IExternalReadableAudioVideoUserConfigMountingDirectionEnum | null;
      new_motion_feature_flag?: boolean | null;
      night_exposure_level?: number | null;
      night_img_brightness?: number | null;
      night_img_contrast?: number | null;
      night_img_saturation?: number | null;
      night_img_sharpness?: number | null;
      night_metering_config?: components["schemas"]["CameraMeteringConfigType"];
      night_sensor_gain_max?: number | null;
      night_shutter_time_max?: number | null;
      night_shutter_time_min?: number | null;
      obj_ai_threshold?: number | null;
      object_search?: boolean | null;
      on_demand_license_invalid?: boolean | null;
      orgUuid?: string | null;
      people_counting?: boolean | null;
      person_ai_threshold?: number | null;
      pose_detection?: boolean | null;
      ppe_detection?: boolean | null;
      privacy_window_polygons?:
        | components["schemas"]["RegionPolygonType"][]
        | null;
      privacy_windows?: components["schemas"]["PermyriadRect"][] | null;
      ptz_config?: components["schemas"]["CameraPTZConfigType"];
      region_for_occupancy?: components["schemas"]["RegionConfigType"];
      region_of_interest?: components["schemas"]["RegionConfigType"];
      region_of_interest_groups?:
        | components["schemas"]["RegionOfInterestGroup"][]
        | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      rotation?: number | null;
      segment_max_bytes?: number | null;
      sensor_gain_max?: number | null;
      shutter_time_max?: number | null;
      shutter_time_min?: number | null;
      snapshot_height?: number | null;
      snapshot_interval_secs?: number | null;
      snapshot_upload_target?: IExternalReadableAudioVideoUserConfigSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      target_ai_fps?: number | null;
      thumbstrip_disabled?: boolean | null;
      thumbstrip_upload_target?: IExternalReadableAudioVideoUserConfigThumbstripUploadTargetEnum | null;
      tile_views?: components["schemas"]["DewarpedView"][] | null;
      timelapse?: boolean | null;
      upload_all_detections?: boolean | null;
      use_onboard_ai?: boolean | null;
      use_pilot_face_id?: boolean | null;
      vehicle_ai_threshold?: number | null;
      vehicle_counting?: boolean | null;
      vehicle_detection?: boolean | null;
      video_persist_disabled?: boolean | null;
      visual_tamper_config?: components["schemas"]["CameraVisualTamperConfigType"];
      vlan_ip_v4_address?: number | null;
      wdr_enabled?: boolean | null;
      wdr_strength?: number | null;
      zero_motion_video_bitrate_percent?: number | null;
      zero_motion_video_quality?: number | null;
    };
    Deviceconfig_userconfig_IExternalReadableDoorControllerUserConfig: {
      autocomponentize_readers?: boolean | null;
      autoregister_readers?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      cloud_archive_days?: number | null;
      cloud_archive_upload_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      cloud_archive_upload_schedule_inverted?: boolean | null;
      cloud_archive_upload_schedule_uuid?: string | null;
      deviceUuid?: string | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      flip_display_orientation?: boolean | null;
      lastModified?: number | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      max_event_duration_ms?: number | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      orgUuid?: string | null;
      pressure_switch_tamper_normally_open?: boolean | null;
      proximity_sensor_tamper_disabled?: boolean | null;
      proximity_sensor_tamper_distance_threshold?: number | null;
      snapshot_upload_target?: IExternalReadableDoorControllerUserConfigSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: IExternalReadableDoorControllerUserConfigThumbstripUploadTargetEnum | null;
      vlan_ip_v4_address?: number | null;
    };
    Deviceconfig_userconfig_IExternalUpdateableAudioVideoUserConfig: {
      audio_aec_via_software?: boolean | null;
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      blocked_debounce_time_ms?: number | null;
      blocked_threshold?: number | null;
      deviceUuid?: string | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      dewarpMode?: IExternalUpdateableAudioVideoUserConfigDewarpModeEnum | null;
      disabled_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      disabled_schedule_inverted?: boolean | null;
      disabled_schedule_uuid?: string | null;
      exposure_level?: number | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      fisheye_display_mode?: components["schemas"]["FisheyeDisplayMode"];
      floorplan_homography?: ((number | null)[] | null)[] | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      hdr_enabled?: boolean | null;
      high_res_detection?: boolean | null;
      human_detection?: boolean | null;
      human_loitering?: boolean | null;
      human_loitering_settings?: components["schemas"]["CameraHumanLoiteringSettingsType"];
      img_brightness?: number | null;
      img_contrast?: number | null;
      img_saturation?: number | null;
      img_sharpness?: number | null;
      lastModified?: number | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: IExternalUpdateableAudioVideoUserConfigLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: IExternalUpdateableAudioVideoUserConfigLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      media_ttl_minutes?: number | null;
      metering_config?: components["schemas"]["CameraMeteringConfigType"];
      motor_config?: components["schemas"]["CameraMotorConfigType"];
      mounting_direction?: IExternalUpdateableAudioVideoUserConfigMountingDirectionEnum | null;
      night_exposure_level?: number | null;
      night_img_brightness?: number | null;
      night_img_contrast?: number | null;
      night_img_saturation?: number | null;
      night_img_sharpness?: number | null;
      night_metering_config?: components["schemas"]["CameraMeteringConfigType"];
      night_sensor_gain_max?: number | null;
      night_shutter_time_max?: number | null;
      night_shutter_time_min?: number | null;
      object_search?: boolean | null;
      on_demand_license_invalid?: boolean | null;
      orgUuid?: string | null;
      privacy_window_polygons?:
        | components["schemas"]["RegionPolygonType"][]
        | null;
      privacy_windows?: components["schemas"]["PermyriadRect"][] | null;
      ptz_config?: components["schemas"]["CameraPTZConfigType"];
      region_for_occupancy?: components["schemas"]["RegionConfigType"];
      region_of_interest?: components["schemas"]["RegionConfigType"];
      region_of_interest_groups?:
        | components["schemas"]["RegionOfInterestGroup"][]
        | null;
      resolution?: components["schemas"]["Deviceconfig_settings_ExternalVideoResolution"];
      rotation?: number | null;
      segment_max_bytes?: number | null;
      sensor_gain_max?: number | null;
      shutter_time_max?: number | null;
      shutter_time_min?: number | null;
      snapshot_height?: number | null;
      snapshot_interval_secs?: number | null;
      snapshot_upload_target?: IExternalUpdateableAudioVideoUserConfigSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: IExternalUpdateableAudioVideoUserConfigThumbstripUploadTargetEnum | null;
      tile_views?: components["schemas"]["DewarpedView"][] | null;
      upload_all_detections?: boolean | null;
      vehicle_detection?: boolean | null;
      video_persist_disabled?: boolean | null;
      vlan_ip_v4_address?: number | null;
      wdr_enabled?: boolean | null;
      wdr_strength?: number | null;
      zero_motion_video_bitrate_percent?: number | null;
    };
    Deviceconfig_userconfig_IExternalUpdateableButtonUserConfig: {
      button_emergency_onsite_contact?: components["schemas"]["EmergencyContact"];
      button_test_mode_enabled?: boolean | null;
      deviceUuid?: string | null;
      lastModified?: number | null;
      orgUuid?: string | null;
    };
    Deviceconfig_userconfig_IExternalUpdateableDoorControllerUserConfig: {
      autocomponentize_readers?: boolean | null;
      autoregister_readers?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      deviceUuid?: string | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      flip_display_orientation?: boolean | null;
      lastModified?: number | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      orgUuid?: string | null;
      pressure_switch_tamper_normally_open?: boolean | null;
      proximity_sensor_tamper_disabled?: boolean | null;
      proximity_sensor_tamper_distance_threshold?: number | null;
      snapshot_upload_target?: IExternalUpdateableDoorControllerUserConfigSnapshotUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: IExternalUpdateableDoorControllerUserConfigThumbstripUploadTargetEnum | null;
      vlan_ip_v4_address?: number | null;
    };
    DewarpedView: {
      aspectRatio?: components["schemas"]["AspectRatio"];
      pitchDegrees?: number | null;
      rollDegrees?: number | null;
      verticalFieldOfViewDegrees?: number | null;
      yawDegrees?: number | null;
    };
    DiagnosticEventType: {
      activity?: DiagnosticEventActivityEnum | null;
      apMac?: string | null;
      asi?: string | null;
      componentCompositeUuid?: string | null;
      componentUuid?: string | null;
      connectionUuid?: string | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      deviceName?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      deviceUuid?: string | null;
      firmwareVersion?: string | null;
      orgUuid?: string | null;
      reportingDeviceUuid?: string | null;
      rssi?: number | null;
      ssid?: string | null;
      timestamp?: string | null;
      uuid?: string | null;
      wifiSignalStrength?: number | null;
    };
    DiagnosticRuleTriggerType:
      | ({
          deviceLabels?: (string | null)[] | null;
          deviceUuids?: (string | null)[] | null;
          diagnosticEvent?: components["schemas"]["SimpleDiagnosticEventType"];
          locationUuids?: (string | null)[] | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    DiceSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
    };
    DiceType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    } | null;
    /** The imported (discovered) third-party camera. This field is populated only if the RTSP URL specified in the import resulted in creation of a new discovery or an addition of a RTSP URL to an existing discovery. It is null, if the RTSP URL already existed or if the import was not successful. */
    DiscoveredThirdPartyCameraType: {
      codec?: string | null;
      createdOn?: string | null;
      ipAddress?: string | null;
      lastVisibleMs?: { [key: string]: number | null } | null;
      macAddress?: string | null;
      manufacturer?: string | null;
      model?: string | null;
      name?: string | null;
      onvifPassword?: string | null;
      onvifProfileToken?: string | null;
      onvifUsername?: string | null;
      orgUuid?: string | null;
      password?: string | null;
      rtspEndpoints?: components["schemas"]["RtspEndpoint"][] | null;
      updatedOn?: string | null;
      username?: string | null;
    };
    DoorAjarActivityEventType:
      | ({
          doorAjarThresholdSec?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    DoorAuthFirstInStateEvent:
      | ({
          acuEventUuid?: string | null;
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["FirstInFirmwareStatus"];
          originator?: components["schemas"]["BaseEventOriginator"];
          settingsUuid?: string | null;
          source?: components["schemas"]["FirstInSourceEnum"];
          stateChangedAtMs?: number | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    DoorEventType: {
      baseStationUuid?: string | null;
      batteryPercentage?: number | null;
      bleDeviceUuid?: string | null;
      bleRssi?: number | null;
      closeBaseStations?: (string | null)[] | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
      state?: DoorEventStateEnum | null;
      stateChanged?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      timestampMs?: number | null;
    };
    DoorFirstInStateChangeEventReference: {
      doorUuidToEventUuidMap?: { [key: string]: string | null } | null;
      newState?: components["schemas"]["FirstInFirmwareStatus"];
      originatingDoorUuid?: string | null;
      originatingUserUuid?: string | null;
      originator?: components["schemas"]["BaseEventOriginator"];
      source?: components["schemas"]["FirstInSourceEnum"];
      stateChangedAtMs?: number | null;
    } | null;
    DoorLocationLockdownStateEventType:
      | ({
          activatedLockdownPlan?: components["schemas"]["LockdownPlanReference"];
          activeLockdownPlan?: components["schemas"]["LockdownPlanReference"];
          acuEventUuid?: string | null;
          componentCompositeUuid?: string | null;
          deactivatedLockdownPlan?: components["schemas"]["LockdownPlanReference"];
          followingTestPlan?: boolean | null;
          locationLockdownStateChangedAtMillis?: number | null;
          originator?: components["schemas"]["BaseEventOriginator"];
          state?: components["schemas"]["LocationLockdownStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    DoorLockdownStateEnumType: DoorLockdownStateEnumType;
    DoorLockdownStateEventReference: {
      activatedLockdownPlan?: components["schemas"]["LockdownPlanReference"];
      activeLockdownPlan?: components["schemas"]["LockdownPlanReference"];
      deactivatedLockdownPlan?: components["schemas"]["LockdownPlanReference"];
      doorEventUuid?: string | null;
      doorUuid?: string | null;
    } | null;
    DoorPolicyType: {
      defaultAjarThresholdSec?: number | null;
      defaultTriggers?: components["schemas"]["ActivityEnum"][] | null;
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["DoorScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    DoorPositionIndicatorEnumType: DoorPositionIndicatorEnumType;
    DoorPositionIndicatorPhysicalPortEnumType: DoorPositionIndicatorPhysicalPortEnumType;
    DoorPositionIndicatorPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["DoorPositionIndicatorPhysicalPortEnumType"];
      supervisionConfiguration?: components["schemas"]["PortSupervisionConfigurationType"];
    };
    DoorPositionIndicatorShadowType:
      | ({
          state?: components["schemas"]["DoorPositionIndicatorStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
          supervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    DoorPositionIndicatorStateChangeEventType:
      | ({
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["DoorPositionIndicatorStateEnumType"];
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    DoorPositionIndicatorStateEnumType: DoorPositionIndicatorStateEnumType;
    DoorReaderEnumType: DoorReaderEnumType;
    DoorReaderSettings: {
      dr_enable_audio_feedback?: boolean | null;
      tof_max_distance?: number | null;
      tof_min_distance?: number | null;
      tof_min_signal_over_noise?: number | null;
    };
    /** Update Door Reader settings */
    DoorReaderSettingsSelectiveUpdate: {
      dr_enable_audio_feedback?: boolean | null;
      tof_max_distance?: number | null;
      tof_min_distance?: number | null;
      tof_min_signal_over_noise?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    DoorReaderShadowType:
      | ({
          state?: components["schemas"]["DoorReaderStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
        } & {
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    DoorReaderStateChangeEventType:
      | ({
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["DoorReaderStateEnumType"];
          reason?: components["schemas"]["DoorReaderStateChangeReasonEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    DoorReaderStateChangeReasonEnumType: DoorReaderStateChangeReasonEnumType;
    DoorReaderStateEnumType: DoorReaderStateEnumType;
    DoorRelayEnumType: DoorRelayEnumType;
    DoorRelayPhysicalPortEnumType: DoorRelayPhysicalPortEnumType;
    DoorRelayPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["DoorRelayPhysicalPortEnumType"];
    };
    DoorRelayShadowType:
      | ({
          state?: components["schemas"]["DoorRelayStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
        } & {
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    DoorRelayStateChangeEventType:
      | ({
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["DoorRelayStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    DoorRelayStateEnumType: DoorRelayStateEnumType;
    DoorScheduleExceptionType: {
      /** UNIX timestamp in milliseconds when exception was created. */
      createdAtMillis?: number | null;
      defaultState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      /** Exception description */
      description?: string | null;
      doorUuids?: (string | null)[] | null;
      /** List of intervals each specifying door state during date range. List must contain at least one element */
      intervals: components["schemas"]["LocalInterval"][] | null;
      /** Exception end date in 'yyyy-MM-dd' format. End date is inclusive. */
      localEndDate: string | null;
      /** Exception start date in 'yyyy-MM-dd' format. Start date is inclusive. */
      localStartDate: string | null;
      /** Mapping of location uuid to a list of door uuids, representing the doors assigned to each location. Map must contain at least one entry with at least one door. */
      locationToDoorsMap?: { [key: string]: (string | null)[] | null } | null;
      /** Location uuid */
      locationUuid?: string | null;
      /** Exception name */
      name: string | null;
      orgUuid?: string | null;
      /** UNIX timestamp in milliseconds when exception was modified. */
      updatedAtMillis?: number | null;
      /** Exception uuid */
      uuid?: string | null;
    };
    DoorScheduleFirstInStateEvent:
      | ({
          acuEventUuid?: string | null;
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["FirstInFirmwareStatus"];
          originator?: components["schemas"]["BaseEventOriginator"];
          settingsUuid?: string | null;
          source?: components["schemas"]["FirstInSourceEnum"];
          stateChangedAtMs?: number | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    DoorScheduledTriggerType: {
      ajarThresholdSec?: number | null;
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
    };
    DoorSensorSettings: {
      /** Option to Enabled or Disable the Ajar Threshold. Defaults to Disabled (False). */
      ajar_threshold_enabled?: boolean | null;
      /** Threshold value for Door Sensor Ajar state. Defaults to 30s. */
      ajar_threshold_sec?: number | null;
    };
    DoorSensorSettingsSelectiveUpdate: {
      /** Option to Enabled or Disable the Ajar Threshold. Defaults to Disabled (False). */
      ajar_threshold_enabled?: boolean | null;
      /** Threshold value for Door Sensor Ajar state. Defaults to 30s. */
      ajar_threshold_sec?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    DoorStateChangeEvent:
      | ({
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["AccessControlledDoorStateEnumType"];
          originator?: components["schemas"]["BaseEventOriginator"];
          source?: components["schemas"]["DoorStateSourceEnum"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    DoorStateOverride: {
      expireEarlyMode?: components["schemas"]["EarlyExpireModeEnum"];
      expiresAtMillis?: number | null;
      followFirstInRules?: boolean | null;
      originator?: components["schemas"]["BaseEventOriginator"];
      requestedAtMillis?: number | null;
      startDelaySeconds?: number | null;
      state?: components["schemas"]["AccessControlledDoorStateEnumType"];
      type?: components["schemas"]["ManualDoorStateChangeEnum"];
    } | null;
    DoorStateShadow: {
      source?: components["schemas"]["DoorStateSourceEnum"];
      state?: components["schemas"]["AccessControlledDoorStateEnumType"];
      stateUpdateEventTimestampMs?: number | null;
    };
    DoorStateSourceEnum: DoorStateSourceEnum;
    DoorType: {
      id?: number | null;
      name?: string | null;
    };
    Door_GetDoorEventsForSensorWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      sensorUuid?: string | null;
      stateFilter?: GetDoorEventsForSensorWSRequestStateFilterEnum | null;
    };
    Door_GetDoorEventsForSensorWSResponse: {
      doorEvents?: components["schemas"]["DoorEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Door_GetMinimalDoorStatesWSRequest: { [key: string]: unknown };
    Door_GetMinimalDoorStatesWSResponse: {
      doorStates?: components["schemas"]["Door_MinimalDoorStateType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Door_MinimalDoorStateType: {
      associatedCameras?: (string | null)[] | null;
      batteryPercent?: number | null;
      closestBaseStation?: string | null;
      createdAtMillis?: number | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      health?: MinimalDoorStateHealthEnum | null;
      healthDetails?: MinimalDoorStateHealthDetailsEnum | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lastSeenSec?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      policyUuid?: string | null;
      sensorUuid?: string | null;
      serialNumber?: string | null;
      signalStrength?: number | null;
      status?: MinimalDoorStateStatusEnum | null;
    };
    Door_UpdateDoorSensorDetailsWSRequest: {
      associatedCameras?: (string | null)[] | null;
      associatedCamerasUpdated?: boolean | null;
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      description?: string | null;
      descriptionUpdated?: boolean | null;
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      name?: string | null;
      nameUpdated?: boolean | null;
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      uuid?: string | null;
    };
    Door_UpdateDoorSensorDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    DoorbellEventType:
      | ({
          componentCompositeUuid?: string | null;
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    Doorbellcamera_CreateRuleForDoorbellCameraWSRequest: {
      rule?: components["schemas"]["Doorbellcamera_ExternalDoorbellCameraComponentRuleType"];
    };
    Doorbellcamera_CreateRuleForDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      ruleUuid?: string | null;
    };
    Doorbellcamera_CreateSharedLiveVideoStreamWSRequest: {
      /** Null disables audio, otherwise set it to the doorbellCamera's uuid to use its own audio or to an associated AudioGateway's Uuid */
      audioGatewayUuid?: string | null;
      /** DoorbellCamera facet uuid to get stream from */
      doorbellCameraUuid: string | null;
      /** Add a expiration date for accessing the stream in seconds */
      expirationTimeSecs?: number | null;
      /** If given a schedule uuid, will hide the stream during the schedule instead and show it otherwise */
      invertSchedule?: boolean | null;
      /** If not provided, will be named 'Unnamed' */
      name?: string | null;
      /** Add a password to allow access to your shared stream. If null or blank password is not set. */
      password?: string | null;
      /** Uuid of a relative or absolute schedule */
      scheduleUuid?: string | null;
      streamType: components["schemas"]["StreamTypeEnum"];
      /** Enables recording of live footage to a VOD */
      vodEnabled: boolean | null;
    };
    Doorbellcamera_CreateSharedLiveVideoStreamWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedLiveM3U8StreamUrl?: string | null;
      sharedLiveVideoStreamUrl?: string | null;
      sharedLiveVideoStreamUuid?: string | null;
    };
    Doorbellcamera_DeleteDoorbellCameraWSRequest: {
      doorbellCameraUuid: string | null;
      mummify: boolean | null;
    };
    Doorbellcamera_DeleteDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: DeleteDoorbellCameraWSResponseResponseStatusEnum | null;
    };
    Doorbellcamera_DeleteRuleForDoorbellCameraWSRequest: {
      doorbellCameraUuid?: string | null;
      ruleUuid?: string | null;
    };
    Doorbellcamera_DeleteRuleForDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Doorbellcamera_DoorbellCameraOfflineLanStreamingInfo: {
      accessToken?: string | null;
      lanAddresses?: (string | null)[] | null;
    };
    Doorbellcamera_ExternalDoorbellCameraComponentRuleType: {
      action?: components["schemas"]["RuleActionType"];
      doorbellCameraComponentUuid?: string | null;
      doorbellCameraUuid?: string | null;
      ruleFilters?: components["schemas"]["RuleFilterType"];
      ruleName?: string | null;
      ruleUuid?: string | null;
      triggerActivity?: components["schemas"]["ActivityEnum"];
    };
    Doorbellcamera_FindComponentEventsForDoorbellCameraWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      doorbellCameraUuid?: string | null;
      limit?: number | null;
      typeFilter?: components["schemas"]["ComponentEventEnumType"][] | null;
    };
    Doorbellcamera_FindComponentEventsForDoorbellCameraWSResponse: {
      componentEvents?: components["schemas"]["ComponentEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Doorbellcamera_FindComponentSeekPointsForDoorbellCameraWSRequest: {
      doorbellCameraUuid?: string | null;
      durationSec?: number | null;
      startTimeSecEpochExclusive?: number | null;
    };
    Doorbellcamera_FindComponentSeekPointsForDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      seekpoints?: components["schemas"]["ComponentSeekPointType"][] | null;
    };
    Doorbellcamera_FindSharedLiveVideoStreamsForWSRequest: {
      doorbellCameraUuid?: string | null;
    };
    Doorbellcamera_FindSharedLiveVideoStreamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedLiveVideoStreams?:
        | components["schemas"]["Camera_SharedLiveVideoStreamWS"][]
        | null;
    };
    Doorbellcamera_GetDoorbellCameraConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_IExternalReadableAudioVideoUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Doorbellcamera_GetDoorbellCameraFullStateWSResponse: {
      fullState?: components["schemas"]["FullDeviceStateType"];
    };
    Doorbellcamera_GetDoorbellCameraMediaUrisWSResponse: {
      lanCheckUrls?: (string | null)[] | null;
      lanLiveH264Uris?: (string | null)[] | null;
      lanLiveMpdUris?: (string | null)[] | null;
      lanLiveOpusUris?: (string | null)[] | null;
      lanVodM3u8UrisTemplates?: (string | null)[] | null;
      lanVodMpdUrisTemplates?: (string | null)[] | null;
      wanLiveH264Uri?: string | null;
      wanLiveMpdUri?: string | null;
      wanLiveOpusUri?: string | null;
      wanVodM3u8UriTemplate?: string | null;
      wanVodMpdUriTemplate?: string | null;
    };
    Doorbellcamera_GetDoorbellCameraMinimalStateListWSResponse: {
      minimalStates?:
        | components["schemas"]["MinimalObservableDeviceStateType"][]
        | null;
    };
    Doorbellcamera_GetDoorbellCameraOfflineLanStreamingInfoWSRequest: {
      [key: string]: unknown;
    };
    Doorbellcamera_GetDoorbellCameraOfflineLanStreamingInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      info?: {
        [
          key: string
        ]: components["schemas"]["Doorbellcamera_DoorbellCameraOfflineLanStreamingInfo"];
      } | null;
    };
    Doorbellcamera_GetDoorbellCameraRulesForOrgWSRequest: {
      [key: string]: unknown;
    };
    Doorbellcamera_GetDoorbellCameraRulesForOrgWSResponse: {
      doorbellCameraUuidToRulesMap?: {
        [key: string]:
          | components["schemas"]["Doorbellcamera_ExternalDoorbellCameraComponentRuleType"][]
          | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Doorbellcamera_GetRulesForDoorbellCameraWSRequest: {
      doorbellCameraUuid?: string | null;
    };
    Doorbellcamera_GetRulesForDoorbellCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rules?:
        | components["schemas"]["Doorbellcamera_ExternalDoorbellCameraComponentRuleType"][]
        | null;
    };
    Doorbellcamera_RebootDoorbellCameraWSRequest: {
      doorbellCameraUuid: string | null;
    };
    Doorbellcamera_UpdateDoorbellCameraConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableAudioVideoUserConfig"];
    };
    Doorbellcamera_UpdateDoorbellCameraDetailsWSRequest: {
      associatedCameras?: (string | null)[] | null;
      description?: string | null;
      deviceUuid?: string | null;
      directionRadians?: number | null;
      floorNumber?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      policyUuid?: string | null;
    };
    Doorcontroller_CreateDoorControllerRuleWSRequest: {
      doorControllerUuid?: string | null;
      rule?: components["schemas"]["RuleType"];
    };
    Doorcontroller_CreateDoorControllerRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rule?: components["schemas"]["RuleType"];
    };
    Doorcontroller_DeleteDoorControllerRuleWSRequest: {
      doorControllerUuid?: string | null;
      ruleUuid?: string | null;
    };
    Doorcontroller_DeleteDoorControllerRuleWSResponse: {
      [key: string]: unknown;
    };
    Doorcontroller_DeleteDoorControllerWSRequest: {
      doorControllerUuid: string | null;
      mummify: boolean | null;
    };
    Doorcontroller_DeleteDoorControllerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: DeleteDoorControllerWSResponseResponseStatusEnum | null;
    };
    Doorcontroller_DoorControllerDiscoveredAperioDoor: {
      gatewayId?: string | null;
      id?: string | null;
      lastSeenMs?: number | null;
    };
    Doorcontroller_DoorControllerDiscoveredAperioGateway: {
      id?: string | null;
      ipAddress?: string | null;
      lastSeenMs?: number | null;
      model?: string | null;
      protocolVersion?: string | null;
    };
    Doorcontroller_DoorControllerDiscoveredReaderType: (
      | components["schemas"]["Doorcontroller_DoorControllerDiscoveredRhombusReaderType"]
      | components["schemas"]["Doorcontroller_DoorControllerDiscoveredThirdPartyReaderType"]
    ) & {
      boardNum?: number | null;
      lastSeenMs?: number | null;
      online?: boolean | null;
      portNum?: number | null;
      type?: DoorControllerDiscoveredReaderTypeEnum | null;
    };
    Doorcontroller_DoorControllerDiscoveredRhombusReaderType:
      | ({
          serialNumber?: string | null;
        } & {
          boardNum?: number | null;
          lastSeenMs?: number | null;
          online?: boolean | null;
          portNum?: number | null;
          type?: DoorControllerDiscoveredRhombusReaderTypeEnum | null;
        })
      | null;
    Doorcontroller_DoorControllerDiscoveredThirdPartyReaderType:
      | ({
          model?: string | null;
          serialNumber?: number | null;
          vendorCode?: (string | null)[] | null;
        } & {
          boardNum?: number | null;
          lastSeenMs?: number | null;
          online?: boolean | null;
          portNum?: number | null;
          type?: DoorControllerDiscoveredThirdPartyReaderTypeEnum | null;
        })
      | null;
    Doorcontroller_DoorControllerStateType: {
      configUpdatedAtMs?: number | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      directionRadians?: number | null;
      discoveredAperioDoors?:
        | components["schemas"]["Doorcontroller_DoorControllerDiscoveredAperioDoor"][]
        | null;
      discoveredAperioGateways?:
        | components["schemas"]["Doorcontroller_DoorControllerDiscoveredAperioGateway"][]
        | null;
      discoveredReaders?:
        | components["schemas"]["Doorcontroller_DoorControllerDiscoveredReaderType"][]
        | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      grantsUpdatedAtMs?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      policyUuid?: string | null;
      serialNumber?: string | null;
      state?: { [key: string]: { [key: string]: unknown } | null } | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      uuid?: string | null;
      wanAddress?: string | null;
    };
    Doorcontroller_GetDoorControllerConfigWSResponse: {
      config?: components["schemas"]["Deviceconfig_userconfig_IExternalReadableDoorControllerUserConfig"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Doorcontroller_GetDoorControllerRuleWSRequest: {
      doorControllerUuid?: string | null;
      ruleUuid?: string | null;
    };
    Doorcontroller_GetDoorControllerRuleWSResponse: {
      rule?: components["schemas"]["RuleType"];
    };
    Doorcontroller_GetDoorControllerRulesWSRequest: {
      doorControllerUuid?: string | null;
    };
    Doorcontroller_GetDoorControllerRulesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rules?: components["schemas"]["RuleType"][] | null;
    };
    Doorcontroller_GetDoorControllerStateListWSRequest: {
      [key: string]: unknown;
    };
    Doorcontroller_GetDoorControllerStateListWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      stateList?:
        | components["schemas"]["Doorcontroller_DoorControllerStateType"][]
        | null;
    };
    Doorcontroller_RegisterDiscoveredRhombusReaderWSRequest: {
      boardNum?: number | null;
      doorControllerUuid?: string | null;
      portNum?: number | null;
      serialNumber?: string | null;
    };
    Doorcontroller_RegisterDiscoveredRhombusReaderWSResponse: {
      [key: string]: unknown;
    };
    Doorcontroller_UpdateDoorControllerConfigWSRequest: {
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableDoorControllerUserConfig"];
    };
    Doorcontroller_UpdateDoorControllerDetailsWSRequest: {
      description?: string | null;
      directionRadians?: number | null;
      floorNumber?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      uuid?: string | null;
    };
    Doorcontroller_UpdateDoorControllerDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Doorcontroller_UpdateDoorControllerRuleWSRequest: {
      doorControllerUuid?: string | null;
      rule?: components["schemas"]["RuleType"];
    };
    Doorcontroller_UpdateDoorControllerRuleWSResponse: {
      rule?: components["schemas"]["RuleType"];
    };
    DropboxSettingsV2: {
      accessToken?: string | null;
      accountEmail?: string | null;
      accountName?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
    };
    DtcInfo: {
      code?: (string | null)[] | null;
      failing?: boolean | null;
      hasFailed?: boolean | null;
      testCompleted?: boolean | null;
      time?: number | null;
    } | null;
    DynamoPageRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    E50ClimateEventType: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      alertTriggerThresholds?: (number | null)[] | null;
      alertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      carbonMonoSense?: components["schemas"]["COSensorType"];
      clipMetaData?: components["schemas"]["ClipMetaDataType"];
      co2Sense?: components["schemas"]["Co2SensorType"];
      derivedValues?: components["schemas"]["E50DerivedValuesType"];
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      deviceUuid?: string | null;
      firmwareVersion?: string | null;
      formaSense?: components["schemas"]["FormaSensorType"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      leakProbe?: components["schemas"]["LeakProbeType"];
      orgUuid?: string | null;
      pmSense?: components["schemas"]["PmSensorType"];
      policyUuid?: string | null;
      pressSense?: components["schemas"]["PressureSensorType"];
      tempProbe?: components["schemas"]["TempProbeType"];
      timestampMs?: number | null;
      uuid?: string | null;
    };
    E50DerivedValuesType: {
      airQualityIndex?: number | null;
      airQualityIndexPollutant?: components["schemas"]["AirQualityIndexPollutantEnum"];
      calibrating?: boolean | null;
      deviceOrientation?: components["schemas"]["DeviceOrientationEnum"];
      falsePositiveConfidencePercent?: number | null;
      heatIndexDegF?: number | null;
      heatIndexRangeWarning?: components["schemas"]["HeatIndexRangeWarningEnum"];
      indoorAirQuality?: number | null;
      malfunctioningModules?: (string | null)[] | null;
      smokeConfidencePercent?: number | null;
      smokeThcConfidencePercent?: number | null;
      smokeTobaccoConfidencePercent?: number | null;
      timestampSec?: number | null;
      tvoc?: number | null;
      vapeConfidencePercent?: number | null;
      vapeDetected?: boolean | null;
      vapeThcConfidencePercent?: number | null;
    };
    EarlyExpireModeEnum: EarlyExpireModeEnum;
    EmailSettings: {
      emailAddresses?: (string | null)[] | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
    };
    /** Returns the generated embedding or null if the embedding could not be generated. If image contains multiple faces, only the first generated embedding is returned. */
    Embedding: {
      embeddingComparisonType?: string | null;
      embeddingConfidence?: number | null;
      embeddingEncodingType?: components["schemas"]["EmbeddingEncodingType"];
      encodedEmbedding?: string | null;
    };
    EmbeddingEncodingType: EmbeddingEncodingTypeEnum;
    EmergencyContact: {
      name?: string | null;
      phoneNumber?: string | null;
    };
    EmergencyResponseContactsIntervalType: {
      emergencyContactList?: components["schemas"]["EmergencyContact"][] | null;
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
    };
    EmergencyResponseContactsScheduleType: {
      deviceUuids?: (string | null)[] | null;
      emergencyContactList?: components["schemas"]["EmergencyContact"][] | null;
      scheduleUuid?: string | null;
    };
    Entity: EntityEnum;
    EnvironmentalGatewaySettings: {
      data_measurement_interval_sec?: number | null;
      data_upload_interval_sec?: number | null;
      false_positive_confidence_threshold?: number | null;
      leak_detection_threshold?: number | null;
      leak_detector_present?: boolean | null;
      moist_detection_threshold?: number | null;
      smoke_confidence_threshold?: number | null;
      smoke_thc_confidence_threshold?: number | null;
      smoke_tobacco_confidence_threshold?: number | null;
      vape_alert_backoff_sec?: number | null;
      vape_confidence_threshold?: number | null;
      vape_thc_confidence_threshold?: number | null;
    };
    /** Update Environmental Sensor settings */
    EnvironmentalGatewaySettingsSelectiveUpdate: {
      data_measurement_interval_sec?: number | null;
      data_upload_interval_sec?: number | null;
      false_positive_confidence_threshold?: number | null;
      leak_detection_threshold?: number | null;
      leak_detector_present?: boolean | null;
      moist_detection_threshold?: number | null;
      smoke_confidence_threshold?: number | null;
      smoke_thc_confidence_threshold?: number | null;
      smoke_tobacco_confidence_threshold?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      vape_alert_backoff_sec?: number | null;
      vape_confidence_threshold?: number | null;
      vape_thc_confidence_threshold?: number | null;
    };
    EnvironmentalGatewayShadowType: {
      activeAlertTriggers?: { [key: string]: number | null } | null;
      apMac?: string | null;
      carbonMonoSense?: components["schemas"]["COSensorType"];
      co2Sense?: components["schemas"]["Co2SensorType"];
      connected?: boolean | null;
      connectionTimestampMs?: number | null;
      connectionUuid?: string | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      derivedValues?: components["schemas"]["E50DerivedValuesType"];
      deviceUuid?: string | null;
      disconnectTimestampMs?: number | null;
      externalIPAddress?: string | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareUpdateTimeMs?: number | null;
      firmwareVersion?: string | null;
      formaSense?: components["schemas"]["FormaSensorType"];
      hardwareUuid?: string | null;
      internalWanAddress?: string | null;
      jumpHostUuid?: string | null;
      lanAddresses?: (string | null)[] | null;
      leakProbe?: components["schemas"]["LeakProbeType"];
      orgUuid?: string | null;
      pmSense?: components["schemas"]["PmSensorType"];
      pressSense?: components["schemas"]["PressureSensorType"];
      prevConnected?: boolean | null;
      prevConnectedUpdateTimestampMs?: number | null;
      region?: string | null;
      ssid?: string | null;
      state?: { [key: string]: { [key: string]: unknown } | null } | null;
      stateUpdatedTimestampMs?: number | null;
      tempProbe?: components["schemas"]["TempProbeType"];
      timestampMs?: number | null;
      type?: components["schemas"]["DeviceTypeEnum"];
      wanAddress?: string | null;
      wifiSignalStrength?: number | null;
    };
    EnvoyCustomField: {
      field?: string | null;
      value?: string | null;
    };
    EnvoyDelivery: {
      carrier?: components["schemas"]["EnvoyDeliveryInfo"];
      carrierInfo?: components["schemas"]["EnvoyDeliveryInfo"];
      deliveryArea?: components["schemas"]["EnvoyDeliveryInfo"];
      deliveryAreaInfo?: components["schemas"]["EnvoyDeliveryInfo"];
      locationId?: string | null;
      pickedUpAt?: string | null;
      pickedUpBy?: components["schemas"]["EnvoyPersonInfo"];
      receivedTimestampMs?: number | null;
      recipient?: components["schemas"]["EnvoyPersonInfo"];
      status?: string | null;
    };
    EnvoyDeliveryInfo: {
      name?: string | null;
    };
    EnvoyExpectedGuest: {
      expectedArrivalAt?: string | null;
      expectedArrivalTimestampMs?: number | null;
      host?: components["schemas"]["EnvoyPersonInfo"];
      invitee?: components["schemas"]["EnvoyPersonInfo"];
      locationId?: string | null;
    };
    EnvoyGuest: {
      agreementsStatus?: string | null;
      email?: string | null;
      fullName?: string | null;
      host?: components["schemas"]["EnvoyPersonInfo"];
      locationId?: string | null;
      notes?: string | null;
      signedInAt?: string | null;
      signedInTimestampMs?: number | null;
      signedOutAt?: string | null;
      signedOutTimestampMs?: number | null;
    };
    EnvoyInvite: {
      customFields?: components["schemas"]["EnvoyCustomField"][] | null;
      expectedArrivalAt?: string | null;
      expectedDepartureAt?: string | null;
      flowId?: string | null;
      hostEmployeeId?: string | null;
      inviteId?: string | null;
      invitee?: components["schemas"]["EnvoyPersonInfo"];
      locationId?: string | null;
      notes?: string | null;
      sendEmailToInvitee?: boolean | null;
    };
    EnvoyLocation: {
      id?: number | null;
      name?: string | null;
    };
    EnvoyLocationInfoType: {
      assignedCameraList?: (string | null)[] | null;
      locationName?: string | null;
    } | null;
    EnvoyPersonInfo: {
      email?: string | null;
      id?: string | null;
      locationIds?: (string | null)[] | null;
      locations?: (string | null)[] | null;
      name?: string | null;
      type?: string | null;
    };
    EnvoySettings: {
      createSeekPoints?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      envoyIntegrationInstalled?: boolean | null;
      indexFaces?: boolean | null;
      locationInfoMap?: {
        [key: string]: components["schemas"]["EnvoyLocationInfoType"];
      } | null;
      migrated?: boolean | null;
      refreshToken?: string | null;
      saveClips?: boolean | null;
    };
    EnvoyType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          envoyIntegrationInstalled?: boolean | null;
          envoyUserSettingsMap?: {
            [key: string]: components["schemas"]["EnvoyUserSettings"];
          } | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          locationInfoMap?: {
            [key: string]: components["schemas"]["EnvoyLocationInfoType"];
          } | null;
          misconfiguredDoors?: (string | null)[] | null;
          refreshToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    EnvoyUserSettings: {
      guestsEnabled?: boolean | null;
      packagesEnabled?: boolean | null;
    } | null;
    EpochSecondsProvisioner: components["schemas"]["StaticEpochSecondsProvisioner"] & {
      type: string;
    };
    Ethernettester_GetEthernetTesterConfigWSRequest: {
      version?: string | null;
    };
    Ethernettester_GetEthernetTesterConfigWSResponse: {
      configJson?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    EventCount: {
      count?: number | null;
      uuid?: string | null;
    };
    EventListenerType: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      clientCertificate?: (string | null)[] | null;
      clientKey?: (string | null)[] | null;
      deviceUuid?: string | null;
      hostname?: string | null;
      orgUuid?: string | null;
      trustedCertificate?: (string | null)[] | null;
      uri?: string | null;
      uuid?: string | null;
    };
    EventOriginatorEnum: EventOriginatorEnum;
    EventOriginatorEnum_Minimal: EventOriginatorEnum_Minimal;
    Event_CreateSharedClipGroupWSRequest: {
      description?: string | null;
      expirationTimeSecs?: number | null;
      plaintextPassword?: string | null;
      title?: string | null;
      uuids?: components["schemas"]["Event_RuuidWrapper"][] | null;
    };
    Event_CreateSharedClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      shareUrl?: string | null;
      uuid?: string | null;
    };
    Event_DeleteAlertMonitoringThreatCaseByStatusWSRequest: {
      status?: components["schemas"]["ThreatCaseStatus"];
    };
    Event_DeleteAlertMonitoringThreatCaseByStatusWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_DeleteAlertMonitoringThreatCaseWSRequest: {
      threatCaseUuids?: (string | null)[] | null;
    };
    Event_DeleteAlertMonitoringThreatCaseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_DeleteSavedClipWSRequest: {
      savedClipUuid?: string | null;
    };
    Event_DeleteSavedClipWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_DeleteSharedClipGroupWSRequest: {
      uuid?: string | null;
    };
    Event_DeleteSharedClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_DismissAllPolicyAlertsForDeviceWSRequest: {
      deviceUuids?: (string | null)[] | null;
    };
    Event_DismissAllPolicyAlertsForDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_DismissAllPolicyAlertsWSRequest: { [key: string]: unknown };
    Event_DismissAllPolicyAlertsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_DismissPolicyAlertWSRequest: {
      alertUuid?: string | null;
    };
    Event_DismissPolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_DismissPolicyAlertsWSRequest: {
      alertUuids?: (string | null)[] | null;
    };
    Event_DismissPolicyAlertsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** List of motion grid cells to include in the search */
    Event_FrontendCell: {
      col?: number | null;
      row?: number | null;
    };
    Event_GetAlertMonitoringThreatCaseWSRequest: {
      uuid?: string | null;
    };
    Event_GetAlertMonitoringThreatCaseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      threatCase?: components["schemas"]["AlertMonitoringThreatCaseType"];
    };
    Event_GetAlertMonitoringThreatCasesWSRequest: {
      afterTimestampMs?: number | null;
      beforeTimestampMs?: number | null;
      deviceFilter?: (string | null)[] | null;
      lastEvaluatedKey?: string | null;
      lastTimestampMs?: number | null;
      lastUuid?: string | null;
      locationFilter?: (string | null)[] | null;
      maxPageSize?: number | null;
      maxResults?: number | null;
      mostRecent?: boolean | null;
      statusFilter?: components["schemas"]["ThreatCaseStatus"][] | null;
    };
    Event_GetAlertMonitoringThreatCasesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lastEvaluatedKey?: string | null;
      threatCases?:
        | components["schemas"]["AlertMonitoringThreatCaseType"][]
        | null;
    };
    Event_GetClipWithProgressWSRequest: {
      /** Uuid of the clip to retrieve progress details for. */
      clipUuid: string | null;
    };
    Event_GetClipWithProgressWSResponse: {
      clip?: components["schemas"]["Event_SavedClipWithProgressType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_GetClipsWithProgressWSRequest: {
      clipVisibilityFilter?: components["schemas"]["ClipVisibility"];
      /** Device uuids to filter clips by. */
      deviceUuidFilters?: (string | null)[] | null;
      /** Location uuids to filter clips by. */
      locationUuidFilters?: (string | null)[] | null;
      /** Page size */
      pageSize?: number | null;
      /** Page token received from the previous search request. */
      pageToken?: string | null;
      searchFilter?: string | null;
      sortField?: string | null;
      sortOrder?: string | null;
      /** Timestamp to filter clips by (either clip creation date or clip footage date). */
      timestampFilterField?: string | null;
      /** Timestamp to find clips after this time. */
      timestampMsAfter?: number | null;
      /** Timestamp to find clips before this time */
      timestampMsBefore?: number | null;
    };
    Event_GetClipsWithProgressWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      /** Token to be supplied on the next search request to get the next page. If token is null, there is no more data available. */
      pageToken?: string | null;
      savedClips?:
        | components["schemas"]["Event_SavedClipWithProgressType"][]
        | null;
    };
    Event_GetMotionGridCountsWSResponse: {
      /** Matrix where each cell is a fraction of the camera's resolution and stores the total number of motion events that occurred in the given timeframe */
      countGrid?: ((number | null)[] | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_GetMotionGridWSRequest: {
      /** Uuid of the selected camera */
      deviceUuid: string | null;
      /** End time as a UNIX timestamp in seconds */
      endTimeUtcSecs: number | null;
      /** Start time as a UNIX timestamp in seconds */
      startTimeUtcSecs: number | null;
    };
    Event_GetMotionGridWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      motionCells?: {
        [key: string]: components["schemas"]["Event_FrontendCell"][] | null;
      } | null;
    };
    Event_GetPolicyAlertCountWSRequest: {
      maxResultsSize?: number | null;
    };
    Event_GetPolicyAlertCountWSResponse: {
      count?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_GetPolicyAlertDetailsWSRequest: {
      policyAlertUuid?: string | null;
    };
    Event_GetPolicyAlertDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlert?: components["schemas"]["PolicyAlertWithDetailsType"];
    };
    Event_GetPolicyAlertGroupsForDeviceWSRequest: {
      deviceUuid?: string | null;
      lastTimestampMs?: number | null;
      lastUuid?: string | null;
      maxResults?: number | null;
    };
    Event_GetPolicyAlertGroupsForDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlertGroups?:
        | components["schemas"]["Event_PolicyAlertGroupV2"][]
        | null;
    };
    Event_GetPolicyAlertGroupsForLocationWSRequest: {
      lastTimestampMs?: number | null;
      lastUuid?: string | null;
      locationUuid?: string | null;
      maxResults?: number | null;
    };
    Event_GetPolicyAlertGroupsForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlertGroups?:
        | components["schemas"]["Event_PolicyAlertGroupV2"][]
        | null;
    };
    Event_GetPolicyAlertGroupsV2WSRequest: {
      lastTimestampMs?: number | null;
      lastUuid?: string | null;
      maxResults?: number | null;
    };
    Event_GetPolicyAlertGroupsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlertGroups?:
        | components["schemas"]["Event_PolicyAlertGroupV2"][]
        | null;
    };
    Event_GetPolicyAlertV2WSRequest: {
      policyAlertUuid?: string | null;
    };
    Event_GetPolicyAlertV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlert?: components["schemas"]["PolicyAlertV2Type"];
    };
    Event_GetPolicyAlertWSRequest: {
      policyAlertUuid?: string | null;
    };
    Event_GetPolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlert?: components["schemas"]["BasePolicyAlertType"];
    };
    Event_GetPolicyAlertsV2WSRequest: {
      afterTimestampMs?: number | null;
      beforeTimestampMs?: number | null;
      deviceFilter?: (string | null)[] | null;
      lastTimestampMs?: number | null;
      lastUuid?: string | null;
      locationFilter?: (string | null)[] | null;
      maxResults?: number | null;
    };
    Event_GetPolicyAlertsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      oldestPolicyAlert?: components["schemas"]["PolicyAlertV2Type"];
      policyAlerts?: components["schemas"]["PolicyAlertV2Type"][] | null;
    };
    Event_GetPolicyAlertsWSRequest: {
      /** Filter including chosen Access Controlled Doors */
      accessControlledDoorFilter?: (string | null)[] | null;
      /** Enter starting timestamp interval in UNIX ms */
      afterTimestampMs?: number | null;
      /** Enter ending timestamp interval in UNIX ms */
      beforeTimestampMs?: number | null;
      /** Filter including chosen Devices */
      deviceFilter?: (string | null)[] | null;
      /** Search with last known TimestampMs (Required for Pagination) */
      lastTimestampMs?: number | null;
      /** Search with last known LastUuid (Required for Pagination) */
      lastUuid?: string | null;
      /** Filter any locations you would like to include */
      locationFilter?: (string | null)[] | null;
      /** Set a max result limit */
      maxResults?: number | null;
    };
    Event_GetPolicyAlertsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyAlerts?: components["schemas"]["BasePolicyAlertType"][] | null;
    };
    Event_GetSavedClipCountWSRequest: {
      deviceFilter?: (string | null)[] | null;
      endTimeMs?: number | null;
      locationFilter?: (string | null)[] | null;
      startTimeMs?: number | null;
    };
    Event_GetSavedClipCountWSResponse: {
      count?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_GetSavedClipDetailsWSRequest: {
      clipUuid?: string | null;
    };
    Event_GetSavedClipDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      savedClip?: components["schemas"]["SavedClipWithDetailsType"];
    };
    Event_GetSavedClipsByExternalTransactionIdWSRequest: {
      externalTransactionId?: string | null;
    };
    Event_GetSavedClipsByExternalTransactionIdWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      savedClips?: components["schemas"]["SavedClipV2Type"][] | null;
    };
    Event_GetSavedClipsV2WSRequest: {
      maxPageSize?: number | null;
      pageTimestampMs?: number | null;
    };
    Event_GetSavedClipsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      savedClips?: components["schemas"]["SavedClipV2Type"][] | null;
    };
    Event_GetSavedClipsWSRequest: { [key: string]: unknown };
    Event_GetSavedClipsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      savedClips?: components["schemas"]["SavedClipV2Type"][] | null;
    };
    Event_GetSharedClipGroupDetailsWSRequest: {
      uuid?: string | null;
    };
    Event_GetSharedClipGroupDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedClipGroup?: components["schemas"]["SharedClipGroupWithDetailsType"];
    };
    Event_GetSharedClipGroupsV2WSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
    };
    Event_GetSharedClipGroupsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedClipGroups?:
        | components["schemas"]["SharedClipGroupWrapperV2Type"][]
        | null;
    };
    Event_GetSharedClipGroupsWSRequest: { [key: string]: unknown };
    Event_GetSharedClipGroupsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedClipGroups?:
        | components["schemas"]["SharedClipGroupWrapperType"][]
        | null;
    };
    Event_GetSplicedClipsInProgressWSRequest: { [key: string]: unknown };
    Event_GetSplicedClipsInProgressWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      splicedClips?: components["schemas"]["SplicedClipType"][] | null;
    };
    Event_GetUnhealthyDeviceAlertsWSRequest: { [key: string]: unknown };
    Event_GetUnhealthyDeviceAlertsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      unhealthyDeviceAlerts?:
        | components["schemas"]["UnHealthyDeviceAlertType"][]
        | null;
    };
    Event_MuteNotificationsForDevicetWSRequest: {
      deviceUuid?: string | null;
      durationSec?: number | null;
    };
    Event_MuteNotificationsForDevicetWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_PolicyAlertGroupV2: {
      endTime?: number | null;
      policyAlerts?: components["schemas"]["PolicyAlertV2Type"][] | null;
      startTime?: number | null;
    };
    Event_ReportBadPolicyAlertWSRequest: {
      policyAlert?: components["schemas"]["PolicyAlertV2Type"];
    };
    Event_ReportBadPolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_RuuidWrapper: {
      alertUuid?: string | null;
      eventUuid?: string | null;
    };
    Event_SavePolicyAlertWSRequest: {
      alertUuid?: string | null;
      fisheyePresentationMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      savedClipDescription?: string | null;
      savedClipTitle?: string | null;
    };
    Event_SavePolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_SavedClipWithProgressType: {
      accessSettings?: components["schemas"]["ClipAccessSettings"];
      alterMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      analyzed?: boolean | null;
      byteCount?: number | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      consoleDelete?: boolean | null;
      createdAtMs?: number | null;
      currentOperation?: string | null;
      description?: string | null;
      devicePresentationOrder?: (string | null)[] | null;
      deviceUuid?: string | null;
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      externalTransactionId?: string | null;
      fisheyeMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      integrationUploadList?: components["schemas"]["IntegrationEnum"][] | null;
      isMonitoringClip?: boolean | null;
      isVendorClip?: boolean | null;
      lastUpdatedSec?: number | null;
      orgUuid?: string | null;
      percentComplete?: number | null;
      sendToSharedStorage?: boolean | null;
      sha256Hex?: string | null;
      sourceAlertUuid?: string | null;
      status?: SavedClipWithProgressStatusEnum | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      timestampMs?: number | null;
      title?: string | null;
      userUuid?: string | null;
      uuid?: string | null;
      videoResolution?: components["schemas"]["Resolution"];
    };
    Event_SearchMotionGridWSRequest: {
      /** Uuid of the selected camera */
      deviceUuid: string | null;
      /** End time as a UNIX timestamp in seconds */
      endTimeUtcSecs: number | null;
      /** List of motion grid cells to include in the search */
      searchCells: components["schemas"]["Event_FrontendCell"][] | null;
      /** Start time as a UNIX timestamp in seconds */
      startTimeUtcSecs: number | null;
    };
    Event_SearchMotionGridWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      timeUtcSecsList?: (number | null)[] | null;
    };
    Event_SearchMotionGridWithActivitiesWSRequest: {
      /** Uuid of the selected camera */
      deviceUuid: string | null;
      /** End time as a UNIX timestamp in seconds */
      endTimeUtcSecs: number | null;
      /** List of motion grid cells to include in the search */
      searchCells: components["schemas"]["Event_FrontendCell"][] | null;
      /** Start time as a UNIX timestamp in seconds */
      startTimeUtcSecs: number | null;
    };
    Event_SearchMotionGridWithActivitiesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      timeUtcSecsToActivityMap?: {
        [
          key: string
        ]: components["schemas"]["Event_SearchMotionGridWithActivitiesWSResponse_MotionGridActivity"];
      } | null;
    };
    Event_SearchMotionGridWithActivitiesWSResponse_ActivityWithId: {
      activity?: components["schemas"]["ActivityEnum"];
      objectId?: number | null;
    };
    Event_SearchMotionGridWithActivitiesWSResponse_MotionGridActivity: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      activitiesWithId?:
        | components["schemas"]["Event_SearchMotionGridWithActivitiesWSResponse_ActivityWithId"][]
        | null;
      bestTimestampMs?: number | null;
    };
    Event_UnSavePolicyAlertWSRequest: {
      alertUuid?: string | null;
      savedClipUuid?: string | null;
    };
    Event_UnSavePolicyAlertWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_UpdatePolicyAlertTextDescriptionWSRequest: {
      alertUuid?: string | null;
      textDescription?: string | null;
    };
    Event_UpdatePolicyAlertTextDescriptionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_UpdateSavedClipWSRequest: {
      description?: string | null;
      savedClipUuid?: string | null;
      title?: string | null;
    };
    Event_UpdateSavedClipWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_UpdateSharedClipGroupWSRequest: {
      description?: string | null;
      expirationTimeSecs?: number | null;
      plaintextPassword?: string | null;
      sharedClipUuid?: string | null;
      title?: string | null;
    };
    Event_UpdateSharedClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      shareUrl?: string | null;
      uuid?: string | null;
    };
    Event_groups_CreateClipGroupWSRequest: {
      description?: string | null;
      title?: string | null;
      uuids?: components["schemas"]["Event_RuuidWrapper"][] | null;
    };
    Event_groups_CreateClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      uuid?: string | null;
    };
    Event_groups_DeleteClipGroupWSRequest: {
      uuid?: string | null;
    };
    Event_groups_DeleteClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Event_groups_GetClipGroupDetailsWSRequest: {
      uuid?: string | null;
    };
    Event_groups_GetClipGroupDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      group?: components["schemas"]["ClipGroupWithDetailsType"];
    };
    Event_groups_GetClipGroupsForOrgWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
    };
    Event_groups_GetClipGroupsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      groups?: components["schemas"]["ClipGroupType"][] | null;
    };
    Event_groups_UpdateClipGroupWSRequest: {
      description?: string | null;
      title?: string | null;
      uuid?: string | null;
      uuids?: components["schemas"]["Event_RuuidWrapper"][] | null;
    };
    Event_groups_UpdateClipGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Eventsearch_CombinedSeekPointType: {
      activity?: components["schemas"]["ActivityEnum"];
      cameraUuid?: string | null;
      customActivityColor?: CombinedSeekPointCustomActivityColorEnum | null;
      customActivityDescription?: string | null;
      customActivityDisplayName?: string | null;
      faceName?: string | null;
      licensePlate?: string | null;
      objectId?: number | null;
      originalEvent?: { [key: string]: unknown } | null;
      seekpointEndTimeMs?: number | null;
      seekpointStartTimeMs?: number | null;
      thumbnailUrl?: string | null;
      timestampMs?: number | null;
      unidentifiedFaceId?: string | null;
    };
    Eventsearch_GetCameraOrDoorbellCameraSeekpointsWSResponse: {
      combinedSeekpoints?:
        | components["schemas"]["Eventsearch_CombinedSeekPointType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Eventsearch_GetEventSeekpointsV2WSRequest: {
      /** Set of access controlled door uuids to retrieve component seekpoints for. */
      accessControlledDoorUuids?: (string | null)[] | null;
      /** Optional filter to specify what activities are returned. */
      activityFilter?: components["schemas"]["ActivityEnum"][] | null;
      /** Optional filter to specify which human motion seekpoints are returned. */
      clothingColorFilter?: (GetEventSeekpointsV2WSRequestClothingColorFilterEnum | null)[] | null;
      /** An optional interval X (in seconds) that, when specified, causes this endpoint to return a smaller collection of seekpoints. These seekpoints represent clusters of activities that occur consecutively within X seconds of each other. */
      clusterIntervalSec?: number | null;
      /** Set of device facet uuids to retrieve footage seekpoints for. */
      deviceUuids?: (string | null)[] | null;
      /** Duration in seconds since the start time to retrieve seekpoints for. */
      durationSec: number | null;
      /** Determines whether or not any motion seekpoints are returned. */
      includeAnyMotion?: boolean | null;
      /** Determines whether or not to include any seekpoints from enabled integrations. */
      includeIntegrationEvents?: boolean | null;
      /** Owner device uuid to retrieve component seekpoints for. */
      ownerDeviceUuid?: string | null;
      /** Optional filter used to limit the seekpoint search to the region provided. */
      searchCells?: components["schemas"]["Event_FrontendCell"][] | null;
      /** UNIX timestamp in seconds for when to start retrieving seekpoints. */
      startTimeSec: number | null;
      /** Optional filter to specify which vehicle motion seekpoints are returned. */
      vehicleColorFilter?: (GetEventSeekpointsV2WSRequestVehicleColorFilterEnum | null)[] | null;
    };
    Eventsearch_GetEventSeekpointsWSRequest: {
      activitySet?: components["schemas"]["ActivityEnum"][] | null;
      componentSeekPointsByAccessControlledDoorWSRequest?: components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorWSRequest"];
      componentSeekPointsByAccessControlledDoorsWSRequest?: components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorsWSRequest"];
      componentSeekPointsByOwnerDeviceWSRequest?: components["schemas"]["Component_FindComponentSeekPointsByOwnerDeviceWSRequest"];
      durationSec?: number | null;
      searchColorAndVehicleByColorWSRequest?: components["schemas"]["Eventsearch_SearchClothingAndVehicleByColorWSRequest"];
      searchMotionGridWithActivitiesWSRequest?: components["schemas"]["Event_SearchMotionGridWithActivitiesWSRequest"];
      seekpointsWSRequest?: components["schemas"]["Common_devices_GetSeekpointsWSRequest"];
      startTimeSec?: number | null;
      videoFootageWSRequest?: components["schemas"]["Eventsearch_VideoFootageWSRequest"];
    };
    Eventsearch_GetEventSeekpointsWSResponse: {
      combinedSeekpoints?:
        | components["schemas"]["Eventsearch_CombinedSeekPointType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Eventsearch_SearchClothingAndVehicleByColorWSRequest: {
      clothingColorFilter?: (SearchClothingAndVehicleByColorWSRequestClothingColorFilterEnum | null)[] | null;
      deviceFilter?: (string | null)[] | null;
      endTimeMs?: number | null;
      startTimeMs?: number | null;
      vehicleColorFilter?: (SearchClothingAndVehicleByColorWSRequestVehicleColorFilterEnum | null)[] | null;
    };
    Eventsearch_VideoFootageWSRequest: {
      cameraUuid?: string | null;
      cameraUuids?: (string | null)[] | null;
      duration?: number | null;
      includeAnyMotion?: boolean | null;
      startTime?: number | null;
      useMultiCamera?: boolean | null;
    };
    Export_ExportAuditEventsWSRequest: {
      endInterval?: number | null;
      /** If not empty, events with actions specified in the list are filtered out. If both include and exclude actions are specified, exclude actions are ignored. */
      excludeActions?: (ExportAuditEventsWSRequestExcludeActionsEnum | null)[] | null;
      /** If not empty, events with actions specified in the list are filtered out. If both include and exclude actions are specified, exclude actions are ignored. */
      includeActions?: (ExportAuditEventsWSRequestIncludeActionsEnum | null)[] | null;
      startInterval?: number | null;
    };
    Export_ExportClimateEventsWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      sensorUuid?: string | null;
    };
    Export_ExportCountReportsWSRequest: {
      /** Enter the ending date in in ISO 8601 format */
      endDate?: string | null;
      /** End datetime as a UNIX timestamp in milliseconds */
      endTimeMs: number | null;
      /** The chosen interval time of reports */
      interval: ExportCountReportsWSRequestIntervalEnum | null;
      /** The chosen scope of report by Device, Organization, Region or Location */
      scope: ExportCountReportsWSRequestScopeEnum | null;
      /** Enter the starting date in ISO 8601 format */
      startDate?: string | null;
      /** Start datetime as a UNIX timestamp in milliseconds */
      startTimeMs: number | null;
      /** Type of alert to fetch */
      type: ExportCountReportsWSRequestTypeEnum | null;
      /** Enter the UUID of device(s) or location(s) */
      uuidList?: (string | null)[] | null;
    };
    Export_ExportDiagnosticEventsWSRequest: {
      endInterval?: number | null;
      startInterval?: number | null;
    };
    Export_ExportDoorEventsWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      sensorUuid?: string | null;
    };
    Export_ExportEnvironmentalGatewayEventsWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      deviceUuid?: string | null;
    };
    Export_ExportInventoryWSRequest: {
      cameraUuids?: (string | null)[] | null;
      deviceUuids?: (string | null)[] | null;
    };
    Export_ExportMotionEventsWSRequest: {
      /** After datetime provided as a UNIX timestamp in milliseconds */
      createdAfterMs?: number | null;
      /** Before datetime provided as a UNIX timestamp in milliseconds */
      createdBeforeMs?: number | null;
      /** Enter Motion Sensor Uuid */
      deviceUuid: string | null;
    };
    Export_ExportPeopleCountEventsWSRequest: {
      endInterval?: number | null;
      startInterval?: number | null;
    };
    Export_ExportPeopleEventsWSRequest: {
      endInterval?: number | null;
      startInterval?: number | null;
    };
    Export_ExportProximityEventsWSRequest: {
      createBeforeMs?: number | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      tagUuid?: string | null;
    };
    Export_ExportProximityLocomotionEventsWSRequest: {
      createBeforeMs?: number | null;
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      tagUuid?: string | null;
    };
    Export_ExportUptimeWSRequest: {
      /** Use deviceUuids instead */
      cameraUuids?: (string | null)[] | null;
      deviceUuids?: (string | null)[] | null;
      endDateTime?: string | null;
      granularity?: ExportUptimeWSRequestGranularityEnum | null;
      startDateTime?: string | null;
    };
    Export_ExportUsersWSRequest: {
      userUuids?: (string | null)[] | null;
    };
    Export_ExportVehicleEventsWSRequest: {
      deviceUuids?: (string | null)[] | null;
      /** Do you want a fuzzy search on the provided plate numbers? */
      fuzzy: boolean | null;
      interval?: components["schemas"]["TimeInterval"];
      labels?: (string | null)[] | null;
      plateNumbers?: (string | null)[] | null;
    };
    FaceUploadMetadata: {
      createdAtMillis?: number | null;
      errorMsg?: string | null;
      faceId?: string | null;
      orgUuid?: string | null;
      origS3Key?: string | null;
      personUuid?: string | null;
      success?: boolean | null;
      transactionId?: string | null;
    };
    Facerecognition_faceevent_DeleteFaceEventWSRequest: {
      eventUuid?: string | null;
    };
    Facerecognition_faceevent_DeleteFaceEventWSResponse: {
      [key: string]: unknown;
    };
    Facerecognition_faceevent_ExportFaceEventsByOrgWSRequest: {
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSearchFilter"];
    };
    Facerecognition_faceevent_ExternalFaceEvent: {
      /** Confidence value indicating the likelihood that the detected image is a face. */
      detectionConfidence?: number | null;
      deviceUuid?: string | null;
      /** Confidence value associated with the embedding generated for the face image. */
      embeddingConfidence?: number | null;
      eventTimestamp?: number | null;
      /** Name of the person that matched the face image. If selectedPersonMatch is not null, faceName will be equal to the name field of selectedPersonMatch. */
      faceName?: string | null;
      hasEmbedding?: boolean | null;
      imageS3Key?: string | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
      /** Uuid of the person that matched the face image. If selectedPersonMatch is not null, personUuid will be equal to the uuid field of the selectedPersonMatch. */
      personUuid?: string | null;
      pitch?: number | null;
      roll?: number | null;
      selectedPersonMatch?: components["schemas"]["Facerecognition_faceevent_ExternalPersonMatch"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      thumbnailS3Key?: string | null;
      /** Top person matches found for the face image. */
      topPersonMatches?:
        | components["schemas"]["Facerecognition_faceevent_ExternalPersonMatch"][]
        | null;
      uuid?: string | null;
      yaw?: number | null;
    };
    Facerecognition_faceevent_ExternalFaceEventSearchFilter: {
      /** Optional filter by a set of devices. */
      deviceUuids?: (string | null)[] | null;
      /** Optional filter by name substring. The face event is a match if its face name contains the specified value. The search will only be performed if the provided value is at least 3 characters long after trimming leading and trailing spaces. If both faceNameContains and faceNames are specified, faceNameContains takes a precedence. */
      faceNameContains?: string | null;
      /** Optional filter by people names. */
      faceNames?: (string | null)[] | null;
      /** Optional filter by the presence or absence of an embedding. */
      hasEmbedding?: boolean | null;
      /** Optional filter by the presence or absence of a person name. */
      hasName?: boolean | null;
      /** Optional filter by labels. */
      labels?: (string | null)[] | null;
      /** Optional filter by a set of locations. */
      locationUuids?: (string | null)[] | null;
      /** Optional filter by a set of people. */
      personUuids?: (string | null)[] | null;
      timestampFilter?: components["schemas"]["TimestampFilter"];
    };
    Facerecognition_faceevent_ExternalFaceEventSimilaritySearchFilter: {
      /** Optional filter by a set of devices. */
      deviceUuids?: (string | null)[] | null;
      /** Optional face embedding confidence threshold used to filter out face events with embeddingconfidence values less than the specified threshold. Valid range [0,1]. */
      embeddingConfidenceThreshold?: number | null;
      /** Optional face match distance threshold used to compare face event images. Defaults to 0.7.Valid range [0,1]. */
      faceMatchDistanceThreshold?: number | null;
      /** Optional filter by name substring. The face event is a match if its face name contains the specified value. The search will only be performed if the provided value is at least 3 characters long after trimming leading and trailing spaces. If both faceNameContains and faceNames are specified, faceNameContains takes a precedence. */
      faceNameContains?: string | null;
      /** Optional filter by people names. */
      faceNames?: (string | null)[] | null;
      /** Optional filter by the presence or absence of a person name. */
      hasName?: boolean | null;
      /** Optional filter by labels. */
      labels?: (string | null)[] | null;
      /** Optional filter by a set of locations. */
      locationUuids?: (string | null)[] | null;
      /** Optional filter by a set of people. */
      personUuids?: (string | null)[] | null;
      timestampFilter?: components["schemas"]["TimestampFilter"];
    };
    /** Top person matches found for the face image. */
    Facerecognition_faceevent_ExternalPersonMatch: {
      /** Match confidence level expressed as a value in range[0,1]. */
      confidence?: number | null;
      faceId?: string | null;
      name?: string | null;
      uuid?: string | null;
    };
    Facerecognition_faceevent_FindFaceEventsByDeviceForReportingWSRequest: {
      deviceUuid?: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      timestampFilter?: components["schemas"]["Facerecognition_faceevent_ReportTimestampFilter"];
    };
    Facerecognition_faceevent_FindFaceEventsByDeviceForReportingWSResponse: {
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Facerecognition_faceevent_FindFaceEventsByLocationForReportingWSRequest: {
      locationUuid?: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      timestampFilter?: components["schemas"]["Facerecognition_faceevent_ReportTimestampFilter"];
    };
    Facerecognition_faceevent_FindFaceEventsByLocationForReportingWSResponse: {
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Facerecognition_faceevent_FindFaceEventsByOrgForReportingWSRequest: {
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      timestampFilter?: components["schemas"]["Facerecognition_faceevent_ReportTimestampFilter"];
    };
    Facerecognition_faceevent_FindFaceEventsByOrgForReportingWSResponse: {
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Facerecognition_faceevent_FindFaceEventsByOrgWSRequest: {
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSearchFilter"];
    };
    Facerecognition_faceevent_FindFaceEventsByOrgWSResponse: {
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Facerecognition_faceevent_FindSimilarFaceEventsByEmbeddingWSRequest: {
      embedding?: components["schemas"]["Embedding"];
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSimilaritySearchFilter"];
    };
    Facerecognition_faceevent_FindSimilarFaceEventsByEmbeddingWSResponse: {
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Facerecognition_faceevent_FindSimilarFaceEventsByFaceMatchmakerWSRequest: {
      faceId?: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSimilaritySearchFilter"];
    };
    Facerecognition_faceevent_FindSimilarFaceEventsByFaceMatchmakerWSResponse: {
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Facerecognition_faceevent_FindSimilarFaceEventsWSRequest: {
      faceEventUuid?: string | null;
      pageRequest?: components["schemas"]["DynamoPageRequest"];
      searchFilter?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEventSimilaritySearchFilter"];
    };
    Facerecognition_faceevent_FindSimilarFaceEventsWSResponse: {
      faceEvents?:
        | components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"][]
        | null;
      lastEvaluatedKey?: string | null;
    };
    Facerecognition_faceevent_GetFaceEventWSRequest: {
      eventUuid?: string | null;
    };
    Facerecognition_faceevent_GetFaceEventWSResponse: {
      faceEvent?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"];
    };
    Facerecognition_faceevent_ProcessFaceEventSearchImageWSResponse: {
      embedding?: components["schemas"]["Embedding"];
      /** Base64 encoded image used for embedding generation. The image in the request may have been modified(cropped) in order to generate embedding. */
      imageBase64?: string | null;
    };
    Facerecognition_faceevent_ReportTimestampFilter: {
      rangeStart?: string | null;
      reportInterval?: ReportTimestampFilterReportIntervalEnum | null;
    };
    Facerecognition_faceevent_UpdateFaceEventWSRequest: {
      eventUuid?: string | null;
      /** Name of the person associated with the face event. Ignored if person UUID matches to one of the top person matches. */
      personName?: string | null;
      /** UUID of the person selected as a match for the face event. If the UUID matches one of the top person matches, selectedPersonMatch will be set accordingly. */
      personUuid?: string | null;
    };
    Facerecognition_faceevent_UpdateFaceEventWSResponse: {
      faceEvent?: components["schemas"]["Facerecognition_faceevent_ExternalFaceEvent"];
    };
    Facerecognition_matchmaker_CreateFaceMatchmakerFromSightingWSRequest: {
      faceEventUuid?: string | null;
      personUuid?: string | null;
    };
    Facerecognition_matchmaker_CreateFaceMatchmakerFromSightingWSResponse: {
      faceMatchmaker?: components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"];
    };
    Facerecognition_matchmaker_CreatePersonAndFaceMatchmakersWSResponse: {
      faceMatchmakers?:
        | components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"][]
        | null;
      person?: components["schemas"]["Person"];
      transactionId?: string | null;
    };
    Facerecognition_matchmaker_DeleteFaceMatchmakerWSRequest: {
      faceId?: string | null;
    };
    Facerecognition_matchmaker_DeleteFaceMatchmakerWSResponse: {
      [key: string]: unknown;
    };
    Facerecognition_matchmaker_ExternalFaceMatchmaker: {
      createdOn?: string | null;
      id?: string | null;
      orgUuid?: string | null;
      personUuid?: string | null;
      uploaded?: boolean | null;
    };
    Facerecognition_matchmaker_FileUploadResult: {
      /** The name of the uploaded file. */
      fileName?: string | null;
      /** Error message that occurred during upload. */
      message?: string | null;
      /** Indicates whether the file upload was successful. Note, that even if upload was successful, subsequent operations, such as adding the uploaded file as a matchmaker, may fail. */
      success?: boolean | null;
    };
    Facerecognition_matchmaker_FindFaceMatchmakersByOrgWSRequest: {
      [key: string]: unknown;
    };
    Facerecognition_matchmaker_FindFaceMatchmakersByOrgWSResponse: {
      faceMatchmakers?:
        | components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"][]
        | null;
    };
    Facerecognition_matchmaker_FindFaceMatchmakersByPersonWSRequest: {
      personUuid?: string | null;
    };
    Facerecognition_matchmaker_FindFaceMatchmakersByPersonWSResponse: {
      faceMatchmakers?:
        | components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"][]
        | null;
    };
    Facerecognition_matchmaker_FindFaceUploadMetadataByTransactionWSRequest: {
      transactionId?: string | null;
    };
    Facerecognition_matchmaker_FindFaceUploadMetadataByTransactionWSResponse: {
      faceUploadMetadata?: components["schemas"]["FaceUploadMetadata"][] | null;
    };
    Facerecognition_matchmaker_GetFaceMatchingConfigWSRequest: {
      [key: string]: unknown;
    };
    Facerecognition_matchmaker_GetFaceMatchingConfigWSResponse: {
      faceMatchConfidenceThreshold?: number | null;
    };
    Facerecognition_matchmaker_GetFaceMatchmakerWSRequest: {
      faceId?: string | null;
    };
    Facerecognition_matchmaker_GetFaceMatchmakerWSResponse: {
      faceMatchmaker?: components["schemas"]["Facerecognition_matchmaker_ExternalFaceMatchmaker"];
    };
    Facerecognition_matchmaker_UpdateFaceMatchingConfigWSRequest: {
      /** Minimum confidence level required for the system to automatically assign a match. If null, the system uses the built-in default. */
      faceMatchConfidenceThreshold?: number | null;
    };
    Facerecognition_matchmaker_UpdateFaceMatchingConfigWSResponse: {
      faceMatchConfidenceThreshold?: number | null;
    };
    Facerecognition_matchmaker_UploadFaceMatchmakerForPersonWSResponse: {
      fileUploadResult?: components["schemas"]["Facerecognition_matchmaker_FileUploadResult"];
      /** Transaction id to track face matchmaker upload progress. */
      transactionId?: string | null;
    };
    Facerecognition_matchmaker_UploadFaceMatchmakersWSResponse: {
      fileUploadResults?:
        | components["schemas"]["Facerecognition_matchmaker_FileUploadResult"][]
        | null;
      /** Transaction id to track face matchmakers upload progress. */
      transactionId?: string | null;
    };
    Facerecognition_matchmaker_ValidateFaceMatchmakerImageWSResponse: {
      errorMessage?: string | null;
      valid?: boolean | null;
    };
    Facerecognition_person_AddPersonLabelWSRequest: {
      label?: string | null;
      personUuid?: string | null;
    };
    Facerecognition_person_AddPersonLabelWSResponse: { [key: string]: unknown };
    Facerecognition_person_CreatePersonWSRequest: {
      name?: string | null;
    };
    Facerecognition_person_CreatePersonWSResponse: {
      person?: components["schemas"]["Person"];
    };
    Facerecognition_person_DeletePersonWSRequest: {
      personUuid?: string | null;
    };
    Facerecognition_person_DeletePersonWSResponse: { [key: string]: unknown };
    Facerecognition_person_FindPeopleByOrgWSRequest: { [key: string]: unknown };
    Facerecognition_person_FindPeopleByOrgWSResponse: {
      people?: components["schemas"]["Person"][] | null;
    };
    Facerecognition_person_FindPersonLabelsByOrgWSRequest: {
      [key: string]: unknown;
    };
    Facerecognition_person_FindPersonLabelsByOrgWSResponse: {
      labelsByPerson?: { [key: string]: (string | null)[] | null } | null;
    };
    Facerecognition_person_GetPersonWSRequest: {
      personUuid?: string | null;
    };
    Facerecognition_person_GetPersonWSResponse: {
      person?: components["schemas"]["Person"];
    };
    Facerecognition_person_RemovePersonLabelWSRequest: {
      label?: string | null;
      personUuid?: string | null;
    };
    Facerecognition_person_RemovePersonLabelWSResponse: {
      [key: string]: unknown;
    };
    Facerecognition_person_UpdatePersonWSRequest: {
      personSelectiveUpdate?: components["schemas"]["PersonSelectiveUpdate"];
    };
    Facerecognition_person_UpdatePersonWSResponse: {
      person?: components["schemas"]["Person"];
    };
    FeatureCompatabilityType: {
      betaRolloutOrgFlag?: string | null;
      deviceFeatureEnablement?: components["schemas"]["DeviceFeatureEnum"];
      featureName?: string | null;
      generatedActivities?: components["schemas"]["ActivityEnum"][] | null;
      hardwareDefaultMap?: { [key: string]: boolean | null } | null;
      requiredLicenses?: components["schemas"]["License"][] | null;
      supportedHardware?:
        | components["schemas"]["HardwareVariationEnum"][]
        | null;
    };
    Feature_DeviceFeaturesType: {
      deviceUuid?: string | null;
      featureMap?: { [key: string]: boolean | null } | null;
    };
    Feature_GetDeviceEventTypesWSRequest: {
      deviceUuid?: string | null;
    };
    Feature_GetDeviceEventTypesWSResponse: {
      eventTypes?: components["schemas"]["ActivityEnum"][] | null;
    };
    Feature_GetDeviceFeaturesListWSRequest: {
      deviceUuids?: (string | null)[] | null;
    };
    Feature_GetDeviceFeaturesListWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      featureList?:
        | components["schemas"]["Feature_DeviceFeaturesType"][]
        | null;
    };
    Feature_GetDeviceFeaturesWSRequest: {
      deviceUuid?: string | null;
    };
    Feature_GetDeviceFeaturesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      features?: components["schemas"]["Feature_DeviceFeaturesType"];
    };
    Feature_GetFeatureCompatabilityMatrixWSRequest: { [key: string]: unknown };
    Feature_GetFeatureCompatabilityMatrixWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      featureCompatabilityMatrix?:
        | components["schemas"]["FeatureCompatabilityType"][]
        | null;
    };
    Feature_UpdateDeviceFeaturesWSRequest: {
      deviceUuid?: string | null;
      featureMap?: { [key: string]: boolean | null } | null;
    };
    Feature_UpdateDeviceFeaturesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    FirmwareUpdateIntervalType: {
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
    } | null;
    /** Overrides default firmware update settings. */
    FirmwareUpdateSettingsOverrideType: {
      deviceTypes?: components["schemas"]["DeviceTypeEnum"][] | null;
      firmwareUpdateSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
    } | null;
    FirmwareUpdateSettingsType: {
      intervalsV2?:
        | components["schemas"]["FirmwareUpdateIntervalType"][]
        | null;
      mode?: FirmwareUpdateSettingsModeEnum | null;
    } | null;
    FirstInFirmwareStatus: FirstInFirmwareStatusEnum;
    FirstInResetEnum: FirstInResetEnum;
    FirstInShadow: {
      originator?: components["schemas"]["BaseEventOriginator"];
      source?: components["schemas"]["FirstInSourceEnum"];
      state?: components["schemas"]["FirstInFirmwareStatus"];
      stateUpdateEventTimestampMs?: number | null;
    };
    FirstInSourceEnum: FirstInSourceEnum;
    FirstInState: {
      originator?: components["schemas"]["BaseEventOriginator"];
      requestedAtMillis?: number | null;
      state?: components["schemas"]["FirstInStatus"];
    };
    FirstInState_Minimal: {
      originator?: components["schemas"]["BaseEventOriginator_Minimal"];
      requestedAtMillis?: number | null;
      state?: components["schemas"]["FirstInStatus_Minimal"];
    };
    FirstInStatus: FirstInStatusEnum;
    FirstInStatus_Minimal: FirstInStatus_MinimalEnum;
    FisheyeDisplayMode: FisheyeDisplayModeEnum;
    FlicDevice: {
      flicAction?: string | null;
      flicBatteryLevel?: string | null;
      flicHub?: components["schemas"]["FlicHub"];
      flicName?: string | null;
      flicSerialNumber?: string | null;
      flicTimestamp?: number | null;
      flicUuid?: string | null;
      lastClickedTimestamp?: string | null;
      moduleUuid?: string | null;
    };
    FlicHub: {
      flicHubName?: string | null;
      flicHubSerialNumber?: string | null;
      flicHubUuid?: string | null;
    };
    FlicType:
      | ({
          apiKey?: string | null;
          apiSecret?: string | null;
          associatedLocations?: (string | null)[] | null;
          moduleUploaded?: boolean | null;
          webhookId?: string | null;
          webhookToken?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    FloorPlanType: {
      eastEdge?: number | null;
      floorLabel?: string | null;
      floorNumber?: number | null;
      imageUrl?: string | null;
      mediaUuid?: string | null;
      northEdge?: number | null;
      rotation?: number | null;
      southEdge?: number | null;
      westEdge?: number | null;
    };
    FootageBoundingBoxType: {
      a: components["schemas"]["ActivityEnum"];
      /** alerted on this? */
      al?: boolean | null;
      /** bounding box - bottom permyriad */
      b: number | null;
      /** confidence */
      c?: number | null;
      /** Custom activity display description, maximum 100 characters */
      cd?: string | null;
      /** custom activity display name */
      cdn?: string | null;
      croppedImageLocator?: string | null;
      customActivityColor?: FootageBoundingBoxCustomActivityColorEnum | null;
      /** face names */
      fn?: string | null;
      /** pose keypoints */
      kp?: { [key: string]: components["schemas"]["PointType"] } | null;
      /** bounding box - left permyriad */
      l: number | null;
      loudness?: number | null;
      /** license plate */
      lp?: string | null;
      /** object in motion? */
      m?: boolean | null;
      objectId?: number | null;
      /** pose */
      p?: string | null;
      /** bounding box - right permyriad */
      r: number | null;
      /** recognized objects */
      ro?: (string | null)[] | null;
      sensorValType?: components["schemas"]["SensorValType"];
      /** bounding box - top permyriad */
      t: number | null;
      toastOrderIdInfo?: components["schemas"]["ToastOrderIdType"];
      /** timestamp in milliseconds since epoch */
      ts: number | null;
      /** FaceId for an unidentified face */
      uf?: string | null;
      /** vehicle name */
      vn?: string | null;
    };
    FootageSeekPointType: {
      a?: components["schemas"]["ActivityEnum"];
      al?: boolean | null;
      b?: number | null;
      fn?: string | null;
      kp?: { [key: string]: components["schemas"]["PointType"] } | null;
      l?: number | null;
      lp?: string | null;
      p?: string | null;
      r?: number | null;
      ro?: (string | null)[] | null;
      t?: number | null;
      ts?: number | null;
      uf?: string | null;
      vn?: string | null;
    };
    FootageSeekPointV2Type: {
      a: components["schemas"]["ActivityEnum"];
      /** alerted on this? */
      al?: boolean | null;
      /** Custom activity seekpoint color */
      cc?: FootageSeekPointV2CcEnum | null;
      /** Custom activity display description, maximum 100 characters */
      cd?: string | null;
      /** Custom activity display name, maximum 32 characters */
      cdn?: string | null;
      dcao?: boolean | null;
      /** face names */
      fn?: string | null;
      id?: number | null;
      loudness?: number | null;
      /** license plate */
      lp?: string | null;
      /** object in motion? */
      m?: boolean | null;
      /** pose */
      p?: string | null;
      /** recognized objects */
      ro?: (string | null)[] | null;
      sensorValType?: components["schemas"]["SensorValType"];
      toi?: components["schemas"]["ToastOrderIdType"];
      /** timestamp */
      ts: number | null;
      tu?: string | null;
      /** FaceId for an unidentified face */
      uf?: string | null;
      /** vehicle name */
      vn?: string | null;
    };
    FormDataBodyPart: {
      content?: { [key: string]: unknown } | null;
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: { [key: string]: unknown } | null;
      fileName?: string | null;
      formDataContentDisposition?: components["schemas"]["FormDataContentDisposition"];
      headers?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      name?: string | null;
      parameterizedHeaders?:
        | ({
            empty?: boolean | null;
          } & {
            [key: string]:
              | components["schemas"]["ParameterizedHeader"][]
              | null;
          })
        | null;
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
      simple?: boolean | null;
      value?: string | null;
    } | null;
    FormDataContentDisposition: {
      creationDate?: string | null;
      fileName?: string | null;
      modificationDate?: string | null;
      name?: string | null;
      parameters?: { [key: string]: string | null } | null;
      readDate?: string | null;
      size?: number | null;
      type?: string | null;
    };
    FormDataMultiPart: {
      bodyParts?: components["schemas"]["BodyPart"][] | null;
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: { [key: string]: unknown } | null;
      fields?: {
        [key: string]: components["schemas"]["FormDataBodyPart"][] | null;
      } | null;
      headers?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parameterizedHeaders?:
        | ({
            empty?: boolean | null;
          } & {
            [key: string]:
              | components["schemas"]["ParameterizedHeader"][]
              | null;
          })
        | null;
      parent?: components["schemas"]["MultiPart"];
      providers?: components["schemas"]["Providers"];
    } | null;
    FormaSensorType: {
      ch2oPpb?: number | null;
      relHumid?: number | null;
      tempC?: number | null;
      timestampSec?: number | null;
    };
    Freight: {
      warehouse?: FreightWarehouseEnum | null;
    };
    FrontendEqualizerSettings: {
      frequency?: number | null;
      gain?: number | null;
      q?: number | null;
    };
    FullDeviceStateType: {
      afSupport?: boolean | null;
      baseVideoOperationUri?: string | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      connectionTimestampMs?: number | null;
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latestFirmwareVersion?: string | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      maxZoomPercent?: number | null;
      mediaRegion?: string | null;
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      onCameraState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      onCloudState?: {
        [key: string]: { [key: string]: unknown } | null;
      } | null;
      policyUuid?: string | null;
      region?: string | null;
      serialNumber?: string | null;
      ssid?: string | null;
      stateUpdatedTimestampMs?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      uuid?: string | null;
      versionsBehind?: number | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    Functionality: FunctionalityEnum;
    GeneaSettings: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookSignatureSecret?: string | null;
      webhookUuid?: string | null;
    };
    GeneaType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          refreshToken?: string | null;
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          webhookSignatureSecret?: string | null;
          webhookUuid?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    GenericButtonShadowType:
      | ({
          state?: components["schemas"]["GenericButtonStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
          supervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    GenericButtonStateEnumType: GenericButtonStateEnumType;
    GenericDoorType: {
      id?: string | null;
      name?: string | null;
    };
    GenericInputShadowType:
      | ({
          state?: components["schemas"]["GenericInputStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
          supervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    GenericInputStateChangeEventType:
      | ({
          componentCompositeUuid?: string | null;
          newState?: components["schemas"]["GenericInputStateEnumType"];
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    GenericInputStateEnumType: GenericInputStateEnumType;
    GenericObjectEmbedding: {
      /** bounding box - bottom permyriad */
      b?: number | null;
      deviceUuid?: string | null;
      embedding?: (number | null)[] | null;
      embeddingId?: string | null;
      /** bounding box - left permyriad */
      l?: number | null;
      model?: components["schemas"]["ObjectSearchModelEnum"];
      objectId?: number | null;
      objectType?: string | null;
      orgUuid?: string | null;
      /** bounding box - right permyriad */
      r?: number | null;
      /** bounding box - top permyriad */
      t?: number | null;
      thumbnailUri?: string | null;
      timestamp?: number | null;
    };
    GenericObjectEmbeddingMatch: {
      distance?: number | null;
      embedding?: components["schemas"]["GenericObjectEmbedding"];
      matchedEmbeddingId?: string | null;
    };
    /** Collection of service area settings for this restaurant */
    GenericPosSettings: {
      /** A list of camera uuids from Rhombus that are assigned to the PoS device */
      assignedCameraList?: (string | null)[] | null;
      /** The name of the point of sale device */
      posName?: string | null;
    } | null;
    GenericPosType: {
      id?: string | null;
      name?: string | null;
    };
    GenericRelayShadowType:
      | ({
          originator?: components["schemas"]["BaseEventOriginator"];
          state?: components["schemas"]["GenericRelayStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
        } & {
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    GenericRelayStateChangeEventType:
      | ({
          originator?: components["schemas"]["BaseEventOriginator"];
          steadyState?: components["schemas"]["GenericRelayStateEnumType"];
          steadyStateChangedAtMs?: number | null;
          transientState?: components["schemas"]["GenericRelayStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    GenericRelayStateEnumType: GenericRelayStateEnumType;
    GenericVideoEmbedding: {
      deviceUuid?: string | null;
      embedding?: (number | null)[] | null;
      embeddingId?: string | null;
      endTimeMs?: number | null;
      model?: components["schemas"]["VideoSimilarityModelEnum"];
      orgUuid?: string | null;
      startTimeMs?: number | null;
    };
    GenericVideoEmbeddingMatch: {
      distance?: number | null;
      embedding?: components["schemas"]["GenericVideoEmbedding"];
      matchedEmbeddingId?: string | null;
    };
    GeoIpLocationType: {
      city_name?: string | null;
      country_code?: string | null;
      country_name?: string | null;
      region_name?: string | null;
    };
    GeodeticCoordinates: {
      error?: components["schemas"]["GpsError"];
      floor?: number | null;
      lat?: number | null;
      lon?: number | null;
    };
    GetTemporaryOrgTokenResponse: {
      tempOrgToken?: string | null;
    };
    GoogleCaptchaSourceEnum: GoogleCaptchaSourceEnum;
    GoogleSettings: {
      accountUser?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      folderId?: string | null;
      teamDriveId?: string | null;
    };
    GoogleSettingsV2: {
      defaultAlertFolderId?: string | null;
      defaultAlertFolderName?: string | null;
      defaultFolderId?: string | null;
      defaultFolderName?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      refreshToken?: string | null;
      saveAllAlerts?: boolean | null;
      saveClips?: boolean | null;
    };
    GoogleType:
      | ({
          allowUserStorage?: boolean | null;
          apiToken?: string | null;
          defaultAlertFolderId?: string | null;
          defaultAlertFolderName?: string | null;
          defaultFolderId?: string | null;
          defaultFolderName?: string | null;
          refreshToken?: string | null;
          saveAllAlerts?: boolean | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          userSettingsMap?: {
            [key: string]: components["schemas"]["GoogleUserSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    GoogleUserSettings: {
      defaultAlertFolderId?: string | null;
      defaultAlertFolderName?: string | null;
      defaultFolderId?: string | null;
      defaultFolderName?: string | null;
      refreshToken?: string | null;
      saveAllAlerts?: boolean | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
    } | null;
    GpsError: {
      majorAxis?: number | null;
      minorAxis?: number | null;
      rotation?: number | null;
    };
    Group_AddUsersToOrgGroupWSRequest: {
      groupUuid?: string | null;
      userUuids?: (string | null)[] | null;
    };
    Group_AddUsersToOrgGroupWSResponse: {
      groupMembers?: components["schemas"]["OrgGroupMemberType"][] | null;
    };
    Group_CreateOrgGroupWSRequest: {
      description?: string | null;
      locationUuid?: string | null;
      name?: string | null;
      userUuids?: (string | null)[] | null;
    };
    Group_CreateOrgGroupWSResponse: {
      group?: components["schemas"]["OrgGroupType"];
      groupMembers?: components["schemas"]["OrgGroupMemberType"][] | null;
    };
    Group_DeleteOrgGroupWSRequest: {
      groupUuid?: string | null;
    };
    Group_DeleteOrgGroupWSResponse: { [key: string]: unknown };
    Group_FindAllUsersForOrgGroupWSRequest: {
      groupUuid?: string | null;
    };
    Group_FindAllUsersForOrgGroupWSResponse: {
      groupMembers?: components["schemas"]["OrgGroupMemberType"][] | null;
    };
    Group_FindOrgGroupMembershipsByUserWSRequest: {
      userUuid?: string | null;
    };
    Group_FindOrgGroupMembershipsByUserWSResponse: {
      userGroupMemberships?:
        | components["schemas"]["OrgGroupMemberType"][]
        | null;
    };
    Group_FindOrgGroupMembershipsForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    Group_FindOrgGroupMembershipsForCurrentUserWSResponse: {
      userGroupMemberships?:
        | components["schemas"]["OrgGroupMemberType"][]
        | null;
    };
    Group_FindOrgGroupsByExactNameWSRequest: {
      groupName?: string | null;
    };
    Group_FindOrgGroupsByExactNameWSResponse: {
      group?: components["schemas"]["OrgGroupType"];
    };
    Group_FindOrgGroupsByNamePrefixWSRequest: {
      groupNamePrefix?: string | null;
    };
    Group_FindOrgGroupsByNamePrefixWSResponse: {
      groups?: components["schemas"]["OrgGroupType"][] | null;
    };
    Group_FindOrgGroupsByOrgWSRequest: { [key: string]: unknown };
    Group_FindOrgGroupsByOrgWSResponse: {
      groups?: components["schemas"]["OrgGroupType"][] | null;
    };
    Group_FindOrgGroupsByUserMembershipWSRequest: {
      userUuid?: string | null;
    };
    Group_FindOrgGroupsByUserMembershipWSResponse: {
      groups?: components["schemas"]["OrgGroupType"][] | null;
    };
    Group_RemoveUsersFromOrgGroupWSRequest: {
      groupUuid?: string | null;
      userUuids?: (string | null)[] | null;
    };
    Group_RemoveUsersFromOrgGroupWSResponse: { [key: string]: unknown };
    Group_UpdateOrgGroupWSRequest: {
      description?: string | null;
      groupUuid?: string | null;
      name?: string | null;
    };
    Group_UpdateOrgGroupWSResponse: {
      group?: components["schemas"]["OrgGroupType"];
    };
    Guest: {
      accessEndTimeMs?: number | null;
      accessStartTimeMs?: number | null;
      address1?: string | null;
      address2?: string | null;
      backgroundCheckStatus?: GuestBackgroundCheckStatusEnum | null;
      checkedInEnum?: components["schemas"]["GuestActivityEnum"];
      city?: string | null;
      companyName?: string | null;
      countryCode?: string | null;
      crime?: string | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      faceImage?: string | null;
      firstName?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      hostUserUuid?: string | null;
      lastCheckedInMs?: number | null;
      lastCheckedOutMs?: number | null;
      lastName?: string | null;
      locationUuid?: string | null;
      meetingParticipants?: (string | null)[] | null;
      orgUuid?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      profileImageUrl?: string | null;
      state?: string | null;
      status?: components["schemas"]["GuestStatusEnum"];
    };
    GuestActivityEnum: GuestActivityEnum;
    GuestActivityLog: {
      activity?: components["schemas"]["GuestActivityEnum"];
      agent?: string | null;
      associatedCameras?: (string | null)[] | null;
      email?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      hostUserUuid?: string | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
      timestampMs?: number | null;
    };
    GuestInvite: {
      accessEndTimeMs?: number | null;
      accessStartTimeMs?: number | null;
      address1?: string | null;
      address2?: string | null;
      backgroundCheckStatus?: GuestInviteBackgroundCheckStatusEnum | null;
      checkedInEnum?: components["schemas"]["GuestActivityEnum"];
      city?: string | null;
      companyName?: string | null;
      countryCode?: string | null;
      createdAtMs?: number | null;
      crime?: string | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      faceImage?: string | null;
      firstName?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      hostUserUuid?: string | null;
      lastCheckedInMs?: number | null;
      lastCheckedOutMs?: number | null;
      lastName?: string | null;
      locationUuid?: string | null;
      meetingParticipants?: (string | null)[] | null;
      orgUuid?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      profileImageUrl?: string | null;
      state?: string | null;
      status?: components["schemas"]["GuestStatusEnum"];
      uuid?: string | null;
    };
    GuestInviteSelectiveUpdateByInvocation: {
      accessEndTimeMs?: number | null;
      accessStartTimeMs?: number | null;
      address1?: string | null;
      address2?: string | null;
      backgroundCheckStatus?: GuestInviteSelectiveUpdateByInvocationBackgroundCheckStatusEnum | null;
      checkedInEnum?: components["schemas"]["GuestActivityEnum"];
      city?: string | null;
      companyName?: string | null;
      countryCode?: string | null;
      createdAtMs?: number | null;
      crime?: string | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      faceImage?: string | null;
      firstName?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      hostUserUuid?: string | null;
      lastCheckedInMs?: number | null;
      lastCheckedOutMs?: number | null;
      lastName?: string | null;
      locationUuid?: string | null;
      meetingParticipants?: (string | null)[] | null;
      orgUuid?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      profileImageUrl?: string | null;
      state?: string | null;
      status?: components["schemas"]["GuestStatusEnum"];
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      uuid?: string | null;
    };
    GuestManagementOrgSettings: {
      hexIdentityColor?: string | null;
      logoImageString?: string | null;
      orgUuid?: string | null;
    };
    GuestManagementSettingsSelectiveUpdate: {
      hexIdentityColor?: string | null;
      logoImageString?: string | null;
      orgUuid?: string | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    GuestManagementType:
      | ({
          locationSettingsMap?: {
            [key: string]: components["schemas"]["LocationSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    GuestSelectiveUpdateByInvocation: {
      accessEndTimeMs?: number | null;
      accessStartTimeMs?: number | null;
      address1?: string | null;
      address2?: string | null;
      backgroundCheckStatus?: GuestSelectiveUpdateByInvocationBackgroundCheckStatusEnum | null;
      checkedInEnum?: components["schemas"]["GuestActivityEnum"];
      city?: string | null;
      companyName?: string | null;
      countryCode?: string | null;
      crime?: string | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      faceImage?: string | null;
      firstName?: string | null;
      guestType?: components["schemas"]["GuestTypeEnum"];
      hostUserUuid?: string | null;
      lastCheckedInMs?: number | null;
      lastCheckedOutMs?: number | null;
      lastName?: string | null;
      locationUuid?: string | null;
      meetingParticipants?: (string | null)[] | null;
      orgUuid?: string | null;
      phoneNumber?: string | null;
      postalCode?: string | null;
      profileImageUrl?: string | null;
      state?: string | null;
      status?: components["schemas"]["GuestStatusEnum"];
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    GuestStatusEnum: GuestStatusEnum;
    GuestTypeEnum: GuestTypeEnum;
    Guestmanagement_ActivateKioskWSRequest: {
      locationUuid?: string | null;
    };
    Guestmanagement_ActivateKioskWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      redirectUrl?: string | null;
    };
    Guestmanagement_BaseGuestManagementWSRequest: { [key: string]: unknown };
    Guestmanagement_CreateGuestInviteWSRequest: {
      guestInvite?: components["schemas"]["GuestInvite"];
    };
    Guestmanagement_CreateGuestManagementSettingsWSRequest: {
      settings?: components["schemas"]["GuestManagementOrgSettings"];
    };
    Guestmanagement_CreateGuestManagementSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Guestmanagement_CreateGuestWSRequest: {
      fileName?: string | null;
      guest?: components["schemas"]["Guest"];
    };
    Guestmanagement_ExportGuestActivitiesWSRequest: {
      beginTimeMs?: number | null;
      email?: string | null;
      endTimeMs?: number | null;
      includeGuestTypes?: components["schemas"]["GuestTypeEnum"][] | null;
      includeLocations?: (string | null)[] | null;
    };
    Guestmanagement_ExportGuestsWSRequest: {
      beginTimeMs?: number | null;
      endTimeMs?: number | null;
      includeGuestTypes?: components["schemas"]["GuestTypeEnum"][] | null;
      includeLocations?: (string | null)[] | null;
    };
    Guestmanagement_GetActivityLogsForGuestWSRequest: {
      email?: string | null;
    };
    Guestmanagement_GetActivityLogsForLocationWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      dynamoPageRequest?: components["schemas"]["DynamoPageRequest"];
      locationUuid?: string | null;
    };
    Guestmanagement_GetAllGuestInvitesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guestInvites?: components["schemas"]["GuestInvite"][] | null;
    };
    Guestmanagement_GetAllGuestsWSResponse: {
      allGuests?: components["schemas"]["Guest"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Guestmanagement_GetGuestActivityLogsWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      dynamoPageRequest?: components["schemas"]["DynamoPageRequest"];
    };
    Guestmanagement_GetGuestActivityLogsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guestActivities?: components["schemas"]["GuestActivityLog"][] | null;
    };
    Guestmanagement_GetGuestInviteWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guestInvite?: components["schemas"]["GuestInvite"];
    };
    Guestmanagement_GetGuestInvitesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guestInvites?: components["schemas"]["GuestInvite"][] | null;
    };
    Guestmanagement_GetGuestManagementSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      settings?: components["schemas"]["GuestManagementOrgSettings"];
    };
    Guestmanagement_GetGuestWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guest?: components["schemas"]["Guest"];
    };
    Guestmanagement_GetInvitesForOrgWSRequest: {
      invitedAfterMs?: number | null;
      invitedBeforeMs?: number | null;
      paginateRequest?: components["schemas"]["PaginateRequest"];
    };
    Guestmanagement_GetKioskInfoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      kiosk?: components["schemas"]["Kiosk"];
    };
    Guestmanagement_GetKiosksForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      kiosks?: components["schemas"]["Kiosk"][] | null;
    };
    Guestmanagement_GetNametagTemplateForGuestWSRequest: {
      email?: string | null;
    };
    Guestmanagement_GetNametagTemplateForGuestWSResponse: {
      badgeTemplate?: components["schemas"]["BadgeTemplate"];
      companyLogoUrl?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Guestmanagement_GuestByEmailWSRequest: {
      email?: string | null;
    };
    Guestmanagement_GuestCheckinWSRequest: {
      email?: string | null;
      locationUuid?: string | null;
    };
    Guestmanagement_GuestInviteWSRequest: {
      uuid?: string | null;
    };
    Guestmanagement_GuestInvitesByEmailWSRequest: {
      email?: string | null;
    };
    Guestmanagement_GuestWSRequest: {
      guest?: components["schemas"]["Guest"];
    };
    Guestmanagement_UpdateGuestInviteWSRequest: {
      inviteUpdate?: components["schemas"]["GuestInviteSelectiveUpdateByInvocation"];
    };
    Guestmanagement_UpdateGuestManagementSettingsWSRequest: {
      settingsUpdate?: components["schemas"]["GuestManagementSettingsSelectiveUpdate"];
    };
    Guestmanagement_UpdateGuestManagementSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Guestmanagement_UpdateGuestWSRequest: {
      fileName?: string | null;
      guest?: components["schemas"]["Guest"];
      guestUpdate?: components["schemas"]["GuestSelectiveUpdateByInvocation"];
    };
    HaloSettings: {
      alertAgression?: boolean | null;
      alertCO?: boolean | null;
      alertCO2?: boolean | null;
      alertGunshot?: boolean | null;
      alertHelp?: boolean | null;
      alertMasking?: boolean | null;
      alertTHC?: boolean | null;
      alertTamper?: boolean | null;
      alertTemp?: boolean | null;
      alertVOC?: boolean | null;
      alertVape?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      saveClips?: boolean | null;
      savedClipDurationMs?: number | null;
      sensorName?: string | null;
      sensorToCamerasMap?: { [key: string]: (string | null)[] | null } | null;
      triggerNotification?: boolean | null;
      url?: string | null;
    };
    HardwareInvoiceSubItem: {
      count?: number | null;
      description?: string | null;
      price?: number | null;
    };
    HardwareType: {
      deviceUuid?: string | null;
      enforcedMinFirmwareVersion?: string | null;
      firmwareUpdateTimeMs?: number | null;
      firmwareVersion?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      mac?: string | null;
      manufacturedAtMillis?: number | null;
      orgUuid?: string | null;
      pendingRegistrationDeviceUuid?: string | null;
      pendingRegistrationOrgUuid?: string | null;
      pendingRegistrationToken?: string | null;
      sdSize?: number | null;
      serialNumber?: string | null;
      type?: components["schemas"]["DeviceTypeEnum"];
      uuid?: string | null;
    };
    HardwareVariationEnum: HardwareVariationEnum;
    HeatIndexRangeWarningEnum: HeatIndexRangeWarningEnum;
    Help_CreateTicketWSRequest: {
      body?: string | null;
      collaborators?: (string | null)[] | null;
      consoleAccessGranted?: boolean | null;
      productType?: string | null;
      serialNumbers?: (string | null)[] | null;
      serviceType?: string | null;
      subject?: string | null;
    };
    Help_CreateTicketWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failureReason?: string | null;
      success?: boolean | null;
      ticketId?: number | null;
    };
    Help_GetOpenTicketsV2WSRequest: {
      endTimeMs?: number | null;
      startTimeMs?: number | null;
    };
    Help_GetOpenTicketsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      tickets?: components["schemas"]["Help_TicketInformation"][] | null;
      userTickets?: components["schemas"]["Help_TicketInformation"][] | null;
    };
    Help_GetOpenTicketsWSRequest: {
      /** Page number used for paginated response. If empty, the search will return the first page. */
      pageNumber?: number | null;
    };
    Help_GetOpenTicketsWSResponse: {
      currentPage?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      /** True if there is a next page, false otherwise */
      hasNexPage?: boolean | null;
      /** Serial numbers of the devices that should be reassigned to target organization. List must contain at least one entry. */
      tickets?: components["schemas"]["Help_TicketInformation"][] | null;
      /** Total number of tickets, not limited to the current page */
      totalTickets?: number | null;
    };
    Help_ProcessRMAWSRequest: {
      contactName?: string | null;
      contactPhoneNumber?: string | null;
      deviceName?: string | null;
      problem?: string | null;
      returnShippingAddress?: components["schemas"]["Help_ShippingAddress"];
      serialNumber?: string | null;
    };
    Help_ProcessRMAWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failureReason?: string | null;
      success?: boolean | null;
      ticketId?: number | null;
    };
    Help_SendFeedbackWSRequest: {
      feedback?: string | null;
    };
    Help_SendFeedbackWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failureReason?: string | null;
      success?: boolean | null;
    };
    Help_ShippingAddress: {
      returnAddressCity?: string | null;
      returnAddressCountry?: string | null;
      returnAddressPostalCode?: string | null;
      returnAddressState?: string | null;
      returnAddressStreet?: string | null;
    };
    Help_TicketInformation: {
      createdAt?: string | null;
      id?: number | null;
      status?: string | null;
      subject?: string | null;
    };
    Help_TriageDeviceWSRequest: {
      deviceUuid?: string | null;
      startDateSec?: number | null;
    };
    Help_TriageDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      firmwareUpdates?: components["schemas"]["DiagnosticEventType"][] | null;
      hardwareFailureEvents?:
        | components["schemas"]["DiagnosticEventType"][]
        | null;
      message?: string | null;
      presenceWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
      suggestedArticles?: (string | null)[] | null;
      uptimeWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
    };
    HttpHeaders:
      | ({
          accept?: components["schemas"]["MediaType"][] | null;
          acceptCharset?:
            | ({
                registered?: boolean | null;
              } | null)[]
            | null;
          acceptLanguage?:
            | ({
                range?: string | null;
                weight?: number | null;
              } | null)[]
            | null;
          acceptLanguageAsLocales?:
            | ({
                country?: string | null;
                displayCountry?: string | null;
                displayLanguage?: string | null;
                displayName?: string | null;
                displayScript?: string | null;
                displayVariant?: string | null;
                extensionKeys?: (string | null)[] | null;
                iso3Country?: string | null;
                iso3Language?: string | null;
                language?: string | null;
                script?: string | null;
                unicodeLocaleAttributes?: (string | null)[] | null;
                unicodeLocaleKeys?: (string | null)[] | null;
                variant?: string | null;
              } | null)[]
            | null;
          acceptPatch?: components["schemas"]["MediaType"][] | null;
          accessControlAllowCredentials?: boolean | null;
          accessControlAllowHeaders?: (string | null)[] | null;
          accessControlAllowMethods?:
            | components["schemas"]["HttpMethod"][]
            | null;
          accessControlAllowOrigin?: string | null;
          accessControlExposeHeaders?: (string | null)[] | null;
          accessControlMaxAge?: number | null;
          accessControlRequestHeaders?: (string | null)[] | null;
          accessControlRequestMethod?: components["schemas"]["HttpMethod"];
          all?: { [key: string]: string | null } | null;
          allow?: components["schemas"]["HttpMethod"][] | null;
          basicAuth?: string | null;
          bearerAuth?: string | null;
          cacheControl?: string | null;
          connection?: (string | null)[] | null;
          contentDisposition?: components["schemas"]["ContentDisposition"];
          contentLanguage?: {
            country?: string | null;
            displayCountry?: string | null;
            displayLanguage?: string | null;
            displayName?: string | null;
            displayScript?: string | null;
            displayVariant?: string | null;
            extensionKeys?: (string | null)[] | null;
            iso3Country?: string | null;
            iso3Language?: string | null;
            language?: string | null;
            script?: string | null;
            unicodeLocaleAttributes?: (string | null)[] | null;
            unicodeLocaleKeys?: (string | null)[] | null;
            variant?: string | null;
          } | null;
          contentLength?: number | null;
          contentType?: components["schemas"]["MediaType"];
          date?: number | null;
          empty?: boolean | null;
          etag?: string | null;
          expires?: number | null;
          host?: {
            address?: {
              address?: (string | null)[] | null;
              anyLocalAddress?: boolean | null;
              canonicalHostName?: string | null;
              hostAddress?: string | null;
              hostName?: string | null;
              linkLocalAddress?: boolean | null;
              loopbackAddress?: boolean | null;
              mcglobal?: boolean | null;
              mclinkLocal?: boolean | null;
              mcnodeLocal?: boolean | null;
              mcorgLocal?: boolean | null;
              mcsiteLocal?: boolean | null;
              multicastAddress?: boolean | null;
              siteLocalAddress?: boolean | null;
            } | null;
            hostName?: string | null;
            hostString?: string | null;
            port?: number | null;
            unresolved?: boolean | null;
          } | null;
          ifMatch?: (string | null)[] | null;
          ifModifiedSince?: number | null;
          ifNoneMatch?: (string | null)[] | null;
          ifUnmodifiedSince?: number | null;
          lastModified?: number | null;
          location?: string | null;
          origin?: string | null;
          pragma?: string | null;
          range?: components["schemas"]["HttpRange"][] | null;
          upgrade?: string | null;
          vary?: (string | null)[] | null;
        } & { [key: string]: (string | null)[] | null })
      | null;
    HttpMethod: { [key: string]: unknown };
    HttpRange: { [key: string]: unknown };
    HttpStatusCode: {
      error?: boolean | null;
      is1xxInformational?: boolean | null;
      is2xxSuccessful?: boolean | null;
      is3xxRedirection?: boolean | null;
      is4xxClientError?: boolean | null;
      is5xxServerError?: boolean | null;
    };
    /** The updated Aperio integration configuration. */
    IAperioType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    IAudioUserConfig: {
      audio_aec_via_software?: boolean | null;
      audio_analysis_enabled?: boolean | null;
      audio_analysis_params?: components["schemas"]["AudioParamConfig"];
      audio_external_mic_boost?: number | null;
      audio_external_mic_volume?: number | null;
      audio_external_speaker_volume?: number | null;
      audio_internal_mic_aec_enabled?: boolean | null;
      audio_internal_mic_boost?: number | null;
      audio_internal_mic_volume?: number | null;
      audio_internal_speaker_volume?: number | null;
      audio_min_echo_amplitude?: number | null;
      audio_playback_gain_percent?: number | null;
      audio_record?: boolean | null;
      audio_use_external_mic?: boolean | null;
      audio_use_external_speaker?: boolean | null;
      audio_use_internal_speaker?: boolean | null;
      bandwidth_reports_disabled?: boolean | null;
      cloud_archive_days?: number | null;
      cloud_archive_target?: IAudioUserConfigCloudArchiveTargetEnum | null;
      cloud_archive_upload_schedule?:
        | components["schemas"]["WeeklyMinuteIntervalType"][]
        | null;
      cloud_archive_upload_schedule_inverted?: boolean | null;
      cloud_archive_upload_schedule_uuid?: string | null;
      deviceUuid?: string | null;
      device_mic_enabled?: boolean | null;
      device_near_audio_silenced?: boolean | null;
      device_speaker_enabled?: boolean | null;
      event_clip_upload_target?: IAudioUserConfigEventClipUploadTargetEnum | null;
      firmware_dev_settings?: { [key: string]: string | null } | null;
      frontendEqualizerHighShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerLowShelf?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking1?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking2?: components["schemas"]["FrontendEqualizerSettings"];
      frontendEqualizerPeaking3?: components["schemas"]["FrontendEqualizerSettings"];
      frontendNoiseSuppression?: boolean | null;
      lastModified?: number | null;
      led_mode_blink_period_ms?: number | null;
      led_mode_when_active?: IAudioUserConfigLedModeWhenActiveEnum | null;
      led_mode_when_inactive?: IAudioUserConfigLedModeWhenInactiveEnum | null;
      led_stealth_mode?: boolean | null;
      lightweight_detection_disabled?: boolean | null;
      live_license_invalid?: boolean | null;
      max_event_duration_ms?: number | null;
      media_ttl_minutes?: number | null;
      on_demand_license_invalid?: boolean | null;
      orgUuid?: string | null;
      snapshot_upload_target?: IAudioUserConfigSnapshotUploadTargetEnum | null;
      splice_clip_upload_target?: IAudioUserConfigSpliceClipUploadTargetEnum | null;
      storage_target_free_megabytes?: number | null;
      storage_target_free_space_permyriad?: number | null;
      thumbstrip_upload_target?: IAudioUserConfigThumbstripUploadTargetEnum | null;
      vlan_ip_v4_address?: number | null;
    };
    IAvigilonAltaType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
      doorsValidated?: boolean | null;
      email?: string | null;
      enabled?: boolean | null;
      eventToWebhookIdMap?: { [key: string]: number | null } | null;
      eventToWebhookMap?: {
        [key: string]: components["schemas"]["WebhookMapEntry"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      orgUuid?: string | null;
      password?: string | null;
      refreshToken?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
      webhookId?: number | null;
    };
    IBaseIntegrationType: (
      | components["schemas"]["AperioType"]
      | components["schemas"]["AvigilonAltaType"]
      | components["schemas"]["BrivoType"]
      | components["schemas"]["ButterflyMXType"]
      | components["schemas"]["DeviceIntegrationType"]
      | components["schemas"]["DiceType"]
      | components["schemas"]["EnvoyType"]
      | components["schemas"]["FlicType"]
      | components["schemas"]["GeneaType"]
      | components["schemas"]["GoogleType"]
      | components["schemas"]["GuestManagementType"]
      | components["schemas"]["InformacastType"]
      | components["schemas"]["InnerRangeType"]
      | components["schemas"]["KisiType"]
      | components["schemas"]["LumeoType"]
      | components["schemas"]["MicrosoftTeamsType"]
      | components["schemas"]["NineOneOneCellularType"]
      | components["schemas"]["OmnialertType"]
      | components["schemas"]["OpenAIType"]
      | components["schemas"]["OpentechAllianceType"]
      | components["schemas"]["PimlocType"]
      | components["schemas"]["PlaceOsType"]
      | components["schemas"]["ProDataKeyType"]
      | components["schemas"]["RaptorType"]
      | components["schemas"]["ShellyType"]
      | components["schemas"]["ToastType"]
      | components["schemas"]["WebhooksType"]
      | components["schemas"]["ZapierType"]
    ) & {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    IBrivoType: {
      accessToken?: string | null;
      alertUnauthorizedFaces?: boolean | null;
      apiKey?: string | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      clientId?: string | null;
      clientSecret?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      orgUuid?: string | null;
      password?: string | null;
      refreshToken?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
      username?: string | null;
      version?: number | null;
      webhookId?: number | null;
    };
    IButterflyMXType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      buildingWebhookIdMap?: { [key: string]: string | null } | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      orgUuid?: string | null;
      panelInfoMap?: {
        [key: string]: components["schemas"]["ButterflymxPanelInfoType"];
      } | null;
      refreshToken?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
    };
    IClimateUserConfig: {
      accelerometer_change_tamper_threshold?: number | null;
      accelerometer_disabled?: boolean | null;
      alert_window_minutes?: number | null;
      deviceUuid?: string | null;
      lastModified?: number | null;
      orgUuid?: string | null;
      pressure_switch_tamper_disabled?: boolean | null;
      smoke_ai_threshold?: number | null;
      thc_ai_threshold?: number | null;
      vape_ai_threshold?: number | null;
    };
    IDeviceIntegrationType: {
      deviceSettingsMap?: {
        [key: string]: components["schemas"]["DeviceIntegrationSettings"];
      } | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    IDiceType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    IEnvoyType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      envoyIntegrationInstalled?: boolean | null;
      envoyUserSettingsMap?: {
        [key: string]: components["schemas"]["EnvoyUserSettings"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      locationInfoMap?: {
        [key: string]: components["schemas"]["EnvoyLocationInfoType"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      orgUuid?: string | null;
      refreshToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
    };
    IFlicType: {
      apiKey?: string | null;
      apiSecret?: string | null;
      associatedLocations?: (string | null)[] | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      moduleUploaded?: boolean | null;
      orgUuid?: string | null;
      userUuid?: string | null;
      webhookId?: string | null;
      webhookToken?: string | null;
    };
    IGeneaType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      orgUuid?: string | null;
      refreshToken?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
      webhookSignatureSecret?: string | null;
      webhookUuid?: string | null;
    };
    IGoogleType: {
      allowUserStorage?: boolean | null;
      apiToken?: string | null;
      defaultAlertFolderId?: string | null;
      defaultAlertFolderName?: string | null;
      defaultFolderId?: string | null;
      defaultFolderName?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      refreshToken?: string | null;
      saveAllAlerts?: boolean | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      userSettingsMap?: {
        [key: string]: components["schemas"]["GoogleUserSettings"];
      } | null;
      userUuid?: string | null;
    };
    IGuestManagementType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      locationSettingsMap?: {
        [key: string]: components["schemas"]["LocationSettings"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    IInformacastType: {
      apiToken?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      refreshToken?: string | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
    };
    IInnerRangeType: {
      apiToken?: string | null;
      consoleToSettingsMap?: {
        [key: string]: components["schemas"]["InnerRangeConsoleSettings"];
      } | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["InnerRangeDoorInfoType"];
      } | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      refreshToken?: string | null;
      skyTunnelSN?: string | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
    };
    IKisiType: {
      apiSecretKey?: string | null;
      defaultOptions?: components["schemas"]["BadgeIntegrationDefaultOptions"];
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      placeToSettingsMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationSettings"];
      } | null;
      userUuid?: string | null;
    };
    ILumeoType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    IMicrosoftTeamsType: {
      adminConsent?: boolean | null;
      allowUserNotifications?: boolean | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      microsoftTeamSettingsMap?: {
        [key: string]: components["schemas"]["MicrosoftTeamsChannelSettings"];
      } | null;
      microsoftTeamsUserSettingsMap?: {
        [key: string]: components["schemas"]["MicrosoftTeamsUserSettings"];
      } | null;
      orgUuid?: string | null;
      tenantId?: string | null;
      userUuid?: string | null;
    };
    INineOneOneCellularType: {
      bearerToken?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      saveClips?: boolean | null;
      securityZoneMap?: {
        [key: string]: components["schemas"]["SecurityZoneInfoType"];
      } | null;
      triggerNotification?: boolean | null;
      userUuid?: string | null;
      webhookToken?: string | null;
      zonesValidated?: boolean | null;
    };
    IOmnialertType: {
      associatedCameras?: (string | null)[] | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      saveClips?: boolean | null;
      triggerNotification?: boolean | null;
      userUuid?: string | null;
      webhookToken?: string | null;
    };
    IOpenAIType: {
      apiToken?: string | null;
      /** The base url for any OpenAI Chat Completions compliant API. For example, to use Gemini models, set this to 'https://generativelanguage.googleapis.com/v1beta/openai/'.  If left blank, we will try to use OpenAI models. */
      baseUrl?: string | null;
      /** The model identifier to use as a default model.  This is provider specific and typically found on model card pages. For example, set to 'gemini-2.0-flash' to use the Gemini 2.0 Flash model.  Currently we require a model with vision capabilities for this integration. */
      defaultModel?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      refreshToken?: string | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
    };
    IOpentechAllianceType: {
      apiKey?: string | null;
      apiSecret?: string | null;
      enabled?: boolean | null;
      facilityToSettingsMap?: {
        [
          key: string
        ]: components["schemas"]["OpentechAllianceFacilitySettings"];
      } | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    IPimlocType: {
      baseAPIUrl?: IPimlocBaseAPIUrlEnum | null;
      clientId?: string | null;
      clientSecret?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      rhombusToken?: string | null;
      userUuid?: string | null;
      validCredentials?: boolean | null;
    };
    IPlaceOsType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      apiUrl?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      orgUuid?: string | null;
      refreshToken?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      tokenValid?: boolean | null;
      triggerNotification?: boolean | null;
      userUuid?: string | null;
      webhookSignatureSecret?: string | null;
    };
    IProDataKeyType: {
      alertUnauthorizedFaces?: boolean | null;
      apiToken?: string | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      indexFaces?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      misconfiguredDoors?: (string | null)[] | null;
      orgUuid?: string | null;
      organizationId?: string | null;
      refreshToken?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      systemId?: string | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
      webhookId?: string | null;
      webhookSignatureSecret?: string | null;
    };
    IRaptorType: {
      apiToken?: string | null;
      clientId?: string | null;
      clientSecret?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      refreshToken?: string | null;
      tokenValid?: boolean | null;
      userUuid?: string | null;
    };
    IShellyType: {
      canSendDiagnosticNotifications?: boolean | null;
      diagnosticQuietPeriodSecs?: number | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      shellyDeviceMap?: {
        [key: string]: components["schemas"]["ShellyDevice"];
      } | null;
      thirdPartyDeviceToLocationMap?: { [key: string]: string | null } | null;
      userUuid?: string | null;
    };
    IToastType: {
      currentToastRestaurantGuid?: string | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      restaurantSettingsMap?: {
        [key: string]: components["schemas"]["ToastRestaurantSettings"];
      } | null;
      userUuid?: string | null;
    };
    IWebhooksType: {
      activityWebhooks?: { [key: string]: string | null } | null;
      activityWebhooksV2?: {
        [key: string]: components["schemas"]["WebhookInfo"];
      } | null;
      diagnosticWebhooks?: { [key: string]: string | null } | null;
      diagnosticWebhooksV2?: {
        [key: string]: components["schemas"]["WebhookInfo"];
      } | null;
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    ImmixSettings: {
      deviceList?: (string | null)[] | null;
      enabled?: boolean | null;
      serverUrl?: string | null;
    };
    InformacastScenario: {
      id?: string | null;
      name?: string | null;
      scenarioId?: string | null;
    };
    InformacastType:
      | ({
          apiToken?: string | null;
          refreshToken?: string | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    InnerRangeConsoleSettings: {
      apiKey?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["InnerRangeDoorInfoType"];
      } | null;
      skyTunnelSN?: string | null;
      tokenValid?: boolean | null;
    } | null;
    InnerRangeConsoleType: {
      doorList?: components["schemas"]["InnerRangeDoorType"][] | null;
      skyTunnelSN?: string | null;
    };
    InnerRangeDoorInfoType: {
      assignedCameraList?: (string | null)[] | null;
      clipDuration?: number | null;
      doorName?: string | null;
      leadingSeconds?: number | null;
      locationUuid?: string | null;
      readerIds?: (string | null)[] | null;
      remoteUnlock?: boolean | null;
    } | null;
    InnerRangeDoorType: {
      id?: string | null;
      name?: string | null;
      readerIds?: (string | null)[] | null;
    };
    InnerRangeType:
      | ({
          apiToken?: string | null;
          consoleToSettingsMap?: {
            [key: string]: components["schemas"]["InnerRangeConsoleSettings"];
          } | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [key: string]: components["schemas"]["InnerRangeDoorInfoType"];
          } | null;
          refreshToken?: string | null;
          skyTunnelSN?: string | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    IntegratedDoorPositionIndicatorType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      dpiType?: components["schemas"]["DoorPositionIndicatorEnumType"];
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["DoorPositionIndicatorPortType"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    IntegratedDoorRelayType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["DoorRelayPortType"];
      portImmutable?: boolean | null;
      rateLimitingEnabled?: boolean | null;
      relayType?: components["schemas"]["DoorRelayEnumType"];
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    IntegratedGenericButtonType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      buttonType?: components["schemas"]["ButtonEnumType"];
      createdAtMillis?: number | null;
      mode?: components["schemas"]["ButtonModeEnum"];
      name?: string | null;
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["ButtonPortType"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    IntegratedGenericInputType: {
      auxType?: components["schemas"]["AuxiliaryEnumType"];
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["AuxiliaryInputPortType"];
      portImmutable?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    IntegratedGenericRelayType: {
      auxType?: components["schemas"]["AuxiliaryEnumType"];
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      originator?: components["schemas"]["BaseEventOriginator"];
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["AuxiliaryRelayPortType"];
      portImmutable?: boolean | null;
      /** Deprecated, do not use. */
      relayDurationSec?: number | null;
      stateChangedAtMillis?: number | null;
      steadyState?: components["schemas"]["GenericRelayStateEnumType"];
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    IntegratedRequestToExitType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      intentOnly?: boolean | null;
      intentOnlyEvents?: boolean | null;
      name?: string | null;
      normalState?: components["schemas"]["NormalStateEnumType"];
      orgUuid?: string | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["RequestToExitPortType"];
      portImmutable?: boolean | null;
      rexType?: components["schemas"]["RequestToExitEnumType"];
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    IntegrationActionStatusEnum: IntegrationActionStatusEnum;
    IntegrationAuditEvent: {
      enabledTimestampMs?: number | null;
      integrationAuditEvent?: components["schemas"]["IntegrationAuditEventEnum"];
      user?: string | null;
      userUuid?: string | null;
    };
    IntegrationAuditEventEnum: IntegrationAuditEventEnum;
    IntegrationCommandActionType: {
      commandPayload?: string | null;
      delaySecs?: number | null;
      integration?: components["schemas"]["IntegrationEnum"];
    };
    IntegrationDiagnosticEventType: {
      activity?: IntegrationDiagnosticEventActivityEnum | null;
      integration?: components["schemas"]["IntegrationEnum"];
      orgUuid?: string | null;
      thirdPartyDeviceId?: string | null;
      thirdPartyDeviceName?: string | null;
      timestamp?: string | null;
      uuid?: string | null;
    };
    IntegrationEnum: IntegrationEnum;
    IntegrationNotificationActionType: {
      integration?: components["schemas"]["IntegrationEnum"];
      notificationEntity?: string | null;
      notificationTarget?: string | null;
    };
    Integration_BaseIntegrationWSRequest: { [key: string]: unknown };
    Integration_CreateEnvoyInviteWSRequest: {
      invitation?: components["schemas"]["EnvoyInvite"];
    };
    Integration_GetAccessControlIntegrationsForAlmWSResponse: {
      badDoors?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      integrations?: components["schemas"]["IntegrationEnum"][] | null;
    };
    Integration_GetAllGuestsWSResponse: {
      allGuests?: components["schemas"]["Guest"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetAllOrgIntegrationsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgIntegrationsV2?: {
        [key: string]: components["schemas"]["IBaseIntegrationType"];
      } | null;
    };
    Integration_GetAmtReadersWSRequest: {
      email?: string | null;
      password?: string | null;
    };
    Integration_GetAperioIntegrationWSRequest: { [key: string]: unknown };
    Integration_GetAperioIntegrationWSResponse: {
      aperioSettings?: components["schemas"]["IAperioType"];
      doorControllers?:
        | components["schemas"]["Integration_aperio_AperioRhombusDoorControllerView"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetApiTokenApplicationsWSRequest: { [key: string]: unknown };
    Integration_GetApiTokenApplicationsWSResponse: {
      applications?: components["schemas"]["ApiTokenApplicationType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetApiTokensWSRequest: {
      optionalFilter?: components["schemas"]["ApiClientTypeEnum"][] | null;
    };
    Integration_GetApiTokensWSResponse: {
      apiTokens?: components["schemas"]["ApiTokenType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetBadgeIntegrationDoorsWSResponse: {
      authError?: boolean | null;
      doors?: components["schemas"]["DoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetBadgeIntegrationGenericDoorsWSResponse: {
      authError?: boolean | null;
      doors?: components["schemas"]["GenericDoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetBadgeIntegrationPlacesWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      places?: components["schemas"]["PlaceType"][] | null;
    };
    Integration_GetBrivoDoorsWSRequest: {
      password?: string | null;
      username?: string | null;
    };
    Integration_GetBrivoDoorsWSResponse: {
      authError?: boolean | null;
      doors?: components["schemas"]["DoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetButterflymxPanelsWSRequest: {
      email?: string | null;
      password?: string | null;
    };
    Integration_GetButterflymxPanelsWSResponse: {
      authError?: boolean | null;
      buildings?: components["schemas"]["ButterflymxBuilding"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetCalendlyEventDetailsWSRequest: {
      eventUuid?: string | null;
    };
    Integration_GetCalendlyEventDetailsWSResponse: {
      email?: string | null;
      endTimeMs?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      name?: string | null;
      startTimeMs?: number | null;
    };
    Integration_GetEnvoyDeliveriesWSRequest: {
      endTimestampMs?: number | null;
      locationIds?: (string | null)[] | null;
      startTimestampMs?: number | null;
    };
    Integration_GetEnvoyDeliveriesWSResponse: {
      collectedDeliveries?: components["schemas"]["EnvoyDelivery"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      pendingDeliveries?: components["schemas"]["EnvoyDelivery"][] | null;
    };
    Integration_GetEnvoyEmployeesWSRequest: {
      locationIds?: (string | null)[] | null;
    };
    Integration_GetEnvoyEmployeesWSResponse: {
      employees?: components["schemas"]["EnvoyPersonInfo"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetEnvoyLocationsWSRequest: { [key: string]: unknown };
    Integration_GetEnvoyLocationsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      locationList?: components["schemas"]["EnvoyLocation"][] | null;
    };
    Integration_GetEnvoyVisitorsWSRequest: {
      endTimestampMs?: number | null;
      includeSignedOutVisitors?: boolean | null;
      locationIds?: (string | null)[] | null;
      startTimestampMs?: number | null;
    };
    Integration_GetEnvoyVisitorsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      invites?: components["schemas"]["EnvoyExpectedGuest"][] | null;
      visitors?: components["schemas"]["EnvoyGuest"][] | null;
    };
    Integration_GetFlicDevicesWSRequest: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetFlicDevicesWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      flicDevices?: components["schemas"]["FlicDevice"][] | null;
      flicModule?: components["schemas"]["FlicDevice"];
    };
    Integration_GetGeneaDoorsWSRequest: {
      apiToken?: string | null;
    };
    Integration_GetGeneaDoorsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      panelList?: components["schemas"]["PanelType"][] | null;
    };
    Integration_GetGuestWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      guest?: components["schemas"]["Guest"];
    };
    Integration_GetInformacastScenariosWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      scenarios?: components["schemas"]["InformacastScenario"][] | null;
    };
    Integration_GetInnerRangeConsolesWSRequest: { [key: string]: unknown };
    Integration_GetInnerRangeConsolesWSResponse: {
      consoles?: components["schemas"]["InnerRangeConsoleType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetInnerRangeDoorsWSRequest: { [key: string]: unknown };
    Integration_GetInnerRangeDoorsWSResponse: {
      doors?: components["schemas"]["InnerRangeDoorType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetIntegrationDiagnosticEventsWSRequest: {
      timestampMsAfter?: number | null;
      timestampMsBefore?: number | null;
    };
    Integration_GetIntegrationDiagnosticEventsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      integrationDiagnosticEvents?:
        | components["schemas"]["IntegrationDiagnosticEventType"][]
        | null;
    };
    Integration_GetKisiDoorsWSRequest: {
      apiSecretKey?: string | null;
    };
    Integration_GetKisiDoorsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      placeToDoorMap?: {
        [key: string]: components["schemas"]["DoorType"][] | null;
      } | null;
    };
    Integration_GetKisiIntegrationWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      failedGuids?: (string | null)[] | null;
      kisiSettings?: components["schemas"]["KisiSettings"];
      misconfiguredDoors?: (string | null)[] | null;
    };
    Integration_GetKisiPlacesWSRequest: {
      apiSecretKey?: string | null;
    };
    Integration_GetMicrosoftUsersJoinedTeamsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      teamsMap?: { [key: string]: string | null } | null;
    };
    Integration_GetNineOneOneCSZonesWSRequest: { [key: string]: unknown };
    Integration_GetNineOneOneCSZonesWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      zone?: components["schemas"]["SecurityZoneInfoType"];
      zoneMap?: {
        [key: string]: components["schemas"]["SecurityZoneInfoType"];
      } | null;
    };
    Integration_GetOpenAIModelsWSRequest: {
      openAISettings?: components["schemas"]["IOpenAIType"];
    };
    Integration_GetOpenAIModelsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      models?: components["schemas"]["OpenAIModel"][] | null;
    };
    Integration_GetOpenpathDoorsWSRequest: {
      email?: string | null;
      password?: string | null;
    };
    Integration_GetOpenpathLockdownsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      lockdownPlans?: components["schemas"]["LockdownType"][] | null;
    };
    Integration_GetOpentechAllianceFacilitiesWSRequest: {
      [key: string]: unknown;
    };
    Integration_GetOpentechAllianceFacilitiesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      facilities?:
        | components["schemas"]["OpentechAllianceFacilityType"][]
        | null;
    };
    Integration_GetOrgIntegrationsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgIntegrationV2?: components["schemas"]["IBaseIntegrationType"];
    };
    Integration_GetOrgIntegrationsWSRequest: { [key: string]: unknown };
    Integration_GetOrgIntegrationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgIntegrations?: components["schemas"]["OrgIntegrationsType"];
    };
    Integration_GetPartnerApiTokensWSRequest: { [key: string]: unknown };
    Integration_GetPdkDoorsWSRequest: {
      ouId?: string | null;
    };
    Integration_GetPdkDoorsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      panelList?: components["schemas"]["PanelType"][] | null;
    };
    Integration_GetPdkSystemIdWSRequest: {
      configurationToken?: string | null;
    };
    Integration_GetPdkSystemIdWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      systemId?: string | null;
    };
    Integration_GetPlaceOsDoorsWSRequest: {
      apiUrl?: string | null;
    };
    Integration_GetRaptorBuildingsWSResponse: {
      buildings?: components["schemas"]["RaptorBuilding"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_GetRaptorTemplatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      templates?: components["schemas"]["RaptorTemplate"][] | null;
    };
    Integration_GetToastEventsTableAllLocationsWSRequest: {
      businessDate?: string | null;
    };
    Integration_GetToastEventsTableAllLocationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      eventTable?:
        | components["schemas"]["Integration_GetToastEventsTableWSResponse_EventTableRow"][]
        | null;
      failedGuids?: (string | null)[] | null;
    };
    Integration_GetToastEventsTableWSRequest: {
      businessDate?: string | null;
      restaurantGuid?: string | null;
    };
    Integration_GetToastEventsTableWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      eventTable?:
        | components["schemas"]["Integration_GetToastEventsTableWSResponse_EventTableRow"][]
        | null;
    };
    Integration_GetToastEventsTableWSResponse_EventTableRow: {
      assignedCameraList?: (string | null)[] | null;
      employeeName?: string | null;
      orderGuid?: string | null;
      paymentType?: string | null;
      restaurantName?: string | null;
      revenueCenterName?: string | null;
      serviceAreaName?: string | null;
      timestamp?: string | null;
      tipAmount?: string | null;
      totalAmount?: string | null;
      totalDiscountAmount?: string | null;
      voided?: string | null;
    };
    Integration_GetToastServiceAreasWSRequest: {
      restaurantGuid?: string | null;
    };
    Integration_GetToastServiceAreasWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      serviceAreas?: components["schemas"]["GenericPosType"][] | null;
    };
    Integration_GuestWSRequest: {
      email?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_InitiateBrivoOAuthWSRequest: {
      /** Brivo Mashery API key obtained from Brivo Developer Portal */
      apiKey?: string | null;
      param?: string | null;
      requestUrl?: string | null;
      rhombusOrgUserUuid?: string | null;
    };
    Integration_InitiateCallbackAuthRequest: {
      rhombusOrgUserUuid?: string | null;
    };
    Integration_InitiateCallbackAuthResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      integratorUrl?: string | null;
    };
    Integration_InitiateOAuthWSRequest: {
      param?: string | null;
      requestUrl?: string | null;
      rhombusOrgUserUuid?: string | null;
    };
    Integration_InitiateOAuthWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      redirectUrl?: string | null;
    };
    Integration_RefreshGoogleAccessTokenWSRequest: {
      refreshUserToken?: boolean | null;
    };
    Integration_RefreshGoogleAccessTokenWSResponse: {
      accessToken?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_RevokeApiTokenWSRequest: {
      tokenUuid?: string | null;
    };
    Integration_RevokeApiTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_RevokeGoogleDriveAccessWSRequest: {
      /** If set to true, revokes Rhombus Systems access to a user's Google Drive account, otherwise revokes Rhombus Systems access to the org's shared Google Drive account */
      revokeUserAccount?: boolean | null;
    };
    Integration_SubmitApiTokenApplicationWSRequest: {
      authType?: components["schemas"]["ApiTokenAuthTypeEnum"];
      csr?: string | null;
      displayName?: string | null;
      /** The role id that defines the permissions granted to the token */
      permissionGroupUuid: string | null;
    };
    Integration_SubmitApiTokenApplicationWSResponse: {
      apiKey?: string | null;
      cert?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      validCSR?: boolean | null;
    };
    Integration_SubscribeZapierWebhookWSRequest: {
      backoffSec?: number | null;
      doorState?: SubscribeZapierWebhookWSRequestDoorStateEnum | null;
      hookUrl?: string | null;
      humidityLowerThreshold?: number | null;
      humidityUpperThreshold?: number | null;
      tempLowerThreshold?: number | null;
      tempUpperThreshold?: number | null;
      uuids?: (string | null)[] | null;
      zapEnum?: components["schemas"]["ZapierEnum"];
    };
    Integration_SubscribeZapierWebhookWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      webhookId?: string | null;
    };
    Integration_TogglePowerWSRequest: {
      deviceId?: string | null;
      targetState?: number | null;
    };
    Integration_TogglePowerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      newState?: number | null;
    };
    Integration_UnlockDoorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_UnlockGeneaDoorWSRequest: {
      cameraUuid?: string | null;
      doorId?: string | null;
    };
    Integration_UnlockIntegrationGenericDoorWSRequest: {
      cameraUuid?: string | null;
      doorId?: string | null;
    };
    Integration_UnlockKisiDoorWSRequest: {
      cameraUuid?: string | null;
      doorId?: number | null;
      placeId?: number | null;
    };
    Integration_UnlockOpenpathDoorWSRequest: {
      cameraUuid?: string | null;
      doorId?: number | null;
    };
    Integration_UnsubscribeZapierWebhookWSRequest: {
      webhookId?: string | null;
    };
    Integration_UpdateAmtIntegrationWSRequest: {
      amtSettings?: components["schemas"]["AmtSettings"];
    };
    Integration_UpdateAperioIntegrationWSRequest: {
      aperioSettings: components["schemas"]["IAperioType"];
    };
    Integration_UpdateApiTokenWSRequest: {
      newDisplayName?: string | null;
      newPermissionGroupUuid?: string | null;
      tokenUuid?: string | null;
    };
    Integration_UpdateApiTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_UpdateAvigilonAltaV2WSRequest: {
      avigilonAltaSettings?: components["schemas"]["IAvigilonAltaType"];
    };
    Integration_UpdateAwsIntegrationWSRequest: {
      awsSettings?: components["schemas"]["AwsSettings"];
    };
    Integration_UpdateBoxIntegrationWSRequest: {
      boxSettings?: components["schemas"]["BoxSettings"];
    };
    Integration_UpdateBrivoIntegrationV2WSRequest: {
      brivoSettings?: components["schemas"]["IBrivoType"];
    };
    Integration_UpdateBrivoIntegrationWSRequest: {
      brivoSettings?: components["schemas"]["BrivoSettings"];
    };
    Integration_UpdateButterflymxIntegrationV2WSRequest: {
      butterflymxSettings?: components["schemas"]["IButterflyMXType"];
    };
    Integration_UpdateButterflymxIntegrationWSRequest: {
      settings?: components["schemas"]["ButterflyMXSettings"];
    };
    Integration_UpdateDeviceIntegrationWSRequest: {
      createNewDevice?: boolean | null;
      deviceIntegrationSettings?: components["schemas"]["IDeviceIntegrationType"];
      latitude?: number | null;
      longitude?: number | null;
      name?: string | null;
      updateDevice?: boolean | null;
      updateDeviceUuid?: string | null;
    };
    Integration_UpdateDiceIntegrationWSRequest: {
      diceSettings?: components["schemas"]["IDiceType"];
    };
    Integration_UpdateDropboxIntegrationWSRequest: {
      dropboxSettings?: components["schemas"]["DropboxSettingsV2"];
    };
    Integration_UpdateEmailIntegrationWSRequest: {
      emailSettings?: components["schemas"]["EmailSettings"];
    };
    Integration_UpdateEnvoyIntegrationV2WSRequest: {
      envoySettings?: components["schemas"]["IEnvoyType"];
    };
    Integration_UpdateEnvoyIntegrationWSRequest: {
      envoySettings?: components["schemas"]["EnvoySettings"];
    };
    Integration_UpdateFlicIntegrationWSRequest: {
      flicSettings?: components["schemas"]["IFlicType"];
    };
    Integration_UpdateGeneaIntegrationV2WSRequest: {
      geneaSettings?: components["schemas"]["IGeneaType"];
    };
    Integration_UpdateGeneaIntegrationWSRequest: {
      geneaSettings?: components["schemas"]["GeneaSettings"];
    };
    Integration_UpdateGoogleIntegrationV2WSRequest: {
      googleSettings?: components["schemas"]["IGoogleType"];
    };
    Integration_UpdateGoogleIntegrationWSRequest: {
      googleSettings?: components["schemas"]["GoogleSettings"];
    };
    Integration_UpdateGuestByTokenWSRequest: {
      fileName?: string | null;
      guest?: components["schemas"]["Guest"];
      token?: string | null;
    };
    Integration_UpdateGuestManagementIntegrationWSRequest: {
      guestManagementSettings?: components["schemas"]["IGuestManagementType"];
    };
    Integration_UpdateGuestWSRequest: {
      fileName?: string | null;
      guest?: components["schemas"]["Guest"];
      sendGuestEmail?: boolean | null;
    };
    Integration_UpdateHaloIntegrationWSRequest: {
      haloSettings?: components["schemas"]["HaloSettings"];
    };
    Integration_UpdateInformacastIntegrationRequest: {
      informacastSettings?: components["schemas"]["IInformacastType"];
    };
    Integration_UpdateInnerRangeIntegrationWSRequest: {
      innerRangeSettings?: components["schemas"]["IInnerRangeType"];
    };
    Integration_UpdateIntuifaceIntegrationWSRequest: {
      settings?: components["schemas"]["IntuifaceSettings"];
    };
    Integration_UpdateKisiIntegrationV2WSRequest: {
      kisiSettings?: components["schemas"]["IKisiType"];
    };
    Integration_UpdateKisiIntegrationWSRequest: {
      kisiSettings?: components["schemas"]["KisiSettings"];
    };
    Integration_UpdateLumeoIntegrationWSRequest: {
      lumeoSettings?: components["schemas"]["ILumeoType"];
    };
    Integration_UpdateMattermostIntegrationWSRequest: {
      mattermostSettings?: components["schemas"]["MattermostSettings"];
    };
    Integration_UpdateMicrosoftTeamsBotForTeamWSRequest: {
      teamId?: string | null;
    };
    Integration_UpdateMicrosoftTeamsIntegrationV2WSRequest: {
      microsoftTeamsSettings?: components["schemas"]["IMicrosoftTeamsType"];
      teamsToUpdate?: (string | null)[] | null;
    };
    Integration_UpdateMicrosoftTeamsIntegrationWSRequest: {
      microsoftTeamsSettings?: components["schemas"]["MicrosoftTeamsSettings"];
    };
    Integration_UpdateNineOneOneCellularIntegrationWSRequest: {
      nineOneOneCellularSettings?: components["schemas"]["INineOneOneCellularType"];
    };
    Integration_UpdateNoonlightSettingsWSRequest: {
      noonlightSettings?: components["schemas"]["NoonlightSettings"];
    };
    Integration_UpdateOffice365IntegrationWSRequest: {
      office365Settings?: components["schemas"]["Office365Settings"];
    };
    Integration_UpdateOmnialertIntegrationWSRequest: {
      omnialertSettings?: components["schemas"]["IOmnialertType"];
    };
    Integration_UpdateOmnialertIntegrationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      webhookToken?: string | null;
    };
    Integration_UpdateOpenAIIntegrationRequest: {
      openAISettings?: components["schemas"]["IOpenAIType"];
    };
    Integration_UpdateOpenpathIntegrationWSRequest: {
      openpathSettings?: components["schemas"]["OpenpathSettings"];
    };
    Integration_UpdateOpentechAllianceIntegrationV2WSRequest: {
      opentechAllianceSettings?: components["schemas"]["IOpentechAllianceType"];
    };
    Integration_UpdateOpentechAllianceIntegrationWSRequest: {
      opentechAllianceSettings?: components["schemas"]["OpentechAllianceSettings"];
    };
    Integration_UpdateOrgIntegrationsWSResponse: {
      authError?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      failedGuids?: (string | null)[] | null;
      misconfiguredDoors?: (string | null)[] | null;
    };
    Integration_UpdatePagerDutyIntegrationWSRequest: {
      pagerDutySettings?: components["schemas"]["PagerDutySettings"];
    };
    Integration_UpdatePdkIntegrationV2WSRequest: {
      pdkSettings?: components["schemas"]["IProDataKeyType"];
    };
    Integration_UpdatePdkIntegrationWSRequest: {
      pdkSettings?: components["schemas"]["ProDataKeySettings"];
    };
    Integration_UpdatePimlocIntegrationRequest: {
      pimlocSettings?: components["schemas"]["IPimlocType"];
    };
    Integration_UpdatePlaceOsSettingsV2WSRequest: {
      placeOsSettings?: components["schemas"]["IPlaceOsType"];
    };
    Integration_UpdatePlaceOsSettingsWSRequest: {
      placeOsSettings?: components["schemas"]["PlaceOsSettings"];
    };
    Integration_UpdateRaptorIntegrationRequest: {
      raptorSettings?: components["schemas"]["IRaptorType"];
    };
    Integration_UpdateServiceNowIntegrationWSRequest: {
      serviceNowSettings?: components["schemas"]["ServiceNowSettings"];
    };
    Integration_UpdateShellyIntegrationWSRequest: {
      shellySettings?: components["schemas"]["IShellyType"];
    };
    Integration_UpdateSlackIntegrationV2WSRequest: {
      adminRequest?: boolean | null;
      requestUrl?: string | null;
      revokeUserAccessToken?: boolean | null;
      rhombusOrgUserUuid?: string | null;
      slackSettingsV2?: components["schemas"]["SlackSettingsV2"];
      userAssociate?: boolean | null;
      userRequest?: boolean | null;
    };
    Integration_UpdateSlackIntegrationWSRequest: {
      slackSettings?: components["schemas"]["SlackSettings"];
    };
    Integration_UpdateToastIntegrationV2WSRequest: {
      restaurantGuids?: (string | null)[] | null;
      toastSettings?: components["schemas"]["IToastType"];
    };
    Integration_UpdateToastIntegrationWSRequest: {
      toastSettings?: components["schemas"]["ToastSettings"];
    };
    Integration_UpdateWebhookIntegrationV2WSRequest: {
      disabled?: boolean | null;
      isDiagnostic?: boolean | null;
      updatedWebhookSettings?: components["schemas"]["IWebhooksType"];
      webhookUrl?: string | null;
    };
    Integration_UpdateWebhookIntegrationV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      webhookSecret?: string | null;
    };
    Integration_UpdateWebhookIntegrationWSRequest: {
      webhookSettings?: components["schemas"]["WebhookSettings"];
    };
    Integration_ValidateKisiApiKeyWSRequest: {
      apiKey?: string | null;
    };
    Integration_aperio_AperioDeviceView: {
      aperioId?: (string | null)[] | null;
      gatewayId?: (string | null)[] | null;
      lastSeenMs?: number | null;
      rawType?: string | null;
    };
    Integration_aperio_AperioDoorView: {
      accessControlledDoorUuid?: string | null;
      aperioDoorDeviceId?: string | null;
      aperioGatewayId?: string | null;
      aperioId?: string | null;
      connected?: boolean | null;
      doorExtensionComponentId?: string | null;
      dtcs?: components["schemas"]["Integration_aperio_DtcInfoView"][] | null;
      lastSeenMs?: number | null;
      name?: string | null;
      rawActivatorState?: number | null;
      rawDoorMode?: number | null;
      rawHandleState?: number | null;
      rawKeyCylinderState?: number | null;
      rawTamperState?: number | null;
      removed?: boolean | null;
      stateUpdateEventTimestampMs?: number | null;
      status?: AperioDoorViewStatusEnum | null;
    };
    Integration_aperio_AperioGatewayView: {
      aperioGatewayId?: string | null;
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      componentUuid?: string | null;
      connected?: boolean | null;
      devices?:
        | components["schemas"]["Integration_aperio_AperioDeviceView"][]
        | null;
      doors?:
        | components["schemas"]["Integration_aperio_AperioDoorView"][]
        | null;
      dtcs?: components["schemas"]["Integration_aperio_DtcInfoView"][] | null;
      expectedOemCode?: string | null;
      firmwareVersion?: string | null;
      hardwareModel?: string | null;
      hwVersion?: (string | null)[] | null;
      ipAddress?: string | null;
      lastSeenMs?: number | null;
      protocolVersion?: string | null;
      rawTamperState?: number | null;
      reportedOemCode?: string | null;
      status?: AperioGatewayViewStatusEnum | null;
    };
    Integration_aperio_AperioRhombusDoorControllerView: {
      aperioGateways?:
        | components["schemas"]["Integration_aperio_AperioGatewayView"][]
        | null;
      deviceUuid?: string | null;
      hwId?: string | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      name?: string | null;
      serialNumber?: string | null;
    };
    Integration_aperio_ClearAperioDtcWSRequest: {
      /** The Aperio device id (hex string) of the device to which this command is issued. */
      aperioDeviceId: string | null;
      /** The Aperio device id (hex string) of the gateway hosting the device. */
      aperioGatewayId: string | null;
      /** Uuid of the controller that the Aperio Hub is connected to. */
      controllerUuid: string | null;
    };
    Integration_aperio_ClearAperioDtcWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Integration_aperio_DownloadCertificateWSRequest: {
      /** RUUID of the Rhombus device (e.g. door controller) connected to an Aperio gateway. */
      ownerDeviceUuid: string | null;
    };
    Integration_aperio_DtcInfoView: {
      code?: (string | null)[] | null;
      error?: boolean | null;
      failing?: boolean | null;
      hasFailed?: boolean | null;
      name?: string | null;
      testCompleted?: boolean | null;
      time?: number | null;
    };
    Integration_aperio_RebootAperioGatewayWSRequest: {
      /** The Aperio device id (hex string) of the gateway. */
      aperioGatewayId: string | null;
      /** Uuid of the controller that the Aperio Hub is connected to. */
      controllerUuid: string | null;
    };
    Integration_aperio_RebootAperioGatewayWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Internal_AddPartnerAsSuperAdminWSRequest: {
      loginAccessAllowed?: boolean | null;
      orgUuid?: string | null;
      partnerEmail?: string | null;
      partnerName?: string | null;
      partnerUuid?: string | null;
    };
    Internal_AddPartnerAsSuperAdminWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      superAdminGroupUuid?: string | null;
    };
    Internal_CreateOrgWSRequest: {
      accountOwnerEmail?: string | null;
      accountOwnerName?: string | null;
      companyName?: string | null;
      developmentPartnerOrg?: boolean | null;
      licenseEntitlementEnabled?: boolean | null;
      salesforceId?: string | null;
      sendWelcomeEmail?: boolean | null;
    };
    Internal_CreateOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgUuid?: string | null;
    };
    Internal_CreatePartnerOrgWSRequest: {
      accountOwnerEmail?: string | null;
      accountOwnerName?: string | null;
      companyName?: string | null;
      salesforceId?: string | null;
      sendWelcomeEmail?: boolean | null;
    };
    Internal_CreatePartnerOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgUuid?: string | null;
    };
    Internal_CreateReturnedInventoryAuditReservationWSRequest: {
      clientOrgUuid?: string | null;
      miscNotes?: string | null;
      partnerOrgUuid?: string | null;
      returnType?: CreateReturnedInventoryAuditReservationWSRequestReturnTypeEnum | null;
      salesforceOppId?: string | null;
      trackingNumber?: string | null;
    };
    Internal_CreateReturnedInventoryAuditReservationWSResponse: {
      auditReservationUuid?: string | null;
      auditReservationUuids?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Internal_CreateSupportAuthorityWSRequest: {
      supportAuthority?: components["schemas"]["SupportAuthorityType"];
    };
    Internal_CreateSupportAuthorityWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      supportAuthorityUuid?: string | null;
    };
    Internal_DeveloperNewsletterEnrollWSRequest: {
      developerNewsletter?: boolean | null;
      email?: string | null;
      firstName?: string | null;
      isDeveloper?: boolean | null;
      lastName?: string | null;
      orgName?: string | null;
    };
    Internal_DeveloperNewsletterEnrollWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Internal_GetSuperAdminGroupUUIDWSRequest: {
      orgUuid?: string | null;
    };
    Internal_GetSuperAdminGroupUUIDWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      superAdminGroupUUID?: string | null;
    };
    Internal_GetWarrantyApprovedRMAsWSRequest: { [key: string]: unknown };
    Internal_GetWarrantyApprovedRMAsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      zendeskTickets?: (number | null)[] | null;
    };
    Internal_InitiateShipmentWSRequest: {
      rhombusShipmentInfo?: components["schemas"]["RhombusShipmentInfoType"];
      salesforceOppId?: string | null;
      shipmentCategory?: InitiateShipmentWSRequestShipmentCategoryEnum | null;
      shipmentInfo?: components["schemas"]["OutgoingShipmentInfoType"];
    };
    Internal_ListOrgsWSRequest: { [key: string]: unknown };
    Internal_ListOrgsWSResponse: {
      orgs?: components["schemas"]["OrgV2Type"][] | null;
    };
    Internal_ParentLifetimeSpendWSRequest: {
      endAccountIdx?: number | null;
      startAccountIdx?: number | null;
    };
    Internal_ParentLifetimeSpendWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Internal_ProDevicesOnlyWSRequest: {
      accountDataMap?: {
        [
          key: string
        ]: components["schemas"]["Internal_ProDevicesOnlyWSRequest_AccountData"];
      } | null;
    };
    Internal_ProDevicesOnlyWSRequest_AccountData: {
      opportunityIds?: (string | null)[] | null;
      orgUuid?: string | null;
    };
    Internal_ProDevicesOnlyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failedAccounts?: { [key: string]: string | null } | null;
      successfulAccounts?: (string | null)[] | null;
    };
    Internal_RequestHardwareForDevelopmentWSRequest: {
      address1?: string | null;
      city?: string | null;
      companyName?: string | null;
      country?: string | null;
      email?: string | null;
      firstName?: string | null;
      jobTitle?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      requestReason?: string | null;
      state?: string | null;
      zip?: string | null;
    };
    Internal_RequestHardwareForDevelopmentWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Internal_SendShipmentShippedEmailWSRequest: {
      salesforceOppId?: string | null;
    };
    Internal_SetOpportunityForPurchaseOrderWSRequest: {
      cancellationReason?: string | null;
      isAccepted?: boolean | null;
      purchaseOrderNumber?: string | null;
      purchaseOrderUuid?: string | null;
      salesforceOppId?: string | null;
    };
    Internal_SetOpportunityForPurchaseOrderWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Internal_ShipmentEmailWSResponse: {
      customerShipmentEmailState?: ShipmentEmailWSResponseCustomerShipmentEmailStateEnum | null;
      error?: boolean | null;
      errorMsg?: string | null;
      legacyMsg?: string | null;
      trackingIdentifier?: string | null;
    };
    IntuifaceSettings: {
      deviceToTriggerMap?: {
        [key: string]: components["schemas"]["TriggerContent"];
      } | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
    };
    InvalidPhysicalPortConfigType: {
      boardNum?: number | null;
      componentUuids?: (string | null)[] | null;
      portNum?: number | null;
      reason?: components["schemas"]["InvalidPhysicalPortReasonEnumType"];
    };
    InvalidPhysicalPortReasonEnumType: InvalidPhysicalPortReasonEnumType;
    InvoiceType: {
      addOnLicenseInvoices?:
        | components["schemas"]["AddOnLicenseInvoiceType"][]
        | null;
      additionalEmails?: (string | null)[] | null;
      attachCsv?: boolean | null;
      cameraPurchaseCount?: number | null;
      cameraPurchasePrice?: number | null;
      clientOrgUuid?: string | null;
      companyName?: string | null;
      customerAddress?: string | null;
      customerEmail?: string | null;
      customerName?: string | null;
      date?: number | null;
      domePurchaseCount?: number | null;
      domePurchasePrice?: number | null;
      domeSubItems?: components["schemas"]["HardwareInvoiceSubItem"][] | null;
      dueDate?: number | null;
      externalId?: string | null;
      installationPrice?: number | null;
      license?: components["schemas"]["License"];
      licenseCount?: number | null;
      licensePrice?: number | null;
      licenseSubItems?: components["schemas"]["LicenseInvoiceSubItem"][] | null;
      notes?: string | null;
      partnerOrgUuid?: string | null;
      r1Camera1024?: components["schemas"]["HardwareInvoiceSubItem"][] | null;
      r1Camera512?: components["schemas"]["HardwareInvoiceSubItem"][] | null;
      r1CameraPurchaseCount?: number | null;
      r1CameraPurchasePrice?: number | null;
      r1CameraSubItems?:
        | components["schemas"]["HardwareInvoiceSubItem"][]
        | null;
      r1LargeCameraPurchaseCount?: number | null;
      r1LargeCameraPurchasePrice?: number | null;
      r1LargeSubItems?:
        | components["schemas"]["HardwareInvoiceSubItem"][]
        | null;
      r1MediumSubItems?:
        | components["schemas"]["HardwareInvoiceSubItem"][]
        | null;
      salespersonName?: string | null;
      shippingPrice?: number | null;
      status?: InvoiceStatusEnum | null;
      tax?: number | null;
      uuid?: string | null;
    };
    Invoice_InvoiceChargeWSRequest: {
      invoiceUuid?: string | null;
      sourceToken?: string | null;
    };
    Invoice_InvoiceChargeWSResponse: {
      chargeSucceeded?: boolean | null;
      error?: boolean | null;
      errorMessage?: string | null;
      errorMsg?: string | null;
      previouslyInitialized?: boolean | null;
    };
    Invoice_InvoiceDetailsV1WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      invoice?: components["schemas"]["Invoice_InvoiceV1Type"];
    };
    Invoice_InvoiceDetailsWSRequest: {
      invoiceUuid?: string | null;
    };
    Invoice_InvoiceDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      invoice?: components["schemas"]["InvoiceType"];
    };
    Invoice_InvoiceV1LineItemType: {
      description?: string | null;
      family?: string | null;
      name?: string | null;
      productCode?: string | null;
      quantity?: number | null;
      subtotal?: number | null;
      unitPrice?: number | null;
    };
    Invoice_InvoiceV1Type: {
      billingContactEmail?: string | null;
      billingContactMailingCity?: string | null;
      billingContactMailingCountry?: string | null;
      billingContactMailingPostalCode?: string | null;
      billingContactMailingState?: string | null;
      billingContactMailingStreet?: string | null;
      billingContactName?: string | null;
      companyName?: string | null;
      dueDate?: string | null;
      grandTotal?: number | null;
      invoiceDate?: string | null;
      invoiceNumber?: string | null;
      lineItems?:
        | components["schemas"]["Invoice_InvoiceV1LineItemType"][]
        | null;
      notes?: string | null;
      partnerBillingCity?: string | null;
      partnerBillingCountry?: string | null;
      partnerBillingPostalCode?: string | null;
      partnerBillingState?: string | null;
      partnerBillingStreet?: string | null;
      partnerName?: string | null;
      salespersonName?: string | null;
      shipping?: number | null;
      status?: string | null;
      subtotal?: number | null;
      tax?: number | null;
      uuid?: string | null;
    };
    KeypadConfigType: {
      armCountdownSecs?: number | null;
      buildingAdminPhoneNumber?: string | null;
      cityName?: string | null;
      connectionState?: KeypadConfigConnectionStateEnum | null;
      floorNumber?: number | null;
      lastModified?: number | null;
      latitude?: number | null;
      locationName?: string | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      showCallBuildingAdmin?: boolean | null;
      signalStrength?: number | null;
      streetAddress?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      uuid?: string | null;
    };
    Keypad_AuthenticatePinRequest: {
      pin?: string | null;
    };
    Keypad_AuthenticatePinResponse: {
      authenticated?: boolean | null;
    };
    Keypad_ClaimKeypadActivationTokenRequest: {
      activationToken?: string | null;
      locationUuid?: string | null;
      name?: string | null;
    };
    Keypad_ClaimKeypadActivationTokenResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Keypad_GetCurrentKeypadWSRequest: { [key: string]: unknown };
    Keypad_GetCurrentKeypadWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      keypad?: components["schemas"]["KeypadConfigType"];
    };
    Keypad_GetKeypadsForLocationWSRequest: {
      locationUuid?: string | null;
    };
    Keypad_GetKeypadsForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      keypads?: components["schemas"]["KeypadConfigType"][] | null;
    };
    Keypad_GetKeypadsForOrgWSRequest: { [key: string]: unknown };
    Keypad_GetKeypadsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      keypads?: components["schemas"]["KeypadConfigType"][] | null;
    };
    Keypad_KeypadCheckinWSRequest: {
      signalStrength?: number | null;
    };
    Keypad_KeypadCheckinWSResponse: { [key: string]: unknown };
    Keypad_UnregisterKeypadRequest: {
      keypadUuid?: string | null;
    };
    Keypad_UnregisterKeypadResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Keypad_UpdateKeypadRequest: {
      armCountdownSecs?: number | null;
      buildingAdminPhoneNumber?: string | null;
      cityName?: string | null;
      floorNumber?: number | null;
      keypadUuid?: string | null;
      latitude?: number | null;
      locationName?: string | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      showCallBuildingAdmin?: boolean | null;
      streetAddress?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
    };
    Keypad_UpdateKeypadResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Kiosk: {
      batteryLevel?: number | null;
      connectionStatus?: KioskConnectionStatusEnum | null;
      deleted?: boolean | null;
      lastUpdateTimeMs?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      printerIP?: string | null;
      uuid?: string | null;
    };
    KioskSelectiveUpdate: {
      batteryLevel?: number | null;
      connectionStatus?: KioskSelectiveUpdateConnectionStatusEnum | null;
      deleted?: boolean | null;
      lastUpdateTimeMs?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      printerIP?: string | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      uuid?: string | null;
    };
    Kiosk_ClaimKioskActivationTokenRequest: {
      activationToken?: string | null;
      locationUuid?: string | null;
      name?: string | null;
      permissionGroupUuid?: string | null;
    };
    Kiosk_ClaimKioskActivationTokenResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Kiosk_DeleteKioskWSRequest: {
      kioskUuid?: string | null;
    };
    Kiosk_DeleteKioskWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Kiosk_GetCurrentKioskWSRequest: { [key: string]: unknown };
    Kiosk_GetCurrentKioskWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      kiosk?: components["schemas"]["Kiosk_KioskWithInfo"];
    };
    Kiosk_GetKiosksForLocationWSRequest: {
      locationUuid?: string | null;
    };
    Kiosk_GetKiosksForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      kiosks?: components["schemas"]["Kiosk"][] | null;
    };
    Kiosk_GetKiosksForOrgWSRequest: { [key: string]: unknown };
    Kiosk_GetKiosksForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      kiosks?: components["schemas"]["Kiosk"][] | null;
    };
    Kiosk_KioskCheckinWSRequest: {
      batterLevel?: number | null;
      signalStrength?: number | null;
    };
    Kiosk_KioskCheckinWSResponse: { [key: string]: unknown };
    Kiosk_KioskWithInfo: {
      batteryLevel?: number | null;
      connectionStatus?: KioskWithInfoConnectionStatusEnum | null;
      deleted?: boolean | null;
      lastUpdateTimeMs?: number | null;
      latitude?: number | null;
      locationName?: string | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      printerIP?: string | null;
      uuid?: string | null;
    };
    Kiosk_UnregisterKioskRequest: {
      kioskUuid?: string | null;
    };
    Kiosk_UnregisterKioskResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Kiosk_UpdateKioskResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Kiosk_UpdateKioskSelectiveRequest: {
      kioskUpdate?: components["schemas"]["KioskSelectiveUpdate"];
    };
    KisiSettings: {
      alertUnauthorizedFaces?: boolean | null;
      apiSecretKey?: string | null;
      createSeekPoints?: boolean | null;
      defaultOptions?: components["schemas"]["BadgeIntegrationDefaultOptions"];
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      placeId?: number | null;
      placeToSettingsMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationSettings"];
      } | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: number | null;
    };
    KisiType:
      | ({
          apiSecretKey?: string | null;
          defaultOptions?: components["schemas"]["BadgeIntegrationDefaultOptions"];
          doorsValidated?: boolean | null;
          placeToSettingsMap?: {
            [key: string]: components["schemas"]["BadgeIntegrationSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    LabelIdentificationActivityEventType:
      | ({
          alertLabelSet?: (string | null)[] | null;
          alertUnidentified?: boolean | null;
          allowedLabelSet?: (string | null)[] | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    LeakProbeType: {
      adcMv?: number | null;
      adcRaw?: number | null;
      leakDetected?: boolean | null;
      moistDetected?: boolean | null;
      present?: boolean | null;
      timestampSec?: number | null;
    };
    License: LicenseEnum;
    LicenseFeature: {
      enabled?: boolean | null;
      name?: string | null;
    };
    LicenseGroupStats: {
      assignedCount?: number | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    LicenseInvoiceSubItem: {
      count?: number | null;
      description?: string | null;
      license?: components["schemas"]["License"];
      price?: number | null;
    };
    LicenseStateStats: {
      /** The number of licenses in the group that are currently in the CLAIMED state. */
      claimedCount?: number | null;
      /** The number of licenses in the group that are currently in the EXPIRED state. */
      expiredCount?: number | null;
      /** The number of licenses in the group that are currently in the NOT_RENEWED state. */
      notRenewedCount?: number | null;
      /** The number of licenses in the group that are currently in the PENDING_RETURN state. */
      pendingReturnCount?: number | null;
      /** The number of licenses in the group that are currently in the PERMANENTLY_EXPIRED state. */
      permanentlyExpiredCount?: number | null;
      /** The number of licenses in the group that are currently in the RENEWED state. */
      renewedCount?: number | null;
    };
    LicenseUsageCatalogItem:
      | ({
          addOnLicenseType?: components["schemas"]["AddOnLicense"];
          cloudArchiveDays?: number | null;
          deviceType?: components["schemas"]["DeviceTypeEnum"];
          licenseFamily?: LicenseUsageCatalogItemLicenseFamilyEnum | null;
        } & {
          durationMonths?: number | null;
          productCode?: string | null;
          productType?: LicenseUsageCatalogItemProductTypeEnum | null;
        })
      | null;
    LicenseUsageStats: {
      addOnLicenseStats?: components["schemas"]["AddOnLicenseStats"][] | null;
      assignedCount?: number | null;
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    LicenseUsageType: {
      addOnLicenseType?: components["schemas"]["AddOnLicense"];
      additionalPerceptionFeatures?:
        | components["schemas"]["PerceptionType"][]
        | null;
      claimKeyUuid?: string | null;
      cloudArchiveDays?: number | null;
      createdOn?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      deviceUuid?: string | null;
      firstAssignedDate?: string | null;
      license?: components["schemas"]["AddOnLicense"];
      licenseFamily?: LicenseUsageLicenseFamilyEnum | null;
      licenseToUnassignEmailState?: LicenseUsageLicenseToUnassignEmailStateEnum | null;
      maxDeleteDate?: string | null;
      orgUuid?: string | null;
      perceptionTypes?: components["schemas"]["PerceptionType"][] | null;
      priorClaimKeyUuid?: string | null;
      productCode?: string | null;
      productType?: LicenseUsageProductTypeEnum | null;
      state?: LicenseUsageStateEnum | null;
      trial?: boolean | null;
      updatedOn?: string | null;
      uuid?: string | null;
    };
    License_AssignACUDoorLicenseWSRequest: {
      doorUuid?: string | null;
      licenseUuid?: string | null;
    };
    License_AssignACUDoorLicenseWSResponse: {
      acuDoorLicense?: components["schemas"]["ACUDoorLicenseType"];
    };
    License_AssignAlertMonitoringLicenseWSRequest: {
      licenseUuid?: string | null;
      locationUuid?: string | null;
    };
    License_AssignAlertMonitoringLicenseWSResponse: {
      alertMonitoringLicense?: components["schemas"]["AlertMonitoringLicenseType"];
    };
    License_AssignDeviceLicenseWSRequest: {
      deviceUuid?: string | null;
      licenseUuid?: string | null;
    };
    License_AssignDeviceLicenseWSResponse: {
      deviceLicense?: components["schemas"]["DeviceLicenseType"];
    };
    License_AssignLicenseWSRequest: {
      deviceUuid?: string | null;
      licenseUuid?: string | null;
    };
    License_AssignLicenseWSResponse: {
      licenseUsage?: components["schemas"]["LicenseUsageType"];
    };
    License_CalculateLicensesStatsForClientOrgWSRequest: {
      orgUuid?: string | null;
    };
    License_CalculateLicensesStatsForClientOrgWSResponse: {
      orgLicenseStats?: components["schemas"]["OrgLicenseStats"];
    };
    License_CalculateLicensesStatsForOrgWSRequest: { [key: string]: unknown };
    License_CalculateLicensesStatsForOrgWSResponse: {
      orgLicenseStats?: components["schemas"]["OrgLicenseStats"];
    };
    License_CreateACUDoorLicenseWSRequest: {
      orgUuid?: string | null;
    };
    License_CreateACUDoorLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_CreateAlertMonitoringLicenseWSRequest: {
      allowedDeviceCount?: number | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
    };
    License_CreateAlertMonitoringLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_CreateDeviceLicenseWSRequest: {
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      licenseFamily?: CreateDeviceLicenseWSRequestLicenseFamilyEnum | null;
      licenseType?: components["schemas"]["License"];
      orgUuid?: string | null;
    };
    License_CreateDeviceLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      licenseUuid?: string | null;
    };
    License_CreateLicenseWSRequest: {
      cloudArchiveDays?: number | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      license?: components["schemas"]["AddOnLicense"];
      licenseFamily?: CreateLicenseWSRequestLicenseFamilyEnum | null;
      orgUuid?: string | null;
    };
    License_CreateLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      licenseUuid?: string | null;
    };
    License_DeleteAlertMonitoringLicenseWSRequest: {
      licenseUuid?: string | null;
      orgUuid?: string | null;
    };
    License_DeleteAlertMonitoringLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_DeleteDeviceLicenseWSRequest: {
      licenseUuid?: string | null;
      orgUuid?: string | null;
    };
    License_DeleteDeviceLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_DeleteLicenseWSRequest: {
      licenseUuid?: string | null;
      orgUuid?: string | null;
    };
    License_DeleteLicenseWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_FindLicensesByClaimKeyWSRequest: {
      claimKeyUuid?: string | null;
    };
    License_FindLicensesByClaimKeyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      licenses?: components["schemas"]["BaseLicenseType"][] | null;
    };
    License_GetACUDoorLicensesForClientOrgWSRequest: {
      orgUuid?: string | null;
    };
    License_GetACUDoorLicensesForClientOrgWSResponse: {
      acuDoorLicenses?: components["schemas"]["ACUDoorLicenseType"][] | null;
    };
    License_GetACUDoorLicensesWSRequest: { [key: string]: unknown };
    License_GetACUDoorLicensesWSResponse: {
      acuDoorLicenses?: components["schemas"]["ACUDoorLicenseType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_GetAlertMonitoringLicensesForClientOrgWSRequest: {
      orgUuid?: string | null;
    };
    License_GetAlertMonitoringLicensesForClientOrgWSResponse: {
      alertMonitoringLicenses?:
        | components["schemas"]["AlertMonitoringLicenseType"][]
        | null;
    };
    License_GetAlertMonitoringLicensesWSRequest: { [key: string]: unknown };
    License_GetAlertMonitoringLicensesWSResponse: {
      alertMonitoringLicenses?:
        | components["schemas"]["AlertMonitoringLicenseType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_GetDeviceLicensesForClientOrgWSRequest: {
      orgUuid?: string | null;
    };
    License_GetDeviceLicensesForClientOrgWSResponse: {
      deviceLicenses?: components["schemas"]["DeviceLicenseType"][] | null;
    };
    License_GetDeviceLicensesWSRequest: {
      optionalDeviceTypeFilter?: components["schemas"]["DeviceTypeEnum"];
    };
    License_GetDeviceLicensesWSResponse: {
      deviceLicenses?: components["schemas"]["DeviceLicenseType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_GetLicensesForClientOrgWSRequest: {
      orgUuid?: string | null;
    };
    License_GetLicensesForClientOrgWSResponse: {
      licenses?: components["schemas"]["LicenseUsageType"][] | null;
    };
    License_GetLicensesWSRequest: {
      optionalDeviceTypeFilter?: components["schemas"]["DeviceTypeEnum"];
    };
    License_GetLicensesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      licenses?: components["schemas"]["LicenseUsageType"][] | null;
    };
    License_catalog_FindCatalogItemsWSRequest: {
      /** The product type used to filter license catalog items. If not specified, no filtering by product type is done. */
      productType?: FindCatalogItemsWSRequestProductTypeEnum | null;
    };
    License_catalog_FindCatalogItemsWSResponse: {
      catalogItems?: components["schemas"]["BaseCatalogItem"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_catalog_GetCatalogItemByProductCodeWSRequest: {
      productCode?: string | null;
    };
    License_catalog_GetCatalogItemByProductCodeWSResponse: {
      catalogItem?: components["schemas"]["BaseCatalogItem"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_claimkey_ClaimLicensesForClientOrgWSRequest: {
      claimCode?: string | null;
      orgUuid?: string | null;
    };
    License_claimkey_ClaimLicensesForClientOrgWSResponse: {
      claimKeyUuid?: string | null;
    };
    License_claimkey_ClaimLicensesWSRequest: {
      claimCode?: string | null;
    };
    License_claimkey_ClaimLicensesWSResponse: {
      /** Uuid of the claim key that was submitted for claiming. */
      claimKeyUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_claimkey_CreateClaimKeyWSRequest: {
      endDate?: string | null;
      entry?: components["schemas"]["ClaimKeyEntry"];
      requestId?: string | null;
      startDate?: string | null;
      trial?: boolean | null;
    };
    License_claimkey_CreateClaimKeyWSResponse: {
      claimCode?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      uuid?: string | null;
    };
    License_claimkey_CreateRenewalClaimKeyWSRequest: {
      endDate?: string | null;
      entries?: {
        [key: string]: components["schemas"]["ClaimKeyEntry"];
      } | null;
      requestId?: string | null;
    };
    License_claimkey_CreateRenewalClaimKeyWSResponse: {
      claimCode?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      uuid?: string | null;
    };
    License_claimkey_FindClaimKeysByOrgWSRequest: {
      claimKeySearchFilter?: components["schemas"]["ClaimKeySearchFilter"];
    };
    License_claimkey_FindClaimKeysByOrgWSResponse: {
      claimKeys?: components["schemas"]["BaseClaimKey"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_claimkey_GetClaimKeyByCodeForClientOrgWSRequest: {
      claimCode?: string | null;
      orgUuid?: string | null;
    };
    License_claimkey_GetClaimKeyByCodeForClientWSResponse: {
      claimKey?: components["schemas"]["BaseClaimKey"];
    };
    License_claimkey_GetClaimKeyByCodeWSRequest: {
      claimCode?: string | null;
    };
    License_claimkey_GetClaimKeyByCodeWSResponse: {
      claimKey?: components["schemas"]["BaseClaimKey"];
    };
    License_claimkey_GetClaimKeyWSRequest: {
      uuid?: string | null;
    };
    License_claimkey_GetClaimKeyWSResponse: {
      claimKey?: components["schemas"]["BaseClaimKey"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    License_claimkey_ReturnClaimKeyProductQuantitiesWSRequest: {
      productQuantities?: { [key: string]: number | null } | null;
      uuid?: string | null;
    };
    License_claimkey_ReturnClaimKeyProductQuantitiesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    LiveNotificationActionRecordType: {
      status?: components["schemas"]["LiveNotificationActionStatusEnum"];
    };
    LiveNotificationActionStatusEnum: LiveNotificationActionStatusEnum;
    LocalDateTimeIntervalType: {
      /** Interval end time in 'yyyy-MM-ddTHH:mm:ss' format. Interval end time is exclusive. */
      localEndDateTime: string | null;
      /** Interval start time in 'yyyy-MM-ddTHH:mm:ss' format. Interval start time is inclusive. */
      localStartDateTime: string | null;
    } | null;
    /** List of intervals each specifying door state during date range. List must contain at least one element */
    LocalInterval: {
      /** Interval end time in 'yyyy-MM-ddTHH:mm:ss' format. Interval end time is exclusive. */
      localEndDateTime: string | null;
      /** Interval start time in 'yyyy-MM-ddTHH:mm:ss' format. Interval start time is inclusive. */
      localStartDateTime: string | null;
      state: components["schemas"]["AccessControlledDoorStateEnumType"];
    };
    LocationAccessGrantType: {
      accessControlledDoorUuids?: (string | null)[] | null;
      createdAtMillis?: number | null;
      doorLabelIds?: (string | null)[] | null;
      groupUuids?: (string | null)[] | null;
      locationUuid?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduleUuid?: string | null;
      sortKey?: string | null;
      storedInS3?: boolean | null;
      updatedAtMillis?: number | null;
      userUuids?: (string | null)[] | null;
      uuid?: string | null;
    };
    LocationAccessRevocationType: {
      accessControlledDoorUuids?: (string | null)[] | null;
      createdAtMillis?: number | null;
      doorLabelIds?: (string | null)[] | null;
      groupUuids?: (string | null)[] | null;
      locationUuid?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduleUuid?: string | null;
      sortKey?: string | null;
      storedInS3?: boolean | null;
      updatedAtMillis?: number | null;
      userUuids?: (string | null)[] | null;
      uuid?: string | null;
    };
    LocationFirstInSettings: {
      createdAtMillis?: number | null;
      description?: string | null;
      doorAuthFirstInOutOfSync?: boolean | null;
      doorAuthFirstInState?: components["schemas"]["FirstInState"];
      doorAuthRequirementEnabled?: boolean | null;
      doorScheduleFirstInOutOfSync?: boolean | null;
      doorScheduleFirstInState?: components["schemas"]["FirstInState"];
      doorScheduleRequirementEnabled?: boolean | null;
      doorUuids?: (string | null)[] | null;
      groupUuids?: (string | null)[] | null;
      locationUuid?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      resets?: components["schemas"]["BaseFirstInReset"][] | null;
      settingsUuid?: string | null;
      updatedAtMillis?: number | null;
      userUuids?: (string | null)[] | null;
    };
    LocationFunctionality: LocationFunctionalityEnum;
    LocationLockdownActivatedRuleTriggerType:
      | ({
          locationUuid?: string | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    LocationLockdownDeactivatedRuleTriggerType:
      | ({
          locationUuid?: string | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    LocationLockdownPlanType: {
      activationPlan?: components["schemas"]["LockdownActivationPlanType"];
      createdAtMillis?: number | null;
      deactivationPlan?: components["schemas"]["LockdownDeactivationPlanType"];
      defaultLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
      doorLockdownStateMap?: {
        [key: string]: components["schemas"]["DoorLockdownStateEnumType"];
      } | null;
      locationUuid?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      physicalAccess?: components["schemas"]["LockdownPhysicalAccessType"];
      scopeUuid?: string | null;
      testPlan?: components["schemas"]["LockdownTestPlanType"];
      type?: components["schemas"]["LockdownPlanScopeEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    LocationLockdownStateEnumType: LocationLockdownStateEnumType;
    LocationLockdownStateType: {
      activeLockdownPlans?:
        | components["schemas"]["LockdownPlanReference"][]
        | null;
      createdAtMillis?: number | null;
      followingTestPlan?: boolean | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
      state?: components["schemas"]["LocationLockdownStateEnumType"];
      stateChangedAtMillis?: number | null;
      updatedAtMillis?: number | null;
    };
    LocationSettings: {
      associatedCameras?: (string | null)[] | null;
      printBadge?: boolean | null;
    } | null;
    LocationType: {
      address1?: string | null;
      address2?: string | null;
      countryCode?: string | null;
      floorPlans?: components["schemas"]["FloorPlanType"][] | null;
      /** Labels offer a way to perform operations across multiple locations if they have the same label */
      labels?: (string | null)[] | null;
      latitude?: number | null;
      longitude?: number | null;
      /** Name of this location */
      name?: string | null;
      /** Uuid of the policy for this location */
      policyUuid?: string | null;
      postalCode?: string | null;
      qualifiedAddress?: components["schemas"]["QualifiedAddressType"];
      subLocations?: components["schemas"]["LocationType"][] | null;
      /** Timezone for this location */
      tz?: string | null;
      /** Location uuid to update/store settings for */
      uuid?: string | null;
    };
    Location_AddLocationLabelWSRequest: {
      label?: string | null;
      locationIdentifier?: string | null;
    };
    Location_AddLocationLabelWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Location_CreateLocationWSRequest: {
      location?: components["schemas"]["LocationType"];
      parentLocationUuid?: string | null;
    };
    Location_CreateLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      uuid?: string | null;
    };
    Location_DeleteLocationWSRequest: {
      uuid?: string | null;
    };
    Location_DeleteLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Location_GeoCodeWSRequest: {
      address?: string | null;
    };
    Location_GeoCodeWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      latitude?: number | null;
      longitude?: number | null;
    };
    Location_GetLocationLabelsForOrgWSRequest: { [key: string]: unknown };
    Location_GetLocationLabelsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      locationLabels?: { [key: string]: (string | null)[] | null } | null;
    };
    Location_GetLocationWSRequest: {
      locationUuid: string | null;
      subLocationsRequired?: boolean | null;
    };
    Location_GetLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      location?: components["schemas"]["LocationType"];
    };
    Location_GetLocationsByGeoRequest: {
      latitude?: number | null;
      longitude?: number | null;
    };
    Location_GetLocationsByGeoResponse: {
      locations?: components["schemas"]["LocationType"][] | null;
    };
    Location_GetLocationsBySubLocationsHierarchyKeyWSRequest: {
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
    };
    Location_GetLocationsBySubLocationsHierarchyKeyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      location?: components["schemas"]["LocationType"];
    };
    Location_GetLocationsV2WSRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
      nameBeginsWithFilter?: string | null;
    };
    Location_GetLocationsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lastEvaluatedKey?: string | null;
      locations?: components["schemas"]["LocationType"][] | null;
    };
    Location_GetLocationsWSRequest: {
      subLocationsIncluded?: boolean | null;
    };
    Location_GetLocationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      locations?: components["schemas"]["LocationType"][] | null;
    };
    Location_QualifiedAddressTypeWithValidation: {
      addressComplete?: boolean | null;
      /** apt, suite, or unit */
      addressLine2?: string | null;
      /** street address */
      addressline1?: string | null;
      /** state */
      administrativeArea?: string | null;
      /** city */
      locality?: string | null;
      /** zip code */
      postalCode?: string | null;
      /** country */
      regionCode?: string | null;
      validatedAddressline1?: boolean | null;
      validatedAdminestrativeArea?: boolean | null;
      validatedLocality?: boolean | null;
      validatedPostalCode?: boolean | null;
      validatedRegionCode?: boolean | null;
      validatedSubpremise?: boolean | null;
    };
    Location_RemoveLocationLabelWSRequest: {
      label?: string | null;
      locationIdentifier?: string | null;
    };
    Location_RemoveLocationLabelWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Location_SelectiveUpdateLocationWSRequest: {
      address1?: string | null;
      address2?: string | null;
      countryCode?: string | null;
      floorPlans?: components["schemas"]["FloorPlanType"][] | null;
      /** Labels offer a way to perform operations across multiple locations if they have the same label */
      labels?: (string | null)[] | null;
      latitude?: number | null;
      /** Location uuid to update settings for */
      locationUuid: string | null;
      longitude?: number | null;
      /** Name of this location */
      name?: string | null;
      /** Uuid of the policy for this location */
      policyUuid?: string | null;
      postalCode?: string | null;
      /** Timezone identifier, e.g. America/Los_Angeles, EST, GMT+0, etc. */
      timezoneId?: string | null;
      /** Use timezoneId field instead */
      tz?: {
        displayName?: string | null;
        dstsavings?: number | null;
        id?: string | null;
        rawOffset?: number | null;
      } | null;
    };
    Location_SelectiveUpdateLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Location_UpdateLocationWSRequest: {
      location?: components["schemas"]["LocationType"];
    };
    Location_UpdateLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Location_ValidateLocationWSRequest: {
      locationUuid?: string | null;
    };
    Location_ValidateLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      locationUuid?: string | null;
      qualifiedAddress?: components["schemas"]["Location_QualifiedAddressTypeWithValidation"];
    };
    LockdownActivatedStateEventType:
      | ({
          activatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          activeLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
          deactivatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
        } & {
          createdAtMillis?: number | null;
          followingTestPlan?: boolean | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          originator?: components["schemas"]["BaseLocationLockdownEventOriginator"];
          stateChangedAtMillis?: number | null;
          type?: components["schemas"]["LockdownStateEventEnumType"];
        })
      | null;
    LockdownActivationPlanType: {
      groupUuids?: (string | null)[] | null;
      rhombusKeyNotificationMessage?: string | null;
      userUuids?: (string | null)[] | null;
    };
    LockdownActivationResultEnumType: LockdownActivationResultEnumType;
    LockdownDeactivatedStateEventType:
      | ({
          deactivatedLockdownPlans?:
            | components["schemas"]["LockdownPlanReference"][]
            | null;
        } & {
          createdAtMillis?: number | null;
          followingTestPlan?: boolean | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          originator?: components["schemas"]["BaseLocationLockdownEventOriginator"];
          stateChangedAtMillis?: number | null;
          type?: components["schemas"]["LockdownStateEventEnumType"];
        })
      | null;
    LockdownDeactivationPlanType: {
      groupUuids?: (string | null)[] | null;
      rhombusKeyNotificationMessage?: string | null;
      userUuids?: (string | null)[] | null;
    };
    LockdownDeactivationResultEnumType: LockdownDeactivationResultEnumType;
    LockdownEventOriginatorEnumType: LockdownEventOriginatorEnumType;
    LockdownPhysicalAccessType: {
      groupUuids?: (string | null)[] | null;
      userUuids?: (string | null)[] | null;
    };
    LockdownPlanReference: {
      lockdownPlanUuid?: string | null;
      scope?: components["schemas"]["LockdownPlanScopeEnumType"];
      scopeUuid?: string | null;
    };
    LockdownPlanScopeEnumType: LockdownPlanScopeEnumType;
    LockdownStateEventEnumType: LockdownStateEventEnumType;
    LockdownTestPlanType: {
      doorStateOverrideEnabled?: boolean | null;
      userAccessOverrideEnabled?: boolean | null;
    };
    LockdownType: {
      id?: number | null;
      isActive?: boolean | null;
      name?: string | null;
    };
    Logistics_GetRMAsWSRequest: { [key: string]: unknown };
    Logistics_GetRMAsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rmaList?: components["schemas"]["RMAType"][] | null;
    };
    Logistics_GetShipmentsWSRequest: {
      endTimeSec?: number | null;
      startTimeSec?: number | null;
    };
    Logistics_GetShipmentsWSResponse: {
      customerShipmentList?:
        | components["schemas"]["CustomerShipmentType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    LumeoSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
    };
    LumeoType: {
      enabled?: boolean | null;
      integration?: components["schemas"]["IntegrationEnum"];
      integrationAuditMap?: {
        [key: string]: components["schemas"]["IntegrationAuditEvent"];
      } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    } | null;
    ManualDoorStateChangeEnum: ManualDoorStateChangeEnum;
    ManualDoorStateChangeEnum_Minimal: ManualDoorStateChangeEnum_Minimal;
    Maps_GenerateMapUrlWSRequest: {
      baseUrl?: string | null;
    };
    Maps_GenerateMapUrlWSResponse: {
      signedUrl?: string | null;
    };
    MattermostSettings: {
      channel?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      webhookUrl?: string | null;
    };
    MediaType: {
      charset?: {
        registered?: boolean | null;
      } | null;
      concrete?: boolean | null;
      parameters?: { [key: string]: string | null } | null;
      qualityValue?: number | null;
      subtype?: string | null;
      subtypeSuffix?: string | null;
      type?: string | null;
      wildcardSubtype?: boolean | null;
      wildcardType?: boolean | null;
    };
    Mediadevice_GetBulkMediaDeviceDetailsWSRequest: {
      devices?: (string | null)[] | null;
    };
    Mediadevice_GetBulkMediaDeviceDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      mediaDeviceDetails?: {
        [
          key: string
        ]: components["schemas"]["Mediadevice_MediaDeviceDetailsType"];
      } | null;
    };
    Mediadevice_MediaDeviceDetailsType: {
      audioGateways?: (string | null)[] | null;
      deviceFacetUuid?: string | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanCheckUrls?: (string | null)[] | null;
      lanLiveH264Uris?: (string | null)[] | null;
      lanLiveM3u8Uris?: (string | null)[] | null;
      lanLiveMpdUris?: (string | null)[] | null;
      lanVodM3u8UrisTemplates?: (string | null)[] | null;
      lanVodMpdUrisTemplates?: (string | null)[] | null;
      name?: string | null;
      region?: string | null;
      timezone?: {
        displayName?: string | null;
        dstsavings?: number | null;
        id?: string | null;
        rawOffset?: number | null;
      } | null;
      uri?: string | null;
      wanLiveH264Uri?: string | null;
      wanLiveM3u8Uri?: string | null;
      wanLiveMpdUri?: string | null;
      wanVodH264UriTemplate?: string | null;
      wanVodM3u8UriTemplate?: string | null;
      wanVodMpdUriTemplate?: string | null;
    };
    MessageBodyWorkers: { [key: string]: unknown } | null;
    MetaDataLocationType: {
      region?: string | null;
    };
    Metric_LogEventWSRequest: {
      logMap?: { [key: string]: { [key: string]: unknown } | null } | null;
    };
    Metric_LogEventWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Metric_ReportErrorWSRequest: {
      errorMap?: { [key: string]: { [key: string]: unknown } | null } | null;
    };
    Metric_ReportErrorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    MicrosoftTeamsChannelSettings: {
      botInstallationId?: string | null;
      channelId?: string | null;
      installingUserUuid?: string | null;
      sendChannelNotifications?: boolean | null;
    } | null;
    MicrosoftTeamsSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      webhookUrl?: string | null;
    };
    MicrosoftTeamsType:
      | ({
          adminConsent?: boolean | null;
          allowUserNotifications?: boolean | null;
          microsoftTeamSettingsMap?: {
            [
              key: string
            ]: components["schemas"]["MicrosoftTeamsChannelSettings"];
          } | null;
          microsoftTeamsUserSettingsMap?: {
            [key: string]: components["schemas"]["MicrosoftTeamsUserSettings"];
          } | null;
          tenantId?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    MicrosoftTeamsUserSettings: {
      botInstallationId?: string | null;
      chatId?: string | null;
      refreshToken?: string | null;
      sendUserNotifications?: boolean | null;
      teamIds?: (string | null)[] | null;
      userId?: string | null;
    } | null;
    MinimalAudioGatewayStateType: {
      associatedCameras?: (string | null)[] | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mediaRegion?: string | null;
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      policyUuid?: string | null;
      region?: string | null;
      sensorUuid?: string | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    MinimalDeviceStateType: {
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mediaRegion?: string | null;
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      policyUuid?: string | null;
      region?: string | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    MinimalNVRStateType: {
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mediaRegion?: string | null;
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      numThirdPartyCamerasAssigned?: number | null;
      numThirdPartyCamerasSupported?: number | null;
      policyUuid?: string | null;
      region?: string | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    MinimalObservableDeviceStateType: {
      associatedCameras?: (string | null)[] | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mediaRegion?: string | null;
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      policyUuid?: string | null;
      region?: string | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    MinimalThresholdEventType: {
      crossingObject?: MinimalThresholdEventCrossingObjectEnum | null;
      direction?: MinimalThresholdEventDirectionEnum | null;
      objectId?: number | null;
      timestampMs?: number | null;
    };
    MinuteOfDayIntervalType: {
      dayOfWeek?: number | null;
      minuteOfDayStartInclusive?: number | null;
      minuteOfDayStopExclusive?: number | null;
    };
    MobileTokenOSEnum: MobileTokenOSEnum;
    Mobile_LoginToOrg2FARequiredResponse:
      | ({
          get2FAIdentifier?: string | null;
          get2FAType?: LoginToOrg2FARequiredResponseGet2FATypeEnum | null;
          numDaysSkip2FAForTrustedDevices?: number | null;
        } & {
          type?: string;
        })
      | null;
    Mobile_LoginToOrgBaseResponse: {
      type: string;
    };
    Mobile_LoginToOrgRequest: {
      csr?: (string | null)[] | null;
      orgUuid?: string | null;
    };
    Mobile_LoginToOrgSsoRequiredResponse:
      | ({
          redirectUri?: string | null;
        } & {
          type?: string;
        })
      | null;
    Mobile_LoginToOrgSuccessResponse:
      | ({
          cert?: (string | null)[] | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        } & {
          type?: string;
        })
      | null;
    Mobile_LoginVerifiedSupportAuthorityMobileRequest: {
      authorityUuid?: string | null;
      clientType?: LoginVerifiedSupportAuthorityMobileRequestClientTypeEnum | null;
    };
    Mobile_LoginVerifiedSupportAuthorityMobileResponse: {
      supportAuthoritySessionUuid?: string | null;
      valid?: boolean | null;
    };
    Mobile_LogoutMobileUserRequest: { [key: string]: unknown };
    Mobile_LogoutMobileUserResponse: { [key: string]: unknown };
    Mobile_RefreshMobileSessionRequest: {
      csr?: (string | null)[] | null;
    };
    Mobile_RefreshMobileSessionResponse: {
      cert?: (string | null)[] | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    Mobile_UpdateMobileNotificationTokenRequest: {
      token?: string | null;
    };
    Mobile_UpdateMobileNotificationTokenResponse: { [key: string]: unknown };
    Mobile_UpdateRhombusKeyMobileNotificationTokenRequest: {
      token?: string | null;
    };
    Mobile_UpdateRhombusKeyMobileNotificationTokenResponse: {
      [key: string]: unknown;
    };
    ModularAIConfig: {
      description?: string | null;
      modelParams?: components["schemas"]["ModularAIModelParams"];
      modelQuantizedBinaryContentLocator?: string | null;
      modelStatus?: ModularAIConfigModelStatusEnum | null;
      modelUploadZipContentLocator?: string | null;
      name?: string | null;
      restrictedOrgUuid?: string | null;
      uuid?: string | null;
    };
    ModularAIConfigSelectiveUpdate: {
      description?: string | null;
      modelParams?: components["schemas"]["ModularAIModelParams"];
      modelQuantizedBinaryContentLocator?: string | null;
      modelStatus?: ModularAIConfigSelectiveUpdateModelStatusEnum | null;
      modelUploadZipContentLocator?: string | null;
      name?: string | null;
      restrictedOrgUuid?: string | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      uuid?: string | null;
    };
    ModularAIModelParams: {
      classOutputMap?: { [key: string]: string | null } | null;
      inputHeight?: number | null;
      inputWidth?: number | null;
    };
    Modularai_AddModelToDeviceWSRequest: {
      deviceUuid?: string | null;
      modelUuid?: string | null;
    };
    Modularai_AddModelToDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Modularai_GetDevicesForModelWSRequest: {
      modelUuid?: string | null;
    };
    Modularai_GetDevicesForModelWSResponse: {
      devices?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Modularai_GetModelsAddedToDeviceWSRequest: {
      deviceUuid?: string | null;
    };
    Modularai_GetModelsAddedToDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      models?: components["schemas"]["ModularAIConfig"][] | null;
    };
    Modularai_GetModelsWSRequest: { [key: string]: unknown };
    Modularai_GetModelsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      models?: components["schemas"]["ModularAIConfig"][] | null;
    };
    Modularai_RemoveModelFromDeviceWSRequest: {
      deviceUuid?: string | null;
      modelUuid?: string | null;
    };
    Modularai_RemoveModelFromDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Modularai_UpdateModelWSRequest: {
      update?: components["schemas"]["ModularAIConfigSelectiveUpdate"];
    };
    Modularai_UpdateModelWSResponse: { [key: string]: unknown };
    MonitoringEnableStatus: {
      devicesWithActiveSirens?: { [key: string]: number | null } | null;
      disabledOnMs?: number | null;
      enabled?: boolean | null;
      enabledOnMs?: number | null;
      noNextTimestampReason?: string | null;
      notEnabledReason?: string | null;
      recentlyActivatedSirensTimestampMs?: {
        [key: string]: number | null;
      } | null;
    };
    MultiPart: {
      bodyParts?: components["schemas"]["BodyPart"][] | null;
      contentDisposition?: components["schemas"]["ContentDisposition"];
      entity?: { [key: string]: unknown } | null;
      headers?:
        | ({
            empty?: boolean | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      mediaType?: components["schemas"]["MediaType"];
      messageBodyWorkers?: components["schemas"]["MessageBodyWorkers"];
      parameterizedHeaders?:
        | ({
            empty?: boolean | null;
          } & {
            [key: string]:
              | components["schemas"]["ParameterizedHeader"][]
              | null;
          })
        | null;
      providers?: components["schemas"]["Providers"];
    } | null;
    MultivaluedMapStringParameterizedHeader:
      | ({
          empty?: boolean | null;
        } & {
          [key: string]: components["schemas"]["ParameterizedHeader"][] | null;
        })
      | null;
    MultivaluedMapStringString:
      | ({
          empty?: boolean | null;
        } & { [key: string]: (string | null)[] | null })
      | null;
    Network_NetworkConfigurationWSRequest: {
      deviceUuid?: string | null;
      mode?: NetworkConfigurationWSRequestModeEnum | null;
      staticIpAddr?: string | null;
      staticIpGateway?: string | null;
      staticIpNameserver1?: string | null;
      staticIpNameserver2?: string | null;
      staticIpNetmask?: string | null;
    };
    Network_NetworkConfigurationWSResponse: {
      mode?: NetworkConfigurationWSResponseModeEnum | null;
      staticIpAddr?: string | null;
      staticIpGateway?: string | null;
      staticIpNameserver1?: string | null;
      staticIpNameserver2?: string | null;
      staticIpNetmask?: string | null;
    };
    NineOneOneCellularType:
      | ({
          bearerToken?: string | null;
          saveClips?: boolean | null;
          securityZoneMap?: {
            [key: string]: components["schemas"]["SecurityZoneInfoType"];
          } | null;
          triggerNotification?: boolean | null;
          webhookToken?: string | null;
          zonesValidated?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    NoonlightPromptTheme: NoonlightPromptThemeEnum;
    NoonlightScheduleType: {
      audioGateways?: (string | null)[] | null;
      escalationDelayMinutes?: number | null;
      monitoredDevices?: (string | null)[] | null;
      promptTheme?: components["schemas"]["NoonlightPromptTheme"];
      scheduleUuid?: string | null;
      sirenSettings?: {
        [key: string]: components["schemas"]["AMSirenSettingsType"];
      } | null;
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
      tripwire?: components["schemas"]["TripwireSettingsType"];
      uuid?: string | null;
      verifiedThreatSiren?: components["schemas"]["AMSirenSettingsType"];
    };
    NoonlightSettings: {
      acceptedTermsOfService?: boolean | null;
      defaultContactsByLocationMap?: {
        [key: string]: components["schemas"]["EmergencyContact"];
      } | null;
      defaultDelayByLocationsMap?: { [key: string]: number | null } | null;
      defaultPromptByLocationsMap?: {
        [key: string]: components["schemas"]["NoonlightPromptTheme"];
      } | null;
      emergencyContactsByLocationsMap?: {
        [key: string]:
          | components["schemas"]["EmergencyResponseContactsIntervalType"][]
          | null;
      } | null;
      enabled?: boolean | null;
      escalationSettingsByLocationsMap?: {
        [key: string]:
          | components["schemas"]["AlertMonitoringSubmissionDelayIntervalType"][]
          | null;
      } | null;
      locationEntryInstructionsMap?: { [key: string]: string | null } | null;
      pinsByLocationMap?: {
        [key: string]: components["schemas"]["AlertMonitoringPinType"][] | null;
      } | null;
      verificationPrompt?: string | null;
    };
    NoonlightVersionedSettingsType: {
      acceptedTermsOfService?: boolean | null;
      badgeAuthDisablesMonitoring?: boolean | null;
      defaultDelay?: number | null;
      defaultEmergencyContact?: components["schemas"]["EmergencyContact"];
      defaultPromptTheme?: components["schemas"]["NoonlightPromptTheme"];
      deleted?: boolean | null;
      emergencyContacts?:
        | components["schemas"]["EmergencyResponseContactsScheduleType"][]
        | null;
      enabled?: boolean | null;
      entryInstructions?: string | null;
      locationUuid?: string | null;
      manualEscalationSettings?: components["schemas"]["NoonlightScheduleType"];
      modifiedByEmail?: string | null;
      modifiedByIntegration?: boolean | null;
      modifiedByMetadata?: string | null;
      modifiedByUuid?: string | null;
      modifiedTimeMs?: number | null;
      monitoringMode?: NoonlightVersionedSettingsMonitoringModeEnum | null;
      oneTimePauses?: components["schemas"]["NoonlightScheduleType"][] | null;
      oneTimeSchedules?:
        | components["schemas"]["NoonlightScheduleType"][]
        | null;
      orgUuid?: string | null;
      pins?: components["schemas"]["AlertMonitoringPinType"][] | null;
      rules?: (string | null)[] | null;
      schedules?: components["schemas"]["NoonlightScheduleType"][] | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      talkdownEnabled?: boolean | null;
    };
    NormalStateEnumType: NormalStateEnumType;
    NotificationEnumType: NotificationEnumType;
    NotificationIntervalV2Type: {
      activityTriggerMap?: {
        [key: string]: components["schemas"]["NotificationEnumType"][] | null;
      } | null;
      deviceFilterSet?: (string | null)[] | null;
      diagnosticTriggerMap?: {
        [key: string]: components["schemas"]["NotificationEnumType"][] | null;
      } | null;
      locationActivityTriggerMap?: {
        [key: string]: components["schemas"]["NotificationEnumType"][] | null;
      } | null;
      locationDiagnosticTriggerMap?: {
        [key: string]: components["schemas"]["NotificationEnumType"][] | null;
      } | null;
      locationFilterSet?: (string | null)[] | null;
      locationOnlyFilterSet?: (string | null)[] | null;
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
    };
    NotificationSettingsType: {
      orgUuid?: string | null;
      slackChannel?: string | null;
      slackEnabled?: boolean | null;
      slackWebhookUrl?: string | null;
    };
    NotificationTimeFrame: {
      days?: (NotificationTimeFrameDaysEnum | null)[] | null;
      interval?: components["schemas"]["MinuteOfDayIntervalType"];
      mediums?: components["schemas"]["NotificationEnumType"][] | null;
      rows?: components["schemas"]["NotificationTimeFrameRow"][] | null;
    };
    NotificationTimeFrameRow: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      devices?: (string | null)[] | null;
      diagnostics?: (NotificationTimeFrameRowDiagnosticsEnum | null)[] | null;
      locationOnly?: (string | null)[] | null;
      locationOnlyActivities?: components["schemas"]["ActivityEnum"][] | null;
      locationOnlyDiagnostics?: (NotificationTimeFrameRowLocationOnlyDiagnosticsEnum | null)[] | null;
      locations?: (string | null)[] | null;
    };
    OAuthApplication: {
      clientId?: string | null;
      clientSecretHash?: string | null;
      contactEmail?: string | null;
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      redirectUri?: string | null;
    };
    Oauth_GetAllApplicationsForOrgWSRequest: { [key: string]: unknown };
    Oauth_GetAllApplicationsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      oauthApplications?: components["schemas"]["OAuthApplication"][] | null;
    };
    Oauth_GetApplicationByClientIdWSRequest: {
      clientId?: string | null;
    };
    Oauth_GetApplicationByClientIdWSResponse: {
      application?: components["schemas"]["OAuthApplication"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Oauth_OAuthApplicationWSRequest: {
      clientId?: string | null;
      contactEmail?: string | null;
      description?: string | null;
      name?: string | null;
      redirectUri?: string | null;
    };
    Oauth_OAuthApplicationWSResponse: {
      clientId?: string | null;
      clientSecret?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    ObjectSearchModelEnum: ObjectSearchModelEnum;
    OccupancyEventType: {
      baseStationUuid?: string | null;
      batteryPercentage?: number | null;
      bleDeviceUuid?: string | null;
      bleRssi?: number | null;
      closeBaseStations?: (string | null)[] | null;
      locationUuid?: string | null;
      lux?: number | null;
      orgUuid?: string | null;
      state?: OccupancyEventStateEnum | null;
      stateChanged?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tampered?: boolean | null;
      timestampMs?: number | null;
    };
    OccupancyPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["OccupancyScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    OccupancyScheduledTriggerType: {
      occupancyThresholdSec?: number | null;
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
      vacancyThresholdSec?: number | null;
    };
    Occupancysensor_GetMinimalOccupancySensorStatesWSRequest: {
      [key: string]: unknown;
    };
    Occupancysensor_GetMinimalOccupancySensorStatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      occupancySensorStates?:
        | components["schemas"]["Occupancysensor_MinimalOccupancySensorStateType"][]
        | null;
    };
    Occupancysensor_GetOccupancyEventsForSensorWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      sensorUuid?: string | null;
    };
    Occupancysensor_GetOccupancyEventsForSensorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      events?: components["schemas"]["OccupancyEventType"][] | null;
    };
    Occupancysensor_MinimalOccupancySensorStateType: {
      associatedCameras?: (string | null)[] | null;
      batteryPercent?: number | null;
      closestBaseStation?: string | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      health?: MinimalOccupancySensorStateHealthEnum | null;
      healthDetails?: MinimalOccupancySensorStateHealthDetailsEnum | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lastSeenSec?: number | null;
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      name?: string | null;
      normalizedLux?: number | null;
      policyUuid?: string | null;
      rawLux?: number | null;
      sensorUuid?: string | null;
      serialNumber?: string | null;
      signalStrength?: number | null;
      status?: MinimalOccupancySensorStateStatusEnum | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
    };
    Occupancysensor_UpdateOccupancySensorDetailsWSRequest: {
      associatedCameras?: (string | null)[] | null;
      associatedCamerasUpdated?: boolean | null;
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      description?: string | null;
      descriptionUpdated?: boolean | null;
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      name?: string | null;
      nameUpdated?: boolean | null;
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      uuid?: string | null;
    };
    Occupancysensor_UpdateOccupancySensorDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    OccupiedActivityEventType:
      | ({
          occupancyThresholdSec?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    Office365Settings: {
      driveId?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      tenantId?: string | null;
    };
    OmnialertType:
      | ({
          associatedCameras?: (string | null)[] | null;
          saveClips?: boolean | null;
          triggerNotification?: boolean | null;
          webhookToken?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    OpenAIModel: {
      created?: string | null;
      id?: string | null;
      object?: string | null;
      ownedBy?: string | null;
      owned_by?: string | null;
    };
    OpenAIType:
      | ({
          apiToken?: string | null;
          /** The base url for any OpenAI Chat Completions compliant API. For example, to use Gemini models, set this to 'https://generativelanguage.googleapis.com/v1beta/openai/'.  If left blank, we will try to use OpenAI models. */
          baseUrl?: string | null;
          /** The model identifier to use as a default model.  This is provider specific and typically found on model card pages. For example, set to 'gemini-2.0-flash' to use the Gemini 2.0 Flash model.  Currently we require a model with vision capabilities for this integration. */
          defaultModel?: string | null;
          refreshToken?: string | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    Openapi_GetOpenApiComponentSchemasWSRequest: {
      changeType?: components["schemas"]["ChangeType"];
      entity?: components["schemas"]["Entity"];
      locationFunctionality?: components["schemas"]["LocationFunctionality"];
    };
    OpenpathSettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorToCameraMap?: { [key: string]: (string | null)[] | null } | null;
      email?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      eventToWebhookIdMap?: { [key: string]: number | null } | null;
      eventToWebhookMap?: {
        [key: string]: components["schemas"]["WebhookMapEntry"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      password?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: number | null;
    };
    OpentechAllianceActionGroupType: {
      actionGroupId?: string | null;
      deviceId?: string | null;
      locationName?: string | null;
      name?: string | null;
    };
    OpentechAllianceDoorInfoType: {
      actionGroupId?: string | null;
      assignedCameraList?: (string | null)[] | null;
      clipDuration?: number | null;
      doorName?: string | null;
      leadingSeconds?: number | null;
      locationUuid?: string | null;
      remoteUnlock?: boolean | null;
    } | null;
    OpentechAllianceFacilitySettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["OpentechAllianceDoorInfoType"];
      } | null;
      identifyFacesFromBadge?: boolean | null;
      saveClips?: boolean | null;
    } | null;
    OpentechAllianceFacilityType: {
      actionGroups?:
        | components["schemas"]["OpentechAllianceActionGroupType"][]
        | null;
      deviceList?: components["schemas"]["DoorType"][] | null;
      id?: string | null;
      name?: string | null;
    };
    OpentechAllianceSettings: {
      apiKey?: string | null;
      apiSecret?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      facilityToSettingsMap?: {
        [
          key: string
        ]: components["schemas"]["OpentechAllianceFacilitySettings"];
      } | null;
      migrated?: boolean | null;
    };
    OpentechAllianceType:
      | ({
          apiKey?: string | null;
          apiSecret?: string | null;
          facilityToSettingsMap?: {
            [
              key: string
            ]: components["schemas"]["OpentechAllianceFacilitySettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    OperationStatus: {
      message?: string | null;
      status?: OperationStatusStatusEnum | null;
    };
    OrgGroupMemberType: {
      createdAtMillis?: number | null;
      groupUuid?: string | null;
      orgUuid?: string | null;
      type?: OrgGroupMemberTypeEnum | null;
      updatedAtMillis?: number | null;
      userUuid?: string | null;
    };
    OrgGroupType: {
      createdAtMillis?: number | null;
      description?: string | null;
      locationUuid?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      type?: OrgGroupTypeEnum | null;
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    OrgIntegrationsType: {
      amtSettings?: components["schemas"]["AmtSettings"];
      awsSettings?: components["schemas"]["AwsSettings"];
      backblazeSettings?: components["schemas"]["BackblazeSettings"];
      boxSettings?: components["schemas"]["BoxSettings"];
      brivoSettings?: components["schemas"]["BrivoSettings"];
      butterflymxSettings?: components["schemas"]["ButterflyMXSettings"];
      diceSettings?: components["schemas"]["DiceSettings"];
      dropboxSettingsV2?: components["schemas"]["DropboxSettingsV2"];
      emailSettings?: components["schemas"]["EmailSettings"];
      envoySettings?: components["schemas"]["EnvoySettings"];
      geneaSettings?: components["schemas"]["GeneaSettings"];
      googleSettings?: components["schemas"]["GoogleSettings"];
      googleSettingsV2?: components["schemas"]["GoogleSettingsV2"];
      haloSettings?: components["schemas"]["HaloSettings"];
      immixSettings?: components["schemas"]["ImmixSettings"];
      intuifaceSettings?: components["schemas"]["IntuifaceSettings"];
      kisiSettings?: components["schemas"]["KisiSettings"];
      lumeoSettings?: components["schemas"]["LumeoSettings"];
      mattermostSettings?: components["schemas"]["MattermostSettings"];
      microsoftTeamsSettings?: components["schemas"]["MicrosoftTeamsSettings"];
      noonlightSettings?: components["schemas"]["NoonlightSettings"];
      office365Settings?: components["schemas"]["Office365Settings"];
      openpathSettings?: components["schemas"]["OpenpathSettings"];
      opentechAllianceSettings?: components["schemas"]["OpentechAllianceSettings"];
      orgUuid?: string | null;
      pagerDutySettings?: components["schemas"]["PagerDutySettings"];
      placeOsSettings?: components["schemas"]["PlaceOsSettings"];
      proDataKeySettings?: components["schemas"]["ProDataKeySettings"];
      saltoSettings?: components["schemas"]["SaltoSettings"];
      serviceNowSettings?: components["schemas"]["ServiceNowSettings"];
      slackSettings?: components["schemas"]["SlackSettings"];
      slackSettingsV2?: components["schemas"]["SlackSettingsV2"];
      squareSettings?: components["schemas"]["SquareSettings"];
      toastSettings?: components["schemas"]["ToastSettings"];
      tpLinkSettings?: components["schemas"]["TPLinkSettings"];
      twilioSettings?: components["schemas"]["TwilioSettings"];
      webhookSettings?: components["schemas"]["WebhookSettings"];
    };
    OrgLicenseStats: {
      acuDoorLicenseStats?: components["schemas"]["LicenseGroupStats"];
      alertMonitoringLicenseStats?: components["schemas"]["LicenseGroupStats"];
      assignedCount?: number | null;
      deviceLicenseStats?: components["schemas"]["DeviceAssignableLicenseGroupStats"];
      /** The closest past date on which licenses belonging to the group expired. */
      lastEndDate?: string | null;
      licenseUsageStats?: components["schemas"]["LicenseUsageStats"];
      /** The number of licenses in the group that are currently close to expiration. */
      nearExpirationCount?: number | null;
      /** The closest future date on which licenses belonging to the group will expire. */
      nextEndDate?: string | null;
      stateStats?: components["schemas"]["LicenseStateStats"];
      /** The number of licenses in the group. */
      totalCount?: number | null;
    };
    OrgLockdownPlanType: {
      activationPlan?: components["schemas"]["LockdownActivationPlanType"];
      createdAtMillis?: number | null;
      deactivationPlan?: components["schemas"]["LockdownDeactivationPlanType"];
      defaultLockdownState?: components["schemas"]["DoorLockdownStateEnumType"];
      doorLockdownStateMap?: {
        [key: string]: components["schemas"]["DoorLockdownStateEnumType"];
      } | null;
      name?: string | null;
      orgUuid?: string | null;
      physicalAccess?: components["schemas"]["LockdownPhysicalAccessType"];
      scopeUuid?: string | null;
      testPlan?: components["schemas"]["LockdownTestPlanType"];
      type?: components["schemas"]["LockdownPlanScopeEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    } | null;
    OrgSamlSettingsType: {
      addUsersOnRoleMismatch?: boolean | null;
      enabled?: boolean | null;
      enabledForRhombusKey?: boolean | null;
      idpMetaDataXml?: string | null;
      justInTimeAccountProvisioningEnabled?: boolean | null;
      orgUuid?: string | null;
      registrationUuid?: string | null;
      rhombusKeyAppSettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      teamName?: string | null;
    };
    OrgType: {
      accountOwnerEmail?: string | null;
      address1?: string | null;
      address2?: string | null;
      countryCode?: string | null;
      createdAtMillis?: number | null;
      firmwareUpdateSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
      itemizedInvoice?: boolean | null;
      mfaEnabled?: boolean | null;
      name?: string | null;
      newCameraFramerateMap?: { [key: string]: number | null } | null;
      newCameraResolutionMap?: { [key: string]: number | null } | null;
      newCameraSegmentMaxBytesMap?: { [key: string]: number | null } | null;
      newCameraVideoTargetQualityMap?: { [key: string]: number | null } | null;
      notificationSettings?: components["schemas"]["NotificationSettingsType"];
      partnerAccessAllowedUntil?: number | null;
      planType?: OrgPlanTypeEnum | null;
      postalCode?: string | null;
      rbacSettings?: components["schemas"]["RBACSettingsType"];
      samlSettings?: components["schemas"]["SAMLSettingsType"];
      subscriptionEndDate?: number | null;
      subscriptionStatus?: OrgSubscriptionStatusEnum | null;
      subscriptionType?: OrgSubscriptionTypeEnum | null;
      supportAccessAllowedUntil?: number | null;
      teamName?: string | null;
      type?: OrgTypeEnum | null;
      uapSettings?: components["schemas"]["UAPSettingsType"];
      uuid?: string | null;
    };
    OrgV2Type: {
      accountBillingContactEmail?: string | null;
      accountOwnerEmail?: string | null;
      accountTechnicalContactEmail?: string | null;
      accountTechnicalContacts?: (string | null)[] | null;
      address1?: string | null;
      address2?: string | null;
      audioAnalysisEnabled?: boolean | null;
      audioRecordingEnabled?: boolean | null;
      bandwidthReportsDisabled?: boolean | null;
      companyLogoUrl?: string | null;
      companyLogoUuid?: string | null;
      countryCode?: string | null;
      createdAtMillis?: number | null;
      criticalStatusEnabled?: boolean | null;
      defaultPlayerViewLiveType?: components["schemas"]["PlayerViewLiveTypeEnum"];
      deleted?: boolean | null;
      deletedAtMillis?: number | null;
      developmentPartnerOrg?: boolean | null;
      firmwareUpdateSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
      /** Overrides default firmware update settings. */
      firmwareUpdateSettingsOverrides?:
        | components["schemas"]["FirmwareUpdateSettingsOverrideType"][]
        | null;
      inactivityTimeout?: number | null;
      itemizedInvoice?: boolean | null;
      keypadLogoUrl?: string | null;
      keypadLogoUuid?: string | null;
      maxAllowedSegmentMaxBytesMap?: { [key: string]: number | null } | null;
      mfaEnabled?: boolean | null;
      motionGridDisabled?: boolean | null;
      motionLightweightDisabled?: boolean | null;
      name?: string | null;
      newCameraFramerateMap?: { [key: string]: number | null } | null;
      newCameraResolutionMap?: { [key: string]: number | null } | null;
      newCameraSegmentMaxBytesMap?: { [key: string]: number | null } | null;
      newCameraVideoTargetQualityMap?: { [key: string]: number | null } | null;
      newCameraZeroMotionVideoQualityMap?: {
        [key: string]: number | null;
      } | null;
      notifyForHardwareFailureTickets?: boolean | null;
      partnerAccessAllowedUntil?: number | null;
      postalCode?: string | null;
      rhombusKeyLogoUrl?: string | null;
      rhombusKeyLogoUuid?: string | null;
      salesforceAccountId?: string | null;
      shareAiTrainingMediaWithRhombus?: boolean | null;
      subscriptionEndDate?: number | null;
      subscriptionStatus?: OrgV2SubscriptionStatusEnum | null;
      subscriptionType?: OrgV2SubscriptionTypeEnum | null;
      supportAccessAllowedUntil?: number | null;
      tenantUrl?: string | null;
      thumbstripDisabled?: boolean | null;
      type?: OrgV2TypeEnum | null;
      uapSettings?: components["schemas"]["UAPSettingsType"];
      uuid?: string | null;
      v3AuthNumDaysSkip2FAForTrustedDevices?: number | null;
    } | null;
    Org_ClaimActivationTokenWSRequest: {
      activationToken?: string | null;
      name?: string | null;
      permissionGroupUuid?: string | null;
    };
    Org_ClaimActivationTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_ClaimShipmentRegistrationTokenWSRequest: {
      claimList?:
        | components["schemas"]["Org_DeviceRegistrationClaimType"][]
        | null;
      tokenUuid?: string | null;
    };
    Org_ClaimShipmentRegistrationTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_CreatePendingRegistrationRequest: {
      locationUuid?: string | null;
      orgUuid?: string | null;
      serialNumber?: string | null;
      wifiPsk?: (string | null)[] | null;
      wifiSsid?: string | null;
    };
    Org_CreatePendingRegistrationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_DeleteCloudArchivingConfigWSRequest: {
      scope?: components["schemas"]["DeviceTargetScope"];
      targetUuid?: string | null;
    };
    Org_DeleteCloudArchivingConfigWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_DeleteKeypadLogoWSRequest: { [key: string]: unknown };
    Org_DeleteKeypadLogoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_DeleteRhombusKeyLogoWSRequest: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_DeleteRhombusKeyLogoWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_DeviceRegistrationClaimType: {
      deviceName?: string | null;
      hardwareUuid?: string | null;
      locationUuid?: string | null;
      policyUuid?: string | null;
    };
    Org_FindAllHardwareWithPendingRegistrationRequest: {
      [key: string]: unknown;
    };
    Org_FindAllHardwareWithPendingRegistrationResponse: {
      /** Use hardwareWithPendingRegistrationInfoList instead */
      hardwareList?: components["schemas"]["HardwareType"][] | null;
      hardwareWithPendingRegistrationInfoList?:
        | components["schemas"]["Org_HardwareWithPendingRegistrationInfoType"][]
        | null;
    };
    Org_FindHardwareAvailableForPendingRegistrationRequest: {
      [key: string]: unknown;
    };
    Org_FindHardwareAvailableForPendingRegistrationResponse: {
      hardwareList?: components["schemas"]["HardwareType"][] | null;
    };
    Org_FindIfTeamNameAvailableRequest: {
      teamName?: string | null;
    };
    Org_FindIfTeamNameAvailableResponse: {
      available?: boolean | null;
    };
    Org_FindSCIMSettingsForOrgWSRequest: { [key: string]: unknown };
    Org_FindSCIMSettingsForOrgWSResponse: {
      scimSettings?: components["schemas"]["SCIMSettingsType"];
    };
    Org_GenerateFederatedSessionTokenRequest: {
      durationSec?: number | null;
    };
    Org_GenerateFederatedSessionTokenResponse: {
      federatedSessionToken?: string | null;
    };
    Org_GetAwsIntCloudformationFileRequest: { [key: string]: unknown };
    Org_GetAwsIntCloudformationFileResponse: {
      fileBase64?: string | null;
    };
    Org_GetClientOrgWSRequest: {
      orgUuid?: string | null;
    };
    Org_GetClientOrgWSResponse: {
      featureFlags?: { [key: string]: string | null } | null;
      org?: components["schemas"]["OrgV2Type"];
      partnerOrgPermissionGroup?: components["schemas"]["UserPermissionGroupType"];
    };
    Org_GetCloudArchivingConfigsWSRequest: { [key: string]: unknown };
    Org_GetCloudArchivingConfigsWSResponse: {
      archivingConfigs?:
        | components["schemas"]["ScopedCloudArchivingConfig"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_GetDeviceFlagsWSRequest: {
      deviceUuid?: string | null;
    };
    Org_GetDeviceFlagsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      flags?: { [key: string]: string | null } | null;
    };
    Org_GetFeaturesWSRequest: { [key: string]: unknown };
    Org_GetFeaturesWSResponse: {
      behaviorDetection?: boolean | null;
      cloudArchiving?: boolean | null;
      engagementCounting?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      faceCounting?: boolean | null;
      faceCountingNonUnique?: boolean | null;
      faceRecognition?: boolean | null;
      licensePlateRecognition?: boolean | null;
      peopleCounting?: boolean | null;
      ppeDetection?: boolean | null;
      rulesEngine?: boolean | null;
      vehicleCounting?: boolean | null;
    };
    Org_GetLocationFlagsWSRequest: { [key: string]: unknown };
    Org_GetLocationFlagsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      flagsMap?: {
        [key: string]: { [key: string]: string | null } | null;
      } | null;
    };
    Org_GetOrgIntegrationsWSRequest: { [key: string]: unknown };
    Org_GetOrgIntegrationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      orgIntegrations?: components["schemas"]["OrgIntegrationsType"];
    };
    Org_GetOrgNotificationTemplateV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      notificationSettings?: components["schemas"]["UserNotificationSettingsV4Type"];
    };
    Org_GetOrgNotificationTemplateWSRequest: { [key: string]: unknown };
    Org_GetOrgNotificationTemplateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      notificationSettings?: components["schemas"]["UserNotificationSettingsV3Type"];
    };
    Org_GetOrgV2WSRequest: { [key: string]: unknown };
    Org_GetOrgV2WSResponse: {
      cameraConfigDefaults?: {
        [
          key: string
        ]: components["schemas"]["Deviceconfig_settings_VideoConfigurationDefault"];
      } | null;
      cameraConfigOptions?: {
        [key: string]:
          | components["schemas"]["Deviceconfig_settings_VideoConfigurationOption"][]
          | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      featureFlags?: { [key: string]: string | null } | null;
      org?: components["schemas"]["OrgV2Type"];
    };
    Org_GetOrgWSRequest: { [key: string]: unknown };
    Org_GetOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      featureFlags?: { [key: string]: string | null } | null;
      org?: components["schemas"]["OrgType"];
    };
    Org_GetSAMLSettingsV2WSRequest: { [key: string]: unknown };
    Org_GetSAMLSettingsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      samlSettings?: components["schemas"]["OrgSamlSettingsType"][] | null;
    };
    Org_GetSAMLSettingsWSRequest: { [key: string]: unknown };
    Org_GetSAMLSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      samlSettings?: components["schemas"]["OrgSamlSettingsType"];
    };
    Org_GetScimDisplayInfoResponse: {
      azureScimEndpointUrl?: string | null;
      scimEndpointUrl?: string | null;
    };
    Org_GetTemporaryOrgTokenWSRequest: { [key: string]: unknown };
    Org_HardwareWithPendingRegistrationInfoType: {
      hardware?: components["schemas"]["HardwareType"];
      hwUuid?: string | null;
      pendingRegistrationInfo?: components["schemas"]["Org_PendingRegistrationInfoType"];
    };
    Org_PeekShipmentRegistrationTokenWSRequest: {
      tokenUuid?: string | null;
    };
    Org_PeekShipmentRegistrationTokenWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      hardwareUuidList?: (string | null)[] | null;
    };
    Org_PendingRegistrationInfoType: {
      locationUuid?: string | null;
      name?: string | null;
      policyUuid?: string | null;
    };
    Org_RemovePendingRegistrationRequest: {
      serialNumber?: string | null;
    };
    Org_RemovePendingRegistrationResponse: { [key: string]: unknown };
    Org_RevokeSCIMAccessForOrgWSRequest: { [key: string]: unknown };
    Org_RevokeSCIMAccessForOrgWSResponse: { [key: string]: unknown };
    Org_SetFlagWSRequest: {
      flagName?: string | null;
      flagValue?: string | null;
    };
    Org_SetFlagWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_SetupSCIMAccessForOrgWSRequest: {
      addUsersOnRoleMismatch?: boolean | null;
      rhombusKeyAppSettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      sendWelcomeEmailToNewRhombusKeyUsers?: boolean | null;
      sendWelcomeEmailToNewUsers?: boolean | null;
    };
    Org_SetupSCIMAccessForOrgWSResponse: {
      scimAccessAlreadySetupFailure?: boolean | null;
      token?: string | null;
    };
    Org_UpdateAiTrainingSettingsWSRequest: {
      shareAiTrainingMediaWithRhombus?: boolean | null;
    };
    Org_UpdateAiTrainingSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateCloudArchivingConfigWSRequest: {
      archivingConfig?: components["schemas"]["ScopedCloudArchivingConfig"];
    };
    Org_UpdateCloudArchivingConfigWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateFirmwareSettingsWSRequest: {
      firmwareSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
      firmwareUpdateSettings?: components["schemas"]["FirmwareUpdateSettingsType"];
      /** Overrides default firmware update settings. */
      firmwareUpdateSettingsOverrides?:
        | components["schemas"]["FirmwareUpdateSettingsOverrideType"][]
        | null;
    };
    Org_UpdateFirmwareSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateGeneralSettingsWSRequest: {
      accountBillingContactEmail?: string | null;
      accountOwnerEmail?: string | null;
      accountTechnicalContactEmail?: string | null;
      accountTechnicalContacts?: (string | null)[] | null;
      defaultPlayerViewLiveType?: components["schemas"]["PlayerViewLiveTypeEnum"];
      inactivityTimeout?: number | null;
      name?: string | null;
      uapSettings?: components["schemas"]["UAPSettingsType"];
    };
    Org_UpdateGeneralSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateMFASettingsWSRequest: {
      mfaEnabled?: boolean | null;
      v3AuthNumDaysSkip2FAForTrustedDevices?: number | null;
    };
    Org_UpdateMFASettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      org?: components["schemas"]["OrgV2Type"];
    };
    Org_UpdateOrgAudioAnalysisPolicyWSRequest: {
      audioAnalysisEnabled?: boolean | null;
    };
    Org_UpdateOrgAudioAnalysisPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateOrgAudioRecordingPolicyWSRequest: {
      audioRecordingEnabled?: boolean | null;
    };
    Org_UpdateOrgAudioRecordingPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateOrgIntegrationsWSRequest: {
      orgIntegrations?: components["schemas"]["OrgIntegrationsType"];
    };
    Org_UpdateOrgIntegrationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateOrgNotificationTemplateV2WSRequest: {
      summaryEmailEnabled?: boolean | null;
      templateUpdate?: components["schemas"]["UserNotificationSelectiveUpdateV2"];
    };
    Org_UpdateOrgNotificationTemplateV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateOrgNotificationTemplateWSRequest: {
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      summaryEmailEnabled?: boolean | null;
    };
    Org_UpdateOrgNotificationTemplateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateOrgWSRequest: {
      org?: components["schemas"]["OrgType"];
    };
    Org_UpdateOrgWSResponse: {
      samlEntityIdUniquenessConstraintFailure?: boolean | null;
      teamNameNotAssignedFailure?: boolean | null;
      teamNameUniquenessConstraintFailure?: boolean | null;
    };
    Org_UpdatePendingRegistrationRequest: {
      hardwareUuid?: string | null;
      locationUuid?: string | null;
      name?: string | null;
      policyUuid?: string | null;
    };
    Org_UpdatePendingRegistrationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateSAMLSettingsV2WSRequest: {
      samlSettings?: components["schemas"]["OrgSamlSettingsType"][] | null;
    };
    Org_UpdateSAMLSettingsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateSAMLSettingsWSRequest: {
      samlSettings?: components["schemas"]["OrgSamlSettingsType"];
    };
    Org_UpdateSAMLSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Org_UpdateSCIMSettingsForOrgWSRequest: {
      addUsersOnRoleMismatch?: boolean | null;
      rhombusKeyAppSettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      sendWelcomeEmailToNewRhombusKeyUsers?: boolean | null;
      sendWelcomeEmailToNewUsers?: boolean | null;
    };
    Org_UpdateSCIMSettingsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    OsdpDoorReaderType: {
      allowUnencrypted?: boolean | null;
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      name?: string | null;
      orgUuid?: string | null;
      osdpAddress?: number | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["OsdpReaderPortType"];
      portImmutable?: boolean | null;
      readerType?: components["schemas"]["DoorReaderEnumType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    OsdpPhysicalPortEnumType: OsdpPhysicalPortEnumType;
    OsdpReaderPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["OsdpPhysicalPortEnumType"];
    };
    OutgoingShipmentInfoType: {
      buyer?: components["schemas"]["Buyer"];
      consignee?: components["schemas"]["Consignee"];
      depositorOrderNumber?: string | null;
      freight?: components["schemas"]["Freight"];
      interchangeControlNumber?: string | null;
      product?: components["schemas"]["Product"][] | null;
      purchaseOrderNumber?: string | null;
      shipment?: components["schemas"]["Shipment"];
      shipper?: components["schemas"]["Shipper"];
    };
    PagerDutySettings: {
      allLocationIntegrationKeys?: (string | null)[] | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      integrationKey?: string | null;
      locationToIntegrationKeysMap?: {
        [key: string]: (string | null)[] | null;
      } | null;
    };
    PaginateRequest: {
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
    };
    PanelType: {
      id?: string | null;
      name?: string | null;
    };
    PanicButtonEventType:
      | ({
          componentCompositeUuid?: string | null;
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    ParameterizedHeader: {
      parameters?: { [key: string]: string | null } | null;
      value?: string | null;
    } | null;
    PartnerFunctionality: PartnerFunctionalityEnum;
    PartnerNotificationClientSection: {
      clientUuids?: (string | null)[] | null;
      rows?:
        | components["schemas"]["PartnerNotificationClientSectionRow"][]
        | null;
    };
    PartnerNotificationClientSectionRow: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      days?: (PartnerNotificationClientSectionRowDaysEnum | null)[] | null;
      diagnostics?: (PartnerNotificationClientSectionRowDiagnosticsEnum | null)[] | null;
      interval?: components["schemas"]["MinuteOfDayIntervalType"];
      mediums?: components["schemas"]["NotificationEnumType"][] | null;
    };
    PartnerNotificationSettingsType: {
      allClientsSelected?: boolean | null;
      clientNotificationIntervalsMap?: {
        [key: string]:
          | components["schemas"]["NotificationIntervalV2Type"][]
          | null;
      } | null;
      notificationIntervalsForAllClients?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      userUuid?: string | null;
    };
    PartnerNotificationSettingsV2: {
      allClientsSelected?: boolean | null;
      clientNotificationIntervalsMap?: {
        [key: string]:
          | components["schemas"]["PartnerNotificationClientSection"][]
          | null;
      } | null;
      notificationIntervalsForAllClients?:
        | components["schemas"]["PartnerNotificationClientSection"][]
        | null;
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      userUuid?: string | null;
    };
    PartnerPermission: PartnerPermissionEnum;
    PartnerPermissionType: {
      groupUuid?: string | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    PartnerUserPermissionGroupType: {
      assignablePermissionGroups?: (string | null)[] | null;
      clientAssignablePermissionGroupsMap?: {
        [key: string]: (string | null)[] | null;
      } | null;
      clientFunctionalityList?: components["schemas"]["Functionality"][] | null;
      clientPermissionMap?: {
        [key: string]: components["schemas"]["PartnerPermission"];
      } | null;
      description?: string | null;
      functionalityList?:
        | components["schemas"]["PartnerFunctionality"][]
        | null;
      mutable?: boolean | null;
      name?: string | null;
      orgUuid?: string | null;
      superAdmin?: boolean | null;
      uuid?: string | null;
    };
    Partner_ClientCustomizationsType: {
      forceLowBandwidthOnAllCameras?: boolean | null;
      inactivityTimeout?: number | null;
    };
    Partner_ClientDeviceCustomizationsType: {
      forceLowBandwidthOnAllCameras?: boolean | null;
      inactivityTimeout?: number | null;
    };
    Partner_ConnectionCountType: {
      connectedCount?: number | null;
      operationalCount?: number | null;
      totalCount?: number | null;
    };
    Partner_CreatePartnerClientWSRequest: {
      clientContactEmail?: string | null;
      clientContactName?: string | null;
      clientOrgName?: string | null;
      suppressWelcomeEmail?: boolean | null;
    };
    Partner_CreatePartnerClientWSResponse: {
      clientOrgUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: CreatePartnerClientWSResponseResponseStatusEnum | null;
    };
    Partner_CustomizeClientDeviceWSRequest: {
      clientDeviceUuid?: string | null;
      clientOrgUuid?: string | null;
      configUpdate?: components["schemas"]["Deviceconfig_userconfig_IExternalUpdateableAudioVideoUserConfig"];
      customizations?: components["schemas"]["Partner_ClientDeviceCustomizationsType"];
    };
    Partner_CustomizeClientDeviceWSResponse: {
      customizations?: components["schemas"]["Partner_ClientCustomizationsType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Partner_CustomizeClientWSRequest: {
      clientOrgUuid?: string | null;
      customizations?: components["schemas"]["Partner_ClientCustomizationsType"];
    };
    Partner_CustomizeClientWSResponse: {
      customizations?: components["schemas"]["Partner_ClientCustomizationsType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Partner_DeleteClientWebRequest: {
      clientOrgUuid?: string | null;
    };
    Partner_DeleteClientWebResponse: { [key: string]: unknown };
    Partner_DeviceWithPartnerDetailsType: {
      device?: components["schemas"]["DeviceTypeV2"];
      partnerControlledHardware?: boolean | null;
      reassignable?: boolean | null;
    };
    Partner_GetClientDevicesWSRequest: {
      orgUuid?: string | null;
    };
    Partner_GetClientDevicesWSResponse: {
      devices?:
        | components["schemas"]["Partner_DeviceWithPartnerDetailsType"][]
        | null;
    };
    Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSBaseResponse: {
      type: string;
    };
    Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSFailureResponse:
      | ({
          failureReason?: string | null;
        } & {
          type?: string;
        })
      | null;
    Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSRequest: {
      token?: string | null;
    };
    Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSSuccessResponse:
      | ({
          orgs?: components["schemas"]["OrgV2Type"][] | null;
        } & {
          type?: string;
        })
      | null;
    Partner_GetClientSummaryInfoWSRequest: {
      clientOrgUuid?: string | null;
    };
    Partner_GetClientSummaryInfoWSResponse: {
      accountOwner?: components["schemas"]["WrappedRhombusOrgUserType"];
      clientDeviceStatusMap?: {
        [key: string]: components["schemas"]["Partner_ConnectionCountType"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      licenseV2Enabled?: boolean | null;
      locationCount?: number | null;
      manuallySendLicenseExpirationEmailEnabled?: boolean | null;
      recentPolicyAlertCount?: number | null;
    };
    Partner_GetListOfAllClientDevicesRequest: { [key: string]: unknown };
    Partner_GetListOfAllClientDevicesResponse: {
      listOfAllClientDevices?: components["schemas"]["DeviceTypeV2"][] | null;
    };
    Partner_GetListOfControlledHardwareRequest: { [key: string]: unknown };
    Partner_GetListOfControlledHardwareResponse: {
      controlledHardwareList?:
        | components["schemas"]["Partner_UnregisteredControlledHardwareType"][]
        | null;
    };
    Partner_GetPartnerClientMobileAccountAccessRequest: {
      authorityUuid?: string | null;
      clientOrgUuid?: string | null;
    };
    Partner_GetPartnerClientMobileAccountAccessResponse: {
      clientAccountAccessSessionId?: string | null;
    };
    Partner_GetPartnerClientsStatusMapWSRequest: { [key: string]: unknown };
    Partner_GetPartnerClientsStatusMapWSResponse: {
      clientDeviceStatusMap?: {
        [key: string]: {
          [key: string]: components["schemas"]["Partner_ConnectionCountType"];
        } | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Partner_GetPartnerClientsWSRequest: { [key: string]: unknown };
    Partner_GetPartnerClientsWSResponse: {
      clients?: components["schemas"]["Partner_PartnerClientWebType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Partner_GetPartnerUsersInOrgWSRequest: { [key: string]: unknown };
    Partner_GetPartnerUsersInOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      notificationSettings?:
        | components["schemas"]["PartnerNotificationSettingsType"][]
        | null;
      notificationSettingsV2?:
        | components["schemas"]["PartnerNotificationSettingsV2"][]
        | null;
      partnerPermissions?:
        | components["schemas"]["PartnerPermissionType"][]
        | null;
      partnerUsers?:
        | components["schemas"]["WrappedRhombusOrgUserType"][]
        | null;
    };
    Partner_GetShipmentsWSRequest: {
      clientOrgUuid?: string | null;
      endTimeSec?: number | null;
      startTimeSec?: number | null;
    };
    Partner_GetShipmentsWSResponse: {
      customerShipmentList?:
        | components["schemas"]["CustomerShipmentType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Partner_GrantSupportAccessToClientWSRequest: {
      clientOrgUuid?: string | null;
    };
    Partner_GrantSupportAccessToClientWSResponse: {
      errMessage?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Partner_PartnerClientWebType: {
      authorityUuid?: string | null;
      clientAccessAllowed?: boolean | null;
      clientAccountAccessUrl?: string | null;
      clientOrgName?: string | null;
      clientOrgUuid?: string | null;
      createdAtMillis?: number | null;
      totalAudioGateways?: number | null;
      totalBadgeReaders?: number | null;
      totalCameras?: number | null;
      totalClimateSensors?: number | null;
      totalDoorSensors?: number | null;
      totalLocations?: number | null;
      totalOccupancySensors?: number | null;
      totalProximitySensors?: number | null;
    };
    Partner_ReassignDeviceOrgWSRequest: {
      /** Serial numbers of the devices that should be reassigned to target organization. List must contain at least one entry. */
      serialNumbers?: (string | null)[] | null;
      /** Uuid of the organization devices should be reassigned from. */
      sourceOrgUuid: string | null;
      /** Uuid of the organization devices should be reassigned to. */
      targetOrgUuid: string | null;
    };
    Partner_ReassignDeviceOrgWSResponse: {
      statuses?: {
        [key: string]: components["schemas"]["OperationStatus"];
      } | null;
    };
    Partner_RegisterDealWSRequest: {
      details?: { [key: string]: string | null } | null;
    };
    Partner_RegisterDealWSResponse: {
      clients?: components["schemas"]["Partner_PartnerClientWebType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Partner_RequestAccessToClientAccountRequest: {
      clientEmail?: string | null;
    };
    Partner_RequestAccessToClientAccountResponse: {
      success?: boolean | null;
    };
    Partner_RequestAccessToClientAccountV2Request: {
      clientEmail?: string | null;
    };
    Partner_RequestAccessToClientAccountV2Response: {
      success?: boolean | null;
    };
    Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSBaseResponse: {
      type: string;
    };
    Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSFailureResponse:
      | ({
          failureReason?: string | null;
        } & {
          type?: string;
        })
      | null;
    Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSRequest: {
      accessGrantedByClient?: boolean | null;
      orgUuid?: string | null;
      token?: string | null;
    };
    Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSSuccessResponse: {
      type?: string;
    } | null;
    Partner_UnregisteredControlledHardwareType: {
      deviceModel?: components["schemas"]["HardwareVariationEnum"];
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      macAddress?: string | null;
      serialNumber?: string | null;
    };
    Partner_UpdateManuallySendLicenseExpirationEmailWSRequest: {
      manuallySendLicenseExpirationEmail?: boolean | null;
      orgUuid?: string | null;
    };
    Partner_UpdateManuallySendLicenseExpirationEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Password_ForgotPasswordWSRequest: {
      email?: string | null;
      googleCaptchaSource?: components["schemas"]["GoogleCaptchaSourceEnum"];
      googlesCaptchaResponse?: string | null;
    };
    Password_ForgotPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failureReason?: string | null;
      success?: boolean | null;
    };
    Password_ResetPasswordWSRequest: {
      password?: string | null;
      token?: string | null;
    };
    Password_ResetPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failureReason?: string | null;
      failureReasonType?: ResetPasswordWSResponseFailureReasonTypeEnum | null;
      success?: boolean | null;
    };
    Password_UserSignupWSRequest: {
      eulaAccepted?: boolean | null;
      password?: string | null;
      token?: string | null;
    };
    Password_UserSignupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      failureReason?: string | null;
      success?: boolean | null;
    };
    PeopleCountEventType: {
      boundingBoxes?: components["schemas"]["BoundingBoxType"][] | null;
      deviceLabels?: (string | null)[] | null;
      deviceUuid?: string | null;
      eventTimestamp?: number | null;
      imageS3Key?: string | null;
      locationLabels?: (string | null)[] | null;
      locationUuid?: string | null;
      orgUuid?: string | null;
      peopleCount?: number | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      uuid?: string | null;
    };
    PerceptionType: PerceptionTypeEnum;
    Permission: PermissionEnum;
    Permission_AssignUserPermissionWSRequest: {
      userPermission?: components["schemas"]["UserPermissionType"];
    };
    Permission_AssignUserPermissionWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Permission_CreatePartnerPermissionGroupWSRequest: {
      partnerPermissionGroup?: components["schemas"]["PartnerUserPermissionGroupType"];
    };
    Permission_CreatePartnerPermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      uuid?: string | null;
    };
    Permission_CreatePermissionGroupWSRequest: {
      userPermissionGroup?: components["schemas"]["UserPermissionGroupType"];
    };
    Permission_CreatePermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      uuid?: string | null;
    };
    Permission_DeletePartnerPermissionGroupWSRequest: {
      groupUuid?: string | null;
    };
    Permission_DeletePartnerPermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Permission_DeletePermissionGroupWSRequest: {
      groupUuid?: string | null;
    };
    Permission_DeletePermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Permission_GetPartnerPermissionGroupWSResponse: {
      clientPermissionGroupMap?: {
        [key: string]: components["schemas"]["UserPermissionGroupType"];
      } | null;
      clientPermissionsGroupMap?: {
        [key: string]: components["schemas"]["UserPermissionGroupType"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      groupMembership?: { [key: string]: (string | null)[] | null } | null;
      permissionGroups?:
        | components["schemas"]["PartnerUserPermissionGroupType"][]
        | null;
    };
    Permission_GetPartnerPermissionGroupsWSRequest: { [key: string]: unknown };
    Permission_GetPermissionGroupsForOrgWSRequest: {
      orgUuid?: string | null;
    };
    Permission_GetPermissionGroupsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      permissionGroups?:
        | components["schemas"]["UserPermissionGroupType"][]
        | null;
    };
    Permission_GetPermissionGroupsWSRequest: { [key: string]: unknown };
    Permission_GetPermissionGroupsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      groupMembership?: { [key: string]: (string | null)[] | null } | null;
      partnerMembership?: { [key: string]: (string | null)[] | null } | null;
      permissionGroups?:
        | components["schemas"]["UserPermissionGroupType"][]
        | null;
    };
    Permission_GetPermissionsForCurrentPartnerWSRequest: {
      [key: string]: unknown;
    };
    Permission_GetPermissionsForCurrentPartnerWSResponse: {
      assignablePermissionGroups?: (string | null)[] | null;
      clientFunctionalityList?: components["schemas"]["Functionality"][] | null;
      clientPermissionMap?: {
        [key: string]: components["schemas"]["PartnerPermission"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      functionalityList?:
        | components["schemas"]["PartnerFunctionality"][]
        | null;
      permissionGroupName?: string | null;
      superAdmin?: boolean | null;
    };
    Permission_GetPermissionsForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    Permission_GetPermissionsForCurrentUserWSResponse: {
      accessControlLocationAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      accessMap?: { [key: string]: components["schemas"]["Permission"] } | null;
      assignablePermissionGroups?: (string | null)[] | null;
      deviceAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      functionalityList?: components["schemas"]["Functionality"][] | null;
      installer?: boolean | null;
      locationAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      locationGranularAccessMap?: {
        [key: string]: {
          [key: string]: components["schemas"]["Permission"];
        } | null;
      } | null;
      permissionGroupName?: string | null;
      superAdmin?: boolean | null;
    };
    Permission_UpdatePartnerPermissionGroupWSRequest: {
      partnerPermissionGroup?: components["schemas"]["PartnerUserPermissionGroupType"];
    };
    Permission_UpdatePartnerPermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Permission_UpdatePermissionGroupWSRequest: {
      userPermissionGroup?: components["schemas"]["UserPermissionGroupType"];
    };
    Permission_UpdatePermissionGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    PermyriadRect: {
      h?: number | null;
      size?: number | null;
      w?: number | null;
      x?: number | null;
      y?: number | null;
    };
    Person: {
      createdOn?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      updatedOn?: string | null;
      uuid?: string | null;
    };
    PersonSelectiveUpdate: {
      createdOn?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      updatedOn?: string | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      uuid?: string | null;
    };
    PhysicalPortEnumType: PhysicalPortEnumType;
    PhysicalPortType: {
      boardNum?: number | null;
      componentPortTypeUsageMap?: {
        [key: string]: (string | null)[] | null;
      } | null;
      label?: string | null;
      portNum?: number | null;
      supportedPortTypes?:
        | components["schemas"]["PhysicalPortEnumType"][]
        | null;
    };
    PimlocType:
      | ({
          baseAPIUrl?: PimlocBaseAPIUrlEnum | null;
          clientId?: string | null;
          clientSecret?: string | null;
          rhombusToken?: string | null;
          validCredentials?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    PinCredential: {
      createdAtMillis?: number | null;
      endDateEpochSecExclusive?: number | null;
      lastUsedAccessControlledDoorUuid?: string | null;
      lastUsedAtMillis?: number | null;
      lastUsedLocationUuid?: string | null;
      lowercaseHexValue?: string | null;
      managedCredUuid?: string | null;
      note?: string | null;
      orgUuid?: string | null;
      startDateEpochSecInclusive?: number | null;
      type?: components["schemas"]["AccessControlCredentialEnumType"];
      updatedAtMillis?: number | null;
      userUuid?: string | null;
      uuid?: string | null;
      value?: string | null;
      workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
    } | null;
    /** Applies a filter on PINs retrieved. If a filter is not provided or if filter fields are left empty, no filtering will be applied. If used with pageRequest, the paginated result will be retrieved first then the filter will be applied. */
    PinQueryFilter: {
      statusFilter?: components["schemas"]["PinStatus"][] | null;
    };
    PinStatus: PinStatusEnum;
    PlaceOsSettings: {
      alertUnauthorizedFaces?: boolean | null;
      apiUrl?: string | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      migrated?: boolean | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookSignatureSecret?: string | null;
    };
    PlaceOsType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          apiUrl?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          refreshToken?: string | null;
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          tokenValid?: boolean | null;
          triggerNotification?: boolean | null;
          webhookSignatureSecret?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    PlaceType: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      id?: number | null;
      identifyFacesFromBadge?: boolean | null;
      name?: string | null;
      saveClips?: boolean | null;
    };
    PlayerViewLiveTypeEnum: PlayerViewLiveTypeEnum;
    PmSensorType: {
      nc0p5?: number | null;
      nc10p0?: number | null;
      nc1p0?: number | null;
      nc2p5?: number | null;
      nc4p0?: number | null;
      noxIdx?: number | null;
      pm10p0?: number | null;
      pm1p0?: number | null;
      pm2p5?: number | null;
      pm4p0?: number | null;
      relHumid?: number | null;
      tempC?: number | null;
      timestampSec?: number | null;
      typPartSize?: number | null;
      vocIdx?: number | null;
    };
    PointType: {
      x?: number | null;
      y?: number | null;
    };
    PolicyAlertV2Type: {
      airQualityIndex?: number | null;
      airQualityIndexThreshold?: number | null;
      alertMonitoringThreatCaseUuid?: string | null;
      alertMonitoringVerified?: boolean | null;
      alertingEventFaces?:
        | components["schemas"]["PolicyEventFaceType"][]
        | null;
      alertingEventVehicles?:
        | components["schemas"]["PolicyEventVehicleType"][]
        | null;
      /** Custom activity display description, maximum 100 characters */
      cd?: string | null;
      /** Custom activity display name, maximum 32 characters */
      cdn?: string | null;
      ch2oPpb?: number | null;
      ch2oPpbThreshold?: number | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      clipLocationMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      clipLocationMapV2?: { [key: string]: string | null } | null;
      co2?: number | null;
      co2Ppm?: number | null;
      co2PpmThreshold?: number | null;
      co2Threshold?: number | null;
      coConcentration?: number | null;
      coConcentrationThreshold?: number | null;
      componentUuid?: string | null;
      delayedProcessing?: boolean | null;
      deleted?: boolean | null;
      deviceType?: components["schemas"]["DeviceTypeEnum"];
      deviceUuid?: string | null;
      durationSec?: number | null;
      egressBoundaryDevices?: (string | null)[] | null;
      ethanol?: number | null;
      ethanolThreshold?: number | null;
      finalized?: boolean | null;
      heatIndexDegF?: number | null;
      heatIndexDegFThreshold?: number | null;
      humidityPercent1616?: number | null;
      humidityPercentThreshold1616?: number | null;
      humidityPermyriad?: number | null;
      humidityThresholdPermyriad?: number | null;
      iaq?: number | null;
      iaqThreshold?: number | null;
      ingressBoundaryDevices?: (string | null)[] | null;
      leakDetected?: boolean | null;
      locationUuid?: string | null;
      maxLuf?: number | null;
      notificationSent?: boolean | null;
      noxIdx?: number | null;
      noxIdxThreshold?: number | null;
      numHumans?: number | null;
      orgUuid?: string | null;
      peopleCountHighThreshold?: number | null;
      peopleCountLowThreshold?: number | null;
      pm10p0?: number | null;
      pm10p0Threshold?: number | null;
      pm1p0?: number | null;
      pm1p0Threshold?: number | null;
      pm25?: number | null;
      pm25Threshold?: number | null;
      pm4p0?: number | null;
      pm4p0Threshold?: number | null;
      policyAlertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      pressure?: number | null;
      pressureThreshold?: number | null;
      probeTempC?: number | null;
      probeTempCThreshold?: number | null;
      probeTempThreshold?: number | null;
      relHumid?: number | null;
      relHumidThreshold?: number | null;
      saved?: boolean | null;
      shared?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tamperByMovementChange?: number | null;
      tampered?: boolean | null;
      tempC?: number | null;
      tempCThreshold?: number | null;
      tempProbePresent?: boolean | null;
      temperatureCelsius1616?: number | null;
      temperatureCelsiusThreshold1616?: number | null;
      temperaturePermyriad?: number | null;
      temperatureThresholdPermyriad?: number | null;
      /** Natural language description of the alert */
      textDescription?: string | null;
      thcPercent?: number | null;
      thcPercentThreshold?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      thumbnailLocationV2?: string | null;
      timestampMs?: number | null;
      tvoc?: number | null;
      tvocThreshold?: number | null;
      type?: PolicyAlertV2TypeEnum | null;
      uuid?: string | null;
      vapeDetected?: boolean | null;
      vapeSmokePercent?: number | null;
      vapeSmokePercentThreshold?: number | null;
      vocIdx?: number | null;
      vocIdxThreshold?: number | null;
    };
    PolicyAlertWithDetailsType: (
      | components["schemas"]["PolicyAlertV2Type"]
      | components["schemas"]["AccessControlledDoorPolicyAlertType"]
    ) & {
      alertMonitoringThreatCaseUuid?: string | null;
      alertMonitoringVerified?: boolean | null;
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      boundingBoxesMap?: {
        [key: string]: components["schemas"]["ClipBoundingBoxType"][] | null;
      } | null;
      clientType?: components["schemas"]["ApiClientTypeEnum"];
      clipLocationMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      clipLocationMapV2?: { [key: string]: string | null } | null;
      componentCompositeSeekPointsMap?: {
        [key: string]: components["schemas"]["ClipSeekPointV2Type"][] | null;
      } | null;
      delayedProcessing?: boolean | null;
      deleted?: boolean | null;
      durationSec?: number | null;
      finalized?: boolean | null;
      locationUuid?: string | null;
      notificationSent?: boolean | null;
      orgUuid?: string | null;
      policyAlertTriggers?: components["schemas"]["ActivityEnum"][] | null;
      recognizedEventFaces?:
        | components["schemas"]["PolicyEventFaceType"][]
        | null;
      recognizedEventVehicles?:
        | components["schemas"]["PolicyEventVehicleType"][]
        | null;
      saved?: boolean | null;
      seekPoints?: components["schemas"]["ClipSeekPointV2Type"][] | null;
      seekPointsMap?: {
        [key: string]: components["schemas"]["ClipSeekPointV2Type"][] | null;
      } | null;
      shared?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** Natural language description of the alert */
      textDescription?: string | null;
      thirdPartyDeviceName?: string | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      thumbnailLocationV2?: string | null;
      timestampMs?: number | null;
      type?: PolicyAlertWithDetailsTypeEnum | null;
      unrecognizedEventFaces?:
        | components["schemas"]["PolicyEventFaceType"][]
        | null;
      unrecognizedEventVehicles?:
        | components["schemas"]["PolicyEventVehicleType"][]
        | null;
      uuid?: string | null;
    };
    PolicyEventFaceType: {
      faceId?: string | null;
      faceName?: string | null;
      imageS3Bucket?: string | null;
      imageS3Key?: string | null;
      imageS3Region?: string | null;
      personUuid?: string | null;
    };
    PolicyEventVehicleType: {
      imageS3Bucket?: string | null;
      imageS3Key?: string | null;
      imageS3Region?: string | null;
      licensePlateNumber?: string | null;
      vehicleName?: string | null;
    };
    Policy_CreateAccessControlledDoorPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalAccessControlledDoorPolicyType"];
    };
    Policy_CreateAccessControlledDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyUuid?: string | null;
    };
    Policy_CreateAudioPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalAudioPolicyType"];
    };
    Policy_CreateAudioPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyUuid?: string | null;
    };
    Policy_CreateCameraPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalCameraPolicyV2Type"];
    };
    Policy_CreateCameraPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyUuid?: string | null;
    };
    Policy_CreateClimatePolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalClimatePolicyType"];
    };
    Policy_CreateClimatePolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyUuid?: string | null;
    };
    Policy_CreateDoorPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalDoorPolicyType"];
    };
    Policy_CreateDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyUuid?: string | null;
    };
    Policy_CreateOccupancyPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalOccupancyPolicyType"];
    };
    Policy_CreateOccupancyPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyUuid?: string | null;
    };
    Policy_CreatePolicyAddendumForLocationRequest: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      durationSec?: number | null;
      locationUuid?: string | null;
      scheduledTimestampSec?: number | null;
    };
    Policy_CreatePolicyAddendumForLocationResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_CreatePolicyAddendumsForDevicesRequest: {
      activities?: components["schemas"]["ActivityEnum"][] | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      scheduledTimestampSec?: number | null;
    };
    Policy_CreatePolicyAddendumsForDevicesResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_CreateProximityPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalProximityPolicyType"];
    };
    Policy_CreateProximityPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyUuid?: string | null;
    };
    Policy_CreateScheduleWSRequest: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
    };
    Policy_CreateScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      scheduleUuid?: string | null;
    };
    Policy_CreateVideoIntercomPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalVideoIntercomPolicyType"];
    };
    Policy_CreateVideoIntercomPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyUuid?: string | null;
    };
    Policy_DeleteAccessControlledDoorPolicyWSRequest: {
      policyUuid?: string | null;
    };
    Policy_DeleteAccessControlledDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteAudioPolicyWSRequest: {
      policyUuid?: string | null;
    };
    Policy_DeleteAudioPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteCameraPolicyWSRequest: {
      policyUuid?: string | null;
    };
    Policy_DeleteCameraPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteClimatePolicyWSRequest: {
      policyUuid?: string | null;
    };
    Policy_DeleteClimatePolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteDevicePolicyAddendumsWSRequest: {
      uuids?: (string | null)[] | null;
    };
    Policy_DeleteDevicePolicyAddendumsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteDoorPolicyWSRequest: {
      policyUuid?: string | null;
    };
    Policy_DeleteDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteLocationPolicyAddendumWSRequest: {
      uuid?: string | null;
    };
    Policy_DeleteLocationPolicyAddendumWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteOccupancyPolicyWSRequest: {
      policyUuid?: string | null;
    };
    Policy_DeleteOccupancyPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeletePolicyPauseSettingWSRequest: {
      uuid?: string | null;
    };
    Policy_DeletePolicyPauseSettingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteProximityPolicyWSRequest: {
      policyUuid?: string | null;
    };
    Policy_DeleteProximityPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteScheduleWSRequest: {
      scheduleUuid?: string | null;
    };
    Policy_DeleteScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_DeleteVideoIntercomPolicyWSRequest: {
      policyUuid?: string | null;
    };
    Policy_DeleteVideoIntercomPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policyUuid?: string | null;
    };
    Policy_ExternalAudioPolicyType: {
      defaultTriggers?:
        | components["schemas"]["Policy_ExternalAudioTriggerType"][]
        | null;
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_ExternalAudioScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_ExternalAudioScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?:
        | components["schemas"]["Policy_ExternalAudioTriggerType"][]
        | null;
    };
    Policy_ExternalAudioTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      threshold?: number | null;
    };
    Policy_ExternalVideoIntercomPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_ExternalVideoIntercomScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_ExternalVideoIntercomScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?:
        | components["schemas"]["Policy_ExternalVideoIntercomTriggerType"][]
        | null;
    };
    Policy_ExternalVideoIntercomTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      faceAlertLabelSet?: (string | null)[] | null;
      faceAlertUnidentified?: boolean | null;
      faceAllowedLabelSet?: (string | null)[] | null;
      lufsThreshold?: number | null;
      peopleCountThreshold?: number | null;
      vehicleAlertLabelSet?: (string | null)[] | null;
      vehicleAlertUnidentified?: boolean | null;
      vehicleAllowedLabelSet?: (string | null)[] | null;
    };
    Policy_FindSchedulesWSRequest: { [key: string]: unknown };
    Policy_FindSchedulesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      schedules?: components["schemas"]["WeeklyRepeatingScheduleType"][] | null;
    };
    Policy_GetAccessControlledDoorPoliciesWSRequest: { [key: string]: unknown };
    Policy_GetAccessControlledDoorPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policies?:
        | components["schemas"]["AccessControlledDoorPolicyType"][]
        | null;
    };
    Policy_GetAudioPoliciesWSRequest: { [key: string]: unknown };
    Policy_GetAudioPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policies?:
        | components["schemas"]["Policy_ExternalAudioPolicyType"][]
        | null;
    };
    Policy_GetCameraPoliciesWSRequest: { [key: string]: unknown };
    Policy_GetCameraPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policies?: components["schemas"]["CameraPolicyV2Type"][] | null;
    };
    Policy_GetClimatePoliciesWSRequest: { [key: string]: unknown };
    Policy_GetClimatePoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policies?: components["schemas"]["ClimatePolicyType"][] | null;
    };
    Policy_GetDoorPoliciesWSRequest: { [key: string]: unknown };
    Policy_GetDoorPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policies?: components["schemas"]["DoorPolicyType"][] | null;
    };
    Policy_GetOccupancyPoliciesWSRequest: { [key: string]: unknown };
    Policy_GetOccupancyPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policies?: components["schemas"]["OccupancyPolicyType"][] | null;
    };
    Policy_GetPoliciesUsingScheduleWSRequest: {
      scheduleUuid?: string | null;
    };
    Policy_GetPoliciesUsingScheduleWSResponse: {
      accessControlledDoorPolicyList?:
        | components["schemas"]["AccessControlledDoorPolicyType"][]
        | null;
      audioPolicyList?: components["schemas"]["AudioPolicyType"][] | null;
      cameraPolicyList?: components["schemas"]["CameraPolicyV2Type"][] | null;
      climatePolicyList?: components["schemas"]["ClimatePolicyType"][] | null;
      doorPolicyList?: components["schemas"]["DoorPolicyType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
      occupancyPolicyList?:
        | components["schemas"]["OccupancyPolicyType"][]
        | null;
      proximityPolicyList?:
        | components["schemas"]["ProximityPolicyType"][]
        | null;
      videoIntercomPolicyList?:
        | components["schemas"]["VideoIntercomPolicyType"][]
        | null;
    };
    Policy_GetPolicyAddendumsWSRequest: { [key: string]: unknown };
    Policy_GetPolicyAddendumsWSResponse: {
      deviceAddendumsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      locationAddendumsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
    };
    Policy_GetPolicyPauseSettingsWSRequest: { [key: string]: unknown };
    Policy_GetPolicyPauseSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policiesPausedForComponentCompositesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      policiesPausedForDevicesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      policiesPausedForLocationsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
    };
    Policy_GetProximityPoliciesWSRequest: { [key: string]: unknown };
    Policy_GetProximityPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policies?: components["schemas"]["ProximityPolicyType"][] | null;
    };
    Policy_GetVideoIntercomPoliciesWSRequest: { [key: string]: unknown };
    Policy_GetVideoIntercomPoliciesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      policies?:
        | components["schemas"]["Policy_ExternalVideoIntercomPolicyType"][]
        | null;
    };
    Policy_MinimalAccessControlledDoorPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalAccessControlledDoorScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_MinimalAccessControlledDoorScheduledTriggerType: {
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
    };
    Policy_MinimalAudioPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalAudioScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_MinimalAudioScheduledTriggerType: {
      scheduleUuid?: string | null;
      triggerSet?:
        | components["schemas"]["Policy_ExternalAudioTriggerType"][]
        | null;
    };
    Policy_MinimalCameraPolicyV2Type: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalCameraScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_MinimalCameraScheduledTriggerType: {
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["CameraTriggerType"][] | null;
    };
    Policy_MinimalClimatePolicyType: {
      backoffAlertSecs?: { [key: string]: number | null } | null;
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalClimateScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_MinimalClimateScheduledTriggerType: {
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ClimateTriggerType"][] | null;
    };
    Policy_MinimalDoorPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalDoorScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_MinimalDoorScheduledTriggerType: {
      ajarThresholdSec?: number | null;
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
    };
    Policy_MinimalOccupancyPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalOccupancyScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_MinimalOccupancyScheduledTriggerType: {
      occupancyThresholdSec?: number | null;
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ActivityEnum"][] | null;
      vacancyThresholdSec?: number | null;
    };
    Policy_MinimalProximityPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalProximityScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_MinimalProximityScheduledTriggerType: {
      departureThresholdSec?: number | null;
      scheduleUuid?: string | null;
      triggerSet?: components["schemas"]["ProximityTriggerType"][] | null;
    };
    Policy_MinimalVideoIntercomPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["Policy_MinimalVideoIntercomScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    Policy_MinimalVideoIntercomScheduledTriggerType: {
      scheduleUuid?: string | null;
      triggerSet?:
        | components["schemas"]["Policy_ExternalVideoIntercomTriggerType"][]
        | null;
    };
    Policy_PauseAlertPolicyWSRequest: {
      componentCompositeUuids?: (string | null)[] | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      locationUuids?: (string | null)[] | null;
      scheduledTimestampSec?: number | null;
    };
    Policy_PauseAlertPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_UpdateAccessControlledDoorPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalAccessControlledDoorPolicyType"];
    };
    Policy_UpdateAccessControlledDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_UpdateAudioPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalAudioPolicyType"];
    };
    Policy_UpdateAudioPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_UpdateCameraPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalCameraPolicyV2Type"];
    };
    Policy_UpdateCameraPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_UpdateClimatePolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalClimatePolicyType"];
    };
    Policy_UpdateClimatePolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_UpdateDoorPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalDoorPolicyType"];
    };
    Policy_UpdateDoorPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_UpdateOccupancyPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalOccupancyPolicyType"];
    };
    Policy_UpdateOccupancyPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_UpdateProximityPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalProximityPolicyType"];
    };
    Policy_UpdateProximityPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_UpdateScheduleWSRequest: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
    };
    Policy_UpdateScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Policy_UpdateVideoIntercomPolicyWSRequest: {
      policy?: components["schemas"]["Policy_MinimalVideoIntercomPolicyType"];
    };
    Policy_UpdateVideoIntercomPolicyWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    PortSupervisionConfigurationType: {
      mode?: components["schemas"]["SupervisionModeEnumType"];
    };
    /** A HashMap of <Service Area Guid, PosIntegrationInfoType>. This stores the Pos Information and assigned cameras. */
    PosIntegrationInfoType: {
      /** A list of camera guids from Rhombus that are assigned to the Pos device. */
      assignedCameraList?: (string | null)[] | null;
      /** The name of the Pos device. */
      posName?: string | null;
    };
    PressureSensorType: {
      pressure?: number | null;
      tempC?: number | null;
      timestampSec?: number | null;
    };
    ProDataKeySettings: {
      alertUnauthorizedFaces?: boolean | null;
      badgeAuthDisablesAlarmMonitoring?: boolean | null;
      createSeekPoints?: boolean | null;
      doorInfoMap?: {
        [key: string]: components["schemas"]["BadgeIntegrationDoorInfoType"];
      } | null;
      doorsValidated?: boolean | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      identifyFacesFromBadge?: boolean | null;
      misconfiguredDoors?: (string | null)[] | null;
      ouId?: string | null;
      rhombusToken?: string | null;
      saveClips?: boolean | null;
      webhookId?: string | null;
      webhookSignatureSecret?: string | null;
    };
    ProDataKeyType:
      | ({
          alertUnauthorizedFaces?: boolean | null;
          apiToken?: string | null;
          badgeAuthDisablesAlarmMonitoring?: boolean | null;
          createSeekPoints?: boolean | null;
          doorInfoMap?: {
            [
              key: string
            ]: components["schemas"]["BadgeIntegrationDoorInfoType"];
          } | null;
          doorsValidated?: boolean | null;
          identifyFacesFromBadge?: boolean | null;
          indexFaces?: boolean | null;
          misconfiguredDoors?: (string | null)[] | null;
          organizationId?: string | null;
          refreshToken?: string | null;
          rhombusToken?: string | null;
          saveClips?: boolean | null;
          systemId?: string | null;
          tokenValid?: boolean | null;
          webhookId?: string | null;
          webhookSignatureSecret?: string | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    Product: {
      description?: string | null;
      productId?: string | null;
      productIdQualifier?: string | null;
      quantity?: number | null;
    };
    PromptConfigurationType: {
      active?: boolean | null;
      cameraConfigurations?:
        | components["schemas"]["CameraConfiguration"][]
        | null;
      checkEquations?: components["schemas"]["CheckEquations"];
      description?: string | null;
      minuteTriggerRate?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      prompt?: string | null;
      promptType?: PromptConfigurationPromptTypeEnum | null;
      scheduleUuid?: string | null;
      shortName?: string | null;
      uuid?: string | null;
    };
    Providers: { [key: string]: unknown } | null;
    ProximityArrivedActivityEventType:
      | ({
          proximityTagLocationUuids?: (string | null)[] | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    ProximityDepartedActivityEventType:
      | ({
          departureThresholdSecs?: number | null;
          proximityTagLocationUuids?: (string | null)[] | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    ProximityEventType: {
      baseStationUuid?: string | null;
      batteryPercentage?: number | null;
      bleDeviceUuid?: string | null;
      bleRssi?: number | null;
      closeBaseStations?: (string | null)[] | null;
      endTimeMs?: number | null;
      gpsLocation?: components["schemas"]["GeodeticCoordinates"];
      locationUuid?: string | null;
      orgUuid?: string | null;
      startTimeMs?: number | null;
      status?: ProximityEventStatusEnum | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
    };
    ProximityPolicyType: {
      defaultDepartureThresholdSec?: number | null;
      defaultTriggers?: components["schemas"]["ProximityTriggerType"][] | null;
      description?: string | null;
      egressThresholdMetersMap?: { [key: string]: number | null } | null;
      ingressThresholdMetersMap?: { [key: string]: number | null } | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["ProximityScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    ProximityScheduledTriggerType: {
      departureThresholdSec?: number | null;
      egressThresholdMetersMap?: { [key: string]: number | null } | null;
      ingressThresholdMetersMap?: { [key: string]: number | null } | null;
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["ProximityTriggerType"][] | null;
    };
    ProximityTagLocomotionEventType: {
      baseStationUuid?: string | null;
      gpsLocation?: components["schemas"]["GeodeticCoordinates"];
      locationUuid?: string | null;
      movement?: ProximityTagLocomotionEventMovementEnum | null;
      orgUuid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tagUuid?: string | null;
      timestampMs?: number | null;
    };
    ProximityTagTimeSeriesDataPointType: {
      dateLocal?: string | null;
      tagUuid?: string | null;
      uuid?: string | null;
    };
    ProximityTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      locationUuids?: (string | null)[] | null;
    };
    ProximityUnlockSettingsType: {
      credCooldownSec?: number | null;
      enabled?: boolean | null;
      exitResetsCooldown?: boolean | null;
      holdUnlocked?: boolean | null;
      holdUnlockedEventIntervalSec?: number | null;
      maxHoldUnlockedTimeSec?: number | null;
      minHoldUnlockedTimeSec?: number | null;
      minRSSIThreshold?: number | null;
    };
    ProximityUnlockSettingsType_Minimal: {
      enabled?: boolean | null;
      minRSSIThreshold?: number | null;
    };
    Proximity_GetLocomotionEventsForTagWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      movementFilter?: GetLocomotionEventsForTagWSRequestMovementFilterEnum | null;
      tagUuid?: string | null;
    };
    Proximity_GetLocomotionEventsForTagWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      locomotionEvents?:
        | components["schemas"]["ProximityTagLocomotionEventType"][]
        | null;
    };
    Proximity_GetMinimalProximityStatesWSRequest: { [key: string]: unknown };
    Proximity_GetMinimalProximityStatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      proximityStates?:
        | components["schemas"]["Proximity_MinimalProximityStateType"][]
        | null;
    };
    Proximity_GetProximityEventsForTagWSRequest: {
      createdAfterMs?: number | null;
      createdBeforeMs?: number | null;
      limit?: number | null;
      statusFilter?: GetProximityEventsForTagWSRequestStatusFilterEnum | null;
      tagUuid?: string | null;
    };
    Proximity_GetProximityEventsForTagWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      proximityEvents?: components["schemas"]["ProximityEventType"][] | null;
    };
    Proximity_MinimalProximityStateType: {
      batteryPercent?: number | null;
      createdAtMillis?: number | null;
      firmwareVersion?: string | null;
      gpsLocation?: components["schemas"]["GeodeticCoordinates"];
      health?: MinimalProximityStateHealthEnum | null;
      healthDetails?: MinimalProximityStateHealthDetailsEnum | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      imageUrl?: string | null;
      lastSeenSec?: number | null;
      locationUuid?: string | null;
      name?: string | null;
      policyUuid?: string | null;
      serialNumber?: string | null;
      signalStrength?: number | null;
      status?: MinimalProximityStateStatusEnum | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      tagUuid?: string | null;
    };
    Proximity_UpdateProximitySensorDetailsWSRequest: {
      deletedUpdated?: boolean | null;
      description?: string | null;
      descriptionUpdated?: boolean | null;
      imageUrl?: string | null;
      imageUrlUpdated?: boolean | null;
      name?: string | null;
      nameUpdated?: boolean | null;
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      uuid?: string | null;
    };
    Proximity_UpdateProximitySensorDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    /** Optionally present qualified address after some validation.  Used for Alarm Monitoring if available. */
    QualifiedAddressType: {
      /** apt, suite, or unit */
      addressLine2?: string | null;
      /** street address */
      addressline1?: string | null;
      /** state */
      administrativeArea?: string | null;
      /** city */
      locality?: string | null;
      /** zip code */
      postalCode?: string | null;
      /** country */
      regionCode?: string | null;
    };
    QueryStatus: QueryStatusEnum;
    QueryTimelineEvent: {
      status?: components["schemas"]["QueryStatus"];
      timestampMs?: number | null;
    };
    QueryTool: {
      content?: string | null;
      contentType?: string | null;
      extra?: string | null;
      role?: string | null;
      timestampMs?: number | null;
      tool?: string | null;
    };
    RBACSettingsType: {
      enabled?: boolean | null;
    };
    RMARequest: {
      formSubmitted?: boolean | null;
      requestUuid?: string | null;
      rmaOpportunityId?: string | null;
      salesforceAccountId?: string | null;
      salesforcePartnerContactId?: string | null;
      salesforcePartnerId?: string | null;
    };
    RMAType: {
      address?: string | null;
      advancedRMAs?: components["schemas"]["AdvancedRMAType"];
      briefDescription?: string | null;
      city?: string | null;
      costInDollars?: number | null;
      country?: string | null;
      customerUnresponsive?: boolean | null;
      deleted?: boolean | null;
      deviceUuid?: string | null;
      errorCode?: RMAErrorCodeEnum | null;
      failureDiagnostics?: (string | null)[] | null;
      fedExReturnLabelSent?: boolean | null;
      finalNotes?: string | null;
      hardwareUuid?: string | null;
      initialFirmwareVersion?: string | null;
      initiatedBy?: string | null;
      inventoryNeeded?: string | null;
      inventoryNeededMap?: { [key: string]: string | null } | null;
      isRefurbished?: boolean | null;
      lastRecordedFirmwareVersion?: string | null;
      lastUpdatedAtSec?: number | null;
      lastUpdatedBy?: string | null;
      orgUuid?: string | null;
      postalCode?: string | null;
      prevShippingInfoUsedBy?: string | null;
      prevShippingInfoUsedByAtSec?: number | null;
      proactiveReplacement?: boolean | null;
      recipientName?: string | null;
      recipientPhoneNumber?: string | null;
      replacementCourier?: string | null;
      replacementHardwareUuid?: string | null;
      replacementTrackingNumber?: string | null;
      requesterEmailAddress?: string | null;
      returnLabelRequested?: boolean | null;
      returnLabelRequestedUpdatedAtSec?: number | null;
      returnLabelSent?: boolean | null;
      returnLabelSentUpdatedAtSec?: number | null;
      returnTrackingNumber?: string | null;
      rmaRequest?: components["schemas"]["RMARequest"];
      rmaRequestUuid?: string | null;
      sdCardReplaced?: boolean | null;
      shipmentRequested?: boolean | null;
      shipmentRequestedBy?: string | null;
      shipmentRequestedUpdatedAtSec?: number | null;
      shipmentSent?: boolean | null;
      shipmentSentUpdatedAtSec?: number | null;
      skipAutoRegistration?: boolean | null;
      state?: string | null;
      status?: RMAStatusEnum | null;
      storageCid?: string | null;
      street?: string | null;
      timestampSec?: number | null;
      uuid?: string | null;
      warehouseInventoryNeeded?: boolean | null;
      zenDeskTicketAssigneeEmail?: string | null;
      zenDeskTicketSubject?: string | null;
      zendeskTicket?: number | null;
    };
    Rapidsos_GetNearbyFeedsRequest: {
      latitude?: number | null;
      longitude?: number | null;
      width?: number | null;
    };
    Rapidsos_GetNearbyFeedsResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      streamUrls?: (string | null)[] | null;
    };
    RaptorBuilding: {
      name?: string | null;
      uid?: string | null;
    };
    RaptorTemplate: {
      name?: string | null;
      uId?: string | null;
      uid?: string | null;
    };
    RaptorType:
      | ({
          apiToken?: string | null;
          clientId?: string | null;
          clientSecret?: string | null;
          refreshToken?: string | null;
          tokenValid?: boolean | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    RealtimeRelativeSecondsScheduleType:
      | ({
          pastSeconds?: number | null;
        } & {
          mutable?: boolean | null;
          name?: string | null;
          oneTimeUse?: boolean | null;
          orgUuid?: string | null;
          strategy?: RealtimeRelativeSecondsScheduleStrategyEnum | null;
          uuid?: string | null;
        })
      | null;
    RecurringRuleTriggerType:
      | ({
          /** Optional list of locations to specify timezones for evaluation. Note that if not specified, then we rely on the Actions to derive timezones. */
          locationUuids?: (string | null)[] | null;
          /** Interval of timeUnit to re-occur at. i.e. trigger every 5 minutes, repeatInerval would be 5 */
          repeatInterval?: number | null;
          timeUnit?: components["schemas"]["RecurringTimeUnit"];
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    /** Time unit of recurrence. i.e. trigger every 5 minutes, timeUnit would be MINUTES */
    RecurringTimeUnit: RecurringTimeUnitEnum;
    RegionConfigType: {
      inverted?: boolean | null;
      polygons?: components["schemas"]["RegionPolygonType"][] | null;
    };
    RegionCoordinateType: {
      x?: number | null;
      y?: number | null;
    };
    /** Regions of interest that belong to the group. Group must have at least one region specified. */
    RegionOfInterest: {
      /** Region of allowed or disallowed activities. Activities are allowed if region group is inclusive. Activities are disallowed if region group is exclusive. Region must have at least one activity specified. */
      activities?: components["schemas"]["ActivityEnum"][] | null;
      name?: string | null;
      polygon?: components["schemas"]["RegionPolygonType"];
      uuid?: string | null;
    };
    RegionOfInterestGroup: {
      /** If true, regions in this group include specified activities. If false, regions in this group exclude specified activities. */
      inclusive?: boolean | null;
      /** Regions of interest that belong to the group. Group must have at least one region specified. */
      regionsOfInterest?: components["schemas"]["RegionOfInterest"][] | null;
      /** Represents type of activity regions in the group. Defaults to 'Activity'. */
      type?: RegionOfInterestGroupTypeEnum | null;
    };
    RegionPolygonType: {
      coordinates?: components["schemas"]["RegionCoordinateType"][] | null;
    };
    RelativeDateTimeIntervalsScheduleType:
      | ({
          intervals?:
            | components["schemas"]["LocalDateTimeIntervalType"][]
            | null;
        } & {
          mutable?: boolean | null;
          name?: string | null;
          oneTimeUse?: boolean | null;
          orgUuid?: string | null;
          strategy?: RelativeDateTimeIntervalsScheduleStrategyEnum | null;
          uuid?: string | null;
        })
      | null;
    Relay_AssignThirdPartyCameraToNVRWSRequest: {
      discoveredCameraMacAddress?: string | null;
      locationUuid?: string | null;
      name?: string | null;
      nvruuid?: string | null;
      rtspUrl?: string | null;
    };
    Relay_AssignThirdPartyCameraToNVRWSResponse: {
      deviceUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Relay_AssignThirdPartyCameraToRelayCameraWSRequest: {
      discoveredCameraMacAddress?: string | null;
      locationUuid?: string | null;
      name?: string | null;
      rtspUrl?: string | null;
    };
    Relay_AssignThirdPartyCameraToRelayCameraWSResponse: {
      deviceUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Relay_AuthenticateThirdPartyCameraWSRequest: {
      locationUuid?: string | null;
      password?: string | null;
      rtspUrl?: string | null;
      thirdPartyCameraMacAddress?: string | null;
      trySavedCredentials?: boolean | null;
      username?: string | null;
    };
    Relay_AuthenticateThirdPartyCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      result?: components["schemas"]["DiscoveredThirdPartyCameraType"];
      rtspUrlStatus?: AuthenticateThirdPartyCameraWSResponseRtspUrlStatusEnum | null;
    };
    Relay_CreateThirdPartyCameraPasswordWSRequest: {
      notes?: string | null;
      password?: string | null;
      username?: string | null;
    };
    Relay_CreateThirdPartyCameraPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      passwordUuid?: string | null;
    };
    Relay_DeleteThirdPartyCameraPasswordWSRequest: {
      passwordUuid?: string | null;
    };
    Relay_DeleteThirdPartyCameraPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Relay_DiscoveryWithUnassignedRtspEndpoints: {
      codec?: string | null;
      ipAddress?: string | null;
      macAddress?: string | null;
      manufacturer?: string | null;
      model?: string | null;
      orgUuid?: string | null;
      /** List of unassigned RTSP endpoints that are available for assignment. Contains only endpoints with status GOOD and that are not currently assigned. */
      unassignedRtspEndpoints?:
        | components["schemas"]["Relay_ExternalRtspEndpoint"][]
        | null;
    };
    Relay_ExecuteThirdPartyCameraDiscoveryWSRequest: {
      deviceFilter?: (string | null)[] | null;
      locationFilter?: (string | null)[] | null;
    };
    Relay_ExecuteThirdPartyCameraDiscoveryWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Relay_ExternalRtspEndpoint: {
      lastRtspUrlStatus?: ExternalRtspEndpointLastRtspUrlStatusEnum | null;
      password?: string | null;
      rtspUrl?: string | null;
      source?: components["schemas"]["RtspEndpointSource"];
      username?: string | null;
      uuid?: string | null;
    };
    Relay_FindDefaultRtspUrlsByManufacturerWSRequest: {
      manufacturer?: string | null;
      model?: string | null;
    };
    Relay_FindDefaultRtspUrlsByManufacturerWSResponse: {
      defaultPaths?: (string | null)[] | null;
      defaultUrls?: (string | null)[] | null;
    };
    Relay_FindDiscoveriesWithUnassignedRtspEndpointsWSRequest: {
      [key: string]: unknown;
    };
    Relay_FindDiscoveriesWithUnassignedRtspEndpointsWSResponse: {
      discoveries?:
        | components["schemas"]["Relay_DiscoveryWithUnassignedRtspEndpoints"][]
        | null;
    };
    Relay_GetAssignedThirdPartyCamerasWSRequest: {
      nvruuid?: string | null;
    };
    Relay_GetAssignedThirdPartyCamerasWSResponse: {
      assignedCameras?: components["schemas"]["CameraType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Relay_GetFullNVRStateWSRequest: {
      force?: boolean | null;
      nvruuid?: string | null;
    };
    Relay_GetFullNVRStateWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      fullNVRState?: components["schemas"]["FullDeviceStateType"];
    };
    Relay_GetImportThirdPartyCamerasFormatWSResponse: {
      example?: string | null;
      explanation?: string | null;
    };
    Relay_GetMinimalNVRStateListWSRequest: { [key: string]: unknown };
    Relay_GetMinimalNVRStateListWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      nvrstates?: components["schemas"]["MinimalNVRStateType"][] | null;
    };
    Relay_GetMinimalThirdPartyCameraStateListWSRequest: {
      [key: string]: unknown;
    };
    Relay_GetMinimalThirdPartyCameraStateListWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      thirdPartyCameraStateList?:
        | components["schemas"]["Relay_MinimalThirdPartyCameraStateType"][]
        | null;
    };
    Relay_GetNVRDetailsWSRequest: {
      nvruuids?: (string | null)[] | null;
    };
    Relay_GetNVRDetailsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      nvrs?: components["schemas"]["Relay_NVRExternalType"][] | null;
    };
    Relay_GetRtspEndpointsWSRequest: {
      discoveredCameraMacAddress?: string | null;
    };
    Relay_GetRtspEndpointsWSResponse: {
      rtspEndpoints?:
        | components["schemas"]["Relay_ExternalRtspEndpoint"][]
        | null;
    };
    Relay_GetThirdPartyCameraPasswordsWSRequest: { [key: string]: unknown };
    Relay_GetThirdPartyCameraPasswordsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      passwords?:
        | components["schemas"]["ThirdPartyCameraPasswordType"][]
        | null;
    };
    Relay_ImportThirdPartyCamerasWSResponse: {
      importResults?:
        | components["schemas"]["Relay_ThirdPartyCameraImportResult"][]
        | null;
      messages?: (string | null)[] | null;
    };
    Relay_ManualDiscoverThirdPartyCameraWSRequest: {
      locationUuid?: string | null;
      password?: string | null;
      rtspUrl?: string | null;
      trySavedCredentials?: boolean | null;
      username?: string | null;
    };
    Relay_ManualDiscoverThirdPartyCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      result?: components["schemas"]["DiscoveredThirdPartyCameraType"];
      rtspUrlStatus?: ManualDiscoverThirdPartyCameraWSResponseRtspUrlStatusEnum | null;
    };
    Relay_MinimalThirdPartyCameraStateType: {
      assignedNVRUuid?: string | null;
      assignedRelayCameraUuid?: string | null;
      codec?: string | null;
      connectionStatus?: components["schemas"]["DeviceStatusEnum"];
      createdAtMillis?: number | null;
      defaultInterface?: string | null;
      defaultInterfaceMac?: string | null;
      directionRadians?: number | null;
      discoveredByDeviceUuid?: string | null;
      externalIPAddress?: string | null;
      facetNameMap?: { [key: string]: string | null } | null;
      firmwareUpdateInProgress?: boolean | null;
      firmwareVersion?: string | null;
      floorNumber?: number | null;
      healthStatus?: components["schemas"]["DeviceStatusEnum"];
      healthStatusDetails?: components["schemas"]["DeviceHealthStatusDetailsEnum"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      lanAddresses?: (string | null)[] | null;
      lastRtspUrlStatus?: MinimalThirdPartyCameraStateLastRtspUrlStatusEnum | null;
      lastVisibleLocationMs?: { [key: string]: number | null } | null;
      lastVisibleMs?: { [key: string]: number | null } | null;
      latitude?: number | null;
      liveStreamShared?: boolean | null;
      liveStreamsSharedCount?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      manufacturer?: string | null;
      mediaRegion?: string | null;
      mediaStorageDeviceUuid?: string | null;
      model?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      password?: string | null;
      policyUuid?: string | null;
      region?: string | null;
      rtspUrl?: string | null;
      serialNumber?: string | null;
      ssid?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      supportedFacets?: components["schemas"]["DeviceFacet"][] | null;
      username?: string | null;
      uuid?: string | null;
      wifiApMac?: string | null;
      wifiBars?: number | null;
      wifiSignalStrength?: number | null;
    };
    Relay_NVRExternalType: {
      archiveRegion?: string | null;
      cameraFramerate?: number | null;
      createdAtMillis?: number | null;
      customData?: string | null;
      deleted?: boolean | null;
      description?: string | null;
      directionRadians?: number | null;
      facetNameMap?: { [key: string]: string | null } | null;
      floorNumber?: number | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      latitude?: number | null;
      locationUuid?: string | null;
      longitude?: number | null;
      mediaStorageDeviceUuid?: string | null;
      mummified?: boolean | null;
      name?: string | null;
      pending?: boolean | null;
      policyUuid?: string | null;
      serialNumber?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      type?: components["schemas"]["DeviceTypeEnum"];
      uuid?: string | null;
    };
    Relay_PTZMoveWSRequest: {
      thirdPartyCameraUuid?: string | null;
      xmovementPermyriad?: number | null;
      ymovementPermyriad?: number | null;
      zmovementPermyriad?: number | null;
    };
    Relay_PTZMoveWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Relay_PTZStatusWSRequest: {
      thirdPartyCameraUuid?: string | null;
    };
    Relay_PTZStatusWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      xpositionPermyriad?: number | null;
      ypositionPermyriad?: number | null;
      zpositionPermyriad?: number | null;
    };
    Relay_RebootNVRVWSRequest: {
      nvrUuid?: string | null;
    };
    Relay_RebootNVRVWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      result?: RebootNVRVWSResponseResultEnum | null;
    };
    Relay_RegisterNVRVWSRequest: {
      activationToken?: string | null;
      locationUuid?: string | null;
      name?: string | null;
    };
    Relay_RegisterNVRVWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      nvrUuid?: string | null;
    };
    Relay_ThirdPartyCameraImportResult: {
      discoveredThirdPartyCamera?: components["schemas"]["DiscoveredThirdPartyCameraType"];
      message?: string | null;
      rtspUrl?: string | null;
      urlStatus?: ThirdPartyCameraImportResultUrlStatusEnum | null;
    };
    Relay_UnassignThirdPartyCameraWSRequest: {
      nvruuid?: string | null;
      rtspUrl?: string | null;
      thirdPartyCameraMacAddress?: string | null;
    };
    Relay_UnassignThirdPartyCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Relay_UnregisterNVRWSRequest: {
      nvruuid?: string | null;
    };
    Relay_UnregisterNVRWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: UnregisterNVRWSResponseResponseStatusEnum | null;
    };
    Relay_UpdateNVRFirmwareWSRequest: {
      nvruuid?: string | null;
    };
    Relay_UpdateNVRFirmwareWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      status?: UpdateNVRFirmwareWSResponseStatusEnum | null;
    };
    Relay_UpdateNVRVWSRequest: {
      customData?: string | null;
      customDataUpdated?: boolean | null;
      deleted?: boolean | null;
      deletedUpdated?: boolean | null;
      description?: string | null;
      descriptionUpdated?: boolean | null;
      directionRadians?: number | null;
      directionRadiansUpdated?: boolean | null;
      facetNameMap?: { [key: string]: string | null } | null;
      facetNameMapUpdated?: boolean | null;
      floorNumber?: number | null;
      floorNumberUpdated?: boolean | null;
      latitude?: number | null;
      latitudeUpdated?: boolean | null;
      locationUuid?: string | null;
      locationUuidUpdated?: boolean | null;
      longitude?: number | null;
      longitudeUpdated?: boolean | null;
      mummified?: boolean | null;
      mummifiedUpdated?: boolean | null;
      name?: string | null;
      nameUpdated?: boolean | null;
      policyUuid?: string | null;
      policyUuidUpdated?: boolean | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      subLocationsHierarchyKeyUpdated?: boolean | null;
      uuid?: string | null;
    };
    Relay_UpdateNVRVWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    RemoteDoorUnlockActionType: {
      doorId?: string | null;
      placeId?: string | null;
      system?: components["schemas"]["RemoteDoorUnlockSystemEnum"];
    };
    RemoteDoorUnlockSystemEnum: RemoteDoorUnlockSystemEnum;
    RenewalClaimKey:
      | ({
          entries?: {
            [key: string]: components["schemas"]["ClaimKeyEntry"];
          } | null;
        } & {
          /** Date/time when claiming of licenses represented by this claim key ended successfully. */
          claimEndDate?: string | null;
          /** Date/time when claiming of licenses represented by this claim key started. */
          claimStartDate?: string | null;
          createdOn?: string | null;
          endDate?: string | null;
          expirationEmailState?: RenewalClaimKeyExpirationEmailStateEnum | null;
          gracePeriodEndDate?: string | null;
          /** Masked claim code for redeemed claim keys. This field can be used for reference purposes. */
          maskedClaimCode?: string | null;
          orgUuid?: string | null;
          renewedByClaimKeyUuid?: string | null;
          /** Externally supplied request id to prevent creation of unnecessary claim keys due to reprocessing or bugs. Unnecessary claim keys are claim keys that are not tied to anything in the external system.  This property is unique for all claim keys. */
          requestId?: string | null;
          returnHistory?: components["schemas"]["ClaimKeyReturnEvent"][] | null;
          state?: RenewalClaimKeyStateEnum | null;
          trial?: boolean | null;
          type?: RenewalClaimKeyTypeEnum | null;
          updatedOn?: string | null;
          uuid?: string | null;
        })
      | null;
    Report_AuditEventWeb: {
      FOOBAR?: string | null;
      action?: AuditEventWebActionEnum | null;
      asi?: string | null;
      clientType?: AuditEventWebClientTypeEnum | null;
      displayText?: string | null;
      failure?: boolean | null;
      orgUuid?: string | null;
      principalName?: string | null;
      principalType?: AuditEventWebPrincipalTypeEnum | null;
      principalUuid?: string | null;
      selectiveUpdateStr?: string | null;
      sourceCity?: string | null;
      sourceCountry?: string | null;
      sourceIp?: string | null;
      sourceState?: string | null;
      targetName?: string | null;
      targetUuid?: string | null;
      timestamp?: string | null;
      userAgent?: string | null;
      uuid?: string | null;
    };
    Report_GetAuditFeedForTargetWSRequest: {
      /** Max number of audit records to retrieve */
      maxResults?: number | null;
      /** Target uuid to get audit records for */
      targetUuid: string | null;
    };
    Report_GetAuditFeedForTargetWSResponse: {
      auditEvents?: components["schemas"]["Report_AuditEventWeb"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Report_GetAuditFeedWSRequest: {
      /** If not empty, events with actions specified in the list are filtered out. If both include and exclude actions are specified, exclude actions are ignored. */
      excludeActions?: (GetAuditFeedWSRequestExcludeActionsEnum | null)[] | null;
      /** If not empty, only events with actions specified in the list are returned. If both include and exclude actions are specified, exclude actions are ignored. */
      includeActions?: (GetAuditFeedWSRequestIncludeActionsEnum | null)[] | null;
      timestampMsAfter?: number | null;
      timestampMsBefore?: number | null;
    };
    Report_GetAuditFeedWSResponse: {
      auditEvents?: components["schemas"]["Report_AuditEventWeb"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Report_GetAverageReportWSRequest: {
      endDate?: string | null;
      interval?: GetAverageReportWSRequestIntervalEnum | null;
      scope?: GetAverageReportWSRequestScopeEnum | null;
      startDate?: string | null;
      type?: GetAverageReportWSRequestTypeEnum | null;
      uuid?: string | null;
    };
    Report_GetAverageReportWSResponse: {
      average?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      groupAverageMap?: { [key: string]: number | null } | null;
    };
    Report_GetAverageReportsWSRequest: {
      endDate?: string | null;
      interval?: GetAverageReportsWSRequestIntervalEnum | null;
      scope?: GetAverageReportsWSRequestScopeEnum | null;
      startDate?: string | null;
      type?: GetAverageReportsWSRequestTypeEnum | null;
    };
    Report_GetAverageReportsWSResponse: {
      averageMap?: { [key: string]: number | null } | null;
      error?: boolean | null;
      errorMsg?: string | null;
      groupAverageMap?: {
        [key: string]: { [key: string]: number | null } | null;
      } | null;
    };
    Report_GetCountReportV2WSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDate?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Time intervals to get reports for */
      interval: GetCountReportV2WSRequestIntervalEnum | null;
      /** Level of granularity to get reports for */
      scope: GetCountReportV2WSRequestScopeEnum | null;
      /** Deprecated input, use startTimeMs instead */
      startDate?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** Types of reports to receive */
      types: (GetCountReportV2WSRequestTypesEnum | null)[] | null;
      /** Uuid to get reports for, not needed for ORG scope */
      uuid?: string | null;
    };
    Report_GetCountReportWSRequest: {
      endDate?: string | null;
      interval?: GetCountReportWSRequestIntervalEnum | null;
      scope?: GetCountReportWSRequestScopeEnum | null;
      startDate?: string | null;
      type?: GetCountReportWSRequestTypeEnum | null;
      uuid?: string | null;
    };
    Report_GetCountReportWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      timeSeriesDataPoints?:
        | components["schemas"]["TimeSeriesDataPointV2Type"][]
        | null;
    };
    Report_GetCountReportsForDevicesAtLocationWSRequest: {
      /** End timestamp in epoch milliseconds. */
      endTimeMs: number | null;
      /** Level of granularity with which event counts are grouped. */
      interval: GetCountReportsForDevicesAtLocationWSRequestIntervalEnum | null;
      /** Location uuid to get device-level count reports for. */
      locationUuid: string | null;
      /** Start timestamp in epoch milliseconds. */
      startTimeMs: number | null;
      /** Type of event to get counts for. */
      type: GetCountReportsForDevicesAtLocationWSRequestTypeEnum | null;
    };
    Report_GetCountReportsWSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDate?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Time intervals to get reports for */
      interval: GetCountReportsWSRequestIntervalEnum | null;
      /** Level of granularity to get reports for, supports DEVICE and LOCATION */
      scope: GetCountReportsWSRequestScopeEnum | null;
      /** Deprecated input, use startTimeMs instead */
      startDate?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** Type of reports to receive */
      type: GetCountReportsWSRequestTypeEnum | null;
    };
    Report_GetCountReportsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      timeSeriesDataPointsMap?: {
        [key: string]:
          | components["schemas"]["TimeSeriesDataPointV2Type"][]
          | null;
      } | null;
    };
    Report_GetDiagnosticFeedWSRequest: {
      timestampMsAfter?: number | null;
      timestampMsBefore?: number | null;
    };
    Report_GetDiagnosticFeedWSResponse: {
      diagnosticEvents?: components["schemas"]["DiagnosticEventType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Report_GetLicensePlatesByDeviceWSRequest: {
      /** Deprecated input, use timestampMs instead */
      dateLocal?: string | null;
      /** Device uuid to get license plate counting events for */
      deviceUuid: string | null;
      /** Supports HOURLY, DAILY, WEEKLY, and MONTHLY */
      interval: GetLicensePlatesByDeviceWSRequestIntervalEnum | null;
      /** Datetime provided as a UNIX timestamp in milliseconds */
      timestampMs?: number | null;
    };
    Report_GetLicensePlatesByDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      licensePlateEvents?:
        | components["schemas"]["VehicleEventIndexType"][]
        | null;
    };
    Report_GetMostRecentPeopleCountWSRequest: {
      deviceUuid?: string | null;
      numMostRecent?: number | null;
    };
    Report_GetMostRecentPeopleCountWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      events?: components["schemas"]["PeopleCountEventType"][] | null;
    };
    Report_GetOccupancyCountWSRequest: {
      deviceUuid?: string | null;
      endMs?: number | null;
      startMs?: number | null;
    };
    Report_GetOccupancyCountWSResponse: {
      approximateTimestampMs?: number | null;
      error?: boolean | null;
      errorMsg?: string | null;
      estimatedCount?: number | null;
    };
    Report_GetOccupancyCountsWSRequest: {
      deviceUuid?: string | null;
      endTimeMs?: number | null;
      interval?: GetOccupancyCountsWSRequestIntervalEnum | null;
      startTimeMs?: number | null;
    };
    Report_GetOccupancyCountsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      timeSeriesDataPoints?:
        | components["schemas"]["Report_TimeSeriesDataPointV2ExtendedType"][]
        | null;
    };
    Report_GetProximityTagLocationsByDateWSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDateStr?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Deprecated input, use startTimeMs instead */
      startDateStr?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** Tag uuid to get report for */
      tagUuid: string | null;
    };
    Report_GetProximityTagLocationsByDateWSResponse: {
      dataPoints?:
        | components["schemas"]["ProximityTagTimeSeriesDataPointType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Report_GetRunningAverageWSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDate?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Supports HOURLY, DAILY, WEEKLY, and MONTHLY, returns averages for hours of the interval selected */
      interval: GetRunningAverageWSRequestIntervalEnum | null;
      /** Level of granularity to get statistics for */
      scope: GetRunningAverageWSRequestScopeEnum | null;
      /** Deprecated input, use startTimeMs instead */
      startDate?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** Uuid to get statistics for, not needed for ORG scope */
      uuid?: string | null;
    };
    Report_GetRunningAverageWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      statsDataPoints?:
        | components["schemas"]["WeeklyStatisticsDataPoint"][]
        | null;
    };
    Report_GetSummaryCountReportWSRequest: {
      /** Deprecated input, use endTimeMs instead */
      endDate?: string | null;
      /** End datetime provided as a UNIX timestamp in milliseconds */
      endTimeMs?: number | null;
      /** Time interval to get data for */
      interval: GetSummaryCountReportWSRequestIntervalEnum | null;
      /** Level of granularity to get reports for */
      scope: GetSummaryCountReportWSRequestScopeEnum | null;
      /** Deprecated input, use startTimeMs instead */
      startDate?: string | null;
      /** Start datetime provided as a UNIX timestamp in milliseconds */
      startTimeMs?: number | null;
      /** Type of report to receive */
      type: GetSummaryCountReportWSRequestTypeEnum | null;
    };
    Report_GetSummaryCountReportWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      timeSeriesDataPoints?:
        | components["schemas"]["SummaryCountTimeSeriesDataPointType"][]
        | null;
    };
    Report_GetThresholdCrossingCountReportWSRequest: {
      bucketSize?: GetThresholdCrossingCountReportWSRequestBucketSizeEnum | null;
      crossingObject?: GetThresholdCrossingCountReportWSRequestCrossingObjectEnum | null;
      dedupe?: boolean | null;
      deviceUuid?: string | null;
      endTimeMs?: number | null;
      startTimeMs?: number | null;
    };
    Report_GetThresholdCrossingCountReportWSResponse: {
      crossingCounts?: components["schemas"]["CrossingCountsType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Report_GetThresholdCrossingCountsWSRequest: {
      crossingObject?: GetThresholdCrossingCountsWSRequestCrossingObjectEnum | null;
      dailyResetTimeMinute?: number | null;
      devices?: (string | null)[] | null;
      endTimeMs?: number | null;
      startTimeMs?: number | null;
    };
    Report_GetThresholdCrossingCountsWSResponse: {
      counts?:
        | components["schemas"]["Report_GetThresholdCrossingCountsWSResponse_ThresholdCrossingCountType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Report_GetThresholdCrossingCountsWSResponse_ThresholdCrossingCountType: {
      count?: number | null;
      timestampMs?: number | null;
    };
    Report_GetThresholdCrossingEventsForDeviceWSRequest: {
      crossingObject?: GetThresholdCrossingEventsForDeviceWSRequestCrossingObjectEnum | null;
      deviceUuid?: string | null;
      endTimeMs?: number | null;
      lastEvaluatedKey?: string | null;
      maxPageSize?: number | null;
      startTimeMs?: number | null;
    };
    Report_GetThresholdCrossingEventsForDeviceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      lastEvaluatedKey?: string | null;
      thresholdCrossingEvents?:
        | components["schemas"]["MinimalThresholdEventType"][]
        | null;
    };
    Report_GetThresholdCrossingEventsWSRequest: {
      crossingObject?: GetThresholdCrossingEventsWSRequestCrossingObjectEnum | null;
      devices?: (string | null)[] | null;
      endTimeMs?: number | null;
      startTimeMs?: number | null;
    };
    Report_GetThresholdCrossingEventsWSResponse: {
      deviceToThresholdCrossingEventMap?: {
        [key: string]:
          | components["schemas"]["MinimalThresholdEventType"][]
          | null;
      } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Report_ResetRunningAverageWSRequest: {
      scope?: ResetRunningAverageWSRequestScopeEnum | null;
      uuid?: string | null;
    };
    Report_ResetRunningAverageWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Report_TimeSeriesDataPointV2ExtendedType: {
      approximateTimestampMsMap?: { [key: string]: number | null } | null;
      dateLocal?: string | null;
      dateUtc?: string | null;
      eventCountMap?: { [key: string]: number | null } | null;
      timestampMs?: number | null;
    };
    RequestToExitEnumType: RequestToExitEnumType;
    RequestToExitPhysicalPortEnumType: RequestToExitPhysicalPortEnumType;
    RequestToExitPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["RequestToExitPhysicalPortEnumType"];
      supervisionConfiguration?: components["schemas"]["PortSupervisionConfigurationType"];
    };
    RequestToExitShadowType:
      | ({
          state?: components["schemas"]["RequestToExitStateEnumType"];
          stateUpdateEventTimestampMs?: number | null;
          supervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          createdAtMillis?: number | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          type?: components["schemas"]["ComponentShadowEnumType"];
          updatedAtMillis?: number | null;
        })
      | null;
    RequestToExitStateChangeEventType:
      | ({
          componentCompositeUuid?: string | null;
          intentOnly?: boolean | null;
          newState?: components["schemas"]["RequestToExitStateEnumType"];
          newSupervisionState?: components["schemas"]["SupervisionStateEnumType"];
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    RequestToExitStateEnumType: RequestToExitStateEnumType;
    Resolution: {
      height?: number | null;
      width?: number | null;
    };
    ResponseEntity: {
      body?: { [key: string]: unknown } | null;
      headers?:
        | ({
            accept?: components["schemas"]["MediaType"][] | null;
            acceptCharset?:
              | ({
                  registered?: boolean | null;
                } | null)[]
              | null;
            acceptLanguage?:
              | ({
                  range?: string | null;
                  weight?: number | null;
                } | null)[]
              | null;
            acceptLanguageAsLocales?:
              | ({
                  country?: string | null;
                  displayCountry?: string | null;
                  displayLanguage?: string | null;
                  displayName?: string | null;
                  displayScript?: string | null;
                  displayVariant?: string | null;
                  extensionKeys?: (string | null)[] | null;
                  iso3Country?: string | null;
                  iso3Language?: string | null;
                  language?: string | null;
                  script?: string | null;
                  unicodeLocaleAttributes?: (string | null)[] | null;
                  unicodeLocaleKeys?: (string | null)[] | null;
                  variant?: string | null;
                } | null)[]
              | null;
            acceptPatch?: components["schemas"]["MediaType"][] | null;
            accessControlAllowCredentials?: boolean | null;
            accessControlAllowHeaders?: (string | null)[] | null;
            accessControlAllowMethods?:
              | components["schemas"]["HttpMethod"][]
              | null;
            accessControlAllowOrigin?: string | null;
            accessControlExposeHeaders?: (string | null)[] | null;
            accessControlMaxAge?: number | null;
            accessControlRequestHeaders?: (string | null)[] | null;
            accessControlRequestMethod?: components["schemas"]["HttpMethod"];
            all?: { [key: string]: string | null } | null;
            allow?: components["schemas"]["HttpMethod"][] | null;
            basicAuth?: string | null;
            bearerAuth?: string | null;
            cacheControl?: string | null;
            connection?: (string | null)[] | null;
            contentDisposition?: components["schemas"]["ContentDisposition"];
            contentLanguage?: {
              country?: string | null;
              displayCountry?: string | null;
              displayLanguage?: string | null;
              displayName?: string | null;
              displayScript?: string | null;
              displayVariant?: string | null;
              extensionKeys?: (string | null)[] | null;
              iso3Country?: string | null;
              iso3Language?: string | null;
              language?: string | null;
              script?: string | null;
              unicodeLocaleAttributes?: (string | null)[] | null;
              unicodeLocaleKeys?: (string | null)[] | null;
              variant?: string | null;
            } | null;
            contentLength?: number | null;
            contentType?: components["schemas"]["MediaType"];
            date?: number | null;
            empty?: boolean | null;
            etag?: string | null;
            expires?: number | null;
            host?: {
              address?: {
                address?: (string | null)[] | null;
                anyLocalAddress?: boolean | null;
                canonicalHostName?: string | null;
                hostAddress?: string | null;
                hostName?: string | null;
                linkLocalAddress?: boolean | null;
                loopbackAddress?: boolean | null;
                mcglobal?: boolean | null;
                mclinkLocal?: boolean | null;
                mcnodeLocal?: boolean | null;
                mcorgLocal?: boolean | null;
                mcsiteLocal?: boolean | null;
                multicastAddress?: boolean | null;
                siteLocalAddress?: boolean | null;
              } | null;
              hostName?: string | null;
              hostString?: string | null;
              port?: number | null;
              unresolved?: boolean | null;
            } | null;
            ifMatch?: (string | null)[] | null;
            ifModifiedSince?: number | null;
            ifNoneMatch?: (string | null)[] | null;
            ifUnmodifiedSince?: number | null;
            lastModified?: number | null;
            location?: string | null;
            origin?: string | null;
            pragma?: string | null;
            range?: components["schemas"]["HttpRange"][] | null;
            upgrade?: string | null;
            vary?: (string | null)[] | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      statusCode?: components["schemas"]["HttpStatusCode"];
      statusCodeValue?: number | null;
    };
    ResponseEntityString: {
      body?: string | null;
      headers?:
        | ({
            accept?: components["schemas"]["MediaType"][] | null;
            acceptCharset?:
              | ({
                  registered?: boolean | null;
                } | null)[]
              | null;
            acceptLanguage?:
              | ({
                  range?: string | null;
                  weight?: number | null;
                } | null)[]
              | null;
            acceptLanguageAsLocales?:
              | ({
                  country?: string | null;
                  displayCountry?: string | null;
                  displayLanguage?: string | null;
                  displayName?: string | null;
                  displayScript?: string | null;
                  displayVariant?: string | null;
                  extensionKeys?: (string | null)[] | null;
                  iso3Country?: string | null;
                  iso3Language?: string | null;
                  language?: string | null;
                  script?: string | null;
                  unicodeLocaleAttributes?: (string | null)[] | null;
                  unicodeLocaleKeys?: (string | null)[] | null;
                  variant?: string | null;
                } | null)[]
              | null;
            acceptPatch?: components["schemas"]["MediaType"][] | null;
            accessControlAllowCredentials?: boolean | null;
            accessControlAllowHeaders?: (string | null)[] | null;
            accessControlAllowMethods?:
              | components["schemas"]["HttpMethod"][]
              | null;
            accessControlAllowOrigin?: string | null;
            accessControlExposeHeaders?: (string | null)[] | null;
            accessControlMaxAge?: number | null;
            accessControlRequestHeaders?: (string | null)[] | null;
            accessControlRequestMethod?: components["schemas"]["HttpMethod"];
            all?: { [key: string]: string | null } | null;
            allow?: components["schemas"]["HttpMethod"][] | null;
            basicAuth?: string | null;
            bearerAuth?: string | null;
            cacheControl?: string | null;
            connection?: (string | null)[] | null;
            contentDisposition?: components["schemas"]["ContentDisposition"];
            contentLanguage?: {
              country?: string | null;
              displayCountry?: string | null;
              displayLanguage?: string | null;
              displayName?: string | null;
              displayScript?: string | null;
              displayVariant?: string | null;
              extensionKeys?: (string | null)[] | null;
              iso3Country?: string | null;
              iso3Language?: string | null;
              language?: string | null;
              script?: string | null;
              unicodeLocaleAttributes?: (string | null)[] | null;
              unicodeLocaleKeys?: (string | null)[] | null;
              variant?: string | null;
            } | null;
            contentLength?: number | null;
            contentType?: components["schemas"]["MediaType"];
            date?: number | null;
            empty?: boolean | null;
            etag?: string | null;
            expires?: number | null;
            host?: {
              address?: {
                address?: (string | null)[] | null;
                anyLocalAddress?: boolean | null;
                canonicalHostName?: string | null;
                hostAddress?: string | null;
                hostName?: string | null;
                linkLocalAddress?: boolean | null;
                loopbackAddress?: boolean | null;
                mcglobal?: boolean | null;
                mclinkLocal?: boolean | null;
                mcnodeLocal?: boolean | null;
                mcorgLocal?: boolean | null;
                mcsiteLocal?: boolean | null;
                multicastAddress?: boolean | null;
                siteLocalAddress?: boolean | null;
              } | null;
              hostName?: string | null;
              hostString?: string | null;
              port?: number | null;
              unresolved?: boolean | null;
            } | null;
            ifMatch?: (string | null)[] | null;
            ifModifiedSince?: number | null;
            ifNoneMatch?: (string | null)[] | null;
            ifUnmodifiedSince?: number | null;
            lastModified?: number | null;
            location?: string | null;
            origin?: string | null;
            pragma?: string | null;
            range?: components["schemas"]["HttpRange"][] | null;
            upgrade?: string | null;
            vary?: (string | null)[] | null;
          } & { [key: string]: (string | null)[] | null })
        | null;
      statusCode?: components["schemas"]["HttpStatusCode"];
      statusCodeValue?: number | null;
    };
    RhombusKeyAppConfigType: {
      createdAtMillis?: number | null;
      orgUuid?: string | null;
      preferences?: components["schemas"]["RhombusKeyAppPreferencesType"];
      rhombusOrgUserUuid?: string | null;
      settings?: components["schemas"]["RhombusKeyAppSettingsType"];
      updatedAtMillis?: number | null;
    };
    RhombusKeyAppPreferencesType: {
      favoriteAccessControlledDoorUuids?: (string | null)[] | null;
    };
    RhombusKeyAppSettingsType: {
      bypassSaml?: boolean | null;
      credentialProvisioningRules?: components["schemas"]["RhombusSecureMobileCredentialProvisioningRulesType"];
      remoteUnlockEnabled?: boolean | null;
      rhombusKeyAccessEnabled?: boolean | null;
    };
    RhombusOrgUserType: {
      accessibleRhombusApps?: (RhombusOrgUserAccessibleRhombusAppsEnum | null)[] | null;
      accountOwner?: boolean | null;
      bypassSaml?: boolean | null;
      createdAtMillis?: number | null;
      deleted?: boolean | null;
      firstName?: string | null;
      lastName?: string | null;
      name?: string | null;
      orgUserCustomizationFlags?: { [key: string]: string | null } | null;
      orgUuid?: string | null;
      rhombusUserUuid?: string | null;
      status?: RhombusOrgUserStatusEnum | null;
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    RhombusOsdpDoorReaderType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      createdAtMillis?: number | null;
      deviceUuid?: string | null;
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      hardwareUuid?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      osdpAddress?: number | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      port?: components["schemas"]["OsdpReaderPortType"];
      portImmutable?: boolean | null;
      readerType?: components["schemas"]["DoorReaderEnumType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      serialNumber?: string | null;
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    RhombusSecureCsnType:
      | ({
          algorithm?: components["schemas"]["SecureTokenAlgorithm"];
          baseKeyIdentifier?: number | null;
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          managedCredUuid?: string | null;
          note?: string | null;
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          userUuid?: string | null;
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    RhombusSecureMobileAppState: {
      appName?: string | null;
      appNotifications?: components["schemas"]["RhombusSecureMobileFeature"];
      appOS?: string | null;
      appStatusUpdatedAtMillis?: number | null;
      appVersion?: string | null;
      clientType?: components["schemas"]["MobileTokenOSEnum"];
      credentialUuid?: string | null;
      deviceModel?: string | null;
      installationId?: string | null;
      orgUuid?: string | null;
      tapToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
      userAgent?: string | null;
      userUuid?: string | null;
      waveToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
    };
    RhombusSecureMobileAppStateStats: {
      tapToUnlockStats?: components["schemas"]["RhombusSecureMobileCredStatRhombusSecureMobileFeatureStatus"];
      versionStats?: components["schemas"]["RhombusSecureMobileCredStatString"];
      waveToUnlockStats?: components["schemas"]["RhombusSecureMobileCredStatRhombusSecureMobileFeatureStatus"];
    };
    RhombusSecureMobileCredStatRhombusSecureMobileFeatureStatus: {
      androidCredRefMap?: {
        [key: string]:
          | components["schemas"]["StatsCredentialReference"][]
          | null;
      } | null;
      androidTotal?: number | null;
      androidTotalMap?: { [key: string]: number | null } | null;
      iphoneCredRefMap?: {
        [key: string]:
          | components["schemas"]["StatsCredentialReference"][]
          | null;
      } | null;
      iphoneTotal?: number | null;
      iphoneTotalMap?: { [key: string]: number | null } | null;
      total?: number | null;
    };
    RhombusSecureMobileCredStatString: {
      androidCredRefMap?: {
        [key: string]:
          | components["schemas"]["StatsCredentialReference"][]
          | null;
      } | null;
      androidTotal?: number | null;
      androidTotalMap?: { [key: string]: number | null } | null;
      iphoneCredRefMap?: {
        [key: string]:
          | components["schemas"]["StatsCredentialReference"][]
          | null;
      } | null;
      iphoneTotal?: number | null;
      iphoneTotalMap?: { [key: string]: number | null } | null;
      total?: number | null;
    };
    RhombusSecureMobileCredentialProvisioningRulesType: {
      endDateProvisioner?: components["schemas"]["EpochSecondsProvisioner"];
      maxMobileCredsAllowed?: number | null;
      startDateProvisioner?: components["schemas"]["EpochSecondsProvisioner"];
    };
    RhombusSecureMobileFeature: {
      settings?:
        | components["schemas"]["RhombusSecureMobileFeatureSetting"][]
        | null;
      status?: components["schemas"]["RhombusSecureMobileFeatureStatus"];
    } | null;
    RhombusSecureMobileFeatureSetting: {
      name?: string | null;
      status?: components["schemas"]["RhombusSecureMobileFeatureSettingStatus"];
      value?: string | null;
    } | null;
    RhombusSecureMobileFeatureSettingStatus: RhombusSecureMobileFeatureSettingStatusEnum;
    RhombusSecureMobileFeatureStatus: RhombusSecureMobileFeatureStatusEnum;
    RhombusSecureMobileType:
      | ({
          algorithm?: components["schemas"]["SecureTokenAlgorithm"];
          appName?: string | null;
          appNotifications?: components["schemas"]["RhombusSecureMobileFeature"];
          appOS?: string | null;
          appStatusUpdatedAtMillis?: number | null;
          appVersion?: string | null;
          baseKeyIdentifier?: number | null;
          clientType?: components["schemas"]["MobileTokenOSEnum"];
          deviceModel?: string | null;
          installationId?: string | null;
          tapToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
          userAgent?: string | null;
          waveToUnlock?: components["schemas"]["RhombusSecureMobileFeature"];
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          managedCredUuid?: string | null;
          note?: string | null;
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          userUuid?: string | null;
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    RhombusShipmentInfoType: {
      additionalEmails?: string | null;
      chosenCarrierName?: string | null;
      claimKeyToLicenseMap?: { [key: string]: (string | null)[] | null } | null;
      claimKeyToLicenseMapV2?: {
        [key: string]: {
          [
            key: string
          ]: components["schemas"]["SalesforceLicenseStartDateTimeAndEndDateTime"];
        } | null;
      } | null;
      customerEmails?: string | null;
      customerName?: string | null;
      orgUuid?: string | null;
      partnerOrgUuid?: string | null;
      purchaseOrderNumber?: string | null;
      rmaReturnTrackingNumber?: string | null;
      rmaUuid?: string | null;
      rmaUuids?: (string | null)[] | null;
      salesForceOpportunityId?: string | null;
      zendeskTicketNumber?: string | null;
    } | null;
    RtspEndpoint: {
      lastRtspUrlStatus?: RtspEndpointLastRtspUrlStatusEnum | null;
      onvifProfileToken?: string | null;
      rtspUrl?: string | null;
      source?: components["schemas"]["RtspEndpointSource"];
      uuid?: string | null;
    };
    RtspEndpointSource: RtspEndpointSourceEnum;
    RuleActionType: {
      activateLocationLockdown?: components["schemas"]["ActivateLocationLockdownActionType"];
      alertAction?: boolean | null;
      audioPlaybackActions?:
        | components["schemas"]["AudioPlaybackActionType"][]
        | null;
      cancelLoopingAudioPlaybackAction?: components["schemas"]["CancelLoopingAudioPlaybackActionType"];
      integrationCommandActions?:
        | components["schemas"]["IntegrationCommandActionType"][]
        | null;
      integrationNotificationActions?:
        | components["schemas"]["IntegrationNotificationActionType"][]
        | null;
      liveNotificationAction?: boolean | null;
      remoteDoorUnlockActions?:
        | components["schemas"]["RemoteDoorUnlockActionType"][]
        | null;
      triggerComponentRelayActions?:
        | components["schemas"]["TriggerComponentRelayActionType"][]
        | null;
      webhookActions?: components["schemas"]["WebhookActionType"][] | null;
    };
    RuleEventOriginator:
      | ({
          ruleName?: string | null;
          ruleUuid?: string | null;
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    RuleFilterType: {
      /** List of schedules that apply to the rule. at least one schedule must be met to trigger this rule. If null, then this rule is enabled all the time. */
      scheduleUuids?: (string | null)[] | null;
      /** Number of seconds to back off after rule is triggered before triggering again. I.e. this rule will only trigger once every X seconds regardless of how many triggering events occur within that window */
      triggerBackoffSecs?: number | null;
    };
    RuleLockdownEventOriginator:
      | ({
          ruleName?: string | null;
          ruleUuid?: string | null;
        } & {
          type?: components["schemas"]["LockdownEventOriginatorEnumType"];
        })
      | null;
    RuleTriggerConjunctionEnum: RuleTriggerConjunctionEnum;
    RuleTriggerTypeEnum: RuleTriggerTypeEnum;
    RuleType: {
      action?: components["schemas"]["RuleActionType"];
      conjunction?: components["schemas"]["RuleTriggerConjunctionEnum"];
      name?: string | null;
      orgUuid?: string | null;
      ownerUuid?: string | null;
      ruleFilters?: components["schemas"]["RuleFilterType"];
      ruleType?: components["schemas"]["RuleTypeEnum"];
      triggers?: components["schemas"]["BaseRuleTriggerType"][] | null;
      uuid?: string | null;
    };
    RuleTypeEnum: RuleTypeEnum;
    RulesEventRecordType: {
      activatedLocationLockdownRecord?: components["schemas"]["ActivateLocationLockdownActionRecordType"];
      alertActionRecord?: components["schemas"]["AlertActionRecordType"];
      alertMonitoringEventRecords?:
        | components["schemas"]["AlertMonitoringEventRecordType"][]
        | null;
      audioPlaybackActionRecords?:
        | components["schemas"]["AudioPlaybackActionRecordType"][]
        | null;
      cancelLoopingAudioPlaybackActionRecordType?: components["schemas"]["CancelLoopingAudioPlaybackActionRecordType"];
      deviceEventRecords?:
        | components["schemas"]["DeviceEventRecordType"][]
        | null;
      integrationActionStatuses?: {
        [key: string]: components["schemas"]["IntegrationActionStatusEnum"];
      } | null;
      liveNotificationActionRecord?: components["schemas"]["LiveNotificationActionRecordType"];
      orgUuid?: string | null;
      ruleUuid?: string | null;
      scheduledEventRecords?:
        | components["schemas"]["ScheduledEventRecordType"][]
        | null;
      triggerComponentRelayRecords?:
        | components["schemas"]["TriggerComponentRelayActionRecordType"][]
        | null;
      triggeredTimestampMs?: number | null;
      unlockDoorActionRecords?:
        | components["schemas"]["UnlockDoorActionRecordType"][]
        | null;
      uuid?: string | null;
      visionLLMEventRecords?:
        | components["schemas"]["VisionLLMEventRecordType"][]
        | null;
      webhookActionStatuses?: { [key: string]: boolean | null } | null;
    };
    Rules_CreateRuleWSRequest: {
      rule?: components["schemas"]["RuleType"];
    };
    Rules_CreateRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      ruleUuid?: string | null;
    };
    Rules_DeleteRulePauseSettingWSRequest: {
      uuid?: string | null;
    };
    Rules_DeleteRulePauseSettingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Rules_DeleteRuleWSRequest: {
      ruleUuid?: string | null;
    };
    Rules_DeleteRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Rules_GetRulePauseSettingsResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rulesPausedMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
    };
    Rules_GetRulePauseSettingsWSRequest: { [key: string]: unknown };
    Rules_GetRulesForOrgWSRequest: { [key: string]: unknown };
    Rules_GetRulesForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      rules?: components["schemas"]["RuleType"][] | null;
    };
    Rules_PauseRuleWSRequest: {
      durationSec?: number | null;
      ruleUuid?: string | null;
      scheduledTimestampSec?: number | null;
    };
    Rules_PauseRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Rules_UpdateRuleWSRequest: {
      ruleUpdate?: components["schemas"]["RuleType"];
    };
    Rules_UpdateRuleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Rules_records_DeleteRulesEventRecordWSRequest: {
      uuid?: string | null;
    };
    Rules_records_DeleteRulesEventRecordWSResponse: { [key: string]: unknown };
    Rules_records_GetLatestRulesEventRecordsWSRequest: {
      associatedUuids?: (string | null)[] | null;
      n?: number | null;
      ruleUuid?: string | null;
    };
    Rules_records_GetLatestRulesEventRecordsWSResponse: {
      rulesEventRecords?:
        | components["schemas"]["RulesEventRecordType"][]
        | null;
    };
    Rules_records_GetRulesEventRecordsWSRequest: {
      /** Associated uuids for devices, components, locations and componenet composites. **Optional, can be null. */
      associatedUuids?: (string | null)[] | null;
      endTime?: number | null;
      startTime?: number | null;
    };
    Rules_records_GetRulesEventRecordsWSResponse: {
      rulesEventRecords?:
        | components["schemas"]["RulesEventRecordType"][]
        | null;
    };
    Rules_records_GetRulesFilteredWSRequest: {
      associatedUuids?: (string | null)[] | null;
      ruleTypeFilter?: components["schemas"]["RuleTypeEnum"][] | null;
    };
    SAMLSettingsType: {
      addUsersOnRoleMismatch?: boolean | null;
      enabled?: boolean | null;
      idpMetaDataXml?: string | null;
      justInTimeAccountProvisioningEnabled?: boolean | null;
    };
    SCIMSettingsType: {
      addUsersOnRoleMismatch?: boolean | null;
      createdAtMillis?: number | null;
      orgUuid?: string | null;
      rhombusKeyAppSettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      sendWelcomeEmailToNewRhombusKeyUsers?: boolean | null;
      sendWelcomeEmailToNewUsers?: boolean | null;
      updatedAtMillis?: number | null;
    };
    SalesforceLicenseStartDateTimeAndEndDateTime: {
      contractEndDateTime?: string | null;
      contractStartDateTime?: string | null;
    } | null;
    SaltoSettings: {
      alertUnauthorizedFaces?: boolean | null;
      createSeekPoints?: boolean | null;
      enabled?: boolean | null;
      identifyFacesFromBadge?: boolean | null;
      saveClips?: boolean | null;
      tokenToCamerasMap?: { [key: string]: (string | null)[] | null } | null;
    };
    SavedClipV2Type: {
      accessSettings?: components["schemas"]["ClipAccessSettings"];
      alterMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      analyzed?: boolean | null;
      byteCount?: number | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      consoleDelete?: boolean | null;
      createdAtMs?: number | null;
      description?: string | null;
      devicePresentationOrder?: (string | null)[] | null;
      deviceUuid?: string | null;
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      externalTransactionId?: string | null;
      fisheyeMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      integrationUploadList?: components["schemas"]["IntegrationEnum"][] | null;
      isMonitoringClip?: boolean | null;
      isVendorClip?: boolean | null;
      orgUuid?: string | null;
      sendToSharedStorage?: boolean | null;
      sha256Hex?: string | null;
      sourceAlertUuid?: string | null;
      status?: SavedClipV2StatusEnum | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      timestampMs?: number | null;
      title?: string | null;
      userUuid?: string | null;
      uuid?: string | null;
      videoResolution?: components["schemas"]["Resolution"];
    };
    SavedClipWithDetailsType: {
      accessSettings?: components["schemas"]["ClipAccessSettings"];
      alterMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      analyzed?: boolean | null;
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      byteCount?: number | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      consoleDelete?: boolean | null;
      createdAtMs?: number | null;
      description?: string | null;
      devicePresentationOrder?: (string | null)[] | null;
      deviceUuid?: string | null;
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      externalTransactionId?: string | null;
      fisheyeMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      integrationUploadList?: components["schemas"]["IntegrationEnum"][] | null;
      isMonitoringClip?: boolean | null;
      isVendorClip?: boolean | null;
      orgUuid?: string | null;
      seekPoints?: components["schemas"]["ClipSeekPointV2Type"][] | null;
      sendToSharedStorage?: boolean | null;
      sha256Hex?: string | null;
      sourceAlertUuid?: string | null;
      status?: SavedClipWithDetailsStatusEnum | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      timestampMs?: number | null;
      title?: string | null;
      userUuid?: string | null;
      uuid?: string | null;
      videoResolution?: components["schemas"]["Resolution"];
    };
    SceneQueryReportEvent: {
      timestampMs?: number | null;
      value?: string | null;
    };
    Scenequery_CreatePromptConfigurationWSRequest: {
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    Scenequery_CreatePromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    Scenequery_DeletePromptConfigurationWSRequest: {
      promptUuid?: string | null;
    };
    Scenequery_DeletePromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Scenequery_FindAllPromptConfigurationsWSRequest: { [key: string]: unknown };
    Scenequery_FindAllPromptConfigurationsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      promptConfigurations?:
        | components["schemas"]["PromptConfigurationType"][]
        | null;
    };
    Scenequery_GetPromptConfigurationWSRequest: {
      promptUuid?: string | null;
    };
    Scenequery_GetPromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    Scenequery_ReportWSRequest: {
      deviceFacetUuids?: (string | null)[] | null;
      endMs?: number | null;
      locationUuid?: string | null;
      promptUuid?: string | null;
      startMs?: number | null;
    };
    Scenequery_ReportWSResponse: {
      reports?:
        | components["schemas"]["Scenequery_ReportWSResponse_SceneQueryWSReport"][]
        | null;
    };
    Scenequery_ReportWSResponse_SceneQueryReportWSEvent: {
      timestampMs?: number | null;
      value?: string | null;
    };
    Scenequery_ReportWSResponse_SceneQueryWSReport: {
      deviceFacetUuid?: string | null;
      events?:
        | components["schemas"]["Scenequery_ReportWSResponse_SceneQueryReportWSEvent"][]
        | null;
      promptType?: SceneQueryWSReportPromptTypeEnum | null;
      promptUuid?: string | null;
    };
    Scenequery_SelectiveUpdatePromptConfigurationWSRequest: {
      active?: boolean | null;
      cameraConfigurations?:
        | components["schemas"]["CameraConfiguration"][]
        | null;
      checkEquations?: components["schemas"]["CheckEquations"];
      description?: string | null;
      minuteTriggerRate?: number | null;
      name?: string | null;
      orgUuid?: string | null;
      prompt?: string | null;
      promptType?: SelectiveUpdatePromptConfigurationWSRequestPromptTypeEnum | null;
      scheduleUuid?: string | null;
      shortName?: string | null;
      uuid?: string | null;
    };
    Scenequery_SelectiveUpdatePromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Scenequery_TriggerPromptWSRequest: {
      deviceFacetUuid?: string | null;
      prompt?: string | null;
      promptType?: TriggerPromptWSRequestPromptTypeEnum | null;
      region?: components["schemas"]["RegionPolygonType"];
      timestampMs?: number | null;
    };
    Scenequery_TriggerPromptWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      event?: components["schemas"]["SceneQueryReportEvent"];
    };
    Scenequery_UpdatePromptConfigurationWSRequest: {
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    Scenequery_UpdatePromptConfigurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      promptConfiguration?: components["schemas"]["PromptConfigurationType"];
    };
    Schedule_AccessControlledDoorNextNearestSchedule: {
      currentlyActive?: boolean | null;
      doorState?: components["schemas"]["AccessControlledDoorStateEnumType"];
      scheduleUuid?: string | null;
      source?: components["schemas"]["Schedule_AccessControlledDoorStateSourceEnum"];
      startsAtMillisInclusive?: number | null;
      stopsAtMillisInclusive?: number | null;
    };
    Schedule_AccessControlledDoorStateSourceEnum: Schedule_AccessControlledDoorStateSourceEnum;
    Schedule_CreateAbsoluteScheduleWSRequest: {
      schedule?: components["schemas"]["AbsoluteSecondsScheduleType"];
    };
    Schedule_CreateAbsoluteScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      scheduleUuid?: string | null;
    };
    Schedule_CreateRelativeDateTimeIntervalsScheduleWSRequest: {
      schedule?: components["schemas"]["RelativeDateTimeIntervalsScheduleType"];
    };
    Schedule_CreateRelativeDateTimeIntervalsScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      scheduleUuid?: string | null;
    };
    Schedule_CreateRelativeScheduleWSRequest: {
      schedule?: components["schemas"]["RealtimeRelativeSecondsScheduleType"];
    };
    Schedule_CreateRelativeScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      scheduleUuid?: string | null;
    };
    Schedule_CreateWeeklyScheduleWSRequest: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
    };
    Schedule_CreateWeeklyScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      scheduleUuid?: string | null;
    };
    Schedule_FindAbsoluteScheduleWSRequest: {
      uuid?: string | null;
    };
    Schedule_FindAbsoluteScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      schedule?: components["schemas"]["AbsoluteSecondsScheduleType"];
    };
    Schedule_FindRelativeDateTimeIntervalsScheduleWSRequest: {
      uuid?: string | null;
    };
    Schedule_FindRelativeDateTimeIntervalsScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      schedule?: components["schemas"]["RelativeDateTimeIntervalsScheduleType"];
    };
    Schedule_FindRelativeScheduleWSRequest: {
      uuid?: string | null;
    };
    Schedule_FindRelativeScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      schedule?: components["schemas"]["RealtimeRelativeSecondsScheduleType"];
    };
    Schedule_FindWeeklyScheduleWSRequest: {
      uuid?: string | null;
    };
    Schedule_FindWeeklyScheduleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
    };
    Schedule_GetScheduleDataV2WSRequest: {
      scheduleUuid?: string | null;
    };
    Schedule_GetScheduleDataV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      weeklyScheduleData?: components["schemas"]["Schedule_WeeklyRepeatingScheduleDataType"];
    };
    Schedule_GetScheduleDataWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      weeklyScheduleData?:
        | components["schemas"]["Schedule_WeeklyRepeatingScheduleDataType"][]
        | null;
    };
    Schedule_GetSchedulesWSRequest: { [key: string]: unknown };
    Schedule_GetSchedulesWSResponse: {
      absoluteSchedules?:
        | components["schemas"]["AbsoluteSecondsScheduleType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
      relativeDatetimeSchedules?:
        | components["schemas"]["RelativeDateTimeIntervalsScheduleType"][]
        | null;
      relativeSchedules?:
        | components["schemas"]["RealtimeRelativeSecondsScheduleType"][]
        | null;
      weeklySchedules?:
        | components["schemas"]["WeeklyRepeatingScheduleType"][]
        | null;
    };
    Schedule_WeeklyRepeatingScheduleDataType: {
      accessGrantUuids?: (string | null)[] | null;
      alarmMonitoringUuids?: (string | null)[] | null;
      alertPolicyUuids?: (string | null)[] | null;
      doorSettingUuids?: (string | null)[] | null;
      intervalList?: components["schemas"]["WeeklyMinuteIntervalType"][] | null;
      locationsUsedIn?: (string | null)[] | null;
      mutable?: boolean | null;
      name?: string | null;
      oneTimeUse?: boolean | null;
      orgUuid?: string | null;
      ruleUuids?: (string | null)[] | null;
      sharedStreamUuids?: (string | null)[] | null;
      strategy?: WeeklyRepeatingScheduleDataStrategyEnum | null;
      uuid?: string | null;
    };
    ScheduledEventRecordType: {
      timestampMs?: number | null;
    };
    ScheduledIntervalType: {
      durationSecs?: number | null;
      timestampSec?: number | null;
      uuid?: string | null;
    };
    ScheduledRuleTriggerType:
      | ({
          /** List of locations to use for timezone evaluation and for display purposes */
          locationUuids?: (string | null)[] | null;
          /** minute of the day for this trigger. note that it is dependent on the timezone of the devices in the rule actions or the timezone of the specified locations. */
          minOfDay?: number | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    ScopedCloudArchivingConfig: {
      orgUuid?: string | null;
      scope?: components["schemas"]["DeviceTargetScope"];
      targetUuid?: string | null;
      uploadScheduleInverted?: boolean | null;
      uploadScheduleUuid?: string | null;
      uploadStrategy?: components["schemas"]["CloudArchivingStrategy"];
    };
    Search_DeleteVideoEmbeddingWSRequest: {
      embedding?: components["schemas"]["GenericVideoEmbedding"];
    };
    Search_DeleteVideoEmbeddingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Search_IndexVideoEmbeddingWSRequest: {
      embedding?: components["schemas"]["GenericVideoEmbedding"];
    };
    Search_IndexVideoEmbeddingWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Search_SearchLicensePlatesWSRequest: {
      deviceUuids?: (string | null)[] | null;
      endTime?: number | null;
      forcedFuzziness?: number | null;
      fuzzy?: boolean | null;
      licensePlate?: string | null;
      startTime?: number | null;
    };
    Search_SearchLicensePlatesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      vehicleEvents?:
        | components["schemas"]["VehicleEventSearchHitType"][]
        | null;
    };
    Search_SearchObjectsByColorWSRequest: {
      colorFilter?: (SearchObjectsByColorWSRequestColorFilterEnum | null)[] | null;
      deviceFilter?: (string | null)[] | null;
      endTimeMs?: number | null;
      objectTypeFilter?: components["schemas"]["ActivityEnum"][] | null;
      startTimeMs?: number | null;
    };
    Search_SearchObjectsByColorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      objects?: components["schemas"]["FootageBoundingBoxType"][] | null;
    };
    Search_SearchSimilarObjectEmbeddingsByTextWSRequest: {
      /** Optional number of results to return. Setting to larger numbers will increase latency. */
      maxNumResults?: number | null;
      model: components["schemas"]["ObjectSearchModelEnum"];
      /** Optional object type filter to narrow results to only vehicles or only humans. */
      objectTypeFilter?: (SearchSimilarObjectEmbeddingsByTextWSRequestObjectTypeFilterEnum | null)[] | null;
      /** Optional list of device uuids to filter result set on. */
      queryDeviceUuids?: (string | null)[] | null;
      /** End time in epoch milliseconds. Results returned will have occurred before this time. */
      queryEndTimeMs: number | null;
      /** Start time in epoch milliseconds. Results returned will have occurred after this time. */
      queryStartTimeMs: number | null;
      /** Optional region filter to return results only if they overlap with the supplied region. This is a list of perymyriad points defining a polygon. The first and last elements must be the same to make a connected polygon. For example, a triangle should have 4 points defined in this list. */
      regionFilter?: ((number | null)[] | null)[] | null;
      /** The search text to find similar objects to. Phrases like "red sedan", "person in yellow shirt", etc. */
      searchText: string | null;
      /** Optional threshold applied to filter returned results, set as a float in [0.0, 1.0]. */
      similarityThreshold?: number | null;
    };
    Search_SearchSimilarObjectEmbeddingsByVectorWSRequest: {
      maxNumResults?: number | null;
      model?: components["schemas"]["ObjectSearchModelEnum"];
      objectTypeFilter?: (string | null)[] | null;
      queryDeviceUuids?: (string | null)[] | null;
      queryEndTimeMs?: number | null;
      queryStartTimeMs?: number | null;
      regionFilter?: ((number | null)[] | null)[] | null;
      searchEmbedding?: (number | null)[] | null;
      similarityThreshold?: number | null;
    };
    Search_SearchSimilarObjectEmbeddingsWSRequest: {
      /** Optional number of results to return. Setting to larger numbers will increase latency. */
      maxNumResults?: number | null;
      model: components["schemas"]["ObjectSearchModelEnum"];
      /** Optional object type filter to narrow results to only vehicles or only humans. */
      objectTypeFilter?: (SearchSimilarObjectEmbeddingsWSRequestObjectTypeFilterEnum | null)[] | null;
      /** Optional list of device uuids to filter result set on. */
      queryDeviceUuids?: (string | null)[] | null;
      /** End time in epoch milliseconds. Results returned will have occurred before this time. */
      queryEndTimeMs: number | null;
      /** Start time in epoch milliseconds. Results returned will have occurred after this time. */
      queryStartTimeMs: number | null;
      /** Optional region filter to return results only if they overlap with the supplied region. This is a list of perymyriad points defining a polygon. The first and last elements must be the same to make a connected polygon. For example, a triangle should have 4 points defined in this list. */
      regionFilter?: ((number | null)[] | null)[] | null;
      /** The id of the embedding event you want to find similar objects to. Typically this is obtained from a previous text search result. */
      searchEmbeddingId: string | null;
      /** Optional threshold applied to filter returned results, set as a float in [0.0, 1.0]. */
      similarityThreshold?: number | null;
    };
    Search_SearchSimilarObjectEmbeddingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      moderationReason?: string | null;
      queryAllowed?: boolean | null;
      similarEmbeddings?:
        | components["schemas"]["GenericObjectEmbeddingMatch"][]
        | null;
    };
    Search_SearchSimilarVideoEmbeddingsByTimeWindowWSRequest: {
      maxNumResults?: number | null;
      model?: components["schemas"]["VideoSimilarityModelEnum"];
      queryDeviceUuids?: (string | null)[] | null;
      queryEndTimeMs?: number | null;
      queryStartTimeMs?: number | null;
      searchEventDeviceUuid?: string | null;
      searchEventEndTimeMs?: number | null;
      searchEventStartTimeMs?: number | null;
      similarityThreshold?: number | null;
    };
    Search_SearchSimilarVideoEmbeddingsByTimeWindowWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      searchEmbeddings?:
        | components["schemas"]["GenericVideoEmbedding"][]
        | null;
      similarEmbeddings?:
        | components["schemas"]["GenericVideoEmbeddingMatch"][]
        | null;
    };
    Search_SearchSimilarVideoEmbeddingsWSRequest: {
      maxNumResults?: number | null;
      model?: components["schemas"]["VideoSimilarityModelEnum"];
      queryDeviceUuids?: (string | null)[] | null;
      queryEndTimeMs?: number | null;
      queryStartTimeMs?: number | null;
      searchEmbedding?: (number | null)[] | null;
      similarityThreshold?: number | null;
    };
    Search_SearchSimilarVideoEmbeddingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      similarEmbeddings?:
        | components["schemas"]["GenericVideoEmbeddingMatch"][]
        | null;
    };
    SecureTokenAlgorithm: SecureTokenAlgorithmEnum;
    SecurityZoneInfoType: {
      assignedCameraList?: (string | null)[] | null;
      isParentZone?: boolean | null;
      securityZoneName?: string | null;
      zoneAddress?: string | null;
      zoneId?: string | null;
      zoneParentId?: string | null;
    } | null;
    SeekpointIndexType: {
      compositComponentUuid?: string | null;
      customDescription?: string | null;
      customDisplayName?: string | null;
      deviceUuid?: string | null;
      locationUuid?: string | null;
      objectType?: components["schemas"]["ActivityEnum"];
      orgUuid?: string | null;
      seekPointType?: components["schemas"]["SeekpointType"];
      seekpointType?: components["schemas"]["SeekpointType"];
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      timestampMs?: number | null;
    };
    SeekpointType: SeekpointTypeEnum;
    SensorValType: {
      sensorBoolean?: boolean | null;
      sensorDouble?: number | null;
      sensorLong?: number | null;
    };
    Sensor_FootageSensorSeekPointDisplayType: {
      a: components["schemas"]["ActivityEnum"];
      /** alerted on this? */
      al?: boolean | null;
      /** Custom activity display description, maximum 100 characters */
      cd?: string | null;
      /** custom activity display name */
      cdn?: string | null;
      co2?: number | null;
      cu?: (string | null)[] | null;
      ethanol?: number | null;
      /** humidity */
      h?: number | null;
      heatIndexDegF?: number | null;
      /** humidity percent in 16.16 fixed point */
      hp?: number | null;
      iaq?: number | null;
      lu?: string | null;
      pm25?: number | null;
      probeTempC?: number | null;
      sn?: string | null;
      su?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      /** temperature */
      t?: number | null;
      /** temperature in Celsius in 16.16 fixed point */
      tc?: number | null;
      thcPercent?: number | null;
      /** timestamp in milliseconds since epoch */
      ts: number | null;
      tvoc?: number | null;
      vapeSmokePercent?: number | null;
    };
    Sensor_GetFootageSensorSeekpointsForCameraWSRequest: {
      cameraUuid?: string | null;
      durationSec?: number | null;
      startTimeSec?: number | null;
    };
    Sensor_GetFootageSensorSeekpointsForCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      seekPoints?:
        | components["schemas"]["Sensor_FootageSensorSeekPointDisplayType"][]
        | null;
    };
    Sensor_GetFootageSensorSeekpointsForLocationWSRequest: {
      durationSec?: number | null;
      locationUuid?: string | null;
      startTimeSec?: number | null;
    };
    Sensor_GetFootageSensorSeekpointsForLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      seekPoints?:
        | components["schemas"]["Sensor_FootageSensorSeekPointDisplayType"][]
        | null;
    };
    Sensor_GetFootageSensorSeekpointsForSensorWSRequest: {
      durationSec?: number | null;
      sensorUuid?: string | null;
      startTimeSec?: number | null;
    };
    Sensor_GetFootageSensorSeekpointsForSensorWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
      seekPoints?:
        | components["schemas"]["Sensor_FootageSensorSeekPointDisplayType"][]
        | null;
    };
    Sensor_GetSensorPresenceWindowsWSRequest: {
      deviceUuid?: string | null;
      durationSec?: number | null;
      startTimeSec?: number | null;
    };
    Sensor_GetSensorPresenceWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      presenceWindows?: components["schemas"]["TimeWindowSeconds"][] | null;
    };
    ServiceNowSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      instanceUrl?: string | null;
      password?: string | null;
      username?: string | null;
    };
    SessionClientInfoType: {
      appName?: string | null;
      appOs?: string | null;
      appVersion?: string | null;
      userAgent?: string | null;
    };
    SessionInfoWSType: {
      clientInfo?: components["schemas"]["SessionClientInfoType"];
      clientType?: SessionInfoWSClientTypeEnum | null;
      currentSession?: boolean | null;
      lastActivityTimeMs?: number | null;
      lastIpAccessedFrom?: string | null;
      lastIpAccessedFromGeoLocation?: components["schemas"]["GeoIpLocationType"];
    };
    Share_GetSharedClipDataWSRequest: { [key: string]: unknown };
    Share_GetSharedClipDataWSResponse: {
      description?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      orgName?: string | null;
      sharedWebClips?:
        | components["schemas"]["Share_SharedClipPublicType"][]
        | null;
      title?: string | null;
    };
    Share_GetSharedFootageBoundingBoxesWSRequest: {
      cameraUuid?: string | null;
      duration?: number | null;
      startTime?: number | null;
    };
    Share_GetSharedFootageBoundingBoxesWSResponse: {
      boundingBoxes?: components["schemas"]["FootageBoundingBoxType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Share_GetSharedFootageSeekpointsV2WSRequest: {
      cameraUuid?: string | null;
      duration?: number | null;
      startTime?: number | null;
    };
    Share_GetSharedFootageSeekpointsV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      footageSeekPoints?:
        | components["schemas"]["FootageSeekPointV2Type"][]
        | null;
      seekPoints?: components["schemas"]["FootageSeekPointV2Type"][] | null;
    };
    Share_GetSharedFootageSeekpointsWSRequest: {
      duration?: number | null;
      startTime?: number | null;
    };
    Share_GetSharedFootageSeekpointsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      seekPoints?: components["schemas"]["FootageSeekPointType"][] | null;
    };
    Share_GetSharedFootageSensorSeekpointsForCameraWSRequest: {
      durationSec?: number | null;
      startTimeSec?: number | null;
    };
    Share_GetSharedFootageSensorSeekpointsForCameraWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      seekPoints?:
        | components["schemas"]["Sensor_FootageSensorSeekPointDisplayType"][]
        | null;
    };
    Share_GetSharedLiveStreamInfoWSResponse: {
      aecEnabled?: boolean | null;
      audioPushToTalkEnabled?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      fisheyeDisplayMode?: components["schemas"]["FisheyeDisplayMode"];
      hideOverlay?: boolean | null;
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      locationName?: string | null;
      mountingDirection?: GetSharedLiveStreamInfoWSResponseMountingDirectionEnum | null;
      name?: string | null;
      oldestSegmentSeconds?: number | null;
      schedule?: components["schemas"]["BaseSavedScheduleType"];
      sharedWithMonitoringService?: boolean | null;
      tileViews?: components["schemas"]["DewarpedView"][] | null;
      tz?: {
        displayName?: string | null;
        dstsavings?: number | null;
        id?: string | null;
        rawOffset?: number | null;
      } | null;
      vodEnabled?: boolean | null;
    };
    Share_GetSharedMediaUrisWSRequest: { [key: string]: unknown };
    Share_GetSharedMediaUrisWSResponse: {
      audioWanLiveMpdUri?: string | null;
      audioWanLiveOpusUri?: string | null;
      audioWanVodMpdUriTemplate?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      wanLiveH264Uri?: string | null;
      wanLiveM3u8Uri?: string | null;
      wanLiveMpdUri?: string | null;
      wanVodM3u8UriTemplate?: string | null;
      wanVodMpdUriTemplate?: string | null;
    };
    Share_GetSharedPresenceWindowsWSRequest: {
      durationSec?: number | null;
      startTimeSec?: number | null;
    };
    Share_GetSharedPresenceWindowsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      presenceWindows?: {
        [key: string]: components["schemas"]["TimeWindowSeconds"][] | null;
      } | null;
    };
    Share_GetSharedTimelapseDataV2WSResponse: {
      description?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      orgName?: string | null;
      publicTimelapseUuids?: (string | null)[] | null;
      title?: string | null;
    };
    Share_GetSharedTimelapseDataWSRequest: { [key: string]: unknown };
    Share_GetSharedTimelapseDataWSResponse: {
      description?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      orgName?: string | null;
    };
    Share_GetSharedVideoWallInfoWSResponse: {
      deviceList?:
        | components["schemas"]["Share_SharedVideoWallDeviceType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
      name?: string | null;
      settings?: { [key: string]: { [key: string]: unknown } | null } | null;
      vodEnabled?: boolean | null;
    };
    Share_GetSharedVideoWallMediaUrisWSRequest: {
      uuid?: string | null;
    };
    Share_GetSharedVideoWallMediaUrisWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      wanLiveH264Uri?: string | null;
      wanLiveM3u8Uri?: string | null;
      wanLiveMpdUri?: string | null;
      wanVodM3u8UriTemplate?: string | null;
      wanVodMpdUriTemplate?: string | null;
    };
    Share_ShareLinkWSRequest: {
      emailAddresses?: (string | null)[] | null;
      link?: string | null;
      phoneNumbers?: (string | null)[] | null;
    };
    Share_ShareLinkWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Share_SharedClipPublicType: {
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      deviceBoundingBoxMap?: {
        [key: string]: components["schemas"]["ClipBoundingBoxType"][] | null;
      } | null;
      deviceMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      deviceSeekPointMap?: {
        [key: string]: components["schemas"]["ClipSeekPointV2Type"][] | null;
      } | null;
      durationSec?: number | null;
      locationNameMap?: { [key: string]: string | null } | null;
      locationTimeZoneMap?: {
        [key: string]: {
          displayName?: string | null;
          dstsavings?: number | null;
          id?: string | null;
          rawOffset?: number | null;
        } | null;
      } | null;
      publicClipUuid?: string | null;
      seekPoints?: components["schemas"]["ClipSeekPointV2Type"][] | null;
      startTime?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
    };
    Share_SharedVideoWallDeviceType: {
      fisheyeDisplayMode?: components["schemas"]["FisheyeDisplayMode"];
      hwVariation?: components["schemas"]["HardwareVariationEnum"];
      locationName?: string | null;
      mountingDirection?: SharedVideoWallDeviceMountingDirectionEnum | null;
      name?: string | null;
      tileViews?: components["schemas"]["DewarpedView"][] | null;
      tz?: {
        displayName?: string | null;
        dstsavings?: number | null;
        id?: string | null;
        rawOffset?: number | null;
      } | null;
      uuid?: string | null;
    };
    SharedClipGroupWithDetailsType: {
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimeSecs?: number | null;
      orgUuid?: string | null;
      sharedClips?: components["schemas"]["SharedClipWithDetailsType"][] | null;
      title?: string | null;
      uuid?: string | null;
    };
    SharedClipGroupWrapperType: {
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTime?: number | null;
      isSecured?: boolean | null;
      orgUuid?: string | null;
      sharedClips?: components["schemas"]["SharedClipType"][] | null;
      title?: string | null;
      uuid?: string | null;
    };
    SharedClipGroupWrapperV2Type: {
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimeSecs?: number | null;
      isSecured?: boolean | null;
      orgUuid?: string | null;
      sharedClips?: components["schemas"]["SharedClipV2Type"][] | null;
      title?: string | null;
      uuid?: string | null;
    };
    SharedClipType: {
      clipMetaData?: components["schemas"]["ClipMetaDataType"];
      deviceUuid?: string | null;
      deviceUuids?: (string | null)[] | null;
      timestampMs?: number | null;
      uuid?: string | null;
    };
    SharedClipV2Type: {
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      durationSec?: number | null;
      startTime?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      uuid?: string | null;
    };
    SharedClipWithDetailsType: {
      boundingBoxes?: components["schemas"]["ClipBoundingBoxType"][] | null;
      clipLocation?: components["schemas"]["MetaDataLocationType"];
      deviceUuidMap?: {
        [key: string]: components["schemas"]["MetaDataLocationType"];
      } | null;
      durationSec?: number | null;
      seekPoints?: components["schemas"]["ClipSeekPointV2Type"][] | null;
      startTime?: number | null;
      thumbnailLocation?: components["schemas"]["MetaDataLocationType"];
      uuid?: string | null;
    };
    SharedTimelapseClipType: {
      clipDuration?: number | null;
      clipFormat?: SharedTimelapseClipClipFormatEnum | null;
      sources?: components["schemas"]["TimelapseSource"][] | null;
      uuid?: string | null;
      videoStartTime?: number | null;
      videoStopTime?: number | null;
    };
    SharedTimelapseGroupWrapperType: {
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimeSecs?: number | null;
      isSecured?: boolean | null;
      orgUuid?: string | null;
      sharedTimelapses?:
        | components["schemas"]["SharedTimelapseClipType"][]
        | null;
      title?: string | null;
      uuid?: string | null;
    };
    ShellyDevice: {
      canSendCommands?: ShellyDeviceCanSendCommandsEnum | null;
      channels?: (string | null)[] | null;
      deviceType?: ShellyDeviceDeviceTypeEnum | null;
      hostUrl?: string | null;
      isOnline?: boolean | null;
      temperature?: number | null;
      timestampMs?: number | null;
      voltage?: number | null;
    } | null;
    ShellyType:
      | ({
          canSendDiagnosticNotifications?: boolean | null;
          diagnosticQuietPeriodSecs?: number | null;
          shellyDeviceMap?: {
            [key: string]: components["schemas"]["ShellyDevice"];
          } | null;
          thirdPartyDeviceToLocationMap?: {
            [key: string]: string | null;
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    Shipment: {
      methodOfPaymentCode?: string | null;
      notes?: (string | null)[] | null;
      serviceLevel?: ShipmentServiceLevelEnum | null;
      shipDateMs?: number | null;
      shippingMethod?: string | null;
    };
    ShippedItemType: {
      partNumber?: string | null;
      quantityShipped?: number | null;
      serialNumber?: string | null;
    } | null;
    Shipper: {
      address1?: string | null;
      address2?: string | null;
      address3?: string | null;
      city?: string | null;
      companyName?: string | null;
      contactName?: string | null;
      country?: string | null;
      postalCode?: string | null;
      referenceId?: string | null;
      state?: string | null;
    };
    SimpleAuditEventType: {
      auditEvent?: SimpleAuditEventAuditEventEnum | null;
    } | null;
    SimpleDeviceActivityEventType: {
      activityEvent?: components["schemas"]["ActivityEnum"];
    } | null;
    SimpleDiagnosticEventType: {
      diagnosticEvent?: SimpleDiagnosticEventDiagnosticEventEnum | null;
    } | null;
    SlackSettings: {
      accessToken?: string | null;
      channel?: string | null;
      enabled?: boolean | null;
      webhookUrl?: string | null;
    };
    SlackSettingsV2: {
      channelId?: string | null;
      channelName?: string | null;
      code?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      orgAccessToken?: string | null;
      sendChannelNotifications?: boolean | null;
      sendUserNotifications?: boolean | null;
      /** A HashMap of <RhombusOrgUser uuid : Slack user uuid, user access token>. This stores the information for each Slack user. */
      userMap?: { [key: string]: components["schemas"]["UserInfo"] } | null;
      webhookUrl?: string | null;
    };
    SplicedClipProgress: {
      region?: string | null;
      segmentsUploaded?: number | null;
      totalSegments?: number | null;
    };
    SplicedClipType: {
      accessSettings?: components["schemas"]["ClipAccessSettings"];
      analyzeClip?: boolean | null;
      clipTargetLocation?: components["schemas"]["MetaDataLocationType"];
      clipUuid?: string | null;
      consoleDelete?: boolean | null;
      deleted?: boolean | null;
      description?: string | null;
      deviceMap?: {
        [key: string]: components["schemas"]["SplicedClipProgress"];
      } | null;
      devicePresentationOrder?: (string | null)[] | null;
      deviceUuid?: string | null;
      deviceUuidMap?: {
        [key: string]: components["schemas"]["SplicedClipProgress"];
      } | null;
      deviceUuidToAlteredViewMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      deviceUuidToFisheyePresentationMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      duration?: number | null;
      integrationUploadList?: components["schemas"]["IntegrationEnum"][] | null;
      isPolicyEvent?: boolean | null;
      metadataBucketRegion?: string | null;
      orgUuid?: string | null;
      saveClip?: boolean | null;
      saveFrame?: boolean | null;
      segmentsUploaded?: number | null;
      sendToSharedStorage?: boolean | null;
      startTime?: number | null;
      status?: SplicedClipStatusEnum | null;
      thumbnailRelativeSecond?: number | null;
      timestampMs?: number | null;
      title?: string | null;
      totalSegments?: number | null;
      transactionUuid?: string | null;
      userUuid?: string | null;
    };
    SquareSettings: {
      enabled?: boolean | null;
      locationIdToDeviceUuidsMap?: {
        [key: string]: (string | null)[] | null;
      } | null;
    };
    StandardCsnType: {
      createdAtMillis?: number | null;
      endDateEpochSecExclusive?: number | null;
      lastUsedAccessControlledDoorUuid?: string | null;
      lastUsedAtMillis?: number | null;
      lastUsedLocationUuid?: string | null;
      lowercaseHexValue?: string | null;
      managedCredUuid?: string | null;
      note?: string | null;
      orgUuid?: string | null;
      startDateEpochSecInclusive?: number | null;
      type?: components["schemas"]["AccessControlCredentialEnumType"];
      updatedAtMillis?: number | null;
      userUuid?: string | null;
      uuid?: string | null;
      value?: string | null;
      workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
    } | null;
    StaticEpochSecondsProvisioner:
      | ({
          value?: number | null;
        } & {
          type?: string;
        })
      | null;
    Stats: {
      avg?: number | null;
      stddev?: number | null;
    };
    StatsCredentialReference: {
      credentialUuid?: string | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    StreamTypeEnum: StreamTypeEnum;
    /** A sequence of one or more base 64 (url-safe) uuid substrings. These substrings are separated by dots (.). */
    SubLocationsHierarchyKey: {
      locationUuids?: (string | null)[] | null;
    };
    SummaryCountTimeSeriesDataPointType: {
      avgEventCountMap?: {
        [key: string]: components["schemas"]["EventCount"];
      } | null;
      dateLocal?: string | null;
      dateUtc?: string | null;
      maxEventCountMap?: {
        [key: string]: components["schemas"]["EventCount"];
      } | null;
      minEventCountMap?: {
        [key: string]: components["schemas"]["EventCount"];
      } | null;
    };
    SupervisionModeEnumType: SupervisionModeEnumType;
    SupervisionStateEnumType: SupervisionStateEnumType;
    SupportAuthorityEventOriginator:
      | ({
          grantedToInternalEntityUuid?: string | null;
          grantedToName?: string | null;
          supportAuthorityUuid?: string | null;
          supportUserEmail?: string | null;
          supportUsername?: string | null;
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    SupportAuthorityLockdownEventOriginator:
      | ({
          grantedToInternalEntityUuid?: string | null;
          grantedToName?: string | null;
          supportAuthorityUuid?: string | null;
          supportUserEmail?: string | null;
          supportUsername?: string | null;
        } & {
          type?: components["schemas"]["LockdownEventOriginatorEnumType"];
        })
      | null;
    SupportAuthorityType: {
      authorityType?: SupportAuthorityAuthorityTypeEnum | null;
      authorityUuid?: string | null;
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimestamp?: number | null;
      grantedByUsername?: string | null;
      grantedToEmail?: string | null;
      grantedToInternalEntityUuid?: string | null;
      grantedToName?: string | null;
      loginAccessAllowed?: boolean | null;
      managedByMsp?: boolean | null;
      orgUuid?: string | null;
      permissionGroupUuid?: string | null;
    };
    Support_AddSupportAuthorityWSRequest: {
      authority?: components["schemas"]["SupportAuthorityType"];
      isCertifiedPartner?: boolean | null;
    };
    Support_AddSupportAuthorityWSResponse: {
      authorityUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Support_AlllowSupportAuthorityAccessWSRequest: {
      authorityUuid?: string | null;
    };
    Support_AlllowSupportAuthorityAccessWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Support_FindSupportAuthoritySessionsWSRequest: {
      authorityUuid?: string | null;
    };
    Support_FindSupportAuthoritySessionsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sessions?: components["schemas"]["SessionInfoWSType"][] | null;
    };
    Support_GetSupportAuthoritiesWSRequest: { [key: string]: unknown };
    Support_GetSupportAuthoritiesWSResponse: {
      authorities?:
        | components["schemas"]["Support_SupportAuthorityWSType"][]
        | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Support_LogoutAllSupportAuthoritySessionsWSRequest: {
      authorityUuid?: string | null;
    };
    Support_LogoutAllSupportAuthoritySessionsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Support_LookupSupportPartnerAuthoritiesWSRequest: {
      lookupKeyword?: string | null;
    };
    Support_LookupSupportPartnerAuthoritiesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      supportPartnerAuthorities?:
        | components["schemas"]["Support_SupportPartnerAuthorityWSType"][]
        | null;
    };
    Support_RemoveSupportAuthorityWSRequest: {
      authorityUuid?: string | null;
    };
    Support_RemoveSupportAuthorityWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Support_RevokeSupportAuthorityAccessWSRequest: {
      authorityUuid?: string | null;
    };
    Support_RevokeSupportAuthorityAccessWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Support_SupportAuthoritySelectiveUpdateWSType: {
      authorityUuid?: string | null;
      description?: string | null;
      expirationTimestamp?: number | null;
      grantedToEmail?: string | null;
      grantedToName?: string | null;
      loginAccessAllowed?: boolean | null;
      permissionGroupUuid?: string | null;
    };
    Support_SupportAuthorityWSType: {
      authorityType?: SupportAuthorityWSAuthorityTypeEnum | null;
      authorityUuid?: string | null;
      createdAtMillis?: number | null;
      description?: string | null;
      expirationTimestamp?: number | null;
      grantedByUsername?: string | null;
      grantedToEmail?: string | null;
      grantedToInternalEntityUuid?: string | null;
      grantedToName?: string | null;
      loginAccessAllowed?: boolean | null;
      managedByMsp?: boolean | null;
      mobileAccessUrl?: string | null;
      orgUuid?: string | null;
      permissionGroupUuid?: string | null;
      webAccessUrl?: string | null;
    };
    Support_SupportPartnerAuthorityWSType: {
      contactEmail?: string | null;
      contactName?: string | null;
      name?: string | null;
      uuid?: string | null;
    };
    Support_UpdateSupportAuthorityWSRequest: {
      update?: components["schemas"]["Support_SupportAuthoritySelectiveUpdateWSType"];
    };
    Support_UpdateSupportAuthorityWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    TPLinkSettings: {
      cameraToSwitchMap?: { [key: string]: string | null } | null;
      enabled?: boolean | null;
      password?: string | null;
      targetState?: number | null;
      url?: string | null;
      username?: string | null;
    };
    TamperSettings: {
      accelerometer_change_tamper_threshold?: number | null;
      accelerometer_disabled?: boolean | null;
      pressure_switch_tamper_disabled?: boolean | null;
    };
    /** Update Tamper detection settings */
    TamperSettingsSelectiveUpdate: {
      accelerometer_change_tamper_threshold?: number | null;
      accelerometer_disabled?: boolean | null;
      pressure_switch_tamper_disabled?: boolean | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    TempProbeType: {
      adcMv?: number | null;
      adcRaw?: number | null;
      present?: boolean | null;
      tempC?: number | null;
      timestampSec?: number | null;
    };
    ThirdPartyCameraPasswordType: {
      notes?: string | null;
      orgUuid?: string | null;
      password?: string | null;
      username?: string | null;
      uuid?: string | null;
    };
    ThirdPartyCameraSettings: {
      onvif_ip?: string | null;
      onvif_password?: string | null;
      onvif_profiletoken?: string | null;
      onvif_username?: string | null;
      ptz_engine?: ThirdPartyCameraSettingsPtzEngineEnum | null;
      ptz_movement?: ThirdPartyCameraSettingsPtzMovementEnum | null;
      ptz_translation_space?: ThirdPartyCameraSettingsPtzTranslationSpaceEnum | null;
    };
    ThreatCaseStatus: ThreatCaseStatusEnum;
    ThreatCaseTimelineEventType: {
      alertUuid?: string | null;
      message?: string | null;
      noonlightVerificationId?: string | null;
      timestampSec?: number | null;
      type?: components["schemas"]["ThreatCaseTimelineEventTypeEnum"];
      userUuid?: string | null;
    };
    ThreatCaseTimelineEventTypeEnum: ThreatCaseTimelineEventTypeEnum;
    TimeInterval: {
      endMs?: number | null;
      startMs?: number | null;
    };
    TimeSeriesDataPointV2Type: {
      dateLocal?: string | null;
      dateUtc?: string | null;
      eventCountMap?: { [key: string]: number | null } | null;
    };
    TimeWindowSeconds: {
      durationSeconds?: number | null;
      startSeconds?: number | null;
    };
    TimelapseClipType: {
      clipCreationTime?: number | null;
      clipDuration?: number | null;
      clipFormat?: TimelapseClipClipFormatEnum | null;
      clipUuid?: string | null;
      description?: string | null;
      drawCameraDetails?: boolean | null;
      drawTimestamp?: boolean | null;
      drawWatermark?: boolean | null;
      orgUuid?: string | null;
      passwordDigest?: string | null;
      shared?: boolean | null;
      skipNights?: boolean | null;
      skipNonBusinessHours?: boolean | null;
      skipWeekends?: boolean | null;
      sources?: components["schemas"]["TimelapseSource"][] | null;
      status?: components["schemas"]["TimelapseStatus"];
      title?: string | null;
      videoStartTime?: number | null;
      videoStopTime?: number | null;
    };
    TimelapseSource: {
      deviceUuid?: string | null;
    };
    TimelapseStatus: {
      percentComplete?: number | null;
      state?: TimelapseStatusStateEnum | null;
    };
    /** Optional filter by an event timestamp. If not specified, the filter defaults to the last 7 days. */
    TimestampFilter: {
      /** End of the date range (inclusive). */
      rangeEnd?: string | null;
      /** Start of the date range (inclusive). */
      rangeStart?: string | null;
    };
    ToastCheckInfo: {
      totalAmount?: number | null;
    };
    ToastOrderIdType: {
      employeeName?: string | null;
      guid?: string | null;
      locationName?: string | null;
      restaurantName?: string | null;
      toastCheckInfo?: components["schemas"]["ToastCheckInfo"];
    };
    /** A HashMap of <Restaurant Guid, ToastRestaurantInfo>. This stores the information for each restaurant. */
    ToastRestaurantInfo: {
      /** The location name of the restaurant from Toast */
      locationName?: string | null;
      /** The name of the restaurant from Toast. e.g., COFFEE CAN */
      restaurantName?: string | null;
    };
    ToastRestaurantSettings: {
      /** The location name of the restaurant from Toast */
      locationName?: string | null;
      /** The name of the restaurant from Toast, e.g. COFFEE CAN */
      restaurantName?: string | null;
      /** Collection of service area settings for this restaurant */
      serviceAreaSettingsMap?: {
        [key: string]: components["schemas"]["GenericPosSettings"];
      } | null;
    } | null;
    ToastSettings: {
      /** The current restaurant guid you want to use */
      currentToastRestaurantGuid?: string | null;
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      migrated?: boolean | null;
      /** A HashMap of <Service Area Guid, PosIntegrationInfoType>. This stores the Pos Information and assigned cameras. */
      posInfoMap?: {
        [key: string]: components["schemas"]["PosIntegrationInfoType"];
      } | null;
      /** A HashMap of <Restaurant Guid, ToastRestaurantInfo>. This stores the information for each restaurant. */
      toastRestaurantInfoMap?: {
        [key: string]: components["schemas"]["ToastRestaurantInfo"];
      } | null;
    };
    ToastType:
      | ({
          currentToastRestaurantGuid?: string | null;
          restaurantSettingsMap?: {
            [key: string]: components["schemas"]["ToastRestaurantSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    TriggerComponentRelayActionRecordType: {
      componentUuid?: string | null;
      outputType?: components["schemas"]["ComponentRelayOutputType"];
      overrideRelayDurationMs?: number | null;
      overrideRelayDurationSec?: number | null;
      ownerDeviceUuid?: string | null;
      state?: components["schemas"]["GenericRelayStateEnumType"];
      succeeded?: boolean | null;
    };
    TriggerComponentRelayActionType: {
      componentUuid?: string | null;
      outputType?: components["schemas"]["ComponentRelayOutputType"];
      overrideRelayDurationMs?: number | null;
      overrideRelayDurationSec?: number | null;
      ownerDeviceUuid?: string | null;
      state?: components["schemas"]["GenericRelayStateEnumType"];
      version?: number | null;
    };
    TriggerContent: {
      apiKey?: string | null;
      experienceIds?: (string | null)[] | null;
      experienceNames?: (string | null)[] | null;
      message?: string | null;
      parameter1?: string | null;
      parameter2?: string | null;
      parameter3?: string | null;
      playerDeviceNames?: (string | null)[] | null;
      playerIds?: (string | null)[] | null;
      playerTags?: (string | null)[] | null;
    };
    TripwireSettingsType: {
      intervalSeconds?: number | null;
      threshold?: number | null;
    };
    TvOsConfigType: {
      limitedVideoWallUuids?: (string | null)[] | null;
      orgUuid?: string | null;
      uuid?: string | null;
    };
    Tvos_GetTvOsConfigWsRequest: {
      uuid?: string | null;
    };
    Tvos_GetTvOsConfigWsResponse: {
      config?: components["schemas"]["TvOsConfigType"];
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Tvos_GetTvOsConfigsForOrgWsRequest: { [key: string]: unknown };
    Tvos_GetTvOsConfigsForOrgWsResponse: {
      configs?: components["schemas"]["TvOsConfigType"][] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Tvos_UpdateTvOsConfigWsRequest: {
      config?: components["schemas"]["TvOsConfigType"];
    };
    Tvos_UpdateTvOsConfigWsResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    TwilioSettings: {
      enabled?: boolean | null;
      phoneNumbers?: (string | null)[] | null;
    };
    UAPSettingsType: {
      enabled?: boolean | null;
      text?: string | null;
    } | null;
    UnHealthyDeviceAlertType: {
      deviceUuid?: string | null;
      orgUuid?: string | null;
      symptom?: UnHealthyDeviceAlertSymptomEnum | null;
      timestamp?: number | null;
      uuid?: string | null;
    };
    UnlockDoorActionRecordType: {
      doorId?: string | null;
      placeId?: string | null;
      succeeded?: boolean | null;
      system?: string | null;
    };
    UserCustomMetadataTextElement:
      | ({
          color?: string | null;
          maxWidth?: number | null;
          metadataTemplateUuid?: string | null;
          style?: string | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    UserCustomizationsType: {
      dashboard?: components["schemas"]["DashboardCustomizations"];
      frontend?: { [key: string]: string | null } | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    UserEventOriginator:
      | ({
          userEmail?: string | null;
          userUuid?: string | null;
          username?: string | null;
        } & {
          type?: components["schemas"]["EventOriginatorEnum"];
        })
      | null;
    /** A HashMap of <RhombusOrgUser uuid : Slack user uuid, user access token>. This stores the information for each Slack user. */
    UserInfo: {
      /** Slack user access token */
      userAccessToken?: string | null;
      /** Slack user uuid */
      userId?: string | null;
    };
    UserLockdownEventOriginator:
      | ({
          userEmail?: string | null;
          userUuid?: string | null;
          username?: string | null;
        } & {
          type?: components["schemas"]["LockdownEventOriginatorEnumType"];
        })
      | null;
    UserMetadataEnum: UserMetadataEnum;
    UserMetadataField: {
      createdAtMillis?: number | null;
      fieldValue?: string | null;
      orgUuid?: string | null;
      templateUuid?: string | null;
      updatedAtMillis?: number | null;
      userUuid?: string | null;
    };
    UserMetadataFieldTemplate: {
      createdAtMillis?: number | null;
      fieldName?: string | null;
      orgUuid?: string | null;
      scimFieldName?: string | null;
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    UserMetadataFieldTemplateSelectiveUpdate: {
      createdAtMillis?: number | null;
      fieldName?: string | null;
      orgUuid?: string | null;
      scimFieldName?: string | null;
      updatedAtMillis?: number | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      uuid?: string | null;
    };
    UserMetadataTextElement:
      | ({
          color?: string | null;
          field?: components["schemas"]["UserMetadataEnum"];
          maxWidth?: number | null;
          style?: string | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    UserNotificationSelectiveUpdateV2: {
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      timeFrames?: components["schemas"]["NotificationTimeFrame"][] | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      userUuid?: string | null;
    };
    UserNotificationSettingsV3Type: {
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      userUuid?: string | null;
    };
    UserNotificationSettingsV4Type: {
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      timeFrames?: components["schemas"]["NotificationTimeFrame"][] | null;
      userUuid?: string | null;
    };
    UserPermissionGroupType: {
      accessControlLocationAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      accessibleLocations?: (string | null)[] | null;
      assignablePermissionGroups?: (string | null)[] | null;
      defaultAccessControlPermissionForNewLocations?: components["schemas"]["Permission"];
      defaultPermissionForNewLocations?: components["schemas"]["Permission"];
      description?: string | null;
      deviceAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      functionalityList?: components["schemas"]["Functionality"][] | null;
      inLine?: boolean | null;
      installer?: boolean | null;
      locationAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      locationGranularAccessMap?: {
        [key: string]: {
          [key: string]: components["schemas"]["Permission"];
        } | null;
      } | null;
      mutable?: boolean | null;
      name?: string | null;
      orgUuid?: string | null;
      storedInS3?: boolean | null;
      superAdmin?: boolean | null;
      userPermissionGroupAccessMap?: {
        [key: string]: components["schemas"]["Permission"];
      } | null;
      uuid?: string | null;
    };
    UserPermissionType: {
      groupUuid?: string | null;
      orgUuid?: string | null;
      userUuid?: string | null;
    };
    UserProfilePhotoElement:
      | ({
          height?: number | null;
          width?: number | null;
        } & {
          type?: components["schemas"]["BadgeTemplateElementEnum"];
          x?: number | null;
          y?: number | null;
        })
      | null;
    UserVirtualMfaDeviceType: {
      createdAtMillis?: number | null;
    };
    User_AssignEmailToUserWSRequest: {
      emailToAssign?: string | null;
      userUuid?: string | null;
    };
    User_AssignEmailToUserWSResponse: { [key: string]: unknown };
    User_ChangeUserEmailWSRequest: {
      newEmail?: string | null;
      userUuid?: string | null;
    };
    User_ChangeUserEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_ChangeUserPasswordWSRequest: {
      currentPassword?: string | null;
      newPassword?: string | null;
    };
    User_ChangeUserPasswordWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: ChangeUserPasswordWSResponseResponseStatusEnum | null;
    };
    /** CreateUserWSRequest */
    User_CreateUserWSRequest: {
      /** The set of accessible Rhombus apps */
      accessibleRhombusApps?: (CreateUserWSRequestAccessibleRhombusAppsEnum | null)[] | null;
      /** The email of the user */
      email?: string | null;
      /** The name of the user */
      name?: string | null;
      /** The group uuid of the permission group */
      permissionGroupUuid?: string | null;
      rhombusKeySettings?: components["schemas"]["RhombusKeyAppSettingsType"];
      /** Suppress the welcome email for the Rhombus Key mobile app if the user is provided access */
      suppressRhombusKeyWelcomeEmail?: boolean | null;
      /** Suppress the welcome email */
      suppressWelcomeEmail?: boolean | null;
    };
    User_CreateUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      responseStatus?: CreateUserWSResponseResponseStatusEnum | null;
      userUuid?: string | null;
    };
    User_DeleteUserWSRequest: {
      userUuid?: string | null;
    };
    User_DeleteUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_DeleteVirtualMfaDeviceForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    User_DeleteVirtualMfaDeviceForCurrentUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_FindUserByEmailWSRequest: {
      email?: string | null;
    };
    User_FindUserByEmailWSResponse: {
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    User_FindUserWSRequest: {
      userUuid?: string | null;
    };
    User_FindUserWSResponse: {
      user?: components["schemas"]["WrappedRhombusOrgUserType"];
    };
    User_GetImportUsersFormatWSResponse: {
      accessControlEnabled?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      example?: string | null;
      explanation?: string | null;
    };
    User_GetRhombusKeyConfigForUserWSRequest: {
      userUuid?: string | null;
    };
    User_GetRhombusKeyConfigForUserWSResponse: {
      userRhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
    };
    User_GetUserCustomizationFlagsWSRequest: {
      userUuid?: string | null;
    };
    User_GetUserCustomizationFlagsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      userCustomizations?: { [key: string]: string | null } | null;
    };
    User_GetUsersInOrgForReportsWSRequest: { [key: string]: unknown };
    User_GetUsersInOrgForReportsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      users?: components["schemas"]["RhombusOrgUserType"][] | null;
    };
    User_GetUsersInOrgWSRequest: { [key: string]: unknown };
    User_GetUsersInOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      notificationSettings?:
        | components["schemas"]["UserNotificationSettingsV3Type"][]
        | null;
      notificationSettingsV2?:
        | components["schemas"]["UserNotificationSettingsV4Type"][]
        | null;
      partners?: components["schemas"]["WrappedRhombusOrgUserType"][] | null;
      rhombusKeyAppConfigs?:
        | components["schemas"]["RhombusKeyAppConfigType"][]
        | null;
      snoozeSettings?:
        | components["schemas"]["User_UserSnoozeNotificationSettingsType"][]
        | null;
      userPermissions?: components["schemas"]["UserPermissionType"][] | null;
      users?: components["schemas"]["WrappedRhombusOrgUserType"][] | null;
    };
    User_GetVirtualMfaDeviceForCurrentUserWSRequest: { [key: string]: unknown };
    User_GetVirtualMfaDeviceForCurrentUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      virtualMfaDevice?: components["schemas"]["UserVirtualMfaDeviceType"];
    };
    User_ImportUsersWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      messages?: (string | null)[] | null;
    };
    User_RhombusKeyOrgDetailsType: {
      companyLogoUrl?: string | null;
      name?: string | null;
      uuid?: string | null;
    };
    User_SendMobileDownloadSMSWSRequest: {
      phoneNumber?: string | null;
    };
    User_SendMobileDownloadSMSWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_SendPartnerAccessGrantedEmailWSRequest: {
      loginLink?: string | null;
      partnerEmailAddress?: string | null;
      partnerFullName?: string | null;
      phoneNumber?: string | null;
    };
    User_SendPartnerAccessGrantedEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_SendRhombusKeyUserWelcomeEmailWSRequest: {
      userUuid?: string | null;
    };
    User_SendRhombusKeyUserWelcomeEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_SendUserWelcomeEmailWSRequest: {
      userUuid?: string | null;
    };
    User_SendUserWelcomeEmailWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_SetupVirtualMfaDeviceForCurrentUserWSRequest: {
      [key: string]: unknown;
    };
    User_SetupVirtualMfaDeviceForCurrentUserWSResponse: {
      alreadyExists?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
      qrCodeSetupData?: string | null;
      success?: boolean | null;
    };
    User_UpdatePartnerUserNotificationSettingsWSRequest: {
      allClientsSelected?: boolean | null;
      clientNotificationIntervalsMap?: {
        [key: string]:
          | components["schemas"]["PartnerNotificationClientSection"][]
          | null;
      } | null;
      notificationIntervalsForAllClients?:
        | components["schemas"]["PartnerNotificationClientSection"][]
        | null;
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      userUuid?: string | null;
    };
    User_UpdatePartnerUserNotificationSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_UpdatePartnerWSRequest: {
      bypassSaml?: boolean | null;
      mfaEnabled?: boolean | null;
      name?: string | null;
      notificationSettings?: components["schemas"]["PartnerNotificationSettingsType"];
      notificationSettingsV2?: components["schemas"]["PartnerNotificationSettingsV2"];
      permissionGroupUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      userUuid?: string | null;
    };
    User_UpdatePartnerWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_UpdateRhombusKeySettingsForUserWSRequest: {
      bypassSaml?: boolean | null;
      endDateProvisioner?: components["schemas"]["EpochSecondsProvisioner"];
      maxMobileCredsAllowed?: number | null;
      remoteUnlockEnabled?: boolean | null;
      rhombusKeyAccessEnabled?: boolean | null;
      startDateProvisioner?: components["schemas"]["EpochSecondsProvisioner"];
      userUuid?: string | null;
    };
    User_UpdateRhombusKeySettingsForUserWSResponse: {
      userRhombusKeyConfig?: components["schemas"]["RhombusKeyAppConfigType"];
    };
    User_UpdateUserCustomizationFlagsWSRequest: {
      userCustomizationFlags?: { [key: string]: string | null } | null;
      userUuid?: string | null;
    };
    User_UpdateUserCustomizationFlagsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_UpdateUserNotificationSettingsWSRequest: {
      orgUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      timeFrames?: components["schemas"]["NotificationTimeFrame"][] | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
      userUuid?: string | null;
    };
    User_UpdateUserNotificationSettingsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_UpdateUserSelectiveWSRequest: {
      bypassSaml?: boolean | null;
      mfaEnabled?: boolean | null;
      name?: string | null;
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      permissionGroupUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      userUuid?: string | null;
    };
    User_UpdateUserSelectiveWSResponse: { [key: string]: unknown };
    User_UpdateUserWSRequest: {
      bypassSaml?: boolean | null;
      mfaEnabled?: boolean | null;
      name?: string | null;
      notificationIntervalsV2?:
        | components["schemas"]["NotificationIntervalV2Type"][]
        | null;
      permissionGroupUuid?: string | null;
      smsPhoneNumbers?: (string | null)[] | null;
      summaryEmailEnabled?: boolean | null;
      userUuid?: string | null;
    };
    User_UpdateUserWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    User_UserSnoozeNotificationSettingsType: {
      snoozedForAllNotificationsIntervals?:
        | components["schemas"]["ScheduledIntervalType"][]
        | null;
      snoozedForDevicesMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      snoozedForLocationsMap?: {
        [key: string]: components["schemas"]["ScheduledIntervalType"][] | null;
      } | null;
      userUuid?: string | null;
    };
    User_metadata_CreateUserMetadataFieldTemplateWSRequest: {
      template?: components["schemas"]["UserMetadataFieldTemplate"];
    };
    User_metadata_CreateUserMetadataFieldTemplateWSResponse: {
      template?: components["schemas"]["UserMetadataFieldTemplate"];
    };
    User_metadata_DeleteUserMetadataFieldTemplateWSRequest: {
      templateUuid?: string | null;
    };
    User_metadata_DeleteUserMetadataFieldTemplateWSResponse: {
      template?: components["schemas"]["UserMetadataFieldTemplate"];
    };
    User_metadata_DeleteUserMetadataFieldWSRequest: {
      templateUuid?: string | null;
      userUuid?: string | null;
    };
    User_metadata_DeleteUserMetadataFieldWSResponse: {
      field?: components["schemas"]["UserMetadataField"];
    };
    User_metadata_FindUserMetadataFieldTemplatesWSRequest: {
      [key: string]: unknown;
    };
    User_metadata_FindUserMetadataFieldTemplatesWSResponse: {
      templateMap?: {
        [key: string]: components["schemas"]["UserMetadataFieldTemplate"];
      } | null;
    };
    User_metadata_FindUserMetadataFieldsWSRequest: {
      userUuid?: string | null;
    };
    User_metadata_FindUserMetadataFieldsWSResponse: {
      templateMap?: {
        [key: string]: components["schemas"]["UserMetadataFieldTemplate"];
      } | null;
      userFieldValueMap?: {
        [key: string]: components["schemas"]["UserMetadataField"];
      } | null;
    };
    User_metadata_SaveUserMetadataFieldsWSRequest: {
      fieldValueMap?: { [key: string]: string | null } | null;
      userUuid?: string | null;
    };
    User_metadata_SaveUserMetadataFieldsWSResponse: {
      templateMap?: {
        [key: string]: components["schemas"]["UserMetadataFieldTemplate"];
      } | null;
      userFieldValueMap?: {
        [key: string]: components["schemas"]["UserMetadataField"];
      } | null;
    };
    User_metadata_UpdateUserMetadataFieldTemplateWSRequest: {
      selectiveUpdate?: components["schemas"]["UserMetadataFieldTemplateSelectiveUpdate"];
    };
    User_metadata_UpdateUserMetadataFieldTemplateWSResponse: {
      template?: components["schemas"]["UserMetadataFieldTemplate"];
    };
    VacantActivityEventType:
      | ({
          vacancyThresholdSec?: number | null;
        } & {
          activityEvent?: components["schemas"]["ActivityEnum"];
        })
      | null;
    VehicleEventIndexType: {
      deviceUuid?: string | null;
      eventTimestamp?: number | null;
      imageS3Key?: string | null;
      locationUuid?: string | null;
      matchingLicensePlates?: (string | null)[] | null;
      name?: string | null;
      orgUuid?: string | null;
      partialLicensePlates?: (string | null)[] | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      thumbnailS3Key?: string | null;
      uuid?: string | null;
      vehicleLicensePlate?: string | null;
    };
    VehicleEventSearchHitType: {
      deviceUuid?: string | null;
      eventTimestamp?: number | null;
      imageS3Key?: string | null;
      locationUuid?: string | null;
      matchingLicensePlates?: (string | null)[] | null;
      name?: string | null;
      orgUuid?: string | null;
      partialLicensePlates?: (string | null)[] | null;
      searchMatchedTerm?: string | null;
      searchMatchedType?: string | null;
      subLocationsHierarchyKey?: components["schemas"]["SubLocationsHierarchyKey"];
      thumbnailS3Key?: string | null;
      uuid?: string | null;
      vehicleLicensePlate?: string | null;
    };
    VehicleV2Type: {
      alert?: boolean | null;
      createdAtMillis?: number | null;
      description?: string | null;
      licensePlate?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      thumbnailS3Key?: string | null;
      trust?: boolean | null;
    };
    Vehicle_AddVehicleLabelWSRequest: {
      label?: string | null;
      vehicleLicensePlate?: string | null;
    };
    Vehicle_AddVehicleLabelWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Vehicle_AssociateEventsToVehicleWSRequest: {
      eventUuids?: (string | null)[] | null;
      vehicleLicensePlate?: string | null;
    };
    Vehicle_AssociateEventsToVehicleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Vehicle_DeleteVehicleWSRequest: {
      vehicleLicensePlate?: string | null;
    };
    Vehicle_DeleteVehicleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Vehicle_GetRecentVehicleEventsByLocationWSRequest: {
      endTimeMs?: number | null;
      locationUuid?: string | null;
      startTimeMs?: number | null;
    };
    Vehicle_GetRecentVehicleEventsByLocationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      events?: components["schemas"]["VehicleEventIndexType"][] | null;
    };
    Vehicle_GetRecentVehicleEventsForVehicleWSRequest: {
      endTimeMs?: number | null;
      licensePlate?: string | null;
      startTimeMs?: number | null;
    };
    Vehicle_GetRecentVehicleEventsForVehicleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      events?: components["schemas"]["VehicleEventIndexType"][] | null;
    };
    Vehicle_GetRecentVehicleEventsWSRequest: {
      deviceUuids?: (string | null)[] | null;
      endTimeMs?: number | null;
      startTimeMs?: number | null;
    };
    Vehicle_GetRecentVehicleEventsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      events?: components["schemas"]["VehicleEventIndexType"][] | null;
    };
    Vehicle_GetVehicleEventsWSRequest: {
      /** Filter events by specific reporting device uuids */
      deviceUuidFilter?: (string | null)[] | null;
      /** Time window filter end (newest) time in Epoch milliseconds */
      endTimeMs?: number | null;
      /** Query events by exact license plate number. Query fields are additive queries (returned events satisfy at least one of the query fields) */
      licensePlateExactQuery?: (string | null)[] | null;
      /** Query events by partial or complete license plate with fuzzy character matching. Query fields are additive queries (returned events satisfy at least one of the query fields) */
      licensePlateFuzzyQuery?: string | null;
      /** Filter events by specific reporting location uuids */
      locationUuidFilter?: (string | null)[] | null;
      /** Query events by vehicle name. Query fields are additive queries (returned events satisfy at least one of the query fields) */
      nameQuery?: (string | null)[] | null;
      /** Time window filter start (oldest) time in Epoch milliseconds */
      startTimeMs?: number | null;
      /** Query events by name presence.  If false, returns events with a name.  If true, returns events without names.  Omit if not needed.  Query fields are additive queries (returned events satisfy at least one of the query fields) */
      unnamedQuery?: boolean | null;
      /** Query events by vehicle labels. Query fields are additive queries (returned events satisfy at least one of the query fields) */
      vehicleLabelQuery?: (string | null)[] | null;
    };
    Vehicle_GetVehicleEventsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      events?: components["schemas"]["VehicleEventIndexType"][] | null;
    };
    Vehicle_GetVehicleLabelsForOrgWSRequest: { [key: string]: unknown };
    Vehicle_GetVehicleLabelsForOrgWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      vehicleLabels?: { [key: string]: (string | null)[] | null } | null;
    };
    Vehicle_GetVehiclesWSRequest: { [key: string]: unknown };
    Vehicle_GetVehiclesWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      vehicles?: components["schemas"]["VehicleV2Type"][] | null;
    };
    Vehicle_RemoveVehicleLabelWSRequest: {
      label?: string | null;
      vehicleLicensePlate?: string | null;
    };
    Vehicle_RemoveVehicleLabelWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Vehicle_ReportVehicleEventRequest: {
      eventUuid?: string | null;
    };
    Vehicle_ReportVehicleEventResponse: {
      collectedMediaForTraining?: boolean | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Vehicle_SaveVehicleWSRequest: {
      alert?: boolean | null;
      createdAtMillis?: number | null;
      description?: string | null;
      name?: string | null;
      thumbnailS3Key?: string | null;
      trust?: boolean | null;
      vehicleLicensePlate?: string | null;
    };
    Vehicle_SaveVehicleWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    VerificationHistory: {
      alertIndex?: number | null;
      currentVerification?: components["schemas"]["VerificationRecord"];
      verificationRecords?:
        | components["schemas"]["VerificationRecord"][]
        | null;
    };
    VerificationRecord: {
      alertUuid?: string | null;
      clipVerificationId?: string | null;
      failedAsClip?: boolean | null;
      failedAsStream?: boolean | null;
      sentAsClip?: boolean | null;
      sentAsClipAtMs?: number | null;
      sentAsWindowedStream?: boolean | null;
      sentAsWindowedStreamAtMs?: number | null;
      streamVerificationId?: string | null;
    };
    VideoDoorbellSettings: {
      standalone_doorbell_mode?: boolean | null;
    };
    /** Update Video Doorbell settings */
    VideoDoorbellSettingsSelectiveUpdate: {
      standalone_doorbell_mode?: boolean | null;
      updatedSetMethodMap?: { [key: string]: boolean | null } | null;
    };
    VideoIntercomPolicyType: {
      description?: string | null;
      name?: string | null;
      orgUuid?: string | null;
      scheduledTriggers?:
        | components["schemas"]["VideoIntercomScheduledTriggerType"][]
        | null;
      uuid?: string | null;
    };
    VideoIntercomScheduledTriggerType: {
      schedule?: components["schemas"]["WeeklyRepeatingScheduleType"];
      triggerSet?: components["schemas"]["VideoIntercomTriggerType"][] | null;
    };
    VideoIntercomTriggerType: {
      activity?: components["schemas"]["ActivityEnum"];
      faceAlertLabelSet?: (string | null)[] | null;
      faceAlertUnidentified?: boolean | null;
      faceAllowedLabelSet?: (string | null)[] | null;
      lufsThreshold?: number | null;
      peopleCountThreshold?: number | null;
      vehicleAlertLabelSet?: (string | null)[] | null;
      vehicleAlertUnidentified?: boolean | null;
      vehicleAllowedLabelSet?: (string | null)[] | null;
    };
    VideoSimilarityModelEnum: VideoSimilarityModelEnum;
    VideoWallType: {
      deviceList?: (string | null)[] | null;
      displayName?: string | null;
      orgUuid?: string | null;
      othersCanEdit?: boolean | null;
      ownerUserUuid?: string | null;
      settings?: { [key: string]: { [key: string]: unknown } | null } | null;
      shared?: boolean | null;
      uuid?: string | null;
    };
    Video_CancelSpliceV2WSRequest: {
      clipUuid?: string | null;
      clipUuidList?: (string | null)[] | null;
      deviceUuids?: (string | null)[] | null;
    };
    Video_CancelSpliceV2WSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_CancelSpliceWSRequest: {
      clipUuid?: string | null;
      deviceUuid?: string | null;
    };
    Video_CancelSpliceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_CreateSharedTimelapseGroupWSRequest: {
      description?: string | null;
      expirationTimeSecs?: number | null;
      plaintextPassword?: string | null;
      timelapseUuids?: (string | null)[] | null;
      title?: string | null;
    };
    Video_CreateSharedTimelapseGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      shareUrl?: string | null;
      uuid?: string | null;
    };
    Video_DeleteSharedTimelapseGroupWSRequest: {
      uuid?: string | null;
    };
    Video_DeleteSharedTimelapseGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_DeleteTimelapseClipsWSRequest: {
      clipUuids?: (string | null)[] | null;
    };
    Video_DeleteTimelapseClipsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_GenerateTimelapseClipWSRequest: {
      description?: string | null;
      deviceUuids?: (string | null)[] | null;
      drawCameraDetails?: boolean | null;
      drawTimestamp?: boolean | null;
      skipNights?: boolean | null;
      skipWeekends?: boolean | null;
      startTime?: number | null;
      stopTime?: number | null;
      title?: string | null;
      videoDuration?: number | null;
      videoFormat?: string | null;
    };
    Video_GenerateTimelapseClipWSResponse: {
      clipUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_GetExactFrameUriWSRequest: {
      /** Device Facet ID of the camera */
      cameraUuid: string | null;
      /** Ratio to shrink the image pixels by */
      downscaleFactor?: number | null;
      /** Adjust quality of image compression */
      jpgQuality?: number | null;
      /** Precise ratio to crop the height by. Capped at 10000, which is 100.00% of the image */
      permyriadCropHeight?: number | null;
      /** Precise ratio to crop the width by. Capped at 10000, which is 100.00% of the image */
      permyriadCropWidth?: number | null;
      /** Proportional location to start horizontal crop at. Where 10000 is 100.00% of, or the end of the image */
      permyriadCropX?: number | null;
      /** Proportional location to start vertical crop at. Where 10000 is 100.00% of, or the end of the image */
      permyriadCropY?: number | null;
      /** Timestamp in epoch milliseconds */
      timestampMs: number | null;
    };
    Video_GetExactFrameUriWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      frameUri?: string | null;
      responseMessage?: string | null;
    };
    Video_GetMaxSpliceDurationWSRequest: { [key: string]: unknown };
    Video_GetMaxSpliceDurationWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      maxDuration?: number | null;
    };
    Video_GetSharedTimelapseGroupsWSRequest: { [key: string]: unknown };
    Video_GetSharedTimelapseGroupsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      sharedTimelapses?:
        | components["schemas"]["SharedTimelapseGroupWrapperType"][]
        | null;
    };
    Video_GetSplicedClipsInProgressWSRequest: { [key: string]: unknown };
    Video_GetSplicedClipsInProgressWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      splicedClips?: components["schemas"]["SplicedClipType"][] | null;
    };
    Video_GetTimelapseClipsWSRequest: { [key: string]: unknown };
    Video_GetTimelapseClipsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      timelapseClips?: components["schemas"]["TimelapseClipType"][] | null;
    };
    Video_GetTimelapseMetadataWSRequest: {
      deviceUuidList?: (string | null)[] | null;
    };
    Video_GetTimelapseMetadataWSResponse: {
      earliestTimestampMap?: { [key: string]: string | null } | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_RetrySpliceWSRequest: {
      clipUuid?: string | null;
      deviceUuid?: string | null;
      duration?: number | null;
      startTime?: number | null;
    };
    Video_RetrySpliceWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_ShareTimelapseClipsWSRequest: {
      clipUuids?: (string | null)[] | null;
    };
    Video_ShareTimelapseClipsWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      shareUrlMap?: { [key: string]: string | null } | null;
    };
    Video_SpliceFrameWSRequest: {
      deviceUuid?: string | null;
      timestampMs?: number | null;
    };
    Video_SpliceFrameWSResponse: {
      clipUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
      region?: string | null;
    };
    Video_SpliceV2WSRequest: {
      description?: string | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      fisheyePresentationMap?: {
        [key: string]: components["schemas"]["DewarpedView"][] | null;
      } | null;
      startTimeMillis?: number | null;
      title?: string | null;
    };
    Video_SpliceV2WSResponse: {
      clipUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_SpliceV3WSRequest: {
      alteredViewMap?: {
        [key: string]: components["schemas"]["AlteredView"][] | null;
      } | null;
      audioIncluded?: boolean | null;
      clipVisibility?: components["schemas"]["ClipVisibility"];
      description?: string | null;
      deviceUuids?: (string | null)[] | null;
      durationSec?: number | null;
      integrationUploadMap?: { [key: string]: boolean | null } | null;
      saveToConsole?: boolean | null;
      sendToSharedStorage?: boolean | null;
      sendToUserStorage?: boolean | null;
      startTimeMillis?: number | null;
      title?: string | null;
    };
    Video_SpliceV3WSResponse: {
      clipUuid?: string | null;
      clipUuidList?: (string | null)[] | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_SpliceWSRequest: {
      deviceUuid?: string | null;
      duration?: number | null;
      startTime?: number | null;
    };
    Video_SpliceWSResponse: {
      clipUuid?: string | null;
      error?: boolean | null;
      errorMsg?: string | null;
    };
    Video_UpdateSharedTimelapseGroupWSRequest: {
      description?: string | null;
      descriptionUpdate?: boolean | null;
      expirationTimeSecs?: number | null;
      expirationTimeUpdate?: boolean | null;
      passwordUpdate?: boolean | null;
      plaintextPassword?: string | null;
      title?: string | null;
      titleUpdate?: boolean | null;
      uuid?: string | null;
    };
    Video_UpdateSharedTimelapseGroupWSResponse: {
      error?: boolean | null;
      errorMsg?: string | null;
      shareUrl?: string | null;
      uuid?: string | null;
    };
    Video_UpdateTimelapseClipMetadataWSRequest: {
      /** The UUID of the timelapse clip to be updated */
      clipUuid: string | null;
      /** The new description for the timelapse clip. Omit this field to not update. Providing the field with null will cause the field to be unset */
      description?: string | null;
      /** The new title for the timelapse clip. Omit this field to not update. Providing the field with null will cause the field to be unset */
      title?: string | null;
    };
    Video_UpdateTimelapseClipMetadataWSResponse: {
      timelapseClip?: components["schemas"]["TimelapseClipType"];
    };
    VisionLLMEventRecordType: {
      deviceFacetUuid?: string | null;
      fullResponse?: string | null;
      parsedAffirmativeResponse?: boolean | null;
      timestampMs?: number | null;
      userPrompt?: string | null;
    };
    VisionLLMRuleTriggerType:
      | ({
          createAffirmativeSeekpoints?: boolean | null;
          createNegativeSeekpoints?: boolean | null;
          deviceFacetUuid?: string | null;
          highDetail?: boolean | null;
          userPrompt?: string | null;
        } & {
          type?: components["schemas"]["RuleTriggerTypeEnum"];
        })
      | null;
    WaveToUnlockIntentExpiredEvent:
      | ({
          authWaitMs?: number | null;
          authWaitMsTotal?: number | null;
          componentCompositeUuid?: string | null;
          credentials?: components["schemas"]["CredentialEntry"][] | null;
          rssiThreshold?: number | null;
        } & {
          componentUuid?: string | null;
          correlationId?: string | null;
          createdAtMs?: number | null;
          locationUuid?: string | null;
          orgUuid?: string | null;
          ownerDeviceUuid?: string | null;
          timestampMs?: number | null;
          type?: components["schemas"]["ComponentEventEnumType"];
          uuid?: string | null;
        })
      | null;
    WaveToUnlockSettingsType: {
      awaitAuthDurationMs?: number | null;
      enabled?: boolean | null;
      minRSSIThreshold?: number | null;
      showAwaitIntentFeedback?: boolean | null;
      treatNfcAsIntent?: boolean | null;
    };
    WaveToUnlockSettingsType_Minimal: {
      enabled?: boolean | null;
      minRSSIThreshold?: number | null;
    };
    WebhookActionType: {
      webhookUrl?: string | null;
    };
    WebhookInfo: {
      webhookDisabled?: boolean | null;
      webhookSecret?: string | null;
    };
    WebhookMapEntry: {
      orgId?: number | null;
      webhookId?: number | null;
    } | null;
    WebhookSettings: {
      enabled?: boolean | null;
      enabledTimestampMs?: number | null;
      enablingUser?: string | null;
      enablingUserUuid?: string | null;
      webhookSecret?: string | null;
      webhookUrl?: string | null;
    };
    WebhooksType:
      | ({
          activityWebhooks?: { [key: string]: string | null } | null;
          activityWebhooksV2?: {
            [key: string]: components["schemas"]["WebhookInfo"];
          } | null;
          diagnosticWebhooks?: { [key: string]: string | null } | null;
          diagnosticWebhooksV2?: {
            [key: string]: components["schemas"]["WebhookInfo"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    WeeklyMinuteIntervalType: {
      minuteOfWeekStart?: number | null;
      minuteOfWeekStop?: number | null;
    } | null;
    WeeklyRepeatingScheduleType:
      | ({
          intervalList?:
            | components["schemas"]["WeeklyMinuteIntervalType"][]
            | null;
        } & {
          mutable?: boolean | null;
          name?: string | null;
          oneTimeUse?: boolean | null;
          orgUuid?: string | null;
          strategy?: WeeklyRepeatingScheduleStrategyEnum | null;
          uuid?: string | null;
        })
      | null;
    WeeklyStatisticsDataPoint: {
      date?: string | null;
      stats?: { [key: string]: components["schemas"]["Stats"] } | null;
    };
    Wiegand64BitRawCredentialType:
      | ({
          cardNumber?: number | null;
          format?: components["schemas"]["WiegandFormatEnumType"];
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          managedCredUuid?: string | null;
          note?: string | null;
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          userUuid?: string | null;
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    WiegandD10202Credential:
      | ({
          cardNumber?: number | null;
          facilityCode?: number | null;
          format?: components["schemas"]["WiegandFormatEnumType"];
          nonParityValue?: string | null;
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          managedCredUuid?: string | null;
          note?: string | null;
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          userUuid?: string | null;
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    WiegandDataPhysicalPortEnumType: WiegandDataPhysicalPortEnumType;
    WiegandDataPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["WiegandDataPhysicalPortEnumType"];
    };
    WiegandDoorReaderType: {
      baseType?: components["schemas"]["ComponentBaseEnumType"];
      buzzerPort?: components["schemas"]["WiegandOutputPortType"];
      createdAtMillis?: number | null;
      d0Port?: components["schemas"]["WiegandDataPortType"];
      d1Port?: components["schemas"]["WiegandDataPortType"];
      disableCardReader?: boolean | null;
      disableKeypad?: boolean | null;
      disableWaveToUnlock?: boolean | null;
      gledPort?: components["schemas"]["WiegandOutputPortType"];
      name?: string | null;
      orgUuid?: string | null;
      otherReaderUnlockAudioFeedbackEnabled?: boolean | null;
      ownerDeviceUuid?: string | null;
      ownerHardwareType?: components["schemas"]["HardwareVariationEnum"];
      portImmutable?: boolean | null;
      readerType?: components["schemas"]["DoorReaderEnumType"];
      remoteUnlockAudioFeedbackEnabled?: boolean | null;
      rledPort?: components["schemas"]["WiegandOutputPortType"];
      tamperPort?: components["schemas"]["WiegandInputPortType"];
      type?: components["schemas"]["ComponentEnumType"];
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    WiegandFormatEnumType: WiegandFormatEnumType;
    WiegandH10301CredentialType:
      | ({
          cardNumber?: number | null;
          facilityCode?: number | null;
          format?: components["schemas"]["WiegandFormatEnumType"];
          nonParityValue?: string | null;
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          managedCredUuid?: string | null;
          note?: string | null;
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          userUuid?: string | null;
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    WiegandH10304Credential:
      | ({
          cardNumber?: number | null;
          facilityCode?: number | null;
          format?: components["schemas"]["WiegandFormatEnumType"];
          nonParityValue?: string | null;
        } & {
          createdAtMillis?: number | null;
          endDateEpochSecExclusive?: number | null;
          lastUsedAccessControlledDoorUuid?: string | null;
          lastUsedAtMillis?: number | null;
          lastUsedLocationUuid?: string | null;
          lowercaseHexValue?: string | null;
          managedCredUuid?: string | null;
          note?: string | null;
          orgUuid?: string | null;
          startDateEpochSecInclusive?: number | null;
          type?: components["schemas"]["AccessControlCredentialEnumType"];
          updatedAtMillis?: number | null;
          userUuid?: string | null;
          uuid?: string | null;
          value?: string | null;
          workflowStatus?: components["schemas"]["AccessControlCredentialWorkflowStatusEnumType"];
        })
      | null;
    WiegandInputPhysicalPortEnumType: WiegandInputPhysicalPortEnumType;
    WiegandInputPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["WiegandInputPhysicalPortEnumType"];
    };
    WiegandOutputPhysicalPortEnumType: WiegandOutputPhysicalPortEnumType;
    WiegandOutputPortType: {
      boardNum?: number | null;
      portNum?: number | null;
      portType?: components["schemas"]["WiegandOutputPhysicalPortEnumType"];
    };
    WrappedRhombusOrgUserType: {
      accessibleRhombusApps?: (WrappedRhombusOrgUserAccessibleRhombusAppsEnum | null)[] | null;
      accountOwner?: boolean | null;
      bypassSaml?: boolean | null;
      changePasswordOnLogin?: boolean | null;
      createdAtMillis?: number | null;
      deleted?: boolean | null;
      email?: string | null;
      emailCaseSensitive?: string | null;
      emailVerified?: boolean | null;
      firstName?: string | null;
      lastName?: string | null;
      mfaEnabled?: boolean | null;
      mfaTokenType?: WrappedRhombusOrgUserMfaTokenTypeEnum | null;
      name?: string | null;
      orgUserCustomizationFlags?: { [key: string]: string | null } | null;
      orgUuid?: string | null;
      passwordSet?: boolean | null;
      rhombusUserUuid?: string | null;
      status?: WrappedRhombusOrgUserStatusEnum | null;
      updatedAtMillis?: number | null;
      uuid?: string | null;
    };
    ZapierEnum: ZapierEnum;
    ZapierType:
      | ({
          zapierWebhooks?: {
            [key: string]: components["schemas"]["ZapierWebhookSettings"];
          } | null;
        } & {
          enabled?: boolean | null;
          integration?: components["schemas"]["IntegrationEnum"];
          integrationAuditMap?: {
            [key: string]: components["schemas"]["IntegrationAuditEvent"];
          } | null;
          orgUuid?: string | null;
          userUuid?: string | null;
        })
      | null;
    ZapierWebhookSettings: {
      backoffSec?: number | null;
      doorState?: ZapierWebhookSettingsDoorStateEnum | null;
      humidityLowerThreshold?: number | null;
      humidityUpperThreshold?: number | null;
      tempLowerThreshold?: number | null;
      tempUpperThreshold?: number | null;
      url: string | null;
      uuids?: (string | null)[] | null;
      zapEnum: components["schemas"]["ZapierEnum"];
    } | null;
    rctpRMAType: {
      falseReport?: boolean | null;
      rectified?: boolean | null;
      rmauuid?: string | null;
    };
  };
}

export interface operations {
  /** Adds specified users to an access control group */
  addUsersToAccessControlGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_AddUsersToOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_AddUsersToOrgGroupWSRequest"];
      };
    };
  };
  /** Assign a currently unassigned credential to a user */
  assignAccessControlCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_AssignAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_AssignAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Create a badge template */
  createBadgeTemplate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_CreateBadgeTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_CreateBadgeTemplateWSRequest"];
      };
    };
  };
  /** Delete a badge template */
  deleteBadgeTemplate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_DeleteBadgeTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_DeleteBadgeTemplateWSRequest"];
      };
    };
  };
  /** Deletes the stored image and metadata document. Prevented if any badge template refers to the image. */
  deleteBadgeTemplateImage: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_DeleteBadgeTemplateImageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_DeleteBadgeTemplateImageWSRequest"];
      };
    };
  };
  /** Finds metadata for all images uploaded for use with badge template configuration */
  findBadgeTemplateImages: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_FindBadgeTemplateImagesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_FindBadgeTemplateImagesWSRequest"];
      };
    };
  };
  /** Find badge templates in the org */
  findBadgeTemplates: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_FindBadgeTemplatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_FindBadgeTemplatesWSRequest"];
      };
    };
  };
  /** Retrieve a badge template */
  getBadgeTemplate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_GetBadgeTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_GetBadgeTemplateWSRequest"];
      };
    };
  };
  /** Get the metadata for a specific badge template image */
  getBadgeTemplateImage: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_GetBadgeTemplateImageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_GetBadgeTemplateImageWSRequest"];
      };
    };
  };
  /** Update a badge template */
  updateBadgeTemplate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_UpdateBadgeTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_UpdateBadgeTemplateWSRequest"];
      };
    };
  };
  /** Update the metadata for a badge template image */
  updateBadgeTemplateImage: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_badgetemplate_UpdateBadgeTemplateImageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_badgetemplate_UpdateBadgeTemplateImageWSRequest"];
      };
    };
  };
  /** Create a credential based on a hex value and credential type. Useful if you see an unauthorized badge event, know its type and want to import it */
  createAccessControlCredentialByHexValueAndType: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateAccessControlCredentialByHexValueAndTypeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateAccessControlCredentialByHexValueAndTypeWSRequest"];
      };
    };
  };
  /** Creates an access control group */
  createAccessControlGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_CreateOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_CreateOrgGroupWSRequest"];
      };
    };
  };
  /** Create a location access grant */
  createAccessGrant: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_CreateAccessGrantWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_CreateAccessGrantWSRequest"];
      };
    };
  };
  /** Create a location access revocation */
  createAccessRevocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_CreateAccessRevocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_CreateAccessRevocationWSRequest"];
      };
    };
  };
  /** Get credentials to generate Apple Wallet pass for user */
  createAppleWalletPass: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/vnd.apple.pkpass": components["schemas"]["Accesscontrol_credentials_CreateAppleWalletPassWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateAppleWalletPassWSRequest"];
      };
    };
  };
  /** Create a rhombus secure csn credential (Rhombus Badge) */
  createRhombusSecureCsnCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateRhombusSecureCsnCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateRhombusSecureCsnCredentialWSRequest"];
      };
    };
  };
  /** Create a standard csn credential (Third Party Badge) */
  createStandardCsnCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateStandardCsnCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateStandardCsnCredentialWSRequest"];
      };
    };
  };
  /** Create a 64bit raw wiegand credential. Used when an explicit endpoint for the wiegand format is not otherwise defined. */
  createWiegand64BitRawCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegand64BitRawCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegand64BitRawCredentialWSRequest"];
      };
    };
  };
  /** Create a wiegand credential */
  createWiegandCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandCredentialWSRequest"];
      };
    };
  };
  /** Create a D10202 wiegand credential */
  createWiegandD10202Credential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandD10202CredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandD10202CredentialWSRequest"];
      };
    };
  };
  /** Create a H10301 wiegand credential */
  createWiegandH10301Credential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandH10301CredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandH10301CredentialWSRequest"];
      };
    };
  };
  /** Create a H10304 wiegand credential */
  createWiegandH10304Credential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandH10304CredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreateWiegandH10304CredentialWSRequest"];
      };
    };
  };
  /** Delete an access control credential. It is recommended to revoke a credential rather than delete it to preserve credential history */
  deleteAccessControlCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_DeleteAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_DeleteAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Delete an access control group */
  deleteAccessControlGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_DeleteOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_DeleteOrgGroupWSRequest"];
      };
    };
  };
  /** Deletes a location access grant */
  deleteLocationAccessGrant: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_DeleteLocationAccessGrantWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_DeleteLocationAccessGrantWSRequest"];
      };
    };
  };
  /** Deletes a location access revocation */
  deleteLocationAccessRevocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_DeleteLocationAccessRevocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_DeleteLocationAccessRevocationWSRequest"];
      };
    };
  };
  /** Delete an unassigned access control credential. The credential must be unassigned (revoked) before this method can be called. History of the credential is maintained but it will no longer be returned as an unassigned credential. */
  deleteUnassignedAccessControlCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_DeleteUnassignedAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_DeleteUnassignedAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Create a door schedule exception */
  createExceptionV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_CreateDoorScheduleExceptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_CreateDoorScheduleExceptionWSRequest"];
      };
    };
  };
  /** Delete door schedule exception */
  deleteExceptionV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_DeleteDoorScheduleExceptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_DeleteDoorScheduleExceptionWSRequest"];
      };
    };
  };
  /** Find door schedule exceptions for a specific door */
  findExceptionsForDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsForDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsForDoorWSRequest"];
      };
    };
  };
  /** Find door schedule exceptions for a specific location */
  findExceptionsForLocationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsForLocationWSRequest"];
      };
    };
  };
  /** Find door schedule exceptions */
  findExceptionsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_FindDoorScheduleExceptionsWSRequest"];
      };
    };
  };
  /** Get a door schedule exception */
  getExceptionV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_GetDoorScheduleExceptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_GetDoorScheduleExceptionWSRequest"];
      };
    };
  };
  /** Update door schedule exception */
  updateExceptionV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_doorexception_UpdateDoorScheduleExceptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_doorexception_UpdateDoorScheduleExceptionWSRequest"];
      };
    };
  };
  /** Find all access control credentials in the org */
  findAccessControlCredentialByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByOrgWSRequest"];
      };
    };
  };
  /** Find all access control credentials for the specified user */
  findAccessControlCredentialByUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByUserWSRequest"];
      };
    };
  };
  /** Find all access control credentials for the specified users */
  findAccessControlCredentialByUsers: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByUsersWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindAccessControlCredentialByUsersWSRequest"];
      };
    };
  };
  /** Retrieve the access control group with the specified name */
  findAccessControlGroupByExactName: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByExactNameWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByExactNameWSRequest"];
      };
    };
  };
  /** Find all access control group memberships by user */
  findAccessControlGroupMembershipsByUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupMembershipsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupMembershipsByUserWSRequest"];
      };
    };
  };
  /** Find all access control group memberships for the current Rhombus Key user */
  findAccessControlGroupMembershipsForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupMembershipsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupMembershipsForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieve all access control groups with a name starting with the specified prefix */
  findAccessControlGroupsByNamePrefix: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByNamePrefixWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByNamePrefixWSRequest"];
      };
    };
  };
  /** Retrieve all access control groups defined in the org */
  findAccessControlGroupsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByOrgWSRequest"];
      };
    };
  };
  /** Find all access control groups a user belongs to */
  findAccessControlGroupsByUserMembership: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByUserMembershipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByUserMembershipWSRequest"];
      };
    };
  };
  /** Find all users belonging to an access control group */
  findAllUsersForAccessControlGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindAllUsersForOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindAllUsersForOrgGroupWSRequest"];
      };
    };
  };
  /** Retrieves all credential history belonging to an org */
  findCredentialHistory: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryWSRequest"];
      };
    };
  };
  /** Retrieves all credentials that have owned the credential hex value. Expect at most 1 valid/active credential and the rest are revoked */
  findCredentialHistoryByCredentialHexValue: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByCredentialHexValueWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByCredentialHexValueWSRequest"];
      };
    };
  };
  /** Retrieves all credentials that have owned the credential value. */
  findCredentialHistoryByCredentialValue: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByCredentialValueWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByCredentialValueWSRequest"];
      };
    };
  };
  /** Retrieves all credentials both current and revoked that were at some point assigned to the specified user */
  findCredentialHistoryByUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindCredentialHistoryByUserWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified access controlled door */
  findLocationAccessGrantsByAccessControlledDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified door label */
  findLocationAccessGrantsByDoorLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByDoorLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByDoorLabelWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified group */
  findLocationAccessGrantsByGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByGroupWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified location */
  findLocationAccessGrantsByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified location and user */
  findLocationAccessGrantsByLocationAndUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationAndUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByLocationAndUserWSRequest"];
      };
    };
  };
  /** Finds all location access grants in the org */
  findLocationAccessGrantsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByOrgWSRequest"];
      };
    };
  };
  /** Finds location access grants by the specified user */
  findLocationAccessGrantsByUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_FindLocationAccessGrantsByUserWSRequest"];
      };
    };
  };
  /** Finds location access revocations by the specified access controlled door */
  findLocationAccessRevocationsByAccessControlledDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Finds location access revocation by the specified door label */
  findLocationAccessRevocationsByDoorLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByDoorLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByDoorLabelWSRequest"];
      };
    };
  };
  /** Finds location access revocations by the specified group */
  findLocationAccessRevocationsByGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByGroupWSRequest"];
      };
    };
  };
  /** Finds all location access revocations in the org */
  findLocationAccessRevocationsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByOrgWSRequest"];
      };
    };
  };
  /** Finds location access revocations by the specified user */
  findLocationAccessRevocationsByUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_FindLocationAccessRevocationsByUserWSRequest"];
      };
    };
  };
  /** Find all rhombus secure mobile credentials for the current user */
  findRhombusSecureMobileCredentialsForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindRhombusSecureMobileCredentialsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindRhombusSecureMobileCredentialsForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieve basic details of unlockable access controlled doors for a device */
  findUnlockableAccessControlledDoorsByDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_FindUnlockableAccessControlledDoorsByDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_FindUnlockableAccessControlledDoorsByDeviceWSRequest"];
      };
    };
  };
  /** Attempts to apply the specified first-in state to all doors belonging to the specified first-in settings */
  applyDoorAuthFirstInGroupState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorAuthFirstInGroupStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorAuthFirstInGroupStateWSRequest"];
      };
    };
  };
  /** Attempts to apply the specified first-in state to the specified door */
  applyDoorAuthFirstInState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorAuthFirstInStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorAuthFirstInStateWSRequest"];
      };
    };
  };
  /** Attempts to apply the specified first-in state to all doors belonging to the specified first-in settings */
  applyDoorScheduleFirstInGroupState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorScheduleFirstInGroupStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorScheduleFirstInGroupStateWSRequest"];
      };
    };
  };
  /** Attempts to apply the specified first-in state to the specified door */
  applyDoorScheduleFirstInState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorScheduleFirstInStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_ApplyDoorScheduleFirstInStateWSRequest"];
      };
    };
  };
  /** Create settings for first-in that can be shared across the specified doors within a location */
  createLocationFirstInSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_CreateLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_CreateLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Delete the specified first-in settings. Effectively removes first-in configuration from all doors that belong to the settings */
  deleteLocationFirstInSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_DeleteLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_DeleteLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Paginated retrieval of all first-in settings in a location */
  findLocationFirstInSettingsByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_FindLocationFirstInSettingsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_FindLocationFirstInSettingsByLocationWSRequest"];
      };
    };
  };
  /** Paginated retrieval of all first-in settings in an org */
  findLocationFirstInSettingsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_FindLocationFirstInSettingsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_FindLocationFirstInSettingsByOrgWSRequest"];
      };
    };
  };
  /** Retrieve the specified first-in settings by its unique RUUID */
  getLocationFirstInSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_GetLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_GetLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Retrieve the first-in settings that a door belongs to, if any */
  getLocationFirstInSettingsForDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_GetLocationFirstInSettingsForDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_GetLocationFirstInSettingsForDoorWSRequest"];
      };
    };
  };
  /** Removes the specified door from the first-in settings if currently assigned to one. Also possible via the updateLocationFirstInSettings method but this method will leave other doorsbelonging assigned settings as-is rather than require the entire list. */
  removeDoorLocationFirstInSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_RemoveDoorLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_RemoveDoorLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Update settings for first-in that can be shared across the specified doors within a location */
  updateLocationFirstInSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_firstin_UpdateLocationFirstInSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_firstin_UpdateLocationFirstInSettingsWSRequest"];
      };
    };
  };
  /** Send a command to the access control unit so it refreshes its complete configuration */
  forceRefreshAccessControlUnitConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_ForceRefreshAccessControlUnitConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_ForceRefreshAccessControlUnitConfigWSRequest"];
      };
    };
  };
  /** Retrieve a location access grant by id */
  getLocationAccessGrant: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_GetLocationAccessGrantWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_GetLocationAccessGrantWSRequest"];
      };
    };
  };
  /** Retrieve a location access revocation by id */
  getLocationAccessRevocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_GetLocationAccessRevocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_GetLocationAccessRevocationWSRequest"];
      };
    };
  };
  /** Get locations for which the current user is associated with 1 or more access grants */
  getLocationsByAccessGrantForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_GetLocationsByAccessGrantForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_GetLocationsByAccessGrantForCurrentUserWSRequest"];
      };
    };
  };
  /** Get access controlled doors for the specified location for which the current user is associated with 1 or more access grants */
  getMinimalAccessControlledDoorsByLocationForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_GetMinimalAccessControlledDoorsByLocationForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_GetMinimalAccessControlledDoorsByLocationForCurrentUserWSRequest"];
      };
    };
  };
  /** Get the current state of a location lockdown and messages that should be displayed */
  getRhombusKeyLocationLockdownDetailsForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_GetRhombusKeyLocationLockdownDetailsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_GetRhombusKeyLocationLockdownDetailsForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieves a rhombus secure csn credential including sensitive details */
  getRhombusSecureCsnCredentialDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetRhombusSecureCsnCredentialDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetRhombusSecureCsnCredentialDetailsWSRequest"];
      };
    };
  };
  /** Retrieves stats of Rhombus Key app usage for active credentials that describe whether settings are optimal for the best user experience */
  getRhombusSecureMobileAppStateStatsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetRhombusSecureMobileAppStateStatsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetRhombusSecureMobileAppStateStatsForOrgWSRequest"];
      };
    };
  };
  /** Retrieves a standard csn credential including sensitive details */
  getStandardCsnCredentialDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetStandardCsnCredentialDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetStandardCsnCredentialDetailsWSRequest"];
      };
    };
  };
  /** Activate lockdown for the specified location */
  activateLockdownForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_ActivateLockdownForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_ActivateLockdownForLocationWSRequest"];
      };
    };
  };
  /** Activate lockdown for the specified location from Rhombus Key */
  activateLockdownForLocationViaRhombusKey: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_ActivateLockdownForLocationViaRhombusKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_ActivateLockdownForLocationViaRhombusKeyWSRequest"];
      };
    };
  };
  /** Create location lockdown plan */
  createLocationLockdownPlan: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_CreateLocationLockdownPlanWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_CreateLocationLockdownPlanWSRequest"];
      };
    };
  };
  /** Create (or update if ruleUuid is provided) a lockdown rule for the specified location */
  createLockdownRuleForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_CreateLockdownRuleForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_CreateLockdownRuleForLocationWSRequest"];
      };
    };
  };
  /** Deactivate lockdown for the specified location */
  deactivateLockdownForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeactivateLockdownForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeactivateLockdownForLocationWSRequest"];
      };
    };
  };
  /** Deactivate lockdown for the specified location from Rhombus Key */
  deactivateLockdownForLocationViaRhombusKey: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeactivateLockdownForLocationViaRhombusKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeactivateLockdownForLocationViaRhombusKeyWSRequest"];
      };
    };
  };
  /** Disables tracking lockdown state for the specified location */
  deleteLocationLockdownState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLocationLockdownStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLocationLockdownStateWSRequest"];
      };
    };
  };
  /** Delete lockdown plan */
  deleteLockdownPlan: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLockdownPlanWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLockdownPlanWSRequest"];
      };
    };
  };
  /** Delete a lockdown rule for the specified location */
  deleteLockdownRuleForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLockdownRuleForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DeleteLockdownRuleForLocationWSRequest"];
      };
    };
  };
  /** Disable test mode of lockdown for the specified location */
  disableLockdownTestModeForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_DisableLockdownTestModeForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_DisableLockdownTestModeForLocationWSRequest"];
      };
    };
  };
  /** Enable test mode of lockdown for the specified location */
  enableLockdownTestModeForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_EnableLockdownTestModeForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_EnableLockdownTestModeForLocationWSRequest"];
      };
    };
  };
  /** Retrieve a list of lockdown events for the specified location */
  findLocationLockdownEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLocationLockdownEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLocationLockdownEventsWSRequest"];
      };
    };
  };
  /** Finds the state of all lockdowns for the org */
  findLocationLockdownStates: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLocationLockdownStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLocationLockdownStatesWSRequest"];
      };
    };
  };
  /** Find lockdown plans in the org */
  findLockdownPlans: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLockdownPlansWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLockdownPlansWSRequest"];
      };
    };
  };
  /** Find lockdown plans for the specified location */
  findLockdownPlansByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLockdownPlansByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_FindLockdownPlansByLocationWSRequest"];
      };
    };
  };
  /** Get lockdown plan */
  getLockdownPlan: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetLockdownPlanWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetLockdownPlanWSRequest"];
      };
    };
  };
  /** Get lockdown activation / deactivation rules for a location */
  getLockdownRulesForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetLockdownRulesForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetLockdownRulesForLocationWSRequest"];
      };
    };
  };
  /** Retrieves an existing lockdown state or creates one for the specified location */
  getOrCreateLocationLockdownState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetOrCreateLocationLockdownStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_GetOrCreateLocationLockdownStateWSRequest"];
      };
    };
  };
  /** Update location lockdown plan */
  updateLocationLockdownPlan: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_lockdownplan_UpdateLocationLockdownPlanWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_lockdownplan_UpdateLocationLockdownPlanWSRequest"];
      };
    };
  };
  /** Bulk provision PIN credentials for multiple users */
  bulkProvisionPinCredentials: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BulkProvisionPinCredentialsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_BulkProvisionPinCredentialsWSRequest"];
      };
    };
  };
  /** Rotate multiple PIN credentials with new generated values */
  bulkRotatePinCredentials: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BulkRotatePinCredentialsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_BulkRotatePinCredentialsWSRequest"];
      };
    };
  };
  /** Create a PIN credential */
  createPinCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_CreatePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_CreatePinCredentialWSRequest"];
      };
    };
  };
  /** Delete a PIN credential */
  deletePinCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_DeletePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_DeletePinCredentialWSRequest"];
      };
    };
  };
  /** Retrieves all PIN credentials in the org */
  findPinCredentialsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_FindPinCredentialsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_FindPinCredentialsByOrgWSRequest"];
      };
    };
  };
  /** Get an unclaimed PIN code to create a PIN credential with */
  getAccessControlAvailablePinCode: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetAvailablePinCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetAvailablePinCodeWSRequest"];
      };
    };
  };
  /** Retrieves a PIN credential including sensitive details */
  getPinCredentialDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_GetPinCredentialDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_GetPinCredentialDetailsWSRequest"];
      };
    };
  };
  /** Revoke a PIN credential */
  revokePinCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_RevokePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_RevokePinCredentialWSRequest"];
      };
    };
  };
  /** Rotate a PIN credential with a new value */
  rotatePinCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_RotatePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_RotatePinCredentialWSRequest"];
      };
    };
  };
  /** Update a PIN credential */
  updatePinCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdatePinCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdatePinCredentialWSRequest"];
      };
    };
  };
  /** Creates a mobile access control credential. Store the private key securely, there is no other way to retrieve it other then generating a new cred. */
  provisionMobileAccessControlCredentialForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BaseProvisionMobileAccessControlCredentialForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_ProvisionMobileAccessControlCredentialForCurrentUserWSRequest"];
      };
    };
  };
  /** Generate a QR code to unlock a door remotely when viewed by a camera */
  generateQRAccessCode: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_qr_GenerateQRAccessCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_qr_GenerateQRAccessCodeWSRequest"];
      };
    };
  };
  /** Generate a QR code to unlock a door remotely when viewed by a camera */
  getQRAccessCodes: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_qr_GetQRAccessCodesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_qr_GetQRAccessCodesWSRequest"];
      };
    };
  };
  /** Removes specified users from an access control group */
  removeUsersFromAccessControlGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_RemoveUsersFromOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_RemoveUsersFromOrgGroupWSRequest"];
      };
    };
  };
  /** Revokes an access control credential. Unlike suspension this will give up its claim on the credential value allowing another cred to claim it as its identifier */
  revokeAccessControlCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_RevokeAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_RevokeAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Revoke user's rhombus secure mobile credential */
  revokeRhombusSecureMobileCredentialForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_RevokeRhombusSecureMobileCredentialForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_RevokeRhombusSecureMobileCredentialForCurrentUserWSRequest"];
      };
    };
  };
  sendUserPresenceForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_BaseSendUserPresenceForCurrentUserWsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_SendUserPresenceForCurrentUserWSRequest"];
      };
    };
  };
  /** Mark an access control credential as suspended */
  suspendAccessControlCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_SuspendAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_SuspendAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Unlock an access controlled door */
  unlockAccessControlledDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BaseUnlockAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_UnlockAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Unlock an access controlled door using authorization of supplied user token */
  unlockAccessControlledDoorForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_BaseUnlockAccessControlledDoorForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_UnlockAccessControlledDoorForCurrentUserWSRequest"];
      };
    };
  };
  /** Mark an access control credential as no longer suspended */
  unsuspendAccessControlCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UnsuspendAccessControlCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UnsuspendAccessControlCredentialWSRequest"];
      };
    };
  };
  /** Update the note field of an Access Control Credential */
  updateAccessControlCredentialNote: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateAccessControlCredentialNoteWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateAccessControlCredentialNoteWSRequest"];
      };
    };
  };
  /** Updates an access control group's meta information like name and description */
  updateAccessControlGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_UpdateOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_UpdateOrgGroupWSRequest"];
      };
    };
  };
  /** Updates a location access grant */
  updateAccessGrant: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessgrant_UpdateAccessGrantWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessgrant_UpdateAccessGrantWSRequest"];
      };
    };
  };
  /** Updates a location access revocation */
  updateAccessRevocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_accessrevocation_UpdateAccessRevocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_accessrevocation_UpdateAccessRevocationWSRequest"];
      };
    };
  };
  /** Rhombus Key can update the detected app state which includes settings that can effect certain features. */
  updateRhombusKeyMobileAppStateForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusKeyMobileAppStateForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusKeyMobileAppStateForCurrentUserWSRequest"];
      };
    };
  };
  /** Update a rhombus secure csn credential (Rhombus Badge) */
  updateRhombusSecureCsnCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusSecureCsnCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusSecureCsnCredentialWSRequest"];
      };
    };
  };
  /** Update a rhombus secure mobile credential (RhombusKey App w/ BLE or NFC) */
  updateRhombusSecureMobileCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusSecureMobileCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateRhombusSecureMobileCredentialWSRequest"];
      };
    };
  };
  /** Update a standard csn credential (Third Party Badge) */
  updateStandardCsnCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateStandardCsnCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateStandardCsnCredentialWSRequest"];
      };
    };
  };
  /** Update a wiegand credential (Third Party Badge) */
  updateWiegandCredential: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Accesscontrol_credentials_UpdateWiegandCredentialWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Accesscontrol_credentials_UpdateWiegandCredentialWSRequest"];
      };
    };
  };
  acceptAlertMonitoringTermsOfService: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_AcceptAlertMonitoringTermsOfServiceResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_AcceptAlertMonitoringTermsOfServiceRequest"];
      };
    };
  };
  acceptAlertMonitoringTermsOfServiceForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_AcceptAlertMonitoringTermsOfServiceResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_AcceptAlertMonitoringTermsOfServiceForLocationRequest"];
      };
    };
  };
  cancelThreatCase: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_CancelThreatCaseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_CancelThreatCaseWSRequest"];
      };
    };
  };
  createAlertMonitoringSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_CreateNoonlightSettingsForLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_CreateNoonlightSettingsForLocationRequest"];
      };
    };
  };
  createCustomPinForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_CreateCustomPinForNoonlightWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_CreateCustomPinForNoonlightWSRequest"];
      };
    };
  };
  createPinForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_CreatePinForNoonlightWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_CreatePinForNoonlightWSRequest"];
      };
    };
  };
  deleteAlertMonitoringSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_DeleteNoonlightSettingsForLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_DeleteNoonlightSettingsForLocationRequest"];
      };
    };
  };
  deletePinForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_DeletePinForNoonlightWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_DeletePinForNoonlightWSRequest"];
      };
    };
  };
  disableMonitoringForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_DisableLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_DisableLocationRequest"];
      };
    };
  };
  dismissThreatCase: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_DismissThreatCaseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_DismissThreatCaseWSRequest"];
      };
    };
  };
  enableMonitoringForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_EnableLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_EnableLocationRequest"];
      };
    };
  };
  escalateThreatCaseToAlarm: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_EscalateThreatCaseToAlarmWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_EscalateThreatCaseToAlarmWSRequest"];
      };
    };
  };
  generateMonthlyVerificationsForYearReportForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GenerateMonthlyVerificationsForYearReportForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GenerateMonthlyVerificationsForYearReportForLocationWSRequest"];
      };
    };
  };
  generateReportDataForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GenerateReportDataForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GenerateReportDataForLocationWSRequest"];
      };
    };
  };
  getAlertMonitoringSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GetNoonlightSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GetNoonlightSettingsWSRequest"];
      };
    };
  };
  /** Retrieve alert monitoring settings by location. */
  getAlertMonitoringSettingsForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GetNoonlightSettingsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GetNoonlightSettingsForLocationWSRequest"];
      };
    };
  };
  getAlertMonitoringTripwireGroupCount: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_GetAlertMonitoringTripwireGroupCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_GetAlertMonitoringTripwireGroupCountWSRequest"];
      };
    };
  };
  /** Retrieve summary of the alarm monitoring status for the specified location */
  locationStatus: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_LocationStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_LocationStatusWSRequest"];
      };
    };
  };
  /** Retrieve summary of the alarm monitoring status for all locations */
  orgStatus: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_OrgStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_OrgStatusWSRequest"];
      };
    };
  };
  /** Bulk provision alert monitoring PINs for multiple users. */
  bulkProvisionPins: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BulkPinsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_BulkProvisionPinsWSRequest"];
      };
    };
  };
  /** Rotate multiple alert monitoring PINs. */
  bulkRotatePins: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BulkPinsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_BulkRotatePinsWSRequest"];
      };
    };
  };
  /** Create a PIN for alert monitoring. */
  createPin: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_CreatePinWSRequest"];
      };
    };
  };
  /** Delete an alert monitoring PIN. */
  deletePin: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_DeletePinWSRequest"];
      };
    };
  };
  /** Retrieve alert monitoring PINs by location and/or user. */
  findPinsByLocationAndUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_FindPinsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_FindPinsByLocationAndUserWSRequest"];
      };
    };
  };
  /** Retrieve alert monitoring PINs by org. */
  findPinsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_FindPinsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_FindPinsByOrgWSRequest"];
      };
    };
  };
  /** Get an unclaimed PIN code to create an alert monitoring PIN with. */
  getAlertMonitoringAvailablePinCode: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_GetAvailableALMPinCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_GetAvailableALMPinCodeWSRequest"];
      };
    };
  };
  /** Retrieve an alert monitoring PIN. */
  getPin: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_GetPinWSRequest"];
      };
    };
  };
  /** Rotate an alert monitoring PIN. */
  rotatePin: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_RotatePinWSRequest"];
      };
    };
  };
  /** Update an alert monitoring PIN. */
  updatePin: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_pin_BasePinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_pin_UpdatePinWSRequest"];
      };
    };
  };
  resetAlertMonitoringTripwireGroupCount: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_ResetAlertMonitoringTripwireGroupCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_ResetAlertMonitoringTripwireGroupCountWSRequest"];
      };
    };
  };
  updateAlertMonitoringSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Alertmonitoring_UpdateNoonlightSettingsForLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alertmonitoring_UpdateNoonlightSettingsForLocationRequest"];
      };
    };
  };
  /** Remove an audio gateway from organization */
  deleteAudioGateway: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audiogateway_DeleteAudioGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_DeleteAudioGatewayWSRequest"];
      };
    };
  };
  /** Get audio seek points */
  getAudioSeekpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetAudioSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetAudioSeekpointsWSRequest"];
      };
    };
  };
  /** Get an audio gateway config */
  getAudioGatewayConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetAudioGatewayConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetAudioGatewayConfigWSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified audio gateway */
  getFullAudioGatewayState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetFullAudioGatewayStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetFullAudioGatewayStateWSRequest"];
      };
    };
  };
  /** Get media uris for audio gateway to retrieve footage */
  getAudioGatewayMediaUris: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetMediaUrisWSRequest"];
      };
    };
  };
  /** Get basic state information for all audio gateways */
  getMinimalAudioGatewayStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetMinimalAudioGatewayStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetMinimalAudioGatewayStatesWSRequest"];
      };
    };
  };
  /** Get required information for offline lan streaming on all audio gateways */
  getAudioGatewayOfflineLanStreamingInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audiogateway_GetAudioGatewayOfflineLanStreamingInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_GetAudioGatewayOfflineLanStreamingInfoWSRequest"];
      };
    };
  };
  /** Get stored video information for an audio gateway */
  getAudioGatewayPresenceWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get uptime information for an audio gateway */
  getAudioGatewayUptimeWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetUptimeWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetUptimeWindowsWSRequest"];
      };
    };
  };
  /** Reboot the specified audio gateway */
  rebootAudioGateway: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_RebootDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_RebootAudioGatewayWSRequest"];
      };
    };
  };
  /** Update config for audio gateway */
  updateAudioGatewayConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audiogateway_UpdateAudioGatewayConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_UpdateAudioGatewayConfigWSRequest"];
      };
    };
  };
  /** Update details for audio gateway. Note: uuid is a required field */
  updateAudioGatewayDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audiogateway_UpdateAudioGatewayDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audiogateway_UpdateAudioGatewayDetailsWSRequest"];
      };
    };
  };
  /** Cancel any currently playing looping audio for an audio device */
  cancelLoopingAudioPlayback: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audioplayback_CancelLoopingAudioPlaybackWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_CancelLoopingAudioPlaybackWSRequest"];
      };
    };
  };
  /** Delete an uploaded audio clip metadata */
  deleteAudioUploadMetadata: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audioplayback_DeleteAudioUploadMetadataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_DeleteAudioUploadMetadataWSRequest"];
      };
    };
  };
  /** Get list of uploaded audio clip metadata */
  getAudioUploadMetadataForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audioplayback_GetAudioUploadMetadataForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_GetAudioUploadMetadataForOrgWSRequest"];
      };
    };
  };
  /** Play an uploaded audio clip through an audio device */
  playAudioUpload: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audioplayback_PlayAudioUploadWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_PlayAudioUploadWSRequest"];
      };
    };
  };
  /** Update an uploaded audio clip metadata */
  updateAudioUploadMetadata: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audioplayback_UpdateAudioUploadMetadataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_UpdateAudioUploadMetadataWSRequest"];
      };
    };
  };
  /** Upload PCM audio clip */
  uploadAudioPcm: {
    parameters: {
      path: {
        audioClipName: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audioplayback_UploadAudioPcmWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload text to synthesize audio */
  uploadAudioText: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Audioplayback_UploadAudioTextWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Audioplayback_UploadAudioTextWSRequest"];
      };
    };
  };
  /** Remove the badge reader from the organization */
  deleteBadgeReader: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Badgereader_DeleteBadgeReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Badgereader_DeleteBadgeReaderWSRequest"];
      };
    };
  };
  /** Get a badge reader's config */
  getBadgeReaderConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Badgereader_GetBadgeReaderConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified badge reader */
  getBadgeReaderFullState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Badgereader_GetBadgeReaderFullStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetFullDeviceStateWSRequest"];
      };
    };
  };
  /** Get basic state information about all badge readers in organization */
  getBadgeReaderMinimalStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Badgereader_GetBadgeReaderMinimalStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetMinimalDeviceStateListWSRequest"];
      };
    };
  };
  rebootBadgeReader: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_RebootDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Badgereader_RebootBadgeReaderWSRequest"];
      };
    };
  };
  /** Update a badge reader's config */
  updateBadgeReaderConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Badgereader_UpdateBadgeReaderConfigWSRequest"];
      };
    };
  };
  /** Update hardware details of badge reader. */
  updateBadgeReaderDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateDeviceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Badgereader_UpdateBadgeReaderDetailsWSRequest"];
      };
    };
  };
  /** Retrieve list of available base stations for BLE sensors */
  getBaseStations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Ble_GetBaseStationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_GetBaseStationsWSRequest"];
      };
    };
  };
  /** Get secure secret for registered sensor */
  getSecureSecretForRegistered: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Ble_GetSecureSecretForRegisteredWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_BleDeviceMap"];
      };
    };
  };
  /** Get secure secret to register an unregistered sensor */
  getSecureSecretForUnregistered: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Ble_GetSecureSecretForUnregisteredWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_BleDeviceMap"];
      };
    };
  };
  /** Equivalent to getSecureSecretForRegistered but for RhombusKey mobile app */
  getSecureSecretOfRegisteredDeviceForRhombusKey: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Ble_GetSecureSecretForRegisteredWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_BleDeviceMap"];
      };
    };
  };
  /** Get latest firmware update details for all sensor */
  getSensorHardwareFirmwareUpdateDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Ble_GetSensorHardwareFirmwareUpdateDetailsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_GetSensorHardwareFirmwareUpdateDetailsRequest"];
      };
    };
  };
  /** Register a sensor to an organization */
  registerSensor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Ble_RegisterSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_RegisterSensorWSRequest"];
      };
    };
  };
  /** Unregister a sensor from account */
  unregisterSensor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Ble_UnregisterSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ble_UnregisterSensorWSRequest"];
      };
    };
  };
  /** Create rule for a button sensor. */
  createRuleForButton: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Button_CreateRuleForButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_CreateRuleForButtonWSRequest"];
      };
    };
  };
  /** Delete rule for a button sensor. */
  deleteRuleForButton: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Button_DeleteRuleForButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_DeleteRuleForButtonWSRequest"];
      };
    };
  };
  /** Get list of button press events for button sensor */
  getButtonPressEventsForSensor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Button_GetButtonPressEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_GetButtonPressEventsForSensorWSRequest"];
      };
    };
  };
  /** Get rules for all buttons in an org. */
  getButtonRulesForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Button_GetButtonRulesForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_GetButtonRulesForOrgWSRequest"];
      };
    };
  };
  /** Get basic state information for all button sensors */
  getMinimalButtonStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Button_GetMinimalButtonStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_GetMinimalButtonStatesWSRequest"];
      };
    };
  };
  /** Get all rules for a button sensor. */
  getRulesForButton: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Button_GetRulesForButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_GetRulesForButtonWSRequest"];
      };
    };
  };
  /** Update config for a button sensor. */
  updateButtonConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_UpdateButtonConfigWSRequest"];
      };
    };
  };
  /** Update details for a button sensor. */
  updateButtonDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateDeviceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Button_UpdateButtonDetailsWSRequest"];
      };
    };
  };
  /** Generate the homography to project detections onto a floorplan. */
  cameraCalibrateFloorplanProjection: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_CalibrateFloorplanProjectionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_CalibrateFloorplanProjectionWSRequest"];
      };
    };
  };
  /** Create custom activity seekpoints for a specified camera */
  createCustomFootageSeekpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_CreateFootageSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateCustomFootageSeekpointsWSRequest"];
      };
    };
  };
  /** Create an activity bounding box for specified camera */
  createFootageBoundingBoxes: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_CreateFootageBoundingBoxesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateFootageBoundingBoxesWSRequest"];
      };
    };
  };
  /** Share a password protected live video stream for a camera */
  createProtectedSharedLiveVideoStream: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_CreateSharedLiveVideoStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateSharedLiveVideoStreamWSRequest"];
      };
    };
  };
  /** Share a password protected video wall */
  createProtectedSharedVideoWall: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_CreateSharedVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateSharedVideoWallWSRequest"];
      };
    };
  };
  /** Create a raw HTTP stream for a camera */
  createCameraRawHttpStream: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_CreateRawHttpStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_CreateRawHttpStreamWSRequest"];
      };
    };
  };
  /** Share an unprotected live video stream for a camera */
  createCameraSharedLiveVideoStream: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_CreateSharedLiveVideoStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateSharedLiveVideoStreamWSRequest"];
      };
    };
  };
  /** Share an unprotected video wall */
  createSharedVideoWall: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_CreateSharedVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateSharedVideoWallWSRequest"];
      };
    };
  };
  /** Create a video wall for user */
  createVideoWall: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_CreateVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_CreateVideoWallWSRequest"];
      };
    };
  };
  /** Remove a camera from organization */
  deleteCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_DeleteCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteCameraWSRequest"];
      };
    };
  };
  /** Delete custom seekpoints for specified cameras */
  deleteCustomFootageSeekpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_DeleteCustomFootageSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteCustomFootageSeekpointsWSRequest"];
      };
    };
  };
  /** Delete a raw HTTP stream for a camera */
  deleteCameraRawHttpStream: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_DeleteRawHttpStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_DeleteRawHttpStreamWSRequest"];
      };
    };
  };
  /** Remove a shared live stream from camera */
  deleteSharedLiveVideoStream: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["DeleteSharedLiveVideoStreamForDeviceResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteSharedLiveVideoStreamWSRequest"];
      };
    };
  };
  /** Remove a shared video wall */
  deleteSharedVideoWall: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_DeleteSharedVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteSharedVideoWallWSRequest"];
      };
    };
  };
  /** Delete a video wall */
  deleteVideoWall: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_DeleteVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_DeleteVideoWallWSRequest"];
      };
    };
  };
  /** Wipes the SD card on a camera */
  eraseCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_EraseCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_EraseCameraWSRequest"];
      };
    };
  };
  /** Get a list of all cameras raw HTTP streams */
  findAllCameraRawHttpStreams: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_FindAllRawHttpStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_FindAllRawHttpStreamsWSRequest"];
      };
    };
  };
  /** Get list of all shared live streams */
  findAllSharedLiveVideoStreams: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_FindAllSharedLiveVideoStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_FindAllSharedLiveVideoStreamsWSRequest"];
      };
    };
  };
  /** Get list of all shared live streams for camera */
  findCameraSharedLiveVideoStreams: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_FindSharedLiveVideoStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_FindSharedLiveVideoStreamsForWSRequest"];
      };
    };
  };
  /** Get list of all shares for a video wall */
  findSharedVideoWalls: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_FindSharedVideoWallsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_FindSharedVideoWallsWSRequest"];
      };
    };
  };
  /** Create camera registration information for QR code generation */
  generateBatchRegistrationInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GenerateBatchRegistrationInfoResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GenerateBatchRegistrationInfoRequest"];
      };
    };
  };
  /** Create a change wifi request for QR code generation */
  generateWifiChangeAuthorizationToken: {
    parameters: {
      header: {
        RHOMBUS_MY_IP?: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GenerateWifiChangeAuthorizationTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GenerateWifiChangeAuthorizationTokenWSRequest"];
      };
    };
  };
  /** Get detailed usage information for a registration token */
  getBatchRegistrationUsage: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetBatchRegistrationTokenUsageResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetBatchRegistrationTokenUsageRequest"];
      };
    };
  };
  /** Get AI normalized confidence thresholds for a camera */
  getCameraAIThresholds: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetCameraAIThresholdsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCameraAIThresholdsWSRequest"];
      };
    };
  };
  /** Get information on archived video for specified camera */
  getCloudArchivedMediaInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetCloudArchivedMediaInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCloudArchivedMediaInfoWSRequest"];
      };
    };
  };
  /** Get the cloud archiving scheduling config applicable to a camera */
  getCloudArchivingConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetCloudArchivingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCloudArchivingConfigWSRequest"];
      };
    };
  };
  /** Get a camera's config */
  getCameraConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetConfigWSRequest"];
      };
    };
  };
  /** Use /getFullCameraState instead */
  getCurrentCameraState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetCurrentStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCurrentStateWSRequest"];
      };
    };
  };
  /** Get activity seekpoints for specified camera */
  getCustomFootageSeekpointsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetCustomFootageSeekpointsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCustomFootageSeekpointsV2WSRequest"];
      };
    };
  };
  /** Get hardware details of multiple cameras */
  getCameraDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetCameraDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetCameraDetailsWSRequest"];
      };
    };
  };
  /** Get a camera's config */
  getCameraFacetedConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Deviceconfig_GetFacetedUserConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Get object bounding boxes for a specified camera. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
  getCameraFootageBoundingBoxes: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageBoundingBoxesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageBoundingBoxesWSRequest"];
      };
    };
  };
  /** Get object bounding boxes for multiple cameras. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
  getFootageBoundingBoxesForMultiple: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageBoundingBoxesForMultipleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageBoundingBoxesForMultipleWSRequest"];
      };
    };
  };
  /** Use /getFootageSeekpointsV2 instead */
  getCameraFootageSeekpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageSeekpointsWSRequest"];
      };
    };
  };
  /** Get activity seekpoints for multiple cameras */
  getFootageSeekpointsForMultiple: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageSeekpointsForMultipleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageSeekpointsForMultipleWSRequest"];
      };
    };
  };
  /** Get activity seekpoints for specified camera */
  getCameraFootageSeekpointsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetFootageSeekpointsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFootageSeekpointsV2WSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified camera */
  getFullCameraState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetFullCameraStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetFullCameraStateWSRequest"];
      };
    };
  };
  /** Gets all the cameras that have line-crossing feature enabled at a location */
  getLineCrossingEnabledCamerasForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetLineCrossingEnabledCamerasForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetLineCrossingEnabledCamerasForLocationWSRequest"];
      };
    };
  };
  /** Get media uris for camera to retrieve footage */
  getCameraMediaUris: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetMediaUrisWSRequest"];
      };
    };
  };
  /** Get basic information about all cameras and their locations in organization */
  getMinimalCameraLocationMap: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetMinimalCameraLocationMapWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetMinimalCameraLocationMapWSRequest"];
      };
    };
  };
  /** Get basic state information about all cameras in organization */
  getMinimalCameraStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetMinimalCameraStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetMinimalCameraStateListWSRequest"];
      };
    };
  };
  /** Use /getMinimalCameraStateList instead */
  getCameraMinimalList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetMinimalListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetMinimalListWSRequest"];
      };
    };
  };
  /** Gets all the cameras that have a occupancy polygon defined */
  getOccupancyEnabledCameras: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetFacetedCameraDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetOccupancyEnabledCamerasWSRequest"];
      };
    };
  };
  /** Get required information for offline lan streaming on all cameras */
  getCameraOfflineLanStreamingInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetOfflineLanStreamingInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetOfflineLanStreamingInfoWSRequest"];
      };
    };
  };
  /** Get stored video information for camera */
  getCameraPresenceWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get info for all raw HTTP streams from a camera */
  getCameraRawHttpStreams: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_GetRawHttpStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_GetRawHttpStreamsWSRequest"];
      };
    };
  };
  /** Get a file that contains information required to recover the media from the SD card of a damaged camera */
  getStorageRecoveryFile: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetStorageRecoveryFileWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetStorageRecoveryFileWSRequest"];
      };
    };
  };
  /** Get uptime information for camera */
  getUptimeWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetUptimeWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetUptimeWindowsWSRequest"];
      };
    };
  };
  /** Get list of video walls available for client */
  getVideoWalls: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetVideoWallsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_GetVideoWallsWSRequest"];
      };
    };
  };
  /** Send reboot command to camera */
  rebootCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_RebootCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_RebootCameraWSRequest"];
      };
    };
  };
  /** Update AI confidence thresholds for a camera */
  updateCameraAIThresholds: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraAIThresholdsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraAIThresholdsWSRequest"];
      };
    };
  };
  /** Updates the human loitering feature for a camera. */
  updateCameraHumanLoiteringConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraHumanLoiteringWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraHumanLoiteringConfigWSRequest"];
      };
    };
  };
  /** Updates the line-crossing feature for a camera. Accepts two points which define a line that determines the threshold for which INGRESS and EGRESS events will be generated. Consider the top-left corner of a camera's image to be the origin (0,0). */
  updateCameraLineCrossingThresholds: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraLineCrossingThresholdsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraLineCrossingThresholdsWSRequest"];
      };
    };
  };
  /** Update a camera's config */
  updateCameraConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateConfigWSRequest"];
      };
    };
  };
  /** Update hardware details of camera */
  updateCameraDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraWSRequest"];
      };
    };
  };
  updateDetailsBulkV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCamerasBulkV2WSRequest"];
      };
    };
  };
  /** Update hardware details of camera. */
  updateCameraDetailsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraV2WSRequest"];
      };
    };
  };
  /** Update a camera's config */
  updateCameraFacetedConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_UpdateFacetedUserConfigWSRequest"];
      };
    };
  };
  /** Send command to update firmware to camera */
  updateFirmware: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateCameraFirmwareWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateCameraFirmwareWSRequest"];
      };
    };
  };
  /** Update a video wall */
  updateVideoWalls: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateVideoWallWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateVideoWallWSRequest"];
      };
    };
  };
  /** Send a command to update wifi on specified connected cameras */
  updateCameraWifi: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_UpdateWifiWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Camera_UpdateWifiWSRequest"];
      };
    };
  };
  /** Deletes a conversation and its entire chat history. */
  deleteChatbotConversation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_DeleteChatbotConversationWSRequest"];
      };
    };
  };
  /**
   * Retrieves chat history by context ID. A context ID can be retrieved from a conversation and refers
   * to a unique set of chat history that is seeded to Rhombus MIND before it answers a new query.
   */
  getChatHistoryByContextId: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Chatbot_GetChatHistoryWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_GetChatHistoryByContextIdWSRequest"];
      };
    };
  };
  /**
   * Retrieves the list of conversations the user has initiated with Rhombus MIND. Conversations are
   * stored for 60 days then it and its specific chat history are erased. A conversation is a unique
   * set of chat history with Rhombus MIND. When submitting a new chat for a conversation its entire
   * chat history is used to initialize the LLM before answer the new query.
   */
  getChatbotConversations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Chatbot_GetChatbotConversationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_GetChatbotConversationsWSRequest"];
      };
    };
  };
  /**
   * Submits a query to Rhombus MIND. When submitting a query the context ID plays an important role in
   * helping seed Rhombus MIND with the previous chat history to answer the query in the context of the
   * perceived conversation. You do not need to create a conversation, submitting a new context ID will
   * cause a new conversation to be created.
   */
  submitChat: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Chatbot_SubmitChatWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_SubmitChatWSRequest"];
      };
    };
  };
  /**
   * Updates fields of a conversation by presence. Meaning if the field is omitted it will not be updated.
   * Currently the only field that can be updated is the conversation name. The contextId field is required.
   */
  updateChatbotConversation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Chatbot_UpdateChatbotConversationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Chatbot_UpdateChatbotConversationWSRequest"];
      };
    };
  };
  /** Remove an environmental gateway from the org */
  deleteEnvironmentalGateway: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_DeleteEnvironmentalGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_DeleteEnvironmentalGatewayWSRequest"];
      };
    };
  };
  /** Get list of climate events for environmental sensor */
  getClimateEventsForSensor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_GetClimateEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetClimateEventsForSensorWSRequest"];
      };
    };
  };
  /** Get list of climate events for environmental sensor */
  getClimateEventsForTags: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_GetClimateEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetClimateEventsForSensorWSRequest"];
      };
    };
  };
  /** Get stored video information for sensor */
  getClimatePresenceWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get the config for a climate sensor */
  getConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_GetClimateSensorConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetClimateSensorConfigWSRequest"];
      };
    };
  };
  /** Get list of shadows of all environmental gateways of an org */
  getEnvironmentalGatewayShadows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_GetEnvironmentalGatewayShadowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetEnvironmentalGatewayShadowsWSRequest"];
      };
    };
  };
  /** Get list of events for environmental gateway */
  getEventsForEnvironmentalGateway: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_GetEventsForEnvironmentalGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetEventsForEnvironmentalGatewayWSRequest"];
      };
    };
  };
  /** Get basic state information of all environmental sensors */
  getMinimalClimateStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_GetMinimalClimateStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetMinimalClimateStatesWSRequest"];
      };
    };
  };
  /** Get list of basic states of all environmental gateways of an org */
  getMinimalEnvironmentalGatewayStates: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_GetMinimalEnvironmentalGatewayStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetMinimalEnvironmentalGatewayStatesWSRequest"];
      };
    };
  };
  /** Get list of events for environmental gateways in minimal state */
  getMinimalStateEventsForEnvironmentalGateway: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_GetMinimalEnvironmentalGatewayStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_GetEventsForEnvironmentalGatewayWSRequest"];
      };
    };
  };
  /** Send reboot command to environmental gateway */
  rebootEnvironmentalGateway: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_RebootDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_RebootEnvironmentalGatewayWSRequest"];
      };
    };
  };
  /** Update details for environmental sensor. Note: uuid is a required field */
  updateClimateSensorDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_UpdateClimateSensorDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_UpdateClimateSensorDetailsWSRequest"];
      };
    };
  };
  /** Update details for environmental gateway. Note: uuid is a required field */
  updateEnvironmentalGatewayDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Climate_UpdateEnvironmentalGatewayDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Climate_UpdateEnvironmentalGatewayDetailsWSRequest"];
      };
    };
  };
  /** Create a label that can be assigned to an access controlled door and referenced by an access grant or access revocation */
  addAccessControlledDoorLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_AddAccessControlledDoorLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_AddAccessControlledDoorLabelWSRequest"];
      };
    };
  };
  /** Attempts to apply a door state override to an access controlled door that ignores the regular door schedule and door schedule exceptions. */
  applyAccessControlledDoorStateOverride: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_ApplyAccessControlledDoorStateOverrideWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_ApplyAccessControlledDoorStateOverrideWSRequest"];
      };
    };
  };
  /** Attempts to cancel the door state override, if one has been applied, to an access controlled door. */
  cancelAccessControlledDoorStateOverride: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CancelAccessControlledDoorStateOverrideWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CancelAccessControlledDoorStateOverrideWSRequest"];
      };
    };
  };
  /** Create an access controlled door */
  createAccessControlledDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Create custom activity seekpoints for a specified access controlled door */
  createAccessControlledDoorSeekpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateAccessControlledDoorSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateAccessControlledDoorSeekpointsWSRequest"];
      };
    };
  };
  /** Create a door position indicator component */
  createIntegratedDoorPositionIndicator: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedDoorPositionIndicatorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedDoorPositionIndicatorWSRequest"];
      };
    };
  };
  /** Create a door relay component */
  createIntegratedDoorRelay: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedDoorRelayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedDoorRelayWSRequest"];
      };
    };
  };
  /** Create a generic button component */
  createIntegratedGenericButton: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedGenericButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedGenericButtonWSRequest"];
      };
    };
  };
  /** Create a generic input component */
  createIntegratedGenericInput: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedGenericInputWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedGenericInputWSRequest"];
      };
    };
  };
  /** Create a generic relay component */
  createIntegratedGenericRelay: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedGenericRelayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedGenericRelayWSRequest"];
      };
    };
  };
  /** Create a request to exit component */
  createIntegratedRequestToExit: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateIntegratedRequestToExitWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateIntegratedRequestToExitWSRequest"];
      };
    };
  };
  /** Create a third party OSDP Reader component */
  createOsdpDoorReader: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateOsdpReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateOsdpReaderWSRequest"];
      };
    };
  };
  /** Create a Rhombus OSDP Reader component */
  createRhombusOsdpDoorReader: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateRhombusOsdpReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateRhombusOsdpReaderWSRequest"];
      };
    };
  };
  /** Create a third party Wiegand Reader component */
  createWiegandReader: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateWiegandReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateWiegandReaderWSRequest"];
      };
    };
  };
  /** Delete the specified access controlled door */
  deleteAccessControlledDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_DeleteAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_DeleteAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Delete a component */
  deleteComponent: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_DeleteComponentWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_DeleteComponentWSRequest"];
      };
    };
  };
  /** Delete all components owned by the specified device */
  deleteComponentsByOwnerDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_DeleteComponentsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_DeleteComponentsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Find access controlled door shadows within the org */
  findAccessControlledDoorShadows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorShadowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorShadowsWSRequest"];
      };
    };
  };
  /** Find access controlled door shadows within the specified location */
  findAccessControlledDoorShadowsByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorShadowsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorShadowsByLocationWSRequest"];
      };
    };
  };
  /** Find access controlled doors within the org */
  findAccessControlledDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorsWSRequest"];
      };
    };
  };
  /** Find access controlled doors within the specified location */
  findAccessControlledDoorsByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorsByLocationWSRequest"];
      };
    };
  };
  /** Find access controlled doors for the specified owner device */
  findAccessControlledDoorsByOwnerDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindAccessControlledDoorsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAccessControlledDoorsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Retrieve all component shadows for the specified component uuids */
  findAllComponentShadows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindAllComponentShadowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindAllComponentShadowsWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified AccessControlledDoor */
  findComponentEventsByAccessControlledDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified api token */
  findComponentEventsByApiToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByApiTokenWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified component */
  findComponentEventsByComponent: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByComponentWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByComponentWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified correlation id */
  findComponentEventsByCorrelation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByCorrelationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByCorrelationWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified credential hex value */
  findComponentEventsByCredentialHexValue: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByCredentialHexValueWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByCredentialHexValueWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified credential uuid */
  findComponentEventsByCredentialUuid: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByCredentialUuidWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByCredentialUuidWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified credential value */
  findComponentEventsByCredentialValue: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByCredentialValueWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByCredentialValueWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified location */
  findComponentEventsByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByLocationWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified owner device (i.e. DC20's device uuid) */
  findComponentEventsByOwnerDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified api token */
  findComponentEventsBySupportAuthority: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsBySupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsBySupportAuthorityWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified User */
  findComponentEventsByUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsByUserWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the rhombus key user */
  findComponentEventsForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieve component events across the entire org for the Dashboard. */
  findComponentEventsForOrgDashboard: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsForOrgDashboardWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsForOrgDashboardWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified Video Intercom and optional AccessControlledDoor */
  findComponentEventsForVideoIntercom: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentEventsForVideoIntercomWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentEventsForVideoIntercomWSRequest"];
      };
    };
  };
  /** Find component seekpoints by access controlled door */
  findComponentSeekPointsByAccessControlledDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Find component seekpoints by access controlled doors */
  findComponentSeekPointsByAccessControlledDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByAccessControlledDoorsWSRequest"];
      };
    };
  };
  /** Find component seekpoints by component */
  findComponentSeekPointsByComponent: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByComponentWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByComponentWSRequest"];
      };
    };
  };
  /** Find component seekpoints by location */
  findComponentSeekPointsByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByLocationWSRequest"];
      };
    };
  };
  /** Find component seekpoints by owner device */
  findComponentSeekPointsByOwnerDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Find component seekpoints by user */
  findComponentSeekPointsByUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentSeekPointsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentSeekPointsByUserWSRequest"];
      };
    };
  };
  /** Retrieve component shadows by the specified owner device uuid */
  findComponentShadowsByOwnerDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentShadowsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentShadowsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Retrieve a list of components owned by a Rhombus device (i.e. DC20's device uuid) */
  findComponentsByOwnerDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindComponentsByOwnerDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindComponentsByOwnerDeviceWSRequest"];
      };
    };
  };
  /** Retrieve a list of credential received events by access controlled door with distinct originators. Can be used for a list of distinct users that have entered a door within the queried timeframe */
  findDistinctByOriginatorCredentialReceivedEventsByAccessControlledDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindDistinctOriginatorCredentialReceivedEventsByAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindDistinctOriginatorCredentialReceivedEventsByAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Retrieve a list of credential received events by location with distinct originators. Can be used for a list of distinct users that have entered a location within the queried timeframe */
  findDistinctByOriginatorCredentialReceivedEventsByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindDistinctOriginatorCredentialReceivedEventsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindDistinctOriginatorCredentialReceivedEventsByLocationWSRequest"];
      };
    };
  };
  /** Find minimal state access controlled doors within the org */
  findMinimalStateAccessControlledDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindMinimalStateAccessControlledDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindMinimalStateAccessControlledDoorsWSRequest"];
      };
    };
  };
  /** Find minimal state access controlled doors within the specified location */
  findMinimalStateAccessControlledDoorsByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_FindMinimalStateAccessControlledDoorsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_FindMinimalStateAccessControlledDoorsByLocationWSRequest"];
      };
    };
  };
  /** Get all access controlled door labels for the organization */
  getAccessControlledDoorLabelsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_GetAccessControlledDoorLabelsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_GetAccessControlledDoorLabelsForOrgWSRequest"];
      };
    };
  };
  /** Attempts to determine what the current door state is expected to be based on the current door configuration and current time. */
  getCurrentExpectedAccessControlledDoorState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_GetCurrentExpectedAccessControlledDoorStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_GetCurrentExpectedAccessControlledDoorStateWSRequest"];
      };
    };
  };
  /** Retrieve the door shadow and all of its component shadows */
  getFullAccessControlledDoorShadow: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_GetFullAccessControlledDoorShadowWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_GetFullAccessControlledDoorShadowWSRequest"];
      };
    };
  };
  /** Gets a physical port layout for the specified device, components owned by that device and details about the port configuration validity. Map is instantiated if it doesn't currently exist as part of the call. */
  getOrCreateDevicePhysicalPortConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_GetOrCreateDevicePhysicalPortConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_GetOrCreateDevicePhysicalPortConfigWSRequest"];
      };
    };
  };
  /** Remove a label to an access controlled door */
  removeAccessControlledDoorLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_RemoveAccessControlledDoorLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_RemoveAccessControlledDoorLabelWSRequest"];
      };
    };
  };
  /** Updates an access controlled door */
  updateAccessControlledDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateAccessControlledDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateAccessControlledDoorWSRequest"];
      };
    };
  };
  /** Update a door position indicator component */
  updateIntegratedDoorPositionIndicator: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedDoorPositionIndicatorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedDoorPositionIndicatorWSRequest"];
      };
    };
  };
  /** Update a door relay component */
  updateIntegratedDoorRelay: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedDoorRelayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedDoorRelayWSRequest"];
      };
    };
  };
  /** Update a generic button component */
  updateIntegratedGenericButton: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericButtonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericButtonWSRequest"];
      };
    };
  };
  /** Update a generic input component */
  updateIntegratedGenericInput: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericInputWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericInputWSRequest"];
      };
    };
  };
  /** Update a generic relay component */
  updateIntegratedGenericRelay: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelayWSRequest"];
      };
    };
  };
  /** Update a generic relay component's steady state */
  updateIntegratedGenericRelaySteadyState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelaySteadyStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelaySteadyStateWSRequest"];
      };
    };
  };
  /** Activate a generic relay for a brief period */
  updateIntegratedGenericRelayTransientState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelayTransientStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedGenericRelayTransientStateWSRequest"];
      };
    };
  };
  /** Update a request to exit component */
  updateIntegratedRequestToExit: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateIntegratedRequestToExitWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateIntegratedRequestToExitWSRequest"];
      };
    };
  };
  /** Update a third party OSDP Reader component */
  updateOsdpDoorReader: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateOsdpReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateOsdpReaderWSRequest"];
      };
    };
  };
  /** Update a Rhombus OSDP Reader component */
  updateRhombusOsdpDoorReader: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateRhombusOsdpReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateRhombusOsdpReaderWSRequest"];
      };
    };
  };
  /** Update a third party Wiegand Reader component */
  updateWiegandDoorReader: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_UpdateWiegandReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_UpdateWiegandReaderWSRequest"];
      };
    };
  };
  acceptUsagePolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_AcceptUsagePolicyResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_AcceptUsagePolicyRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a device */
  deleteAllNotificationSnoozeSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a component composite */
  deleteNotificationSnoozeSettingForComponentComposite: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a device */
  deleteNotificationSnoozeSettingForDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a location */
  deleteNotificationSnoozeSettingForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_DeleteNotificationSnoozeSettingWSRequest"];
      };
    };
  };
  getCurrentPartnerUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentPartnerUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentPartnerUserWSRequest"];
      };
    };
  };
  /** Retrieve the RhombusKey User config, user details and org summary details for the current rhombus key user. */
  getCurrentRhombusKeyUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentRhombusKeyUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentRhombusKeyUserWSRequest"];
      };
    };
  };
  getCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentUserWSRequest"];
      };
    };
  };
  getCurrentUserConsoleOrgsForContextSwitch: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentUserConsoleOrgsForContextSwitchWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentUserConsoleOrgsForContextSwitchWSRequest"];
      };
    };
  };
  getCurrentUserRhombusKeyOrgsForContextSwitch: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentUserRhombusKeyOrgsForContextSwitchWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentUserRhombusKeyOrgsForContextSwitchWSRequest"];
      };
    };
  };
  getCurrentUserSessions: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_GetCurrentUserSessionsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetCurrentUserSessionsWSRequest"];
      };
    };
  };
  getDashboardStatus: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_GetDashboardStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetDashboardstatusWSRequest"];
      };
    };
  };
  /** Retrieve the RhombusKey mobile app config for a user. If it does not exist a default one is created and returned. */
  getRhombusKeyConfigForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_GetRhombusKeyConfigForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetRhombusKeyConfigForCurrentUserWSRequest"];
      };
    };
  };
  /** Get the current and planned user notification snooze details */
  getUserSnoozedNotificationSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_GetUserSnoozedNotificationSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_GetUserSnoozedNotificationSettingsWSRequest"];
      };
    };
  };
  logoutAllOtherCurrentUserSessions: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_LogoutAllOtherCurrentUserSessionsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_LogoutAllOtherCurrentUserSessionsRequest"];
      };
    };
  };
  setCustomerFlag: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_SetFlagWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SetFlagWSRequest"];
      };
    };
  };
  snoozeAllUserNotifications: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_SnoozeAllNotificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SnoozeAllNotificationsWSRequest"];
      };
    };
  };
  snoozeUserNotificationsForComponentComposite: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_SnoozeNotificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SnoozeNotificationsWSRequest"];
      };
    };
  };
  snoozeUserNotificationsForDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_SnoozeNotificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SnoozeNotificationsWSRequest"];
      };
    };
  };
  snoozeUserNotificationsForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_SnoozeNotificationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_SnoozeNotificationsWSRequest"];
      };
    };
  };
  updateCurrentPartnerUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateCurrentPartnerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateCurrentPartnerWSRequest"];
      };
    };
  };
  updateCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateCurrentUserWSRequest"];
      };
    };
  };
  /** Update notification settings for user */
  updateCurrentUserNotificationSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserNotificationSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserNotificationSettingsWSRequest"];
      };
    };
  };
  updateDashboardCustomizations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateDashboardCustomizationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateDashboardCustomizationsWSRequest"];
      };
    };
  };
  updateFrontendCustomizations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateFrontendCustomizationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateFrontendCustomizationsWSRequest"];
      };
    };
  };
  /** Update the RhombusKey mobile app preferences for the current user */
  updateRhombusKeyPreferencesForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Customer_UpdateRhombusKeyPreferencesForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer_UpdateRhombusKeyPreferencesForCurrentUserWSRequest"];
      };
    };
  };
  /** Create an event listener */
  createEventListener: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Developer_CreateEventListenerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Developer_CreateEventListenerWSRequest"];
      };
    };
  };
  /** Delete an event listener */
  deleteEventListener: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Developer_DeleteEventListenerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Developer_DeleteEventListenerWSRequest"];
      };
    };
  };
  /** Get a list of all event listeners */
  getAllEventListeners: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Developer_GetAllEventListenersWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Developer_GetAllEventListenersWSRequest"];
      };
    };
  };
  /** Get a list of event listeners for a device */
  getEventListenersForDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Developer_GetEventListenersForDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Developer_GetEventListenersForDeviceWSRequest"];
      };
    };
  };
  /** Get a device's config */
  getFacetedConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Deviceconfig_GetFacetedUserConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Update a device's config */
  updateFacetedConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_UpdateFacetedUserConfigWSRequest"];
      };
    };
  };
  /** Get list of door open/close events for door sensor */
  getDoorEventsForSensor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Door_GetDoorEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Door_GetDoorEventsForSensorWSRequest"];
      };
    };
  };
  /** Get list of door open/close events for door sensor */
  getDoorEventsForTags: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Door_GetDoorEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Door_GetDoorEventsForSensorWSRequest"];
      };
    };
  };
  /** Get stored video information for sensor */
  getDoorPresenceWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get basic state information for all door sensors */
  getMinimalDoorStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Door_GetMinimalDoorStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Door_GetMinimalDoorStatesWSRequest"];
      };
    };
  };
  /** Update details for door sensor. Note: uuid is a required field */
  updateDoorSensorDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Door_UpdateDoorSensorDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Door_UpdateDoorSensorDetailsWSRequest"];
      };
    };
  };
  /** Generate the homography to project detections onto a floorplan. */
  doorbellCameraCalibrateFloorplanProjection: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_CalibrateFloorplanProjectionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_CalibrateFloorplanProjectionWSRequest"];
      };
    };
  };
  /** Create a raw HTTP stream for a doorbell camera. */
  createDoorbellCameraRawHttpStream: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_CreateRawHttpStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_CreateRawHttpStreamWSRequest"];
      };
    };
  };
  /** Create rule for a doorbell camera. */
  createRuleForDoorbellCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_CreateRuleForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_CreateRuleForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Share an live video stream for a doorbell camera */
  createDoorbellCameraSharedLiveVideoStream: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_CreateSharedLiveVideoStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_CreateSharedLiveVideoStreamWSRequest"];
      };
    };
  };
  /** Remove the doorbell camera from the organization */
  deleteDoorbellCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_DeleteDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_DeleteDoorbellCameraWSRequest"];
      };
    };
  };
  /** Delete a raw HTTP stream for a doorbell camera. */
  deleteDoorbellCameraRawHttpStream: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_DeleteRawHttpStreamWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_DeleteRawHttpStreamWSRequest"];
      };
    };
  };
  /** Delete rule for a doorbell camera. */
  deleteRuleForDoorbellCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_DeleteRuleForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_DeleteRuleForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Get a list of all doorbell cameras raw HTTP streams. */
  findAllDoorbellCameraRawHttpStreams: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_FindAllRawHttpStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_FindAllRawHttpStreamsWSRequest"];
      };
    };
  };
  /** Retrieve all component events relevant to the specified Doorbell Camera */
  findComponentEventsForDoorbellCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_FindComponentEventsForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_FindComponentEventsForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Retrieve all component seekpoints relevant to the specified Doorbell Camera */
  findComponentSeekPointsForDoorbellCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_FindComponentSeekPointsForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_FindComponentSeekPointsForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Get list of all shared live streams for doorbell camera */
  findDoorbellCameraSharedLiveVideoStreams: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_FindSharedLiveVideoStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_FindSharedLiveVideoStreamsForWSRequest"];
      };
    };
  };
  /** Get object bounding boxes for a specified doorbell camera. Note: bounding box values are given as permyriad shorts relative to image.  To convert to absolute pixel values, use the following: abs_pix = (rel_permyriad / 10000) * image_dim */
  getDoorbellCameraBoundingBoxes: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetBoundingBoxesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetBoundingBoxesWSRequest"];
      };
    };
  };
  /** Get a doorbell camera's config */
  getDoorbellCameraConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Get rules for all doorbell cameras in an org. */
  getDoorbellCameraRulesForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraRulesForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraRulesForOrgWSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified doorbell camera */
  getDoorbellCameraFullState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraFullStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetFullDeviceStateWSRequest"];
      };
    };
  };
  /** Get media uris for doorbell camera to retrieve footage and audio */
  getDoorbellCameraMediaUris: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetMediaUrisWSRequest"];
      };
    };
  };
  /** Get basic state information about all doorbell cameras in organization */
  getDoorbellCameraMinimalStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraMinimalStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetMinimalDeviceStateListWSRequest"];
      };
    };
  };
  /** Get required information for offline lan streaming on all video intercoms */
  getDoorbellCameraOfflineLanStreamingInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraOfflineLanStreamingInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_GetDoorbellCameraOfflineLanStreamingInfoWSRequest"];
      };
    };
  };
  /** Get stored video information for a doorbell camera */
  getDoorbellCameraPresenceWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetPresenceWindowsWSRequest"];
      };
    };
  };
  /** Get info for all raw HTTP streams from a doorbell camera. */
  getDoorbellCameraRawHttpStreams: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_rawstream_GetRawHttpStreamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_rawstream_GetRawHttpStreamsWSRequest"];
      };
    };
  };
  /** Get all rules for a doorbell camera. */
  getRulesForDoorbellCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorbellcamera_GetRulesForDoorbellCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_GetRulesForDoorbellCameraWSRequest"];
      };
    };
  };
  /** Get activity seekpoints for specified doorbell camera */
  getDoorbellCameraSeekPoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetSeekpointsWSRequest"];
      };
    };
  };
  /** Get uptime information for a doorbell camera */
  getDoorbellCameraUptimeWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_GetUptimeWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetUptimeWindowsWSRequest"];
      };
    };
  };
  /** Reboot the specified doorbell camera */
  rebootDoorbellCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_RebootDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_RebootDoorbellCameraWSRequest"];
      };
    };
  };
  /** Update a doorbell camera's config */
  updateDoorbellCameraConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_UpdateDoorbellCameraConfigWSRequest"];
      };
    };
  };
  /** Update hardware details of doorbell camera. */
  updateDoorbellCameraDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateDeviceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorbellcamera_UpdateDoorbellCameraDetailsWSRequest"];
      };
    };
  };
  /** Create a rule owned by a specific door controller. */
  createDoorControllerRule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_CreateDoorControllerRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_CreateDoorControllerRuleWSRequest"];
      };
    };
  };
  /** Remove the door controller from the organization as long as it has no doors */
  deleteDoorController: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_DeleteDoorControllerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_DeleteDoorControllerWSRequest"];
      };
    };
  };
  /** Delete a rule owned by a specific door controller. */
  deleteDoorControllerRule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_DeleteDoorControllerRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_DeleteDoorControllerRuleWSRequest"];
      };
    };
  };
  /** Get a door controller's config */
  getDoorControllerConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_GetDoorControllerConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Deviceconfig_GetConfigWSRequest"];
      };
    };
  };
  /** Get a specific rule owned by the door controller. */
  getDoorControllerRule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_GetDoorControllerRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_GetDoorControllerRuleWSRequest"];
      };
    };
  };
  /** Get all rules owned by the door controller. */
  getDoorControllerRules: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_GetDoorControllerRulesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_GetDoorControllerRulesWSRequest"];
      };
    };
  };
  /** Get state information about all door controllers in an organization */
  getDoorControllerStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_GetDoorControllerStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_GetDoorControllerStateListWSRequest"];
      };
    };
  };
  /** Register a Rhombus reader that a Door Controller has discovered */
  registerDiscoveredRhombusReader: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_RegisterDiscoveredRhombusReaderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_RegisterDiscoveredRhombusReaderWSRequest"];
      };
    };
  };
  /** Update a door controller's config */
  updateDoorControllerConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Common_devices_UpdateConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerConfigWSRequest"];
      };
    };
  };
  /** Update details for door controller. Note: uuid is a required field */
  updateDoorControllerDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerDetailsWSRequest"];
      };
    };
  };
  /** Update a rule owned by a specific door controller. */
  updateDoorControllerRule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Doorcontroller_UpdateDoorControllerRuleWSRequest"];
      };
    };
  };
  /** Get test configuration */
  getEthernetTesterConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Ethernettester_GetEthernetTesterConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Ethernettester_GetEthernetTesterConfigWSRequest"];
      };
    };
  };
  /** Create a group of clips */
  createClipGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_groups_CreateClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_CreateClipGroupWSRequest"];
      };
    };
  };
  /** Use /createSharedClipGroupV3 instead */
  createSharedClipGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_CreateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_CreateSharedClipGroupWSRequest"];
      };
    };
  };
  /** Use /createSharedClipGroupV3 instead */
  createSharedClipGroupV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_CreateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_CreateSharedClipGroupWSRequest"];
      };
    };
  };
  /** Share multiple clips in a single page */
  createSharedClipGroupV3: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_CreateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_CreateSharedClipGroupWSRequest"];
      };
    };
  };
  deleteAlertMonitoringThreatCase: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_DeleteAlertMonitoringThreatCaseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteAlertMonitoringThreatCaseWSRequest"];
      };
    };
  };
  deleteAlertMonitoringThreatCaseByStatus: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_DeleteAlertMonitoringThreatCaseByStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteAlertMonitoringThreatCaseByStatusWSRequest"];
      };
    };
  };
  /** Delete a clip group */
  deleteClipGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_groups_DeleteClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_DeleteClipGroupWSRequest"];
      };
    };
  };
  /** Delete all types of saved clips (splices in progress, completed splices, saved alerts) */
  deleteSavedClip: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_DeleteSavedClipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteSavedClipWSRequest"];
      };
    };
  };
  /** Use /deleteSharedClipGroupV2 instead */
  deleteSharedClipGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_DeleteSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteSharedClipGroupWSRequest"];
      };
    };
  };
  /** Delete a shared clip page */
  deleteSharedClipGroupV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_DeleteSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DeleteSharedClipGroupWSRequest"];
      };
    };
  };
  /** Dismiss all policy alerts for each specified device(s) */
  dismissAllPolicyAlertsForDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_DismissAllPolicyAlertsForDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DismissAllPolicyAlertsForDeviceWSRequest"];
      };
    };
  };
  /** Dismiss all policy alerts in organization */
  dismissAllPolicyAlertsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_DismissAllPolicyAlertsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DismissAllPolicyAlertsWSRequest"];
      };
    };
  };
  /** Dismiss a policy alert */
  dismissPolicyAlertV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_DismissPolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DismissPolicyAlertWSRequest"];
      };
    };
  };
  /** Dismiss multiple policy alerts */
  dismissPolicyAlertsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_DismissPolicyAlertsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_DismissPolicyAlertsWSRequest"];
      };
    };
  };
  getAlertMonitoringThreatCase: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetAlertMonitoringThreatCaseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetAlertMonitoringThreatCaseWSRequest"];
      };
    };
  };
  getAlertMonitoringThreatCases: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetAlertMonitoringThreatCasesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetAlertMonitoringThreatCasesWSRequest"];
      };
    };
  };
  /** Get details like seekpoints for a clip group */
  getClipGroupDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_groups_GetClipGroupDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_GetClipGroupDetailsWSRequest"];
      };
    };
  };
  /** Get all clip groups for an org */
  getClipGroupsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_groups_GetClipGroupsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_GetClipGroupsForOrgWSRequest"];
      };
    };
  };
  /** Get a specified saved clip with current progress */
  getClipWithProgress: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetClipWithProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetClipWithProgressWSRequest"];
      };
    };
  };
  /** Get list of saved clips in organization, with current progress */
  getClipsWithProgress: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetClipsWithProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetClipsWithProgressWSRequest"];
      };
    };
  };
  /** Get list of expiring saved clips in organization. */
  getExpiringClipsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetClipsWithProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetClipsWithProgressWSRequest"];
      };
    };
  };
  /** Get motion data for specified camera */
  getMotionGrid: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetMotionGridWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetMotionGridWSRequest"];
      };
    };
  };
  /** Get aggregated motion heatmap for specified time period and camera. Divides a camera's resolution into a 36x64 grid and counts the number of motion events that occurred in each cell. */
  getMotionHeatMap: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetMotionGridCountsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetMotionGridWSRequest"];
      };
    };
  };
  /** Get information about a policy alert */
  getPolicyAlert: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertWSRequest"];
      };
    };
  };
  /** Get count of policy alerts */
  getPolicyAlertCount: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertCountWSRequest"];
      };
    };
  };
  /** Get detailed information about policy alert, including seekpoints and bounding boxes */
  getPolicyAlertDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertDetailsWSRequest"];
      };
    };
  };
  /** Get recent policy alerts for device, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
  getPolicyAlertGroupsForDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertGroupsForDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertGroupsForDeviceWSRequest"];
      };
    };
  };
  /** Get recent policy alerts for a location, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
  getPolicyAlertGroupsForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertGroupsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertGroupsForLocationWSRequest"];
      };
    };
  };
  /** Get recent policy alerts for organization, grouped by time. Groups are constructed of alerts that occur within 2 minutes of the previous alert, up to a maximum of 50. Results are returned in reverse-chronological order, so all fields are relative to that ordering. */
  getPolicyAlertGroupsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertGroupsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertGroupsV2WSRequest"];
      };
    };
  };
  /** Get information about a policy alert */
  getPolicyAlertV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertV2WSRequest"];
      };
    };
  };
  /** Get recent policy alerts for organization */
  getPolicyAlerts: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertsWSRequest"];
      };
    };
  };
  /** Get recent policy alerts for organization */
  getPolicyAlertsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetPolicyAlertsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetPolicyAlertsV2WSRequest"];
      };
    };
  };
  /** Get a count of saved clips in and organization */
  getSavedClipCount: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipCountWSRequest"];
      };
    };
  };
  /** Get detailed information about a saved clip, including seekpoints and bounding boxes */
  getSavedClipDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipDetailsWSRequest"];
      };
    };
  };
  /** Use /getSavedClipsV2 instead */
  getSavedClips: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipsWSRequest"];
      };
    };
  };
  /** Get list of saved clips matching the external transaction id */
  getSavedClipsByExternalTransactionId: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipsByExternalTransactionIdWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipsByExternalTransactionIdWSRequest"];
      };
    };
  };
  /** Get list of saved clips in organization */
  getSavedClipsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetSavedClipsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSavedClipsV2WSRequest"];
      };
    };
  };
  /** Get detailed information about a shared clip page, including seekpoints and bounding boxes */
  getSharedClipGroupDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetSharedClipGroupDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSharedClipGroupDetailsWSRequest"];
      };
    };
  };
  /** Use /getSharedClipGroupsV2 instead */
  getSharedClipGroups: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetSharedClipGroupsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSharedClipGroupsWSRequest"];
      };
    };
  };
  /** Get list of shared clip pages in organization */
  getSharedClipGroupsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetSharedClipGroupsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSharedClipGroupsV2WSRequest"];
      };
    };
  };
  DEPRECATED_getSplicedClipsInProgress: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetSplicedClipsInProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetSplicedClipsInProgressWSRequest"];
      };
    };
  };
  /** Get list of unhealthy devices in organization */
  getUnhealthyDeviceAlerts: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_GetUnhealthyDeviceAlertsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_GetUnhealthyDeviceAlertsWSRequest"];
      };
    };
  };
  /** Mute notifications from a device for specified number of seconds */
  muteNotificationsForDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_MuteNotificationsForDevicetWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_MuteNotificationsForDevicetWSRequest"];
      };
    };
  };
  /** Report a bad policy event (AI false positive) and send information for feedback. Note: this adds the clip to our AI training data set */
  reportBadPolicyAlert: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_ReportBadPolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_ReportBadPolicyAlertWSRequest"];
      };
    };
  };
  /** Save a policy alert as a saved clip */
  savePolicyAlertV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_SavePolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_SavePolicyAlertWSRequest"];
      };
    };
  };
  /** Search motion grid for motion events occuring in specified grid cells. Note: motion grid is a 64x36 grid of cells with the upper left hand corner being (0, 0) */
  searchMotionGrid: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_SearchMotionGridWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_SearchMotionGridWSRequest"];
      };
    };
  };
  /** Search motion grid for motion events occuring in specified grid cells. Note: motion grid is a 64x36 grid of cells with the upper left hand corner being (0, 0) */
  searchMotionGridWithActivities: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_SearchMotionGridWithActivitiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_SearchMotionGridWithActivitiesWSRequest"];
      };
    };
  };
  /** Unsave policy alert and remove associated saved clip */
  unSavePolicyAlertV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_UnSavePolicyAlertWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UnSavePolicyAlertWSRequest"];
      };
    };
  };
  /** Update a clip group's title, description, or clips */
  updateClipGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_groups_UpdateClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_groups_UpdateClipGroupWSRequest"];
      };
    };
  };
  /** Update the text description field of a policy alert. Development only for now */
  updatePolicyAlertTextDescription: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_UpdatePolicyAlertTextDescriptionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UpdatePolicyAlertTextDescriptionWSRequest"];
      };
    };
  };
  /** Update saved clip title or summary */
  updateSavedClip: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_UpdateSavedClipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UpdateSavedClipWSRequest"];
      };
    };
  };
  /** Use /updateSharedClipGroupV2 instead */
  updateSharedClipGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_UpdateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UpdateSharedClipGroupWSRequest"];
      };
    };
  };
  /** Update shared clip page title, description, password, or expiration time */
  updateSharedClipGroupV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Event_UpdateSharedClipGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Event_UpdateSharedClipGroupWSRequest"];
      };
    };
  };
  /** Get camera or doorbell camera seekpoints */
  getCameraOrDoorbellCameraSeekpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Eventsearch_GetCameraOrDoorbellCameraSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Common_devices_GetCameraOrDoorbellCameraSeekpointsWSRequest"];
      };
    };
  };
  /** Get normal seekpoint events and access control seekpoint events */
  getDeprecatedEventSeekpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsWSRequest"];
      };
    };
  };
  /** Get normal seekpoint events and access control seekpoint events */
  getDeprecatedEventSeekpointsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsWSRequest"];
      };
    };
  };
  /** Get normal seekpoint events and access control seekpoint events */
  getEventSeekpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Eventsearch_GetEventSeekpointsV2WSRequest"];
      };
    };
  };
  /** Download audit log */
  exportAudit: {
    responses: {
      /** default response */
      default: {
        content: {
          "text/csv; charset=UTF-8": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportAuditEventsWSRequest"];
      };
    };
  };
  /** Download climate event log */
  exportClimateEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportClimateEventsWSRequest"];
      };
    };
  };
  /** Download count report */
  exportCountReports: {
    responses: {
      /** default response */
      default: {
        content: {
          "text/csv; charset=UTF-8": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportCountReportsWSRequest"];
      };
    };
  };
  /** Download diagnostic log */
  exportDiagnostic: {
    responses: {
      /** default response */
      default: {
        content: {
          "text/csv; charset=UTF-8": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportDiagnosticEventsWSRequest"];
      };
    };
  };
  /** Download door event log */
  exportDoorEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportDoorEventsWSRequest"];
      };
    };
  };
  /** Download environmental gateway event log */
  exportEnvironmentalGatewayEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportEnvironmentalGatewayEventsWSRequest"];
      };
    };
  };
  /** Download device inventory */
  exportInventory: {
    responses: {
      /** default response */
      default: {
        content: {
          "text/csv; charset=UTF-8": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportInventoryWSRequest"];
      };
    };
  };
  /** Download motion event log for motion sensors */
  exportMotionEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportMotionEventsWSRequest"];
      };
    };
  };
  /** Download people count report */
  exportPeopleCountEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "text/csv; charset=UTF-8": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportPeopleCountEventsWSRequest"];
      };
    };
  };
  /** Download people event log */
  exportPeopleEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportPeopleEventsWSRequest"];
      };
    };
  };
  /** Download proximity tag event log */
  exportProximityEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportProximityEventsWSRequest"];
      };
    };
  };
  /** Download proximity tag event log */
  exportProximityLocomotionEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportProximityLocomotionEventsWSRequest"];
      };
    };
  };
  /** Download device uptime reports */
  exportUptime: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/zip": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportUptimeWSRequest"];
      };
    };
  };
  /** Download org users */
  exportUsers: {
    responses: {
      /** default response */
      default: {
        content: {
          "text/csv; charset=UTF-8": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportUsersWSRequest"];
      };
    };
  };
  /** Download vehicle event log.  Use /export/vehicleEventsV2 instead for more functionality */
  exportVehicleEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "text/csv; charset=UTF-8": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Export_ExportVehicleEventsWSRequest"];
      };
    };
  };
  /** Download vehicle event log */
  exportVehicleEventsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "text/csv; charset=UTF-8": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetVehicleEventsWSRequest"];
      };
    };
  };
  /** Delete face event. */
  deleteFaceEvent: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_DeleteFaceEventWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_DeleteFaceEventWSRequest"];
      };
    };
  };
  /** Export face events for an organization */
  exportFaceEventsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "text/csv; charset=UTF-8": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_ExportFaceEventsByOrgWSRequest"];
      };
    };
  };
  /** Find face events by device for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
  findFaceEventsByDeviceForReporting: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByDeviceForReportingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByDeviceForReportingWSRequest"];
      };
    };
  };
  /** Find face events by location for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
  findFaceEventsByLocationForReporting: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByLocationForReportingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByLocationForReportingWSRequest"];
      };
    };
  };
  /** Find face events for an organization. The events are returned in reverse chronological order, with the latest events appearing first. */
  findFaceEventsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByOrgWSRequest"];
      };
    };
  };
  /** Find face events by org for reporting purposes. The events are returned in reverse chronological order, with the latest events appearing first. */
  findFaceEventsByOrgForReporting: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByOrgForReportingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindFaceEventsByOrgForReportingWSRequest"];
      };
    };
  };
  /** Find face events for an organization that are similar to a specified face event. The events are returned in reverse chronological order, with the latest events appearing first. */
  findSimilarFaceEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsWSRequest"];
      };
    };
  };
  /** Find face events for an organization that are similar to a specified face embedding. The events are returned in reverse chronological order, with the latest events appearing first. */
  findSimilarFaceEventsByEmbedding: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsByEmbeddingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsByEmbeddingWSRequest"];
      };
    };
  };
  /** Find face events for an organization that are similar to a specified face matchmaker. The events are returned in reverse chronological order, with the latest events appearing first. */
  findSimilarFaceEventsByFaceMatchmaker: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsByFaceMatchmakerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_FindSimilarFaceEventsByFaceMatchmakerWSRequest"];
      };
    };
  };
  /** Get face event. */
  getFaceEvent: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_GetFaceEventWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_GetFaceEventWSRequest"];
      };
    };
  };
  /** Generates an embedding for the face search image if a face is detected. The embedding can be used to search for similar face events. */
  processFaceEventSearchImage: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_ProcessFaceEventSearchImageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Update face event. */
  updateFaceEvent: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_faceevent_UpdateFaceEventWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_faceevent_UpdateFaceEventWSRequest"];
      };
    };
  };
  /** Create face matchmaker from face sighting. */
  createFaceMatchmakerFromSighting: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_CreateFaceMatchmakerFromSightingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_CreateFaceMatchmakerFromSightingWSRequest"];
      };
    };
  };
  /** Create person and face matchmakers. */
  createPersonAndFaceMatchmakers: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_CreatePersonAndFaceMatchmakersWSResponse"];
        };
      };
    };
    /** Multipart form-data containing:a required 'personName' form field,an optional list of 'faceEventUuid' fields,an optional .jpg or .png file (maximum file size: 5MB) */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Delete face matchmaker. */
  deleteFaceMatchmaker: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_DeleteFaceMatchmakerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_DeleteFaceMatchmakerWSRequest"];
      };
    };
  };
  /** Find face matchmakers by org. */
  findFaceMatchmakersByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceMatchmakersByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceMatchmakersByOrgWSRequest"];
      };
    };
  };
  /** Find face matchmakers by person. */
  findFaceMatchmakersByPerson: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceMatchmakersByPersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceMatchmakersByPersonWSRequest"];
      };
    };
  };
  /** Find face upload metadata by transaction. */
  findFaceUploadMetadataByTransaction: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceUploadMetadataByTransactionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_FindFaceUploadMetadataByTransactionWSRequest"];
      };
    };
  };
  /** Get face matching configuration. */
  getFaceMatchingConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_GetFaceMatchingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_GetFaceMatchingConfigWSRequest"];
      };
    };
  };
  /** Get face matchmaker. */
  getFaceMatchmaker: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_GetFaceMatchmakerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_GetFaceMatchmakerWSRequest"];
      };
    };
  };
  /** Update face matching configuration. */
  updateFaceMatchingConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_UpdateFaceMatchingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_matchmaker_UpdateFaceMatchingConfigWSRequest"];
      };
    };
  };
  /** Upload face matchmaker image for a specific person. */
  uploadFaceMatchmakerForPerson: {
    parameters: {
      path: {
        personUuid: string | null;
      };
      query: {
        /** Unique transaction id to track the face matchmakers upload progress. If not specified, the system will generate it. */
        transaction?: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_UploadFaceMatchmakerForPersonWSResponse"];
        };
      };
    };
    /** Multipart form-data containing a .jpg or .png file. Maximum file size: 5MB. */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload face matchmaker images for one or more people. The uploaded file name is matched to a person's name. If a person is not found and createPersonIfNotFound is set to true, a new person is created. */
  uploadFaceMatchmakers: {
    parameters: {
      query: {
        /** Unique transaction id to track the face matchmakers upload progress. If not specified, the system will generate it. */
        transaction?: string | null;
        /** If a person is not found and createPersonIfNotFound is set to true, a new person is created */
        createPersonIfNotFound?: boolean | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_UploadFaceMatchmakersWSResponse"];
        };
      };
    };
    /** Multipart form-data containing a .jpg or .png file. Maximum file size: 5MB. */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Validates if image is suitable to be a face matchmaker. */
  validateFaceMatchmakerImage: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_matchmaker_ValidateFaceMatchmakerImageWSResponse"];
        };
      };
    };
    /** Multipart form-data containing a .jpg or .png file. Maximum file size: 5MB. */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Add a label to a person */
  addPersonLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_AddPersonLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_AddPersonLabelWSRequest"];
      };
    };
  };
  /** Create a person for face recognition purposes. */
  createPerson: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_CreatePersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_CreatePersonWSRequest"];
      };
    };
  };
  /** Delete person created for face recognition purposes. */
  deletePerson: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_DeletePersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_DeletePersonWSRequest"];
      };
    };
  };
  /** Find people created for face recognition purposes in an organization. */
  findPeopleByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_FindPeopleByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_FindPeopleByOrgWSRequest"];
      };
    };
  };
  /** Find all person labels for organization. */
  findPersonLabelsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_FindPersonLabelsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_FindPersonLabelsByOrgWSRequest"];
      };
    };
  };
  /** Get a person created for face recognition purposes. */
  getPerson: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_GetPersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_GetPersonWSRequest"];
      };
    };
  };
  /** Remove a label from a person. */
  removePersonLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_RemovePersonLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_RemovePersonLabelWSRequest"];
      };
    };
  };
  /** Update person created for face recognition purposes. */
  updatePerson: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Facerecognition_person_UpdatePersonWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Facerecognition_person_UpdatePersonWSRequest"];
      };
    };
  };
  /** Get possible event types for specified device dependent on features enabled */
  getDeviceEventTypes: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Feature_GetDeviceEventTypesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_GetDeviceEventTypesWSRequest"];
      };
    };
  };
  /** Get enabled features for a device */
  getDeviceFeatures: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Feature_GetDeviceFeaturesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_GetDeviceFeaturesWSRequest"];
      };
    };
  };
  /** Get enabled features for all devices in an org */
  getDeviceFeaturesList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Feature_GetDeviceFeaturesListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_GetDeviceFeaturesListWSRequest"];
      };
    };
  };
  /** Get feature compatability matrix */
  getFeatureCompatabilityMatrix: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Feature_GetFeatureCompatabilityMatrixWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_GetFeatureCompatabilityMatrixWSRequest"];
      };
    };
  };
  /** Update enabled features for a device */
  updateDeviceFeatures: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Feature_UpdateDeviceFeaturesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature_UpdateDeviceFeaturesWSRequest"];
      };
    };
  };
  updateGuestByToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGuestByTokenWSRequest"];
      };
    };
  };
  /** Activate kiosk and redirect to kiosk page */
  activateKiosk: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_ActivateKioskWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_ActivateKioskWSRequest"];
      };
    };
  };
  /** Adds specified users to a guest management host group */
  addUsersToGuestManagementHostGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_AddUsersToOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_AddUsersToOrgGroupWSRequest"];
      };
    };
  };
  /** Create Guest Without Email Invite */
  createGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_CreateGuestWSRequest"];
      };
    };
  };
  /** Create Guest Invite */
  createGuestInvite: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_CreateGuestInviteWSRequest"];
      };
    };
  };
  /** Creates a guest management host group */
  createGuestManagementHostGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_CreateOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_CreateOrgGroupWSRequest"];
      };
    };
  };
  /** Create guest management settings */
  createGuestManagementSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_CreateGuestManagementSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_CreateGuestManagementSettingsWSRequest"];
      };
    };
  };
  /** Delete Guest */
  deleteGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestByEmailWSRequest"];
      };
    };
  };
  /** Delete a guest management host group */
  deleteGuestManagementHostGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_DeleteOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_DeleteOrgGroupWSRequest"];
      };
    };
  };
  /** Delete guest management settings */
  deleteGuestManagementSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_BaseGuestManagementWSRequest"];
      };
    };
  };
  /** Export Guest Activity .csv */
  exportGuestActivity: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_ExportGuestsWSRequest"];
      };
    };
  };
  /** Export Single Guest Activity .csv */
  exportGuestActivityForGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_ExportGuestActivitiesWSRequest"];
      };
    };
  };
  /** Export Guest List .csv */
  exportGuestList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_ExportGuestsWSRequest"];
      };
    };
  };
  /** Find all users belonging to an guest management host group */
  findAllUsersForGuestManagementHostGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindAllUsersForOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindAllUsersForOrgGroupWSRequest"];
      };
    };
  };
  /** Retrieve the guest management host group with the specified name */
  findGuestManagementHostGroupByExactName: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByExactNameWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByExactNameWSRequest"];
      };
    };
  };
  /** Find all guest management host group memberships by user */
  findGuestManagementHostGroupMembershipsByUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupMembershipsByUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupMembershipsByUserWSRequest"];
      };
    };
  };
  /** Retrieve all guest management host groups with a name starting with the specified prefix */
  findGuestManagementHostGroupsByNamePrefix: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByNamePrefixWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByNamePrefixWSRequest"];
      };
    };
  };
  /** Retrieve all guest management host groups defined in the org */
  findGuestManagementHostGroupsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByOrgWSRequest"];
      };
    };
  };
  /** Find all guest management host groups a user belongs to */
  findGuestManagementHostGroupsByUserMembership: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_FindOrgGroupsByUserMembershipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_FindOrgGroupsByUserMembershipWSRequest"];
      };
    };
  };
  /** Get activity logs for a guest */
  getActivitiesForGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestActivityLogsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetActivityLogsForGuestWSRequest"];
      };
    };
  };
  /** Get activity logs for a location */
  getActivitiesForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestActivityLogsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetActivityLogsForLocationWSRequest"];
      };
    };
  };
  /** Get All Guest Invites by Org */
  getAllGuestInvitesByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetAllGuestInvitesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetInvitesForOrgWSRequest"];
      };
    };
  };
  /** Get All Guests by Org */
  getAllGuestsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetAllGuestsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_BaseGuestManagementWSRequest"];
      };
    };
  };
  /** Get Guest */
  getGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestByEmailWSRequest"];
      };
    };
  };
  /** Get org wide activity logs for guests */
  getGuestActivityLogs: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestActivityLogsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetGuestActivityLogsWSRequest"];
      };
    };
  };
  /** Get Guest Invite */
  getGuestInvite: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestInviteWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestInviteWSRequest"];
      };
    };
  };
  /** Get Guest Invite by Email */
  getGuestInvitesByEmail: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestInvitesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestInvitesByEmailWSRequest"];
      };
    };
  };
  /** Get guest management Settings for org */
  getGuestManagementSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetGuestManagementSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_BaseGuestManagementWSRequest"];
      };
    };
  };
  /** Get info for kiosk */
  getKioskInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetKioskInfoWSResponse"];
        };
      };
    };
  };
  /** Get kiosks for org */
  getGuestManagementKiosksForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetKiosksForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_BaseGuestManagementWSRequest"];
      };
    };
  };
  /** Get name tag template for guest */
  getNametagTemplateForGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_GetNametagTemplateForGuestWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GetNametagTemplateForGuestWSRequest"];
      };
    };
  };
  /** Invite Guest Via Email */
  inviteGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestWSRequest"];
      };
    };
  };
  /** Removes specified users from a guest management host group */
  removeUsersFromGuestManagementHostGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_RemoveUsersFromOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_RemoveUsersFromOrgGroupWSRequest"];
      };
    };
  };
  /** Invite Guest Via Email */
  sendFormInvite: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestWSRequest"];
      };
    };
  };
  /** Sign In Guest */
  signInGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestCheckinWSRequest"];
      };
    };
  };
  /** Sign Out Guest */
  signOutGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_GuestCheckinWSRequest"];
      };
    };
  };
  /** Update Guest */
  updateGuest: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_UpdateGuestWSRequest"];
      };
    };
  };
  /** Update Guest Invite */
  updateGuestInvite: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_UpdateGuestInviteWSRequest"];
      };
    };
  };
  /** Updates a guest management host group's meta information like name and description */
  updateGuestManagementHostGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Group_UpdateOrgGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Group_UpdateOrgGroupWSRequest"];
      };
    };
  };
  /** Update guest management settings */
  updateGuestManagementSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Guestmanagement_UpdateGuestManagementSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Guestmanagement_UpdateGuestManagementSettingsWSRequest"];
      };
    };
  };
  /** Leave feedback of our system */
  sendFeedback: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Help_SendFeedbackWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_SendFeedbackWSRequest"];
      };
    };
  };
  /**
   * Get Open Support Tickets For A Client Organization. Tickets are associated to an organziation based on the requester's organization association.
   * This endpoint returns a paginated response sorted by the request date. The first page is indexed at 1 and each page has up to 100 ticket entries.
   */
  getOpenTickets: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Help_GetOpenTicketsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_GetOpenTicketsWSRequest"];
      };
    };
  };
  /** Get Open Support Tickets For A Client Organization. Tickets are associated to an organziation based on the requester's organization association. */
  getOpenTicketsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Help_GetOpenTicketsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_GetOpenTicketsV2WSRequest"];
      };
    };
  };
  /** Open an RMA for a camera */
  processRMA: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Help_ProcessRMAWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_ProcessRMAWSRequest"];
      };
    };
  };
  /** Open a support ticket */
  createTicket: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Help_CreateTicketWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_CreateTicketWSRequest"];
      };
    };
  };
  /** Open a support ticket and optionally include a file upload. Uploading multiple Files are not supported throught this call. */
  createTicketWithFile: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Help_CreateTicketWSResponse"];
        };
      };
    };
    /** multipart/form-data with field 'file' for the file and 'request' for the CreateTicketWSRequest(see '/ticket' for details on CreateTicketWSRequest) */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Triage a device connection/recording issue */
  triageDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Help_TriageDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Help_TriageDeviceWSRequest"];
      };
    };
  };
  /** Delete Device integration */
  deleteDeviceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Flic Integration */
  deleteFlicIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Halo Smart Sensor integration */
  deleteHaloIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Intuiface integration */
  deleteIntuifaceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete 911Cellular Integration */
  deleteNineOneOneCellularIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Omnialert integration */
  deleteOmnialertIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Shelly integration */
  deleteShellyIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Generate Rhombus Token for use */
  generateFlicToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Generate Rhombus Token for use */
  generateNineOneOneCellularToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Device integration */
  getDeviceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Grabs all Flic Devices */
  getFlicDevices: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetFlicDevicesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetFlicDevicesWSRequest"];
      };
    };
  };
  /** Get Flic Integration */
  getFlicIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Uploaded Module UUID */
  getFlicModule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetFlicDevicesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetFlicDevicesWSRequest"];
      };
    };
  };
  /** Get 911Cellular Integration */
  getNineOneOneCellularIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get 911Cellular Security Zones */
  getNineOneOneCellularSecurityZones: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetNineOneOneCSZonesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetNineOneOneCSZonesWSRequest"];
      };
    };
  };
  /** Get Omnialert integration */
  getOmnialertIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Shelly integration */
  getShellyIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Initiate the Shelly Auth Process */
  initiateShellyAuth: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateCallbackAuthResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateCallbackAuthRequest"];
      };
    };
  };
  /** Toggle power for a managed power switch */
  togglePower: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_TogglePowerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_TogglePowerWSRequest"];
      };
    };
  };
  /** Update Device integration */
  updateDeviceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateDeviceIntegrationWSRequest"];
      };
    };
  };
  /** Update Flic Integration */
  updateFlicIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateFlicIntegrationWSRequest"];
      };
    };
  };
  /** Update Halo Smart Sensor integration */
  updateHaloIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateHaloIntegrationWSRequest"];
      };
    };
  };
  /** Update Intuiface integration */
  updateIntuifaceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateIntuifaceIntegrationWSRequest"];
      };
    };
  };
  /** Update 911Cellular Integration */
  updateNineOneOneCellularIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateNineOneOneCellularIntegrationWSRequest"];
      };
    };
  };
  /** Update Omnialert integration */
  updateOmnialertIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOmnialertIntegrationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOmnialertIntegrationWSRequest"];
      };
    };
  };
  /** Update Shelly rules engine integration */
  updateShellyIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateShellyIntegrationWSRequest"];
      };
    };
  };
  /** Issues a command to clear the device's DTC */
  clearDtc: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_aperio_ClearAperioDtcWSResponse"];
          "application/octet-stream": components["schemas"]["Integration_aperio_ClearAperioDtcWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_aperio_ClearAperioDtcWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_aperio_ClearAperioDtcWSRequest"];
      };
    };
  };
  /** Create one or more Aperio Door component(s). */
  createAperioAccessControlledDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateAperioDoorsWSResponse"];
          "application/octet-stream": components["schemas"]["Component_CreateAperioDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateAperioDoorsWSRequest"];
        "multipart/form-data": components["schemas"]["Component_CreateAperioDoorsWSRequest"];
      };
    };
  };
  /** Create an Aperio Gateway component. */
  createAperioGateway: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Component_CreateAperioGatewayWSResponse"];
          "application/octet-stream": components["schemas"]["Component_CreateAperioGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Component_CreateAperioGatewayWSRequest"];
        "multipart/form-data": components["schemas"]["Component_CreateAperioGatewayWSRequest"];
      };
    };
  };
  /** Download a certificate to use with Aperio's devices. */
  downloadCertificate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["ResponseEntity"];
          "application/octet-stream": components["schemas"]["ResponseEntity"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_aperio_DownloadCertificateWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_aperio_DownloadCertificateWSRequest"];
      };
    };
  };
  /** Retrieve the Aperio integration configuration. */
  getAperioIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetAperioIntegrationWSResponse"];
          "application/octet-stream": components["schemas"]["Integration_GetAperioIntegrationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetAperioIntegrationWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_GetAperioIntegrationWSRequest"];
      };
    };
  };
  /** Reboot an Aperio gateway that is connected to a Door Controller. */
  rebootAperioGateway: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_aperio_RebootAperioGatewayWSResponse"];
          "application/octet-stream": components["schemas"]["Integration_aperio_RebootAperioGatewayWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_aperio_RebootAperioGatewayWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_aperio_RebootAperioGatewayWSRequest"];
      };
    };
  };
  /** Update the Aperio integration configuration. */
  updateAperioIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
          "application/octet-stream": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAperioIntegrationWSRequest"];
        "multipart/form-data": components["schemas"]["Integration_UpdateAperioIntegrationWSRequest"];
      };
    };
  };
  /** Upload a firmware file which will be deployed to Aperio's communication hubs. */
  uploadFirmwareFile: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
          "application/octet-stream": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          file?: components["schemas"]["FormDataContentDisposition"];
        };
        "multipart/form-data": {
          file?: components["schemas"]["FormDataContentDisposition"];
        };
      };
    };
  };
  /** Delete Amt badge integration */
  deleteAmtIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Avigilon Alta badge integration V2 */
  deleteAvigilonAltaIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Brivo badge integration */
  deleteBrivoIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Brivo badge integration V2 */
  deleteBrivoIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Brivo badge integration V3 */
  deleteBrivoIntegrationV3: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ButterflyMX badge integration */
  deleteButterflymxIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ButterflyMX badge integration V2 */
  deleteButterflymxIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Genea badge integration */
  deleteGeneaIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Genea badge integration V2 */
  deleteGeneaIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Inner Range integration */
  deleteInnerRangeIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Kisi badge integration */
  deleteKisiIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Kisi badge integration V2 */
  deleteKisiIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Openpath badge integration */
  deleteOpenpathIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Opentech Alliance integration */
  deleteOpentechAllianceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Opentech Alliance integration */
  deleteOpentechAllianceIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ProDataKey badge integration */
  deletePdkIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ProDataKey badge integration */
  deletePdkIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete PlaceOs badge integration */
  deletePlaceOsIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete PlaceOs badge integration */
  deletePlaceOsIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Enabled and Redirect to ProDataKey */
  enablePdkIntegration: {
    parameters: {
      query: {
        systemId?: string | null;
        clientOrgUuid?: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get list of v2 Access Control integrations for org that can be used for Rhombus Alarm Monitoring */
  getAccessControlIntegrationsForAlm: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetAccessControlIntegrationsForAlmWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of AMT readers to assign cameras */
  getAmtReaders: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetAmtReadersWSRequest"];
      };
    };
  };
  /** Get Avigilon Alta integration */
  getAvigilonAltaIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of available Brivo doors to assign cameras */
  getBrivoDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetBrivoDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetBrivoDoorsWSRequest"];
      };
    };
  };
  /** Get list of available Brivo doors to assign cameras */
  getBrivoDoorsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetBrivoDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetBrivoDoorsWSRequest"];
      };
    };
  };
  /** Get list of available Brivo doors to assign cameras */
  getBrivoDoorsV3: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetBrivoDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetBrivoDoorsWSRequest"];
      };
    };
  };
  /** Get Brivo badge integration */
  getBrivoIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get ButterflyMX badge integration */
  getButterflymxIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of available ButterflyMX panels to assign cameras */
  getButterflymxPanels: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetButterflymxPanelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetButterflymxPanelsWSRequest"];
      };
    };
  };
  /** Get list of available ButterflyMX panels to assign cameras */
  getButterflymxPanelsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetButterflymxPanelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetButterflymxPanelsWSRequest"];
      };
    };
  };
  /** Get list of Genea doors to assign cameras */
  getGeneaDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetGeneaDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetGeneaDoorsWSRequest"];
      };
    };
  };
  /** Get Genea integration */
  getGeneaIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Inner Range console settings */
  getInnerRangeConsoles: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetInnerRangeConsolesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetInnerRangeConsolesWSRequest"];
      };
    };
  };
  /** Get list of Inner Range doors */
  getInnerRangeDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetInnerRangeDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetInnerRangeDoorsWSRequest"];
      };
    };
  };
  /** Get Inner Range integration */
  getInnerRangeIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of Kisi doors to assign cameras */
  getKisiDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetKisiDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetKisiDoorsWSRequest"];
      };
    };
  };
  /** Get Kisi badge integration */
  getKisiIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetKisiIntegrationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Get Kisi badge integration V2 */
  getKisiIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of Kisi places to assign cameras */
  getKisiPlaces: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationPlacesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetKisiPlacesWSRequest"];
      };
    };
  };
  /** Get list of Openpath doors to assign cameras */
  getOpenpathDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpenpathDoorsWSRequest"];
      };
    };
  };
  /** Get list of Openpath lockdown plans to trigger */
  getOpenpathLockdownPlans: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpenpathLockdownsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpenpathDoorsWSRequest"];
      };
    };
  };
  /** Get list of Opentech Alliance facilities */
  getOpentechAllianceFacilities: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpentechAllianceFacilitiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpentechAllianceFacilitiesWSRequest"];
      };
    };
  };
  /** Get list of Opentech Alliance facilities */
  getOpentechAllianceFacilitiesV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpentechAllianceFacilitiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpentechAllianceFacilitiesWSRequest"];
      };
    };
  };
  /** Get Opentech Alliance integration */
  getOpentechAllianceIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of ProDataKey doors to assign cameras */
  getPdkDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetPdkDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetPdkDoorsWSRequest"];
      };
    };
  };
  /** Get ProDataKey badge integration */
  getPdkIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get SystemID for ProDataKey badge integration */
  getPdkSystemId: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetPdkSystemIdWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetPdkSystemIdWSRequest"];
      };
    };
  };
  /** Get list of PlaceOs doors to assign cameras */
  getPlaceOsDoors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationGenericDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetPlaceOsDoorsWSRequest"];
      };
    };
  };
  /** Get PlaceOs integration */
  getPlaceOsIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Initiate Brivo Oauth 2.0 process */
  initiateBrivoOauth: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateBrivoOAuthWSRequest"];
      };
    };
  };
  /** Initiate Butterflymx Oauth */
  initiateButterflymxOauth: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Revert Openpath lockdown plan */
  revertOpenpathLockdown: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockOpenpathDoorWSRequest"];
      };
    };
  };
  /** Trigger Openpath lockdown plan */
  triggerOpenpathLockdown: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockOpenpathDoorWSRequest"];
      };
    };
  };
  /** Unlock Brivo door */
  unlockBrivoDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Brivo door */
  unlockBrivoDoorV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Brivo door V3 */
  unlockBrivoDoorV3: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Genea door */
  unlockGeneaDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockGeneaDoorWSRequest"];
      };
    };
  };
  /** Unlock Inner Range door */
  unlockInnerRangeDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Kisi door */
  unlockKisiDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockKisiDoorWSRequest"];
      };
    };
  };
  /** Unlock Openpath door */
  unlockOpenpathDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockOpenpathDoorWSRequest"];
      };
    };
  };
  /** Unlock Opentech Alliance door */
  unlockOpentechAllianceDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock Opentech Alliance door */
  unlockOpentechAllianceDoorV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock ProDataKey door */
  unlockPdkDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Unlock PlaceOs door */
  unlockPlaceOsDoor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UnlockDoorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnlockIntegrationGenericDoorWSRequest"];
      };
    };
  };
  /** Update Amt badge integration */
  updateAmtIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAmtIntegrationWSRequest"];
      };
    };
  };
  /** Update Avigilon Alta badge integration V2 */
  updateAvigilonAltaIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAvigilonAltaV2WSRequest"];
      };
    };
  };
  /** Update Brivo badge integration */
  updateBrivoIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateBrivoIntegrationWSRequest"];
      };
    };
  };
  /** Update Brivo badge integration */
  updateBrivoIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateBrivoIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Brivo badge integration V3 */
  updateBrivoIntegrationV3: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateBrivoIntegrationV2WSRequest"];
      };
    };
  };
  /** Update ButterflyMX badge integration */
  updateButterflymxIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateButterflymxIntegrationWSRequest"];
      };
    };
  };
  /** Update ButterflyMX badge integration V2 */
  updateButterflymxIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateButterflymxIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Genea badge integration */
  updateGeneaIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGeneaIntegrationWSRequest"];
      };
    };
  };
  /** Update Genea badge integration V2 */
  updateGeneaIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGeneaIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Inner Range integration */
  updateInnerRangeIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateInnerRangeIntegrationWSRequest"];
      };
    };
  };
  /** Update Kisi badge integration */
  updateKisiIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateKisiIntegrationWSRequest"];
      };
    };
  };
  /** Update Kisi badge integration V2 */
  updateKisiIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateKisiIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Openpath badge integration */
  updateOpenpathIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpenpathIntegrationWSRequest"];
      };
    };
  };
  /** Update Opentech Alliance integration */
  updateOpentechAllianceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpentechAllianceIntegrationWSRequest"];
      };
    };
  };
  /** Update Opentech Alliance integration */
  updateOpentechAllianceIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpentechAllianceIntegrationV2WSRequest"];
      };
    };
  };
  /** Update ProDataKey badge integration */
  updatePdkIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePdkIntegrationWSRequest"];
      };
    };
  };
  /** Update ProDataKey badge integration */
  updatePdkIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePdkIntegrationV2WSRequest"];
      };
    };
  };
  /** Update PlaceOs badge integration */
  updatePlaceOsSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePlaceOsSettingsWSRequest"];
      };
    };
  };
  /** Update PlaceOs badge integration */
  updatePlaceOsSettingsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePlaceOsSettingsV2WSRequest"];
      };
    };
  };
  /** Validate Kisi api key */
  validateKisiApiKey: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_ValidateKisiApiKeyWSRequest"];
      };
    };
  };
  /** Validate Kisi api key V2 */
  validateKisiApiKeyV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_ValidateKisiApiKeyWSRequest"];
      };
    };
  };
  /** Delete Amt badge integration */
  deleteAmtIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Device integration */
  deleteDeviceIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Mattermost alert integration */
  deleteMattermostIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete OpenAI integration */
  deleteOpenAIIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete outbound webhook alert integration */
  deleteWebhookIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete entire webhook integration */
  deleteWebhookIntegrationV2Dep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of AMT readers to assign cameras */
  getAmtReadersDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetBadgeIntegrationDoorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetAmtReadersWSRequest"];
      };
    };
  };
  /** Get details of all open api token requests for organization */
  getApiTokenApplicationsDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSRequest"];
      };
    };
  };
  /** Get list of all api tokens for organization */
  getApiTokensDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokensWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokensWSRequest"];
      };
    };
  };
  /** Get Calendly event details */
  getCalendlyEventDetailsDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetCalendlyEventDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetCalendlyEventDetailsWSRequest"];
      };
    };
  };
  /** Get Device integration */
  getDeviceIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get OpenAI integration */
  getOpenAIIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of OpenAI models */
  getOpenAIModelsDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpenAIModelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpenAIModelsWSRequest"];
      };
    };
  };
  /** Get details of all third-party integrations for organization */
  getOrgIntegrationsDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Get details of all V2 third-party integrations for an organization */
  getOrgIntegrationsV2Dep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetAllOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Get webhook integration */
  getWebhookIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Dice integration */
  deleteDiceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete email alert integration */
  deleteEmailIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Informacast integration */
  deleteInformacastIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Lumeo integration */
  deleteLumeoIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Mattermost alert integration */
  deleteMattermostIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Microsoft Teams alert integration */
  deleteMicrosoftTeamsIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Microsoft Teams alert integration */
  deleteMicrosoftTeamsIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Remove configurations for Microsoft Teams user */
  deleteMicrosoftTeamsUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete OpenAI integration */
  deleteOpenAIIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete PagerDuty alert integration */
  deletePagerDutyIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Pimloc integration */
  deletePimlocIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Raptor Integration */
  deleteRaptorIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete ServiceNow alert integration */
  deleteServiceNowIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Slack alert integration v2 */
  deleteSlackIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Dice integration */
  getDiceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Informacast integration */
  getInformacastIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Informacast scenarios */
  getInformacastScenarios: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetInformacastScenariosWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Lumeo integration */
  getLumeoIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Microsoft Teams alert integration */
  getMicrosoftTeamsIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get a list of teams a Microsoft Teams user joined */
  getMicrosoftUsersJoinedTeams: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetMicrosoftUsersJoinedTeamsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get OpenAI integration */
  getOpenAIIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of OpenAI models */
  getOpenAIModels: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOpenAIModelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOpenAIModelsWSRequest"];
      };
    };
  };
  /** Get Pimloc integration */
  getPimlocIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Raptor Buildings */
  getRaptorBuildings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetRaptorBuildingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Raptor Integration */
  getRaptorIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Raptor Templates */
  getRaptorTemplates: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetRaptorTemplatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Initiate the Microsoft Teams OAuth Process */
  initiateMicrosoftTeamsOAuth: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Initiate the Slack OAuth Process */
  initiateSlackOAuth: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Install notification bot for Microsoft Teams team */
  installMicrosoftTeamsBotForTeam: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMicrosoftTeamsBotForTeamWSRequest"];
      };
    };
  };
  /** Install notification bot for Microsoft Teams user */
  installMicrosoftTeamsBotForUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Uninstall notification bot for Microsoft Teams team */
  uninstallMicrosoftTeamsBotForTeam: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMicrosoftTeamsBotForTeamWSRequest"];
      };
    };
  };
  /** Uninstall notification bot for Microsoft Teams user */
  uninstallMicrosoftTeamsBotForUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Update Dice integration */
  updateDiceIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateDiceIntegrationWSRequest"];
      };
    };
  };
  /** Update email alert integration */
  updateEmailIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateEmailIntegrationWSRequest"];
      };
    };
  };
  /** Update Informacast rules engine integration */
  updateInformacastIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateInformacastIntegrationRequest"];
      };
    };
  };
  /** Update Lumeo integration */
  updateLumeoIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateLumeoIntegrationWSRequest"];
      };
    };
  };
  /** Update Mattermost alert integration */
  updateMattermostIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMattermostIntegrationWSRequest"];
      };
    };
  };
  /** Update Microsoft Teams alert integration */
  updateMicrosoftTeamsIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMicrosoftTeamsIntegrationWSRequest"];
      };
    };
  };
  /** Update Microsoft Teams alert integration */
  updateMicrosoftTeamsIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMicrosoftTeamsIntegrationV2WSRequest"];
      };
    };
  };
  /** Update OpenAI integration */
  updateOpenAIIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpenAIIntegrationRequest"];
      };
    };
  };
  /** Update PagerDuty alert integration */
  updatePagerDutyIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePagerDutyIntegrationWSRequest"];
      };
    };
  };
  /** Update Pimloc integration */
  updatePimlocIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdatePimlocIntegrationRequest"];
      };
    };
  };
  /** Update Raptor Integration */
  updateRaptorIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateRaptorIntegrationRequest"];
      };
    };
  };
  /** Update ServiceNow alert integration */
  updateServiceNowIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateServiceNowIntegrationWSRequest"];
      };
    };
  };
  /** Update Slack alert integration */
  updateSlackIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateSlackIntegrationWSRequest"];
      };
    };
  };
  /** Update Slack alert integration v2 */
  updateSlackIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateSlackIntegrationV2WSRequest"];
      };
    };
  };
  /** Get details of all open api token requests for organization */
  getApiTokenApplications: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSRequest"];
      };
    };
  };
  /** Get list of all api tokens for organization */
  getApiTokens: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokensWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokensWSRequest"];
      };
    };
  };
  /** Get details of all third-party integrations for organization */
  getOrgIntegrations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Get details of all V2 third-party integrations for an organization */
  getOrgIntegrationsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetAllOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** Remove an api token from organization. Note: this is irreversible */
  revokeApiToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_RevokeApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RevokeApiTokenWSRequest"];
      };
    };
  };
  /** Request an api token for organization */
  submitApiTokenApplication: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSRequest"];
      };
    };
  };
  /** Update display name and permissions of an api token */
  updateApiToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateApiTokenWSRequest"];
      };
    };
  };
  /** Remove an api token from organization. Note: this is irreversible */
  revokeApiTokenDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_RevokeApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RevokeApiTokenWSRequest"];
      };
    };
  };
  /** Create an invite with Envoy */
  createEnvoyInvite: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_CreateEnvoyInviteWSRequest"];
      };
    };
  };
  /** Delete Envoy badge integration */
  deleteEnvoyIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Envoy integration */
  deleteEnvoyIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Guest */
  deleteGuestI: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GuestWSRequest"];
      };
    };
  };
  deleteGuestManagementIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Toast integration */
  deleteToastIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Toast integration */
  deleteToastIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get All Guests by Org */
  getAllGuestsByOrgI: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetAllGuestsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Calendly event details */
  getCalendlyEventDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetCalendlyEventDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetCalendlyEventDetailsWSRequest"];
      };
    };
  };
  /** Get Envoy integration */
  getEnvoyIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Guest */
  getGuestI: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetGuestWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GuestWSRequest"];
      };
    };
  };
  getGuestManagementIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Toast integration */
  getToastIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get list of Toast service areas to assign cameras */
  getToastServiceAreas: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetToastServiceAreasWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetToastServiceAreasWSRequest"];
      };
    };
  };
  /** Initiate the Envoy OAuth Process */
  initiateEnvoyOAuth: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Update Envoy badge integration */
  updateEnvoyIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateEnvoyIntegrationWSRequest"];
      };
    };
  };
  /** Update Envoy integration */
  updateEnvoyIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateEnvoyIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Guest */
  updateGuestI: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGuestWSRequest"];
      };
    };
  };
  updateGuestManagementIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGuestManagementIntegrationWSRequest"];
      };
    };
  };
  /** Update Toast integration */
  updateToastIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateToastIntegrationWSRequest"];
      };
    };
  };
  /** Update Toast integration */
  updateToastIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateToastIntegrationV2WSRequest"];
      };
    };
  };
  /** Delete AWS S3 clip storage integration */
  deleteAwsIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Box clip storage integration */
  deleteBoxIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Dropbox clip storage integration */
  deleteDropboxIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Google Drive clip storage integration */
  deleteGoogleIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Google Drive clip storage integration */
  deleteGoogleIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete Office365 Sharepoint clip storage integration */
  deleteOffice365Integration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get Google Drive clip storage integration */
  getGoogleIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Initiate the Dropbox OAuth Process */
  initiateDropboxOAuth: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Initiate the Google OAuth Process */
  initiateGoogleOAuth: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Initiate the Office365 OAuth Process */
  initiateOffice365OAuth: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_InitiateOAuthWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_InitiateOAuthWSRequest"];
      };
    };
  };
  /** Migrate Google Drive settings from the V1 table to the V2 table */
  migrateGoogleIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Refresh Google access token */
  refreshGoogleAccessToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_RefreshGoogleAccessTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RefreshGoogleAccessTokenWSRequest"];
      };
    };
  };
  /** Revokes access to a Google Drive account */
  revokeGoogleDriveAccess: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RevokeGoogleDriveAccessWSRequest"];
      };
    };
  };
  /** Update AWS S3 clip storage integration */
  updateAwsIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAwsIntegrationWSRequest"];
      };
    };
  };
  /** Update Box clip storage integration */
  updateBoxIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateBoxIntegrationWSRequest"];
      };
    };
  };
  /** Update Dropbox clip storage integration */
  updateDropboxIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateDropboxIntegrationWSRequest"];
      };
    };
  };
  /** Update Google Drive clip storage integration */
  updateGoogleIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGoogleIntegrationWSRequest"];
      };
    };
  };
  /** Update Google Drive clip storage integration */
  updateGoogleIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateGoogleIntegrationV2WSRequest"];
      };
    };
  };
  /** Update Office365 Sharepoint clip storage integration */
  updateOffice365Integration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOffice365IntegrationWSRequest"];
      };
    };
  };
  /** Request an api token for organization */
  submitApiTokenApplicationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSRequest"];
      };
    };
  };
  /** Setup a Zapier webhook */
  subscribeZapierWebhookDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_SubscribeZapierWebhookWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubscribeZapierWebhookWSRequest"];
      };
    };
  };
  /** Delete a Zapier webhook */
  unsubscribeZapierWebhookDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnsubscribeZapierWebhookWSRequest"];
      };
    };
  };
  /** Update Amt badge integration */
  updateAmtIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateAmtIntegrationWSRequest"];
      };
    };
  };
  /** Update display name and permissions of an api token */
  updateApiTokenDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateApiTokenWSRequest"];
      };
    };
  };
  /** Update Device integration */
  updateDeviceIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateDeviceIntegrationWSRequest"];
      };
    };
  };
  /** Update Mattermost alert integration */
  updateMattermostIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateMattermostIntegrationWSRequest"];
      };
    };
  };
  /** Update Noonlight integration */
  updateNoonlightSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateNoonlightSettingsWSRequest"];
      };
    };
  };
  /** Update OpenAI integration */
  updateOpenAIIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateOpenAIIntegrationRequest"];
      };
    };
  };
  /** Update outbound webhook alert integration */
  updateWebhookIntegrationDep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationWSRequest"];
      };
    };
  };
  /** Update preexisting webhooks */
  updateWebhookIntegrationV2Dep: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationV2WSRequest"];
      };
    };
  };
  /** Delete outbound webhook alert integration */
  deleteWebhookIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Delete entire webhook integration */
  deleteWebhookIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Get webhook integration */
  getWebhookIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetOrgIntegrationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_BaseIntegrationWSRequest"];
      };
    };
  };
  /** Setup a Zapier webhook */
  subscribeZapierWebhook: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_SubscribeZapierWebhookWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubscribeZapierWebhookWSRequest"];
      };
    };
  };
  /** Delete a Zapier webhook */
  unsubscribeZapierWebhook: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UnsubscribeZapierWebhookWSRequest"];
      };
    };
  };
  /** Update outbound webhook alert integration */
  updateWebhookIntegration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationWSRequest"];
      };
    };
  };
  /** Update preexisting webhooks */
  updateWebhookIntegrationV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateWebhookIntegrationV2WSRequest"];
      };
    };
  };
  addPartnerAsSuperAdmin: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_AddPartnerAsSuperAdminWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_AddPartnerAsSuperAdminWSRequest"];
      };
    };
  };
  createOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_CreateOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_CreateOrgWSRequest"];
      };
    };
  };
  createPartnerOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_CreatePartnerOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_CreatePartnerOrgWSRequest"];
      };
    };
  };
  createReturnInventoryAuditReservation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_CreateReturnedInventoryAuditReservationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_CreateReturnedInventoryAuditReservationWSRequest"];
      };
    };
  };
  createInternalSalesforceSupportAuthority: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_CreateSupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_CreateSupportAuthorityWSRequest"];
      };
    };
  };
  developerNewsletterEnroll: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_DeveloperNewsletterEnrollWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_DeveloperNewsletterEnrollWSRequest"];
      };
    };
  };
  getSuperAdminGroupUUID: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_GetSuperAdminGroupUUIDWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_GetSuperAdminGroupUUIDWSRequest"];
      };
    };
  };
  initiateShipment: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_ShipmentEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_InitiateShipmentWSRequest"];
      };
    };
  };
  listOrgs: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_ListOrgsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_ListOrgsWSRequest"];
      };
    };
  };
  parentLifetimeSpend: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_ParentLifetimeSpendWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_ParentLifetimeSpendWSRequest"];
      };
    };
  };
  proDevicesOnly: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_ProDevicesOnlyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_ProDevicesOnlyWSRequest"];
      };
    };
  };
  requestHardwareForDevelopment: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_RequestHardwareForDevelopmentWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_RequestHardwareForDevelopmentWSRequest"];
      };
    };
  };
  sendShipmentShippedEmail: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_ShipmentEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_SendShipmentShippedEmailWSRequest"];
      };
    };
  };
  setOpportunityForPurchaseOrder: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_SetOpportunityForPurchaseOrderWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_SetOpportunityForPurchaseOrderWSRequest"];
      };
    };
  };
  invoiceCharge: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceChargeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceChargeWSRequest"];
      };
    };
  };
  invoiceChargeV1: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceChargeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceChargeWSRequest"];
      };
    };
  };
  invoiceDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceDetailsWSRequest"];
      };
    };
  };
  invoiceDetailsV1: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Invoice_InvoiceDetailsV1WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice_InvoiceDetailsWSRequest"];
      };
    };
  };
  /** Authenticate a keypad PIN */
  authenticatePin: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Keypad_AuthenticatePinResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_AuthenticatePinRequest"];
      };
    };
  };
  /** Method for keypad online/offline processing */
  keypadCheckin: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Keypad_KeypadCheckinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_KeypadCheckinWSRequest"];
      };
    };
  };
  /** Connects a keypad to Rhombus services */
  claimKeypadActivationToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Keypad_ClaimKeypadActivationTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_ClaimKeypadActivationTokenRequest"];
      };
    };
  };
  /** Get the current keypad */
  getCurrentKeypad: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Keypad_GetCurrentKeypadWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_GetCurrentKeypadWSRequest"];
      };
    };
  };
  /** Get a list of all registered keypads for a location */
  getKeypadsForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Keypad_GetKeypadsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_GetKeypadsForLocationWSRequest"];
      };
    };
  };
  /** Get a list of all registered keypads for an org */
  getKeypadsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Keypad_GetKeypadsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_GetKeypadsForOrgWSRequest"];
      };
    };
  };
  /** Unregister a keypad */
  unregisterKeypad: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Keypad_UnregisterKeypadResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_UnregisterKeypadRequest"];
      };
    };
  };
  /** Update keypad settings */
  updateKeypad: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Keypad_UpdateKeypadResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Keypad_UpdateKeypadRequest"];
      };
    };
  };
  /** Update kiosk settings */
  claimKioskActivationToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Kiosk_ClaimKioskActivationTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_ClaimKioskActivationTokenRequest"];
      };
    };
  };
  /** Deleted a kiosk */
  deleteKiosk: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Kiosk_DeleteKioskWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_DeleteKioskWSRequest"];
      };
    };
  };
  /** Get the current kiosk */
  getCurrentKiosk: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Kiosk_GetCurrentKioskWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_GetCurrentKioskWSRequest"];
      };
    };
  };
  /** Get a list of all registered kiosks for a location */
  getKiosksForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Kiosk_GetKiosksForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_GetKiosksForLocationWSRequest"];
      };
    };
  };
  /** Get a list of all registered kiosks for an org */
  getKiosksForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Kiosk_GetKiosksForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_GetKiosksForOrgWSRequest"];
      };
    };
  };
  /** Method for kiosk online/offline processing */
  kioskCheckin: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Kiosk_KioskCheckinWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_KioskCheckinWSRequest"];
      };
    };
  };
  /** Unregister a kiosk */
  unregisterKiosk: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Kiosk_UnregisterKioskResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_UnregisterKioskRequest"];
      };
    };
  };
  /** Update kiosk settings */
  updateKiosk: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Kiosk_UpdateKioskResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Kiosk_UpdateKioskSelectiveRequest"];
      };
    };
  };
  assignACUDoorLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_AssignACUDoorLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_AssignACUDoorLicenseWSRequest"];
      };
    };
  };
  assignAlertMonitoringLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_AssignAlertMonitoringLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_AssignAlertMonitoringLicenseWSRequest"];
      };
    };
  };
  /** Assign or unassign a device license. */
  assignDeviceLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_AssignDeviceLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_AssignDeviceLicenseWSRequest"];
      };
    };
  };
  /** Assign an add-on license to a device */
  assignLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_AssignLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_AssignLicenseWSRequest"];
      };
    };
  };
  calculateLicenseStatsForClientOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_CalculateLicensesStatsForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CalculateLicensesStatsForClientOrgWSRequest"];
      };
    };
  };
  calculateLicenseStatsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_CalculateLicensesStatsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CalculateLicensesStatsForOrgWSRequest"];
      };
    };
  };
  findCatalogItems: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_catalog_FindCatalogItemsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_catalog_FindCatalogItemsWSRequest"];
      };
    };
  };
  getCatalogItemByProductCode: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_catalog_GetCatalogItemByProductCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_catalog_GetCatalogItemByProductCodeWSRequest"];
      };
    };
  };
  /** Start claiming licenses represented by claim key with the specified code. This operation is asynchronous. */
  claimLicenses: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_claimkey_ClaimLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_ClaimLicensesWSRequest"];
      };
    };
  };
  claimLicensesForClientOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_claimkey_ClaimLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_ClaimLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Create claim key */
  createClaimKey: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_claimkey_CreateClaimKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_CreateClaimKeyWSRequest"];
      };
    };
  };
  /** Create renewal claim key */
  createRenewalClaimKey: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_claimkey_CreateRenewalClaimKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_CreateRenewalClaimKeyWSRequest"];
      };
    };
  };
  /** Find claim keys by org */
  findClaimKeysByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_claimkey_FindClaimKeysByOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_FindClaimKeysByOrgWSRequest"];
      };
    };
  };
  /** Get claim key with the specified uuid */
  getClaimKey: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_claimkey_GetClaimKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_GetClaimKeyWSRequest"];
      };
    };
  };
  /** Get claim key with the specified code */
  getClaimKeyByCode: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_claimkey_GetClaimKeyByCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_GetClaimKeyByCodeWSRequest"];
      };
    };
  };
  /** Get claim key with the specified code for a client organization. */
  getClaimKeyByCodeForClientOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_claimkey_GetClaimKeyByCodeForClientWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_GetClaimKeyByCodeForClientOrgWSRequest"];
      };
    };
  };
  /** Return claim key product quantities */
  returnClaimKeyProductQuantities: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_claimkey_ReturnClaimKeyProductQuantitiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_claimkey_ReturnClaimKeyProductQuantitiesWSRequest"];
      };
    };
  };
  createACUDoorLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_CreateACUDoorLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CreateACUDoorLicenseWSRequest"];
      };
    };
  };
  createAlertMonitoringLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_CreateAlertMonitoringLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CreateAlertMonitoringLicenseWSRequest"];
      };
    };
  };
  /** Create a device license for an organization */
  createDeviceLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_CreateDeviceLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CreateDeviceLicenseWSRequest"];
      };
    };
  };
  /** Create an add-on license for an organization */
  createLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_CreateLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_CreateLicenseWSRequest"];
      };
    };
  };
  deleteAlertMonitoringLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_DeleteAlertMonitoringLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_DeleteAlertMonitoringLicenseWSRequest"];
      };
    };
  };
  /** Delete an unassigned device license from an organization */
  deleteDeviceLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_DeleteDeviceLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_DeleteDeviceLicenseWSRequest"];
      };
    };
  };
  /** Delete an unassigned add-on license from an organization */
  deleteLicense: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_DeleteLicenseWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_DeleteLicenseWSRequest"];
      };
    };
  };
  findLicensesByClaimKey: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_FindLicensesByClaimKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_FindLicensesByClaimKeyWSRequest"];
      };
    };
  };
  /** Get list of access controlled door licenses licenses available in organization */
  getACUDoorLicenses: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetACUDoorLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetACUDoorLicensesWSRequest"];
      };
    };
  };
  /** Get list of access controlled door licenses licenses available for a client organization */
  getACUDoorLicensesForClientOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetACUDoorLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetACUDoorLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Get list of alert monitoring licenses available in organization */
  getAlertMonitoringLicenses: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetAlertMonitoringLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetAlertMonitoringLicensesWSRequest"];
      };
    };
  };
  /** Get list of alert monitoring licenses available for a client organization */
  getAlertMonitoringLicensesForClientOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetAlertMonitoringLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetAlertMonitoringLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Get list of device licenses available in organization */
  getDeviceLicenses: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetDeviceLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetDeviceLicensesWSRequest"];
      };
    };
  };
  /** Get list of device licenses available for a client organization */
  getDeviceLicensesForClientOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetDeviceLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetDeviceLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Get list of add-on licenses available in organization */
  getLicenses: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetLicensesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetLicensesWSRequest"];
      };
    };
  };
  /** Get a list of licenses available for a client organization */
  getLicensesForClientOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Add a label to a location */
  addLocationLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_AddLocationLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_AddLocationLabelWSRequest"];
      };
    };
  };
  /** Create a location */
  createlocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_CreateLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_CreateLocationWSRequest"];
      };
    };
  };
  /** Remove a location */
  deleteLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_DeleteLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_DeleteLocationWSRequest"];
      };
    };
  };
  /** Get the latitude and longitude of an address */
  geoCode: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_GeoCodeWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GeoCodeWSRequest"];
      };
    };
  };
  /** Get location by id */
  getLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationWSRequest"];
      };
    };
  };
  /** Get all location labels for an organization */
  getLocationLabelsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationLabelsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationLabelsForOrgWSRequest"];
      };
    };
  };
  /** Get list of locations in organization */
  getLocations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationsWSRequest"];
      };
    };
  };
  /** Get all locations associated to location labels for an organization */
  getLocationsAssociatedToLocationLabelsByOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationLabelsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationLabelsForOrgWSRequest"];
      };
    };
  };
  /** Get list of locations given latitude and longitude */
  getLocationsByGeo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationsByGeoResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationsByGeoRequest"];
      };
    };
  };
  /** Get nested locations by subLocationHierarchyKey */
  getLocationsBySubLocationsHierarchyKey: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationsBySubLocationsHierarchyKeyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationsBySubLocationsHierarchyKeyWSRequest"];
      };
    };
  };
  /** Get list of locations in organization */
  getLocationsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_GetLocationsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_GetLocationsV2WSRequest"];
      };
    };
  };
  /** Remove a label from a location */
  removeLocationLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_RemoveLocationLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_RemoveLocationLabelWSRequest"];
      };
    };
  };
  /** Selectively update a location */
  selectiveUpdateLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_SelectiveUpdateLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_SelectiveUpdateLocationWSRequest"];
      };
    };
  };
  /** Update a location **NOTE: This will replace old settings meaning if you leave a field blank it will be overrode to blank. For selective field updates use the endpoint /selectiveUpdateLocation */
  updateLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_UpdateLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_UpdateLocationWSRequest"];
      };
    };
  };
  /** Validate a location address for Alarm Monitoring */
  validateLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Location_ValidateLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Location_ValidateLocationWSRequest"];
      };
    };
  };
  /** Get RMAs */
  getRMAs: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Logistics_GetRMAsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Logistics_GetRMAsWSRequest"];
      };
    };
  };
  /** Get shipments */
  getShipments: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Logistics_GetShipmentsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Logistics_GetShipmentsWSRequest"];
      };
    };
  };
  getWarrantyApprovedRMAs: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Internal_GetWarrantyApprovedRMAsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Internal_GetWarrantyApprovedRMAsWSRequest"];
      };
    };
  };
  generateMapUrl: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Maps_GenerateMapUrlWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Maps_GenerateMapUrlWSRequest"];
      };
    };
  };
  /** Get media information of any video-supporting media device */
  getBulkMediaDeviceDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Mediadevice_GetBulkMediaDeviceDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Mediadevice_GetBulkMediaDeviceDetailsWSRequest"];
      };
    };
  };
  logEvent: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Metric_LogEventWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metric_LogEventWSRequest"];
      };
    };
  };
  uploadMobileLogs: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/octet-stream": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  reportError: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Metric_ReportErrorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Metric_ReportErrorWSRequest"];
      };
    };
  };
  /** Allows a multi-org user on mobile to login to a different org they are able to access. */
  loginToOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Mobile_LoginToOrgBaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_LoginToOrgRequest"];
      };
    };
  };
  /** Mobile login of partner to client org. */
  loginVerifiedSupportAuthority: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Mobile_LoginVerifiedSupportAuthorityMobileResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_LoginVerifiedSupportAuthorityMobileRequest"];
      };
    };
  };
  /** Ends a mobile session. */
  logoutMobileUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Mobile_LogoutMobileUserResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_LogoutMobileUserRequest"];
      };
    };
  };
  refreshMobileSession: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Mobile_RefreshMobileSessionResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_RefreshMobileSessionRequest"];
      };
    };
  };
  /** Updates a mobile notification token for the Console mobile app */
  updateNotificationToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Mobile_UpdateMobileNotificationTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_UpdateMobileNotificationTokenRequest"];
      };
    };
  };
  /** Updates a mobile notification token for the Rhombus Key mobile app */
  updateRhombusKeyNotificationToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Mobile_UpdateRhombusKeyMobileNotificationTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Mobile_UpdateRhombusKeyMobileNotificationTokenRequest"];
      };
    };
  };
  /** Add model to device */
  addModelToDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Modularai_AddModelToDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Modularai_AddModelToDeviceWSRequest"];
      };
    };
  };
  /** Get devices running model */
  getDevicesForModel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Modularai_GetDevicesForModelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Modularai_GetDevicesForModelWSRequest"];
      };
    };
  };
  /** Get available models */
  getModels: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Modularai_GetModelsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Modularai_GetModelsWSRequest"];
      };
    };
  };
  /** Get models added to device */
  getModelsAddedToDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Modularai_GetModelsAddedToDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Modularai_GetModelsAddedToDeviceWSRequest"];
      };
    };
  };
  /** Remove model from device */
  removeModelFromDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Modularai_RemoveModelFromDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Modularai_RemoveModelFromDeviceWSRequest"];
      };
    };
  };
  /** Update model config name, description, or model parameters */
  updateModel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Modularai_UpdateModelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Modularai_UpdateModelWSRequest"];
      };
    };
  };
  /** Upload a custom model */
  uploadCustomModel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    /** multipart/form-data with zip containing custom model */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** [DEV ONLY] Upload a quantized model for an existing modular AI config */
  uploadQuantizedModel: {
    parameters: {
      query: {
        modelUuid?: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    /** multipart/form-data with zip containing custom model */
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** manage device network configuration */
  networkConfiguration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Network_NetworkConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Network_NetworkConfigurationWSRequest"];
      };
    };
  };
  /** User authorizes to share permission and ac settings, receives temporary authorization code */
  authorize: {
    parameters: {
      query: {
        clientId?: string | null;
        redirectUri?: string | null;
        responseType?: string | null;
        state?: string | null;
        consentGiven?: boolean | null;
        codeChallenge?: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Delete application */
  deleteApplication: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_OAuthApplicationWSRequest"];
      };
    };
  };
  /** Get all applications for org */
  getAllApplicationsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Oauth_GetAllApplicationsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_GetAllApplicationsForOrgWSRequest"];
      };
    };
  };
  /** Get application by clientId */
  getApplicationByClientId: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Oauth_GetApplicationByClientIdWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_GetApplicationByClientIdWSRequest"];
      };
    };
  };
  /** Application for client_id and client_secret */
  submitApplication: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Oauth_OAuthApplicationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_OAuthApplicationWSRequest"];
      };
    };
  };
  /** Update application */
  updateApplication: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Oauth_OAuthApplicationWSRequest"];
      };
    };
  };
  /** Get basic state information about all proximity tags in organization */
  getMinimalOccupancySensorStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Occupancysensor_GetMinimalOccupancySensorStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Occupancysensor_GetMinimalOccupancySensorStatesWSRequest"];
      };
    };
  };
  /** Get recent events for specified proximity tag */
  getOccupancyEventsForSensor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Occupancysensor_GetOccupancyEventsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Occupancysensor_GetOccupancyEventsForSensorWSRequest"];
      };
    };
  };
  /** Get stored video information for sensor */
  getOccupancyPresenceWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetSensorPresenceWindowsWSRequest"];
      };
    };
  };
  /** Update the details of an occupancy sensor */
  updateOccupancySensorDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Occupancysensor_UpdateOccupancySensorDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Occupancysensor_UpdateOccupancySensorDetailsWSRequest"];
      };
    };
  };
  /** Exposes custom objects and enums to the component schema - this endpoint should not be invoked */
  getSchemas: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Openapi_GetOpenApiComponentSchemasWSRequest"];
      };
    };
  };
  /** Claim activation token for organization */
  claimActivationToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_ClaimActivationTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_ClaimActivationTokenWSRequest"];
      };
    };
  };
  /** Claim shipment registration token for an organization */
  claimShipmentRegistrationToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_ClaimShipmentRegistrationTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_ClaimShipmentRegistrationTokenWSRequest"];
      };
    };
  };
  /** Create a pending registration. Registration will be completed when the hardware establishes connectivity */
  createPendingRegistration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_CreatePendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_CreatePendingRegistrationRequest"];
      };
    };
  };
  /** Delete scoped cloud archiving config.  Note that the priority of scoping is Org > Location > Device */
  deleteCloudArchivingConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_DeleteCloudArchivingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_DeleteCloudArchivingConfigWSRequest"];
      };
    };
  };
  /** Delete keypad logo. */
  deleteKeypadLogo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_DeleteKeypadLogoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_DeleteKeypadLogoWSRequest"];
      };
    };
  };
  /** Delete rhombus key logo. */
  deleteRhombusKeyLogo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_DeleteRhombusKeyLogoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_DeleteRhombusKeyLogoWSRequest"];
      };
    };
  };
  /** Find all hardware for which a pending registrations exists */
  findAllHardwareWithPendingRegistration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_FindAllHardwareWithPendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_FindAllHardwareWithPendingRegistrationRequest"];
      };
    };
  };
  /** Find hardware for which pending registrations can be created */
  findHardwareAvailableForPendingRegistration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_FindHardwareAvailableForPendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_FindHardwareAvailableForPendingRegistrationRequest"];
      };
    };
  };
  /** Get organization team name if it is available */
  findIfTeamNameAvailable: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_FindIfTeamNameAvailableResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_FindIfTeamNameAvailableRequest"];
      };
    };
  };
  /** Get SCIM configuration for organization */
  findSCIMSettingsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_FindSCIMSettingsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_FindSCIMSettingsForOrgWSRequest"];
      };
    };
  };
  /** Generate a federated session token login for organization */
  generateFederatedSessionToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GenerateFederatedSessionTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GenerateFederatedSessionTokenRequest"];
      };
    };
  };
  /** Get AWS integration cloudformation file */
  getAwsIntCloudFormationFile: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetAwsIntCloudformationFileResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetAwsIntCloudformationFileRequest"];
      };
    };
  };
  /** Get details about the client organization */
  getClientOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetClientOrgWSRequest"];
      };
    };
  };
  /** Get scoped cloud archiving configs.  Note that the priority of scoping is Org > Location > Device */
  getCloudArchivingConfigs: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetCloudArchivingConfigsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetCloudArchivingConfigsWSRequest"];
      };
    };
  };
  /** Get flags for a device */
  getDeviceFlags: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetDeviceFlagsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetDeviceFlagsWSRequest"];
      };
    };
  };
  /** Get organization wide features */
  getFeatures: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetFeaturesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetFeaturesWSRequest"];
      };
    };
  };
  /** Get flags for all locations */
  getLocationFlags: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetLocationFlagsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetLocationFlagsWSRequest"];
      };
    };
  };
  /** Get details about organization */
  getOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgWSRequest"];
      };
    };
  };
  /** Use endpoints in Integrations Webservice instead */
  DEPRECATED_getOrgIntegrations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgIntegrationsWSRequest"];
      };
    };
  };
  /** This endpoint is no longer in use. Please use getOrgNotificationTemplateV2 instead. */
  getOrgNotificationTemplate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgNotificationTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgNotificationTemplateWSRequest"];
      };
    };
  };
  /** Get organization's default notification schedule template */
  getOrgNotificationTemplateV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgNotificationTemplateV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgNotificationTemplateWSRequest"];
      };
    };
  };
  /** Get details about organization */
  getOrgV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetOrgV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetOrgV2WSRequest"];
      };
    };
  };
  /** Deprecated. Use getSAMLSettingsV2 */
  getSAMLSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetSAMLSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetSAMLSettingsWSRequest"];
      };
    };
  };
  /** Get details about organization */
  getSAMLSettingsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetSAMLSettingsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetSAMLSettingsV2WSRequest"];
      };
    };
  };
  /** Get SCIM display info for organization */
  getScimDisplayInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_GetScimDisplayInfoResponse"];
        };
      };
    };
  };
  /** Generate a temporary org token for use in OAuth flows */
  getTemporaryOrgToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["GetTemporaryOrgTokenResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_GetTemporaryOrgTokenWSRequest"];
      };
    };
  };
  /** Peek at a shipping registration token for an organization */
  peekShipmentRegistrationToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_PeekShipmentRegistrationTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_PeekShipmentRegistrationTokenWSRequest"];
      };
    };
  };
  /** Remove a pending registration */
  removePendingRegistration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_RemovePendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_RemovePendingRegistrationRequest"];
      };
    };
  };
  /** Revoke SCIM access for organization */
  revokeSCIMAccessForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_RevokeSCIMAccessForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_RevokeSCIMAccessForOrgWSRequest"];
      };
    };
  };
  /** Store a flag for organization */
  setOrgFlag: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_SetFlagWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_SetFlagWSRequest"];
      };
    };
  };
  /** Initially configure SCIM access for organization */
  setupSCIMAccessForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_SetupSCIMAccessForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_SetupSCIMAccessForOrgWSRequest"];
      };
    };
  };
  /** Update organization AI training settings */
  updateAiTrainingSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateAiTrainingSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateAiTrainingSettingsWSRequest"];
      };
    };
  };
  /** Update scoped cloud archiving config.  Note that the priority of scoping is Org > Location > Device */
  updateCloudArchivingConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateCloudArchivingConfigWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateCloudArchivingConfigWSRequest"];
      };
    };
  };
  /** Update organization firmware schedule settings */
  updateFirmwareSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateFirmwareSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateFirmwareSettingsWSRequest"];
      };
    };
  };
  /** Update organization General settings */
  updateGeneralSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateGeneralSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateGeneralSettingsWSRequest"];
      };
    };
  };
  /** Update organization MFA settings */
  updateMFASettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateMFASettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateMFASettingsWSRequest"];
      };
    };
  };
  /** Update organization details */
  updateOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgWSRequest"];
      };
    };
  };
  /** Update organization AI audio analysis policy */
  updateOrgAudioAnalysisPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgAudioAnalysisPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgAudioAnalysisPolicyWSRequest"];
      };
    };
  };
  /** Update organization audio recording policy */
  updateOrgAudioRecordingPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgAudioRecordingPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgAudioRecordingPolicyWSRequest"];
      };
    };
  };
  /** Use endpoints in Integrations Webservice instead */
  updateOrgIntegrations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgIntegrationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgIntegrationsWSRequest"];
      };
    };
  };
  /** This endpoint is no longer in use. Please use updateOrgNotificationTemplateV2 instead. */
  updateOrgNotificationTemplate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgNotificationTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgNotificationTemplateWSRequest"];
      };
    };
  };
  /** Update default notification schedule template for newly created Users in Org */
  updateOrgNotificationTemplateV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateOrgNotificationTemplateV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateOrgNotificationTemplateV2WSRequest"];
      };
    };
  };
  /** Update pending registration for hardware */
  updatePendingRegistration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdatePendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdatePendingRegistrationRequest"];
      };
    };
  };
  /** Deprecated. Use updateSAMLSettingsV2 */
  updateSAMLSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateSAMLSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateSAMLSettingsWSRequest"];
      };
    };
  };
  /** Update organization SAML settings */
  updateSAMLSettingsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateSAMLSettingsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateSAMLSettingsV2WSRequest"];
      };
    };
  };
  /** Update SCIM configuration for organization */
  updateSCIMSettingsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_UpdateSCIMSettingsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_UpdateSCIMSettingsForOrgWSRequest"];
      };
    };
  };
  /** Create a client account */
  createPartnerClient: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_CreatePartnerClientWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_CreatePartnerClientWSRequest"];
      };
    };
  };
  /** Customize a client account */
  customizeClient: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_CustomizeClientWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_CustomizeClientWSRequest"];
      };
    };
  };
  /** Customize a client device */
  customizeClientDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_CustomizeClientDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_CustomizeClientDeviceWSRequest"];
      };
    };
  };
  /** Delete a client account */
  deletePartnerClient: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_DeleteClientWebResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_DeleteClientWebRequest"];
      };
    };
  };
  /** Get details of all open api token requests for organization */
  partner_getApiTokenApplications: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetApiTokenApplicationsWSRequest"];
      };
    };
  };
  /** Get list of all api tokens for a partner */
  partner_getApiTokens: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetApiTokensWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetPartnerApiTokensWSRequest"];
      };
    };
  };
  /** Retrieve a list of devices for a specific client. */
  getClientDevices: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetClientDevicesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetClientDevicesWSRequest"];
      };
    };
  };
  getClientRhombusOrgUsersForPartnerActivationTokenV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSBaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetClientRhombusOrgUsersForPartnerActivationTokenV2WSRequest"];
      };
    };
  };
  /** Get a map of all client accounts to device and location info */
  getPartnerClientsStatusMap: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerClientsStatusMapWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerClientsStatusMapWSRequest"];
      };
    };
  };
  /** Get information about a client */
  getClientSummaryInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetClientSummaryInfoWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetClientSummaryInfoWSRequest"];
      };
    };
  };
  /** Get a list of all client accounts */
  getPartnerClients: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerClientsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerClientsWSRequest"];
      };
    };
  };
  /** Get a list of all client accounts. NOTICE: This is the same as getPartnerClients, but only returns the basic info so partners can login to clients quickly. The other info will be returned by getPartnerClientsStatusMap. */
  getPartnerClientsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerClientsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerClientsWSRequest"];
      };
    };
  };
  /** Get a list of licenses available for a client organization */
  getDeviceLicensesForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetDeviceLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetDeviceLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Get a list of licenses available for a client organization */
  getLicensesForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["License_GetLicensesForClientOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["License_GetLicensesForClientOrgWSRequest"];
      };
    };
  };
  /** Retrieve list of all devices registered across all clients */
  getListOfAllClientDevices: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetListOfAllClientDevicesResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetListOfAllClientDevicesRequest"];
      };
    };
  };
  /** Retrieve a list of hardware available for remote registration. Any hardware originally registered by a Partner is available for re-registration after being removed from an active client account. */
  getListOfControlledHardware: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetListOfControlledHardwareResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetListOfControlledHardwareRequest"];
      };
    };
  };
  /** Get client mobile account access as partner */
  getPartnerClientMobileAccountAccess: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerClientMobileAccountAccessResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerClientMobileAccountAccessRequest"];
      };
    };
  };
  /** Get client shipments */
  PartnerGetShipments: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetShipmentsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetShipmentsWSRequest"];
      };
    };
  };
  grantSupportAccessToClient: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GrantSupportAccessToClientWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GrantSupportAccessToClientWSRequest"];
      };
    };
  };
  /** Reassign device(s) to a different organization. Only devices which hardware is controlled by the partner can be reassigned */
  reassignDeviceOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_ReassignDeviceOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_ReassignDeviceOrgWSRequest"];
      };
    };
  };
  /** Register a controlled camera to a client */
  registerCameraToClient: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Org_CreatePendingRegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Org_CreatePendingRegistrationRequest"];
      };
    };
  };
  /** Register a deal */
  registerDeal: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_RegisterDealWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_RegisterDealWSRequest"];
      };
    };
  };
  requestAccessToClientAccount: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_RequestAccessToClientAccountResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_RequestAccessToClientAccountRequest"];
      };
    };
  };
  requestAccessToClientAccountV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_RequestAccessToClientAccountV2Response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_RequestAccessToClientAccountV2Request"];
      };
    };
  };
  /** Remove an api token from organization. Note: this is irreversible */
  partner_revokeApiToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_RevokeApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_RevokeApiTokenWSRequest"];
      };
    };
  };
  /** Request a partner api token for 1 or more organizations */
  partner_submitApiTokenApplication: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_SubmitApiTokenApplicationWSRequest"];
      };
    };
  };
  submitSupportAccessDecisionForPartnerActivationTokenV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSBaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_SubmitSupportAccessDecisionForPartnerActivationTokenV2WSRequest"];
      };
    };
  };
  /** Update display name and permissions of an api token */
  partner_updateApiToken: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_UpdateApiTokenWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_UpdateApiTokenWSRequest"];
      };
    };
  };
  /** Update send license expiration email feature flag by org */
  updateManuallySendLicenseExpirationEmail: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_UpdateManuallySendLicenseExpirationEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_UpdateManuallySendLicenseExpirationEmailWSRequest"];
      };
    };
  };
  forgotPassword: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Password_ForgotPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Password_ForgotPasswordWSRequest"];
      };
    };
  };
  resetPassword: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Password_ResetPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Password_ResetPasswordWSRequest"];
      };
    };
  };
  userSignup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Password_UserSignupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Password_UserSignupWSRequest"];
      };
    };
  };
  /** Use Permission Group endpoints instead */
  assignPermission: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_AssignUserPermissionWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_AssignUserPermissionWSRequest"];
      };
    };
  };
  /** Create a permission group */
  createPartnerPermissionGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_CreatePartnerPermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_CreatePartnerPermissionGroupWSRequest"];
      };
    };
  };
  /** Create a permission group */
  createPermissionGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_CreatePermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_CreatePermissionGroupWSRequest"];
      };
    };
  };
  /** Delete a permission group */
  deletePartnerPermissionGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_DeletePartnerPermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_DeletePartnerPermissionGroupWSRequest"];
      };
    };
  };
  /** Delete a permission group */
  deletePermissionGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_DeletePermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_DeletePermissionGroupWSRequest"];
      };
    };
  };
  getPartnerPermissionGroups: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_GetPartnerPermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPartnerPermissionGroupsWSRequest"];
      };
    };
  };
  /** Get details about all permission groups in organization */
  getPermissionGroups: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_GetPermissionGroupsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPermissionGroupsWSRequest"];
      };
    };
  };
  getPermissionGroupsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_GetPermissionGroupsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPermissionGroupsForOrgWSRequest"];
      };
    };
  };
  getPermissionsForCurrentPartner: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_GetPermissionsForCurrentPartnerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPermissionsForCurrentPartnerWSRequest"];
      };
    };
  };
  /** Get device and functionality permissions for user or API token */
  getPermissionsForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_GetPermissionsForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_GetPermissionsForCurrentUserWSRequest"];
      };
    };
  };
  /** Update a partner permission group */
  updatePartnerPermissionGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_UpdatePartnerPermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_UpdatePartnerPermissionGroupWSRequest"];
      };
    };
  };
  /** Update a permission group */
  updatePermissionGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Permission_UpdatePermissionGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Permission_UpdatePermissionGroupWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to a access controlled door */
  createAccessControlledDoorPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreateAccessControlledDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateAccessControlledDoorPolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to audio gateways */
  createAudioPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreateAudioPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateAudioPolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to cameras */
  createCameraPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreateCameraPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateCameraPolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to a climate sensor */
  createClimatePolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreateClimatePolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateClimatePolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to a door sensor */
  createDoorPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreateDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateDoorPolicyWSRequest"];
      };
    };
  };
  /** Create a policy to be assigned to a occupancy sensor */
  createOccupancyPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreateOccupancyPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateOccupancyPolicyWSRequest"];
      };
    };
  };
  /** Create policy addendum for location */
  createPolicyAddendumForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreatePolicyAddendumForLocationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreatePolicyAddendumForLocationRequest"];
      };
    };
  };
  /** Create policy addendums for devices */
  createPolicyAddendumsForDevices: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreatePolicyAddendumsForDevicesResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreatePolicyAddendumsForDevicesRequest"];
      };
    };
  };
  /** Create a policy to be assigned to an asset tag */
  createProximityPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreateProximityPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateProximityPolicyWSRequest"];
      };
    };
  };
  /** Create a schedule to be used for policy creation */
  createSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreateScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateScheduleWSRequest"];
      };
    };
  };
  /** Create a video intercom policy */
  createVideoIntercomPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_CreateVideoIntercomPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_CreateVideoIntercomPolicyWSRequest"];
      };
    };
  };
  /** Delete an access controlled door policy */
  deleteAccessControlledDoorPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteAccessControlledDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteAccessControlledDoorPolicyWSRequest"];
      };
    };
  };
  /** Delete a audio gateway policy */
  deleteAudioPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteAudioPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteAudioPolicyWSRequest"];
      };
    };
  };
  /** Delete a camera policy */
  deleteCameraPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteCameraPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteCameraPolicyWSRequest"];
      };
    };
  };
  /** Delete a climate policy */
  deleteClimatePolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteClimatePolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteClimatePolicyWSRequest"];
      };
    };
  };
  /** Delete a policy addendums */
  deleteDevicePolicyAddendums: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteDevicePolicyAddendumsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteDevicePolicyAddendumsWSRequest"];
      };
    };
  };
  /** Delete a door sensor policy */
  deleteDoorPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteDoorPolicyWSRequest"];
      };
    };
  };
  /** Delete a policy addendums */
  deleteLocationPolicyAddendum: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteLocationPolicyAddendumWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteLocationPolicyAddendumWSRequest"];
      };
    };
  };
  /** Delete an Occupancy policy */
  deleteOccupancyPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteOccupancyPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteOccupancyPolicyWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a component composite */
  deletePolicyPauseSettingForComponentComposite: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a device */
  deletePolicyPauseSettingForDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSRequest"];
      };
    };
  };
  /** Delete a policy pause setting for a location */
  deletePolicyPauseSettingForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeletePolicyPauseSettingWSRequest"];
      };
    };
  };
  /** Delete an asset tag policy */
  deleteProximityPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteProximityPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteProximityPolicyWSRequest"];
      };
    };
  };
  /** Delete a schedule used for policy creation */
  deleteSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteScheduleWSRequest"];
      };
    };
  };
  /** Delete a video intercom policy */
  deleteVideoIntercomPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteVideoIntercomPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteVideoIntercomPolicyWSRequest"];
      };
    };
  };
  /** Find all schedules in organization */
  findSchedules: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_FindSchedulesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_FindSchedulesWSRequest"];
      };
    };
  };
  /** Get details about all access controlled door policies in organization */
  getAccessControlledDoorPolicies: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetAccessControlledDoorPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetAccessControlledDoorPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all audio gateway policies in organization */
  getAudioPolicies: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetAudioPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetAudioPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all camera policies in organization */
  getCameraPolicies: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetCameraPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetCameraPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all climate policies in organization */
  getClimatePolicies: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetClimatePoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetClimatePoliciesWSRequest"];
      };
    };
  };
  /** Get details about all door sensor policies in organization */
  getDoorPolicies: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetDoorPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetDoorPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all occupancy policies in organization */
  getOccupancyPolicies: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetOccupancyPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetOccupancyPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all climate policies in organization */
  getPoliciesUsingSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetPoliciesUsingScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetPoliciesUsingScheduleWSRequest"];
      };
    };
  };
  /** Get the current and planned policy alert addendums */
  getPolicyAddendums: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetPolicyAddendumsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetPolicyAddendumsWSRequest"];
      };
    };
  };
  /** Get the current and planned policy alert pause details */
  getPolicyPauseSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetPolicyPauseSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetPolicyPauseSettingsWSRequest"];
      };
    };
  };
  /** Get details about all asset tag policies in organization */
  getProximityPolicies: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetProximityPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetProximityPoliciesWSRequest"];
      };
    };
  };
  /** Get details about all video intercom policies in organization */
  getVideoIntercomPolicies: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_GetVideoIntercomPoliciesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_GetVideoIntercomPoliciesWSRequest"];
      };
    };
  };
  /** Pause alert policy for component composite */
  pauseAlertPolicyForComponentComposite: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_PauseAlertPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_PauseAlertPolicyWSRequest"];
      };
    };
  };
  /** Pause alert policy for device */
  pauseAlertPolicyForDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_PauseAlertPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_PauseAlertPolicyWSRequest"];
      };
    };
  };
  /** Pause alert policy for location */
  pauseAlertPolicyForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_PauseAlertPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_PauseAlertPolicyWSRequest"];
      };
    };
  };
  /** Update an access controlled door policy */
  updateAccessControlledDoorPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateAccessControlledDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateAccessControlledDoorPolicyWSRequest"];
      };
    };
  };
  /** Update a audio gateway policy */
  updateAudioPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateAudioPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateAudioPolicyWSRequest"];
      };
    };
  };
  /** Update a camera policy */
  updateCameraPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateCameraPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateCameraPolicyWSRequest"];
      };
    };
  };
  /** Update a climate policy */
  updateClimatePolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateClimatePolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateClimatePolicyWSRequest"];
      };
    };
  };
  /** Update a door sensor policy */
  updateDoorPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateDoorPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateDoorPolicyWSRequest"];
      };
    };
  };
  /** Update an occupancy policy */
  updateOccupancyPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateOccupancyPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateOccupancyPolicyWSRequest"];
      };
    };
  };
  /** Update an asset tag policy */
  updateProximityPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateProximityPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateProximityPolicyWSRequest"];
      };
    };
  };
  /** Update a schedule to be used for policy creation */
  updateSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateScheduleWSRequest"];
      };
    };
  };
  /** Update video intercom policy */
  updateVideoIntercomPolicy: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_UpdateVideoIntercomPolicyWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_UpdateVideoIntercomPolicyWSRequest"];
      };
    };
  };
  /** Get locomotion events for specified proximity tag */
  getLocomotionEventsForTag: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Proximity_GetLocomotionEventsForTagWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Proximity_GetLocomotionEventsForTagWSRequest"];
      };
    };
  };
  /** Get basic state information about all proximity tags in organization */
  getMinimalProximityStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Proximity_GetMinimalProximityStatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Proximity_GetMinimalProximityStatesWSRequest"];
      };
    };
  };
  /** Get recent events for specified proximity tag */
  getProximityEventsForTags: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Proximity_GetProximityEventsForTagWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Proximity_GetProximityEventsForTagWSRequest"];
      };
    };
  };
  /** Update details for a proximity tag */
  updateProximitySensorDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Proximity_UpdateProximitySensorDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Proximity_UpdateProximitySensorDetailsWSRequest"];
      };
    };
  };
  /** Get closest 10 feeds by lat and long */
  getNearbyFeeds: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rapidsos_GetNearbyFeedsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rapidsos_GetNearbyFeedsRequest"];
      };
    };
  };
  /** Assign a third party camera to an NVR */
  assignThirdPartyCameraToNVR: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_AssignThirdPartyCameraToNVRWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_AssignThirdPartyCameraToNVRWSRequest"];
      };
    };
  };
  /** Assign a third party camera to a relay Camera */
  assignThirdPartyCameraToRelayCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_AssignThirdPartyCameraToRelayCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_AssignThirdPartyCameraToRelayCameraWSRequest"];
      };
    };
  };
  /** Authenticate a third party camera, effectively validating the credentials specified to be used for it. */
  authenticateThirdPartyCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_AuthenticateThirdPartyCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_AuthenticateThirdPartyCameraWSRequest"];
      };
    };
  };
  /** Create a third party camera password */
  createThirdPartyCameraPassword: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_CreateThirdPartyCameraPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_CreateThirdPartyCameraPasswordWSRequest"];
      };
    };
  };
  /** Delete a third party camera password */
  deleteThirdPartyCameraPasswords: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_DeleteThirdPartyCameraPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_DeleteThirdPartyCameraPasswordWSRequest"];
      };
    };
  };
  /** Trigger a discovery of cameras on the local LANs */
  executeThirdPartyCameraDiscovery: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_ExecuteThirdPartyCameraDiscoveryWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_ExecuteThirdPartyCameraDiscoveryWSRequest"];
      };
    };
  };
  /** Find default rtsp urls by camera manufacturer. */
  findDefaultRtspUrlsByManufacturer: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_FindDefaultRtspUrlsByManufacturerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_FindDefaultRtspUrlsByManufacturerWSRequest"];
      };
    };
  };
  /** Finds discoveries that have unassigned RTSP endpoints. Only discoveries containing at least one endpoint are returned. */
  findDiscoveriesWithUnassignedRtspEndpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_FindDiscoveriesWithUnassignedRtspEndpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_FindDiscoveriesWithUnassignedRtspEndpointsWSRequest"];
      };
    };
  };
  /** Get a list of the third party cameras assigned to an NVR */
  getAssignedThirdPartyCameras: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_GetAssignedThirdPartyCamerasWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetAssignedThirdPartyCamerasWSRequest"];
      };
    };
  };
  /** Get hardware details of multiple NVRs */
  getNVRDetails: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_GetNVRDetailsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetNVRDetailsWSRequest"];
      };
    };
  };
  /** Get detailed information about state of specified NVR */
  getFullNVRState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_GetFullNVRStateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetFullNVRStateWSRequest"];
      };
    };
  };
  /** Returns format for importing third party cameras. */
  getImportThirdPartyCamerasFormat: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_GetImportThirdPartyCamerasFormatWSResponse"];
        };
      };
    };
  };
  /** Get basic state information about all NVRs in organization */
  getMinimalNVRStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_GetMinimalNVRStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetMinimalNVRStateListWSRequest"];
      };
    };
  };
  /** Get basic state information about all third party cameras in the organization */
  getMinimalThirdPartyCameraStateList: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_GetMinimalThirdPartyCameraStateListWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetMinimalThirdPartyCameraStateListWSRequest"];
      };
    };
  };
  /** Gets rtsp endpoints for device with the specified mac address. */
  getRtspEndpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_GetRtspEndpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetRtspEndpointsWSRequest"];
      };
    };
  };
  /** Get a list of the third party camera passwords */
  getThirdPartyCameraPasswords: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_GetThirdPartyCameraPasswordsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_GetThirdPartyCameraPasswordsWSRequest"];
      };
    };
  };
  /** Imports third party cameras in csv format */
  importThirdPartyCameras: {
    parameters: {
      path: {
        locationUuid: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_ImportThirdPartyCamerasWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          file?: { [key: string]: unknown } | null;
        };
      };
    };
  };
  /** Manually identify a camera on the network */
  manualDiscoverCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_ManualDiscoverThirdPartyCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_ManualDiscoverThirdPartyCameraWSRequest"];
      };
    };
  };
  /** Trigger a pan, tilt, or zoom */
  ptzMove: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_PTZMoveWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_PTZMoveWSRequest"];
      };
    };
  };
  /** Trigger a pan, tilt, or zoom */
  ptz: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_PTZStatusWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_PTZStatusWSRequest"];
      };
    };
  };
  /** Reboot an NVR */
  rebootNVR: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_RebootNVRVWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_RebootNVRVWSRequest"];
      };
    };
  };
  /** Register an NVR to an organization */
  registerNVR: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_RegisterNVRVWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_RegisterNVRVWSRequest"];
      };
    };
  };
  /** Unassign a third party camera from an NVR */
  unassignThirdPartyCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_UnassignThirdPartyCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_UnassignThirdPartyCameraWSRequest"];
      };
    };
  };
  /** Remove an NVR from organization */
  unregisterNVR: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_UnregisterNVRWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_UnregisterNVRWSRequest"];
      };
    };
  };
  /** Update hardware details of NVR. */
  updateNVRDetailsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_UpdateNVRVWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_UpdateNVRVWSRequest"];
      };
    };
  };
  /** Send command to update firmware to NVR */
  updateNVRFirmware: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Relay_UpdateNVRFirmwareWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Relay_UpdateNVRFirmwareWSRequest"];
      };
    };
  };
  /** Get the latest audit logs for organization */
  getAuditFeed: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetAuditFeedWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetAuditFeedWSRequest"];
      };
    };
  };
  /** Get audit logs for a specified entity */
  getAuditFeedForTarget: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetAuditFeedForTargetWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetAuditFeedForTargetWSRequest"];
      };
    };
  };
  /** Get the average report if it is available for the specified count report */
  getAverageReport: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetAverageReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetAverageReportWSRequest"];
      };
    };
  };
  /** Get the average reports if they are available for the specified count report */
  getAverageReports: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetAverageReportsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetAverageReportsWSRequest"];
      };
    };
  };
  /** Use /getCountReportV2 instead */
  getCountReport: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetCountReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCountReportWSRequest"];
      };
    };
  };
  /** Get the specified count reports */
  getCountReportV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetCountReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCountReportV2WSRequest"];
      };
    };
  };
  /** Get multiple specified count reports */
  getCountReports: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetCountReportsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCountReportsWSRequest"];
      };
    };
  };
  /** Get count reports by device for a specified location */
  getCountReportsForDevicesAtLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetCountReportsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetCountReportsForDevicesAtLocationWSRequest"];
      };
    };
  };
  /** Get the latest diagnostic logs for organization */
  getDiagnosticFeed: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetDiagnosticFeedWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetDiagnosticFeedWSRequest"];
      };
    };
  };
  /** Get a list of deliveries from Envoy to populate reporting logs */
  getEnvoyDeliveries: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetEnvoyDeliveriesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetEnvoyDeliveriesWSRequest"];
      };
    };
  };
  /** Get a list of employees from Envoy */
  getEnvoyEmployees: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetEnvoyEmployeesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetEnvoyEmployeesWSRequest"];
      };
    };
  };
  /** Get list of Envoy locations */
  getEnvoyLocations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetEnvoyLocationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetEnvoyLocationsWSRequest"];
      };
    };
  };
  /** Get a list of visitors from Envoy to populate reporting logs */
  getEnvoyVisitors: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetEnvoyVisitorsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetEnvoyVisitorsWSRequest"];
      };
    };
  };
  /** Get the diagnostic logs of supported third-party devices for organization */
  getIntegrationDiagnosticEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetIntegrationDiagnosticEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetIntegrationDiagnosticEventsWSRequest"];
      };
    };
  };
  /** Get license plate counting events for a specified camera */
  getLicensePlatesByDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetLicensePlatesByDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetLicensePlatesByDeviceWSRequest"];
      };
    };
  };
  /** Get the X most recent people counting events for a specified device */
  getMostRecentPeopleCountEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetMostRecentPeopleCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetMostRecentPeopleCountWSRequest"];
      };
    };
  };
  getOccupancyCount: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetOccupancyCountWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetOccupancyCountWSRequest"];
      };
    };
  };
  /**
   * Returns the occupancy count for a specified room or area within a given time range. This endpoint allows you to monitor occupancy trends over time or retrieve a single count for a defined interval.
   * Important: An occupancy region must be defined in the Rhombus Console before using this endpoint.
   * You can optionally specify an interval (e.g., MINUTELY, QUARTERHOURLY, HOURLY ...) to retrieve occupancy counts broken down by sub-intervals between startTime and endTime.
   * If no interval is provided, a single occupancy count is returned for the entire duration between startTime and endTime.
   */
  getOccupancyCounts: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetOccupancyCountsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetOccupancyCountsWSRequest"];
      };
    };
  };
  /** Get proximity tag locations by date */
  getProximityTagLocationsByDate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetProximityTagLocationsByDateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetProximityTagLocationsByDateWSRequest"];
      };
    };
  };
  /** Get the running average for the specified count report if it is available, based on recent data */
  getRunningAverage: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetRunningAverageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetRunningAverageWSRequest"];
      };
    };
  };
  /** Get a summary report for a camera, location, or organization */
  getSummaryCountReport: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetSummaryCountReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetSummaryCountReportWSRequest"];
      };
    };
  };
  getThresholdCrossingCountReport: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetThresholdCrossingCountReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetThresholdCrossingCountReportWSRequest"];
      };
    };
  };
  /** Get the occupancy counts from threshold crossing for a group of cameras over a period of time */
  getThresholdCrossingCounts: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetThresholdCrossingCountsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetThresholdCrossingCountsWSRequest"];
      };
    };
  };
  /** Get the raw threshold crossing events for a group of cameras over a period of time */
  getThresholdCrossingEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetThresholdCrossingEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetThresholdCrossingEventsWSRequest"];
      };
    };
  };
  getThresholdCrossingEventsForDevice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_GetThresholdCrossingEventsForDeviceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_GetThresholdCrossingEventsForDeviceWSRequest"];
      };
    };
  };
  /** Get list of Toast orders to populate events table */
  getToastEventsTable: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetToastEventsTableWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetToastEventsTableWSRequest"];
      };
    };
  };
  /** Get list of Toast orders from all restaurants to populate events table */
  getToastEventsTableAllLocations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Integration_GetToastEventsTableAllLocationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration_GetToastEventsTableAllLocationsWSRequest"];
      };
    };
  };
  /** Reset the running average for the specified count report */
  resetRunningAverage: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Report_ResetRunningAverageWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Report_ResetRunningAverageWSRequest"];
      };
    };
  };
  /** Create a rule */
  createRule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_CreateRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_CreateRuleWSRequest"];
      };
    };
  };
  /** Delete a rule */
  deleteRule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_DeleteRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_DeleteRuleWSRequest"];
      };
    };
  };
  /** Delete a rule pause setting */
  deleteRulePauseSetting: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_DeleteRulePauseSettingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_DeleteRulePauseSettingWSRequest"];
      };
    };
  };
  /** Get the current and planned rule pause details */
  getRulePauseSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_GetRulePauseSettingsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_GetRulePauseSettingsWSRequest"];
      };
    };
  };
  /** Get rules with Uuid and Type filtering */
  getRulesFiltered: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_GetRulesForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_records_GetRulesFilteredWSRequest"];
      };
    };
  };
  /** List rules for org */
  getRulesForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_GetRulesForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_GetRulesForOrgWSRequest"];
      };
    };
  };
  /** Pause rule */
  pauseRule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_PauseRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_PauseRuleWSRequest"];
      };
    };
  };
  /** Update a rule */
  updateRule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_UpdateRuleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_UpdateRuleWSRequest"];
      };
    };
  };
  /** Delete a rules event historical record */
  deleteRulesEventRecord: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_records_DeleteRulesEventRecordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_records_DeleteRulesEventRecordWSRequest"];
      };
    };
  };
  /** Get N latest rules event historical records */
  getLatestRulesEventRecords: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_records_GetLatestRulesEventRecordsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_records_GetLatestRulesEventRecordsWSRequest"];
      };
    };
  };
  /** Find rules event historical records */
  getRulesEventRecords: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Rules_records_GetRulesEventRecordsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rules_records_GetRulesEventRecordsWSRequest"];
      };
    };
  };
  /** Create scene query configuration */
  createPromptConfiguration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Scenequery_CreatePromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_CreatePromptConfigurationWSRequest"];
      };
    };
  };
  /** Delete scene query configuration */
  deletePromptConfiguration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Scenequery_DeletePromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_DeletePromptConfigurationWSRequest"];
      };
    };
  };
  /** Find all scene query configurations */
  findAllPromptConfigurations: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Scenequery_FindAllPromptConfigurationsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_FindAllPromptConfigurationsWSRequest"];
      };
    };
  };
  /** Get scene query configuration */
  getPromptConfiguration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Scenequery_GetPromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_GetPromptConfigurationWSRequest"];
      };
    };
  };
  /** Get report data */
  getReport: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Scenequery_ReportWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_ReportWSRequest"];
      };
    };
  };
  /** Selectively update a scene query configuration */
  selectiveUpdatePromptConfiguration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Scenequery_SelectiveUpdatePromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_SelectiveUpdatePromptConfigurationWSRequest"];
      };
    };
  };
  /** Trigger scene query with a custom prompt */
  triggerPrompt: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Scenequery_TriggerPromptWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_TriggerPromptWSRequest"];
      };
    };
  };
  /** Update scene query configuration */
  updatePromptConfiguration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Scenequery_UpdatePromptConfigurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Scenequery_UpdatePromptConfigurationWSRequest"];
      };
    };
  };
  /** Create a absolute schedule */
  createAbsoluteSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_CreateAbsoluteScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_CreateAbsoluteScheduleWSRequest"];
      };
    };
  };
  /** Create a one-time relative datetime schedule */
  createRelativeDateTimeIntervalsSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_CreateRelativeDateTimeIntervalsScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_CreateRelativeDateTimeIntervalsScheduleWSRequest"];
      };
    };
  };
  /** Create a realtime relative schedule */
  createRelativeSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_CreateRelativeScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_CreateRelativeScheduleWSRequest"];
      };
    };
  };
  /** Create a weekly schedule */
  createWeeklySchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_CreateWeeklyScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_CreateWeeklyScheduleWSRequest"];
      };
    };
  };
  /** Delete a schedule */
  deleteScheduleV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Policy_DeleteScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Policy_DeleteScheduleWSRequest"];
      };
    };
  };
  /** Find an absolute schedule */
  findAbsoluteSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_FindAbsoluteScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_FindAbsoluteScheduleWSRequest"];
      };
    };
  };
  /** Find a one-time relative datetime schedule */
  findRelativeDateTimeIntervalsSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_FindRelativeDateTimeIntervalsScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_FindRelativeDateTimeIntervalsScheduleWSRequest"];
      };
    };
  };
  /** Find a relative schedule */
  findRelativeSchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_FindRelativeScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_FindRelativeScheduleWSRequest"];
      };
    };
  };
  /** Find a weekly schedule */
  findWeeklySchedule: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_FindWeeklyScheduleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_FindWeeklyScheduleWSRequest"];
      };
    };
  };
  /** Get weekly schedules in org with usage data */
  getScheduleData: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_GetScheduleDataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_GetSchedulesWSRequest"];
      };
    };
  };
  /** Get weekly schedules in org with usage data */
  getScheduleDataV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_GetScheduleDataV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_GetScheduleDataV2WSRequest"];
      };
    };
  };
  /** Get schedules in org */
  getSchedules: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Schedule_GetSchedulesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Schedule_GetSchedulesWSRequest"];
      };
    };
  };
  /** Delete video embedding, do not use unless you know what you're doing. */
  deleteVideoEmbedding: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Search_DeleteVideoEmbeddingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_DeleteVideoEmbeddingWSRequest"];
      };
    };
  };
  /** Index video embedding, do not use unless you know what you're doing. */
  indexVideoEmbedding: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Search_IndexVideoEmbeddingWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_IndexVideoEmbeddingWSRequest"];
      };
    };
  };
  /** Fuzzy search for license plate sightings based on a partial or full plate number. Use /vehicle/getVehicleEvents instead. */
  searchLicensePlates: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Search_SearchLicensePlatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchLicensePlatesWSRequest"];
      };
    };
  };
  /** Search for objects by color */
  searchObjectsByColor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Search_SearchObjectsByColorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchObjectsByColorWSRequest"];
      };
    };
  };
  /** Search for similar objects by embedding */
  searchSimilarObjectEmbeddings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsWSRequest"];
      };
    };
  };
  /** Search for similar objects by text */
  searchSimilarObjectEmbeddingsByText: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsByTextWSRequest"];
      };
    };
  };
  /** Search for similar objects by explicit vector */
  searchSimilarObjectEmbeddingsByVector: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarObjectEmbeddingsByVectorWSRequest"];
      };
    };
  };
  /** Search for similar videos by embedding */
  searchSimilarVideoEmbeddings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarVideoEmbeddingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarVideoEmbeddingsWSRequest"];
      };
    };
  };
  /** Search for similar videos by time window */
  searchSimilarVideoEmbeddingsByTimeWindow: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Search_SearchSimilarVideoEmbeddingsByTimeWindowWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Search_SearchSimilarVideoEmbeddingsByTimeWindowWSRequest"];
      };
    };
  };
  /** Get sensor activity seekpoints for camera */
  getSensorFootageSensorSeekpointsForCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForCameraWSRequest"];
      };
    };
  };
  /** Get sensor activity seekpoints for a location */
  getFootageSensorSeekpointsForLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForLocationWSRequest"];
      };
    };
  };
  /** Get sensor activity seekpoints for a sensor */
  getFootageSensorSeekpointsForSensor: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForSensorWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Sensor_GetFootageSensorSeekpointsForSensorWSRequest"];
      };
    };
  };
  getCurrentState: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Camera_GetSharedCameraCurrentStateWSResponse"];
        };
      };
    };
  };
  getShareFootageBoundingBoxes: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedFootageBoundingBoxesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedFootageBoundingBoxesWSRequest"];
      };
    };
  };
  getShareFootageSeekpoints: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedFootageSeekpointsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedFootageSeekpointsWSRequest"];
      };
    };
  };
  getShareFootageSeekpointsV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedFootageSeekpointsV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedFootageSeekpointsV2WSRequest"];
      };
    };
  };
  getMediaUris: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedMediaUrisWSRequest"];
      };
    };
  };
  getSharePresenceWindows: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedPresenceWindowsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedPresenceWindowsWSRequest"];
      };
    };
  };
  getSharedVideoWallMediaUris: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedVideoWallMediaUrisWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedVideoWallMediaUrisWSRequest"];
      };
    };
  };
  getSharedClipData: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedClipDataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedClipDataWSRequest"];
      };
    };
  };
  getSharedLiveStreamInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedLiveStreamInfoWSResponse"];
        };
      };
    };
  };
  getSharedVideoWallInfo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedVideoWallInfoWSResponse"];
        };
      };
    };
  };
  getShareFootageSensorSeekpointsForCamera: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedFootageSensorSeekpointsForCameraWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedFootageSensorSeekpointsForCameraWSRequest"];
      };
    };
  };
  /** Send an email or sms message containing the shared media link */
  shareLink: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_ShareLinkWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_ShareLinkWSRequest"];
      };
    };
  };
  getSharedTimelapseClipData: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedTimelapseDataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedTimelapseDataWSRequest"];
      };
    };
  };
  getSharedTimelapseClipDataV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Share_GetSharedTimelapseDataV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Share_GetSharedTimelapseDataWSRequest"];
      };
    };
  };
  addSupportAuthority: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Support_AddSupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_AddSupportAuthorityWSRequest"];
      };
    };
  };
  allowSupportAuthorityAccess: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Support_AlllowSupportAuthorityAccessWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_AlllowSupportAuthorityAccessWSRequest"];
      };
    };
  };
  findSupportAuthoritySessions: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Support_FindSupportAuthoritySessionsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_FindSupportAuthoritySessionsWSRequest"];
      };
    };
  };
  getSupportAuthorities: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Support_GetSupportAuthoritiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_GetSupportAuthoritiesWSRequest"];
      };
    };
  };
  logoutAllSupportAuthoritySessions: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Support_LogoutAllSupportAuthoritySessionsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_LogoutAllSupportAuthoritySessionsWSRequest"];
      };
    };
  };
  lookupSupportPartnerAuthorities: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Support_LookupSupportPartnerAuthoritiesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_LookupSupportPartnerAuthoritiesWSRequest"];
      };
    };
  };
  removeSupportAuthority: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Support_RemoveSupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_RemoveSupportAuthorityWSRequest"];
      };
    };
  };
  revokeSupportAuthorityAccess: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Support_RevokeSupportAuthorityAccessWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_RevokeSupportAuthorityAccessWSRequest"];
      };
    };
  };
  updateSupportAuthority: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Support_UpdateSupportAuthorityWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Support_UpdateSupportAuthorityWSRequest"];
      };
    };
  };
  /** get specific tvOs config */
  getTvOsConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Tvos_GetTvOsConfigWsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tvos_GetTvOsConfigWsRequest"];
      };
    };
  };
  /** get tvOs configs for org */
  getTvOsConfigsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Tvos_GetTvOsConfigsForOrgWsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tvos_GetTvOsConfigsForOrgWsRequest"];
      };
    };
  };
  /** Update tvOs config */
  updateTvOsConfig: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Tvos_UpdateTvOsConfigWsResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Tvos_UpdateTvOsConfigWsRequest"];
      };
    };
  };
  /** Upload an image of the specified AccessControlledDoor */
  deleteAccessControlledDoorPicture: {
    parameters: {
      path: {
        accessControlledDoorUuidStr: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Upload an image of the specified AccessControlledDoor */
  uploadAccessControlledDoorPicture: {
    parameters: {
      path: {
        accessControlledDoorUuidStr: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload badge template images */
  uploadBadgeTemplateImages: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Bulk upload user profile picture. Each photo must be <= 5MB with a limit of 100 photos at a time */
  bulkUploadUserProfilePhotos: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload company logo */
  uploadCompanyLogo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload error logs */
  uploadErrors: {
    parameters: {
      path: {
        fileName: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload a new floorplan for a location */
  uploadNewFloorPlan: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload a existing floorplan for a location */
  uploadExistingFloorPlan: {
    parameters: {
      path: {
        floorPlanUuid: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload user profile picture */
  uploadGuestProfilePicture: {
    parameters: {
      path: {
        guestEmail: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  uploadKeypadLogo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  uploadRhombusKeyLogo: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Upload an image to be associated with a sensor */
  uploadSensorThumbnails: {
    parameters: {
      path: {
        sensorUuid: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "image/jpeg": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Delete user profile picture */
  deleteUserProfilePicture: {
    parameters: {
      path: {
        userUuidStr: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Upload user profile picture */
  uploadUserProfilePicture: {
    parameters: {
      path: {
        userUuidStr: string | null;
      };
    };
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": unknown;
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["FormDataMultiPart"];
      };
    };
  };
  /** Assign a user to an email as long as the user is not currently assigned to one */
  assignEmailToUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_AssignEmailToUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_AssignEmailToUserWSRequest"];
      };
    };
  };
  /** Change a user's email */
  changeEmail: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_ChangeUserEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_ChangeUserEmailWSRequest"];
      };
    };
  };
  /** Change a user's password */
  changePassword: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_ChangeUserPasswordWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_ChangeUserPasswordWSRequest"];
      };
    };
  };
  /** Create a user for organization */
  createUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_CreateUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_CreateUserWSRequest"];
      };
    };
  };
  /** Delete a user */
  deleteUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_DeleteUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_DeleteUserWSRequest"];
      };
    };
  };
  /** Remove MFA for current user */
  deleteVirtualMfaDeviceForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_DeleteVirtualMfaDeviceForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_DeleteVirtualMfaDeviceForCurrentUserWSRequest"];
      };
    };
  };
  /** Retrieve a specific user by uuid. */
  findUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_FindUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_FindUserWSRequest"];
      };
    };
  };
  /** Retrieve a specific user by email. */
  findUserByEmail: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_FindUserByEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_FindUserByEmailWSRequest"];
      };
    };
  };
  /** Returns format for importing users. */
  getImportUsersFormat: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_GetImportUsersFormatWSResponse"];
        };
      };
    };
  };
  /** Get list of all partners in organization */
  getPartnerUsersInOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Partner_GetPartnerUsersInOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Partner_GetPartnerUsersInOrgWSRequest"];
      };
    };
  };
  /** Retrieve the RhombusKey mobile app config for a user. If it does not exist a default one is created and returned. */
  getRhombusKeyConfigForUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_GetRhombusKeyConfigForUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetRhombusKeyConfigForUserWSRequest"];
      };
    };
  };
  /** Get user's customization flags */
  getUserCustomizationFlags: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_GetUserCustomizationFlagsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetUserCustomizationFlagsWSRequest"];
      };
    };
  };
  /** Get list of all users in organization */
  getUsersInOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_GetUsersInOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetUsersInOrgWSRequest"];
      };
    };
  };
  /** Gets a reduced amount of information about users in the organization to be used for reports. */
  getUsersInOrgForReports: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_GetUsersInOrgForReportsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetUsersInOrgForReportsWSRequest"];
      };
    };
  };
  /** Get details about MFA for current user */
  getVirtualMfaDeviceForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_GetVirtualMfaDeviceForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_GetVirtualMfaDeviceForCurrentUserWSRequest"];
      };
    };
  };
  /** Imports users in csv format */
  importUsers: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_ImportUsersWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          file?: { [key: string]: unknown } | null;
        };
      };
    };
  };
  /** Create a new template user metadata field that will be applicable to all users */
  createUserMetadataFieldTemplate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_metadata_CreateUserMetadataFieldTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_CreateUserMetadataFieldTemplateWSRequest"];
      };
    };
  };
  /** Deletes the specified user's value stored for the specified template */
  deleteUserMetadataField: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_metadata_DeleteUserMetadataFieldWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_DeleteUserMetadataFieldWSRequest"];
      };
    };
  };
  /** Delete a template user metadata field. THIS WILL DELETE THE CUSTOM FIELD AND USER DATA FOR THIS FIELD */
  deleteUserMetadataFieldTemplate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_metadata_DeleteUserMetadataFieldTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_DeleteUserMetadataFieldTemplateWSRequest"];
      };
    };
  };
  /** Find all template user metadata fields for the org */
  findUserMetadataFieldTemplates: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_metadata_FindUserMetadataFieldTemplatesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_FindUserMetadataFieldTemplatesWSRequest"];
      };
    };
  };
  /** Returns the org template metadata fields and the queried users stored values for those fields if they've been set. */
  findUserMetadataFields: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_metadata_FindUserMetadataFieldsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_FindUserMetadataFieldsWSRequest"];
      };
    };
  };
  /** Saves custom metadata values for the user specified. Template IDs that do not map to an actual org metadata template are ignored and values for omitted Template IDs are left as-is. */
  saveUserMetadataFields: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_metadata_SaveUserMetadataFieldsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_SaveUserMetadataFieldsWSRequest"];
      };
    };
  };
  /** Update a template user metadata field that will be applicable to all users */
  updateUserMetadataFieldTemplate: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_metadata_UpdateUserMetadataFieldTemplateWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_metadata_UpdateUserMetadataFieldTemplateWSRequest"];
      };
    };
  };
  /** Send SMS with link to download mobile app */
  sendMobileDownloadSMS: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_SendMobileDownloadSMSWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SendMobileDownloadSMSWSRequest"];
      };
    };
  };
  /** Send partner an email to access client account */
  sendPartnerAccessGrantedEmail: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_SendPartnerAccessGrantedEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SendPartnerAccessGrantedEmailWSRequest"];
      };
    };
  };
  /** Send a rhombus key welcome email to a user */
  sendRhombusKeyUserWelcomeEmail: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_SendRhombusKeyUserWelcomeEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SendRhombusKeyUserWelcomeEmailWSRequest"];
      };
    };
  };
  /** Send a welcome email to a user */
  sendUserWelcomeEmail: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_SendUserWelcomeEmailWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SendUserWelcomeEmailWSRequest"];
      };
    };
  };
  /** Configure MFA for current user */
  setupVirtualMfaDeviceForCurrentUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_SetupVirtualMfaDeviceForCurrentUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_SetupVirtualMfaDeviceForCurrentUserWSRequest"];
      };
    };
  };
  /** Update a partner's details */
  updatePartnerUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_UpdatePartnerWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdatePartnerWSRequest"];
      };
    };
  };
  /** Update notification settings for partner user */
  updatePartnerUserNotificationSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_UpdatePartnerUserNotificationSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdatePartnerUserNotificationSettingsWSRequest"];
      };
    };
  };
  /** Update the RhombusKey mobile app settings for the user */
  updateRhombusKeySettingsForUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_UpdateRhombusKeySettingsForUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateRhombusKeySettingsForUserWSRequest"];
      };
    };
  };
  /** Update a user's details, DEPRECATED[4/28/2025]: use updateUserSelective */
  updateUser: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserWSRequest"];
      };
    };
  };
  /** Update user's customization flags */
  updateUserCustomizationFlags: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserCustomizationFlagsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserCustomizationFlagsWSRequest"];
      };
    };
  };
  /** Update notification settings for user */
  updateUserNotificationSettings: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserNotificationSettingsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserNotificationSettingsWSRequest"];
      };
    };
  };
  /** Selectively updates a user's details. Omitted fields are ignored but fields with null will unset a value */
  updateUserSelective: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["User_UpdateUserSelectiveWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User_UpdateUserSelectiveWSRequest"];
      };
    };
  };
  /** Add a label to a vehicle */
  addVehicleLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_AddVehicleLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_AddVehicleLabelWSRequest"];
      };
    };
  };
  /** Associate vehicle events to a saved vehicle */
  associateEventsToVehicle: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_AssociateEventsToVehicleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_AssociateEventsToVehicleWSRequest"];
      };
    };
  };
  /** Delete a saved vehicle */
  deleteVehicle: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_DeleteVehicleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_DeleteVehicleWSRequest"];
      };
    };
  };
  /** Get recent vehicle events for organization. Use /vehicle/getVehicleEvents instead. */
  getRecentVehicleEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsWSRequest"];
      };
    };
  };
  /** Get recent vehicle events for a location. Use /vehicle/getVehicleEvents instead. */
  getRecentVehicleEventsByLocation: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsByLocationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsByLocationWSRequest"];
      };
    };
  };
  /** Get recent vehicle events for specified vehicle. Use /vehicle/getVehicleEvents instead. */
  getRecentVehicleEventsForVehicle: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsForVehicleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetRecentVehicleEventsForVehicleWSRequest"];
      };
    };
  };
  /** Get vehicle events with filters and additive queries */
  getVehicleEvents: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetVehicleEventsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetVehicleEventsWSRequest"];
      };
    };
  };
  /** Get all vehicle labels for organization */
  getVehicleLabelsForOrg: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetVehicleLabelsForOrgWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetVehicleLabelsForOrgWSRequest"];
      };
    };
  };
  /** Get details of all saved vehicles in organization */
  getVehicles: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_GetVehiclesWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_GetVehiclesWSRequest"];
      };
    };
  };
  /** Remove a label to a vehicle */
  removeVehicleLabel: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_RemoveVehicleLabelWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_RemoveVehicleLabelWSRequest"];
      };
    };
  };
  /** Report a mis-detected license plate event.  This sends the image/clip to Rhombus to better train AI models and removes the event */
  reportVehicleEvent: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_ReportVehicleEventResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_ReportVehicleEventRequest"];
      };
    };
  };
  /** Name and save a vehicle based on license plate number */
  saveVehicle: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Vehicle_SaveVehicleWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Vehicle_SaveVehicleWSRequest"];
      };
    };
  };
  /** Use /cancelSpliceV2 instead */
  cancelSplice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_CancelSpliceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_CancelSpliceWSRequest"];
      };
    };
  };
  /** Cancel a spliced clip request */
  cancelSpliceV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_CancelSpliceV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_CancelSpliceV2WSRequest"];
      };
    };
  };
  /** Share multiple timelapses in one link */
  createSharedTimelapseGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_CreateSharedTimelapseGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_CreateSharedTimelapseGroupWSRequest"];
      };
    };
  };
  /** Delete a shared timelapse link */
  deleteSharedTimelapseGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_DeleteSharedTimelapseGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_DeleteSharedTimelapseGroupWSRequest"];
      };
    };
  };
  /** Delete a timelapse */
  deleteTimelapseClips: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_DeleteTimelapseClipsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_DeleteTimelapseClipsWSRequest"];
      };
    };
  };
  /** Generate a timelapse */
  generateTimelapseClip: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_GenerateTimelapseClipWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GenerateTimelapseClipWSRequest"];
      };
    };
  };
  /** Generate URL to get an exact frame with optional crop from a camera */
  getExactFrameUri: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_GetExactFrameUriWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetExactFrameUriWSRequest"];
      };
    };
  };
  /** Get the max splice duration an organization can set */
  getMaxSpliceDuration: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_GetMaxSpliceDurationWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetMaxSpliceDurationWSRequest"];
      };
    };
  };
  /** Get details of all shared timelapse links for organization */
  getSharedTimelapseGroups: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_GetSharedTimelapseGroupsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetSharedTimelapseGroupsWSRequest"];
      };
    };
  };
  /** Get all spliced clips in progress */
  getSplicedClipsInProgress: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_GetSplicedClipsInProgressWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetSplicedClipsInProgressWSRequest"];
      };
    };
  };
  /** Get all timelapse clips for organization */
  getTimelapseClips: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_GetTimelapseClipsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetTimelapseClipsWSRequest"];
      };
    };
  };
  /** Get information about earliest available timelapse images for cameras */
  getTimelapseMetadata: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_GetTimelapseMetadataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_GetTimelapseMetadataWSRequest"];
      };
    };
  };
  /** Send a request to retry splicing a clip */
  retrySplice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_RetrySpliceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_RetrySpliceWSRequest"];
      };
    };
  };
  /** Use /CreateSharedTimelapseGroup instead */
  shareTimelapseClips: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_ShareTimelapseClipsWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_ShareTimelapseClipsWSRequest"];
      };
    };
  };
  /** Use /spliceV3 instead */
  splice: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_SpliceWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_SpliceWSRequest"];
      };
    };
  };
  /** Send a request to create a single image from a point in time */
  spliceFrame: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_SpliceFrameWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_SpliceFrameWSRequest"];
      };
    };
  };
  /** Use /spliceV3 instead */
  spliceV2: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_SpliceV2WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_SpliceV2WSRequest"];
      };
    };
  };
  /** Send a request to create an arbitrary clip for multiple cameras */
  spliceV3: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_SpliceV3WSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_SpliceV3WSRequest"];
      };
    };
  };
  /** Update title, description, or expiration on a shared timelapse link */
  updateSharedTimelapseGroup: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_UpdateSharedTimelapseGroupWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_UpdateSharedTimelapseGroupWSRequest"];
      };
    };
  };
  /** Update a timelapse clip's editable metadata */
  updateTimelapseClipMetadata: {
    responses: {
      /** default response */
      default: {
        content: {
          "application/json": components["schemas"]["Video_UpdateTimelapseClipMetadataWSResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Video_UpdateTimelapseClipMetadataWSRequest"];
      };
    };
  };
}


export enum ACUDoorCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum ACUDoorLicenseLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum ACUDoorLicenseProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum ACUDoorLicenseStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum AbsoluteSecondsScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum AccessControlAuthenticationResultEnumType {
  ACCEPTED = "ACCEPTED",
  REJECTED = "REJECTED",
  ERROR = "ERROR",
  NA = "NA",
}

export enum AccessControlAuthorizationResultEnumType {
  ALLOWED = "ALLOWED",
  DENIED = "DENIED",
  DISABLED = "DISABLED",
  ERROR = "ERROR",
  NA = "NA",
}

export enum AccessControlCredentialEnumType {
  STANDARD_CSN = "STANDARD_CSN",
  RHOMBUS_SECURE_CSN = "RHOMBUS_SECURE_CSN",
  RHOMBUS_SECURE_MOBILE = "RHOMBUS_SECURE_MOBILE",
  PIN_CODE = "PIN_CODE",
  WIEGAND_H10301 = "WIEGAND_H10301",
  WIEGAND_H10304 = "WIEGAND_H10304",
  WIEGAND_D10202 = "WIEGAND_D10202",
  WIEGAND_64BIT_RAW = "WIEGAND_64BIT_RAW",
}

export enum AccessControlCredentialWorkflowStatusEnumType {
  ACTIVE = "ACTIVE",
  UNASSIGNED = "UNASSIGNED",
  SUSPENDED = "SUSPENDED",
  REVOKED = "REVOKED",
}

export enum AccessControlUnitTamperSourceEnumType {
  PROX = "PROX",
  ACCEL = "ACCEL",
  SWITCH = "SWITCH",
  NA = "NA",
}

export enum AccessControlledDoorPolicyAlertTypeEnum {
  POLICY_ALERT_V2 = "POLICY_ALERT_V2",
  ACCESS_CONTROLLED_DOOR_POLICY_ALERT = "ACCESS_CONTROLLED_DOOR_POLICY_ALERT",
}

export enum AccessControlledDoorStateEnumType {
  UNLOCKED = "UNLOCKED",
  ACCESS_CONTROLLED = "ACCESS_CONTROLLED",
}

export enum AccessControlledDoorSubTypeEnum {
  RHOMBUS = "RHOMBUS",
  APERIO = "APERIO",
}

export enum MinimalSubTypeEnum {
  RHOMBUS = "RHOMBUS",
  APERIO = "APERIO",
}

export enum BaseSendUserPresenceForCurrentUserWsResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum SendUserPresenceForCurrentUserErrorWsResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum SendUserPresenceForCurrentUserSuccessWsResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum UnlockAccessControlledDoorErrorWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum UnlockAccessControlledDoorErrorWSResponseErrorTypeEnum {
  FAILED_SENDING_ACU_UNLOCK_REQUEST = "FAILED_SENDING_ACU_UNLOCK_REQUEST",
  DOOR_NOT_CONFIGURED_WITH_LOCK = "DOOR_NOT_CONFIGURED_WITH_LOCK",
}

export enum UnlockAccessControlledDoorForCurrentUserErrorWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum UnlockAccessControlledDoorForCurrentUserErrorWSResponseErrorTypeEnum {
  INACTIVE_CREDENTIAL = "INACTIVE_CREDENTIAL",
  FAILED_SENDING_ACU_UNLOCK_REQUEST = "FAILED_SENDING_ACU_UNLOCK_REQUEST",
  GEOFENCE_RESTRICTED = "GEOFENCE_RESTRICTED",
  DOOR_NOT_CONFIGURED_WITH_LOCK = "DOOR_NOT_CONFIGURED_WITH_LOCK",
}

export enum UnlockAccessControlledDoorForCurrentUserSuccessWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum UnlockAccessControlledDoorSuccessWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum BaseProvisionMobileAccessControlCredentialForCurrentUserWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum BaseUnlockAccessControlledDoorForCurrentUserWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum BaseUnlockAccessControlledDoorWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum ProvisionMobileAccessControlCredentialForCurrentUserErrorWSResponseErrorTypeEnum {
  USER_HAS_MAX_ALLOWED_CREDENTIALS = "USER_HAS_MAX_ALLOWED_CREDENTIALS",
}

export enum ProvisionMobileAccessControlCredentialForCurrentUserSuccessWSResponseTypeEnum {
  ERROR = "ERROR",
  SUCCESS = "SUCCESS",
}

export enum ActivityEnum {
  SOUND_LOUD = "SOUND_LOUD",
  SOUND_GUN_SHOT = "SOUND_GUN_SHOT",
  TAMPER = "TAMPER",
  VISUAL_TAMPER = "VISUAL_TAMPER",
  MOTION_TAMPER = "MOTION_TAMPER",
  MOTION = "MOTION",
  MOTION_HUMAN = "MOTION_HUMAN",
  MOTION_CAR = "MOTION_CAR",
  MOTION_ANIMAL = "MOTION_ANIMAL",
  FACE = "FACE",
  FACE_IDENTIFIED = "FACE_IDENTIFIED",
  FACE_UNIDENTIFIED = "FACE_UNIDENTIFIED",
  FACE_BLACKLISTED = "FACE_BLACKLISTED",
  FACE_ALERT = "FACE_ALERT",
  POSE_ANOMALOUS = "POSE_ANOMALOUS",
  POSE_FALL = "POSE_FALL",
  LICENSEPLATE = "LICENSEPLATE",
  LICENSEPLATE_IDENTIFIED = "LICENSEPLATE_IDENTIFIED",
  LICENSEPLATE_UNIDENTIFIED = "LICENSEPLATE_UNIDENTIFIED",
  LICENSEPLATE_ALERT = "LICENSEPLATE_ALERT",
  LICENSEPLATE_BLACKLISTED = "LICENSEPLATE_BLACKLISTED",
  LICENSEPLATE_TRUSTED = "LICENSEPLATE_TRUSTED",
  PEOPLECOUNT_HIGH = "PEOPLECOUNT_HIGH",
  PEOPLECOUNT_HIGH_RESET = "PEOPLECOUNT_HIGH_RESET",
  PEOPLECOUNT_LOW = "PEOPLECOUNT_LOW",
  PEOPLECOUNT_LOW_RESET = "PEOPLECOUNT_LOW_RESET",
  HUMAN_ENTER = "HUMAN_ENTER",
  HUMAN_EXIT = "HUMAN_EXIT",
  CAR_ENTER = "CAR_ENTER",
  CAR_EXIT = "CAR_EXIT",
  TEMPERATURE_EXCEEDED_HIGH = "TEMPERATURE_EXCEEDED_HIGH",
  TEMPERATURE_EXCEEDED_LOW = "TEMPERATURE_EXCEEDED_LOW",
  HUMIDITY_EXCEEDED_HIGH = "HUMIDITY_EXCEEDED_HIGH",
  HUMIDITY_EXCEEDED_LOW = "HUMIDITY_EXCEEDED_LOW",
  PM25_EXCEEDED_HIGH = "PM25_EXCEEDED_HIGH",
  TVOC_EXCEEDED_HIGH = "TVOC_EXCEEDED_HIGH",
  ETOH_EXCEEDED_HIGH = "ETOH_EXCEEDED_HIGH",
  IAQ_EXCEEDED_HIGH = "IAQ_EXCEEDED_HIGH",
  CO2_EXCEEDED_HIGH = "CO2_EXCEEDED_HIGH",
  CO2_EXCEEDED_LOW = "CO2_EXCEEDED_LOW",
  PROBE_TEMPERATURE_EXCEEDED_HIGH = "PROBE_TEMPERATURE_EXCEEDED_HIGH",
  PROBE_TEMPERATURE_EXCEEDED_LOW = "PROBE_TEMPERATURE_EXCEEDED_LOW",
  PROBE_DISCONNECTED = "PROBE_DISCONNECTED",
  PROBE_CONNECTED = "PROBE_CONNECTED",
  HEAT_INDEX_EXCEEDED_HIGH = "HEAT_INDEX_EXCEEDED_HIGH",
  PRESSURE_EXCEEDED_HIGH = "PRESSURE_EXCEEDED_HIGH",
  PRESSURE_EXCEEDED_LOW = "PRESSURE_EXCEEDED_LOW",
  PM10_EXCEEDED_HIGH = "PM10_EXCEEDED_HIGH",
  PM40_EXCEEDED_HIGH = "PM40_EXCEEDED_HIGH",
  PM100_EXCEEDED_HIGH = "PM100_EXCEEDED_HIGH",
  VOC_IDX_EXCEEDED_HIGH = "VOC_IDX_EXCEEDED_HIGH",
  NOX_IDX_EXCEEDED_HIGH = "NOX_IDX_EXCEEDED_HIGH",
  FORMALDEHYDE_EXCEEDED_HIGH = "FORMALDEHYDE_EXCEEDED_HIGH",
  CARBON_MONOXIDE_EXCEEDED_HIGH = "CARBON_MONOXIDE_EXCEEDED_HIGH",
  AQI_EXCEEDED_HIGH = "AQI_EXCEEDED_HIGH",
  DOOR_AJAR = "DOOR_AJAR",
  DOOR_OPENED = "DOOR_OPENED",
  DOOR_CLOSED = "DOOR_CLOSED",
  BUTTON_SINGLE_PRESSED = "BUTTON_SINGLE_PRESSED",
  BUTTON_DOUBLE_PRESSED = "BUTTON_DOUBLE_PRESSED",
  BUTTON_LONG_PRESSED = "BUTTON_LONG_PRESSED",
  TAG_ARRIVED = "TAG_ARRIVED",
  TAG_DEPARTED = "TAG_DEPARTED",
  TAG_MOVED = "TAG_MOVED",
  TAG_POSITIONING_CHANGED = "TAG_POSITIONING_CHANGED",
  TAG_BOUNDARY_INGRESS = "TAG_BOUNDARY_INGRESS",
  TAG_BOUNDARY_EGRESS = "TAG_BOUNDARY_EGRESS",
  TAG_PANIC = "TAG_PANIC",
  BADGE_AUTHORIZED = "BADGE_AUTHORIZED",
  BADGE_UNAUTHORIZED = "BADGE_UNAUTHORIZED",
  BADGE_UNAUTHORIZED_V2 = "BADGE_UNAUTHORIZED_V2",
  BADGE_AJAR = "BADGE_AJAR",
  BADGE_MANUAL = "BADGE_MANUAL",
  BADGE_FORCED_OPEN = "BADGE_FORCED_OPEN",
  BADGE_LOCKDOWN = "BADGE_LOCKDOWN",
  BADGE_REQUEST_TO_EXIT = "BADGE_REQUEST_TO_EXIT",
  BADGE_DURESS = "BADGE_DURESS",
  BADGE_SECURITY_BREACH = "BADGE_SECURITY_BREACH",
  BADGE_TAMPER = "BADGE_TAMPER",
  BADGE_FACE_MISMATCH = "BADGE_FACE_MISMATCH",
  POS_ORDER = "POS_ORDER",
  GUN_DETECT_EVENT = "GUN_DETECT_EVENT",
  IOT_SOUND_AGGRESSION = "IOT_SOUND_AGGRESSION",
  IOT_SOUND_HELP = "IOT_SOUND_HELP",
  IOT_AIR_CO = "IOT_AIR_CO",
  IOT_AIR_CO2 = "IOT_AIR_CO2",
  IOT_AIR_MASKING = "IOT_AIR_MASKING",
  IOT_AIR_THC = "IOT_AIR_THC",
  IOT_AIR_VAPE = "IOT_AIR_VAPE",
  IOT_AIR_VOC = "IOT_AIR_VOC",
  IOT_AIR_TEMP = "IOT_AIR_TEMP",
  IOT_TAMPER = "IOT_TAMPER",
  IOT_GUNSHOT = "IOT_GUNSHOT",
  IOT_BUTTON_SINGLE_CLICK = "IOT_BUTTON_SINGLE_CLICK",
  IOT_BUTTON_DOUBLE_CLICK = "IOT_BUTTON_DOUBLE_CLICK",
  IOT_BUTTON_HOLD = "IOT_BUTTON_HOLD",
  IOT_PANIC_BUTTON_TRIGGERED = "IOT_PANIC_BUTTON_TRIGGERED",
  AUDIO_SOUND_SIGNIFICANT = "AUDIO_SOUND_SIGNIFICANT",
  AUDIO_SOUND_LOUD = "AUDIO_SOUND_LOUD",
  AUDIO_SOUND_ABUSIVE = "AUDIO_SOUND_ABUSIVE",
  AUDIO_SOUND_GREETING = "AUDIO_SOUND_GREETING",
  AUDIO_SOUND_HELP = "AUDIO_SOUND_HELP",
  AUDIO_SOUND_GUN = "AUDIO_SOUND_GUN",
  AUDIO_SOUND_GLASS_BREAK = "AUDIO_SOUND_GLASS_BREAK",
  AUDIO_SOUND_ALARM_SMOKE_FIRE = "AUDIO_SOUND_ALARM_SMOKE_FIRE",
  AUDIO_SOUND_ALARM_CARBON_MONOXIDE = "AUDIO_SOUND_ALARM_CARBON_MONOXIDE",
  AUDIO_SOUND_SIREN = "AUDIO_SOUND_SIREN",
  CLIMATE_VOC = "CLIMATE_VOC",
  CLIMATE_VAPE = "CLIMATE_VAPE",
  CLIMATE_SMOKE = "CLIMATE_SMOKE",
  CLIMATE_THC = "CLIMATE_THC",
  CLIMATE_CO2 = "CLIMATE_CO2",
  CLIMATE_ETOH = "CLIMATE_ETOH",
  CLIMATE_PM25 = "CLIMATE_PM25",
  CLIMATE_IAQ = "CLIMATE_IAQ",
  CLIMATE_LEAK = "CLIMATE_LEAK",
  SOUND_AGGRESSION = "SOUND_AGGRESSION",
  SOUND_HELP = "SOUND_HELP",
  AIR_CO = "AIR_CO",
  AIR_CO2 = "AIR_CO2",
  AIR_MASKING = "AIR_MASKING",
  AIR_THC = "AIR_THC",
  AIR_VAPE = "AIR_VAPE",
  AIR_VOC = "AIR_VOC",
  MASK_MISSING = "MASK_MISSING",
  HELMET_MISSING = "HELMET_MISSING",
  GLOVES_MISSING = "GLOVES_MISSING",
  PIR_OCCUPIED = "PIR_OCCUPIED",
  PIR_MOVEMENT = "PIR_MOVEMENT",
  PIR_VACANT = "PIR_VACANT",
  CUSTOM = "CUSTOM",
  VISITOR_ARRIVED = "VISITOR_ARRIVED",
  VISITOR_DEPARTED = "VISITOR_DEPARTED",
  AC_DR_CONNECTED = "AC_DR_CONNECTED",
  AC_DR_DISCONNECTED = "AC_DR_DISCONNECTED",
  AC_DPI_DOOR_OPEN = "AC_DPI_DOOR_OPEN",
  AC_DPI_DOOR_CLOSED = "AC_DPI_DOOR_CLOSED",
  AC_DPI_DOOR_AJAR = "AC_DPI_DOOR_AJAR",
  AC_DPI_DOOR_FORCED_OPEN = "AC_DPI_DOOR_FORCED_OPEN",
  AC_DSR_UNLOCKED = "AC_DSR_UNLOCKED",
  AC_DSR_LOCKED = "AC_DSR_LOCKED",
  AC_DB_TRIGGERED = "AC_DB_TRIGGERED",
  AC_PANIC_BUTTON_TRIGGERED = "AC_PANIC_BUTTON_TRIGGERED",
  AC_REMOTE_UNLOCK = "AC_REMOTE_UNLOCK",
  AC_BADGE_AUTHORIZED = "AC_BADGE_AUTHORIZED",
  AC_BADGE_UNAUTHORIZED = "AC_BADGE_UNAUTHORIZED",
  AC_BADGE_FACE_MISMATCH = "AC_BADGE_FACE_MISMATCH",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_TAMPER_PROX = "AC_TAMPER_PROX",
  AC_TAMPER_ACCEL = "AC_TAMPER_ACCEL",
  AC_TAMPER_SWITCH = "AC_TAMPER_SWITCH",
  AC_GR_ACTIVE = "AC_GR_ACTIVE",
  AC_GR_INACTIVE = "AC_GR_INACTIVE",
  AC_GI_ACTIVE = "AC_GI_ACTIVE",
  AC_GI_INACTIVE = "AC_GI_INACTIVE",
  AC_REX_ACTIVE = "AC_REX_ACTIVE",
  AC_REX_INACTIVE = "AC_REX_INACTIVE",
  AC_APERIO_DEVICE_DISCONNECTED = "AC_APERIO_DEVICE_DISCONNECTED",
  AC_APERIO_DEVICE_CONNECTED = "AC_APERIO_DEVICE_CONNECTED",
  AC_APERIO_DEVICE_REBOOT = "AC_APERIO_DEVICE_REBOOT",
  AC_APERIO_DEVICE_TAMPER = "AC_APERIO_DEVICE_TAMPER",
  AC_APERIO_LOW_BATTERY = "AC_APERIO_LOW_BATTERY",
  AC_APERIO_FLAT_BATTERY = "AC_APERIO_FLAT_BATTERY",
  AC_APERIO_OK_BATTERY = "AC_APERIO_OK_BATTERY",
  POWER_SWITCH_BATTERY = "POWER_SWITCH_BATTERY",
  POWER_SWITCH_PRIMARY = "POWER_SWITCH_PRIMARY",
  UNKNOWN = "UNKNOWN",
}

export enum AddOnLicenseEnum {
  CLOUD_ARCHIVING = "CLOUD_ARCHIVING",
  PERCEPTION = "PERCEPTION",
  POSE = "POSE",
  BEHAVIOR = "BEHAVIOR",
  VEHICLE = "VEHICLE",
  PEOPLE = "PEOPLE",
  PPE = "PPE",
  PEOPLE_ANALYTICS = "PEOPLE_ANALYTICS",
  UNKNOWN = "UNKNOWN",
}

export enum AirQualityIndexPollutantEnum {
  OZONE = "OZONE",
  PM2P5 = "PM2P5",
  PM10P0 = "PM10P0",
  CO = "CO",
  NO2 = "NO2",
  SO2 = "SO2",
  UNKNOWN = "UNKNOWN",
}

export enum AlertActionStatusEnum {
  SUCCESS = "SUCCESS",
  ERROR = "ERROR",
  PAUSED = "PAUSED",
  IGNORED = "IGNORED",
  MUTED = "MUTED",
  BACKOFF = "BACKOFF",
  UNKNOWN = "UNKNOWN",
}

export enum AlertMonitoringCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum AlertMonitoringLicenseLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum AlertMonitoringLicenseProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum AlertMonitoringLicenseStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum AlertMonitoringRulesEventTypeEnum {
  ALARM_CREATED = "ALARM_CREATED",
  ALARM_CANCELED = "ALARM_CANCELED",
  UNKNOWN = "UNKNOWN",
}

export enum AmModifiedByEventEnum {
  UPDATED = "UPDATED",
  CREATED = "CREATED",
  DELETED = "DELETED",
  ARMED = "ARMED",
  DISARMED = "DISARMED",
  NO_CHANGE = "NO_CHANGE",
}

export enum NoonlightWSSettingsMonitoringModeEnum {
  MANUAL = "MANUAL",
  SCHEDULED = "SCHEDULED",
  UNKNOWN = "UNKNOWN",
}

export enum ApiClientTypeEnum {
  PARTNER_DEVELOPER = "PARTNER_DEVELOPER",
  DEVELOPER = "DEVELOPER",
  INTERNAL_SALESFORCE = "INTERNAL_SALESFORCE",
  TVOS = "TVOS",
  KIOSK = "KIOSK",
  KEYPAD = "KEYPAD",
  SQUARE = "SQUARE",
  KISI = "KISI",
  OPENPATH = "OPENPATH",
  TOAST = "TOAST",
  BRIVO = "BRIVO",
  EXECUTABLE = "EXECUTABLE",
  HALO = "HALO",
  SALTO = "SALTO",
  BUTTERFLYMX = "BUTTERFLYMX",
  GENEA = "GENEA",
  PRODATAKEY = "PRODATAKEY",
  ENVOY = "ENVOY",
  AMT = "AMT",
  PIMLOC = "PIMLOC",
  PLACEOS = "PLACEOS",
  OMNIALERT = "OMNIALERT",
  FLIC = "FLIC",
  NINEONEONECELLULAR = "NINEONEONECELLULAR",
  UNKNOWN = "UNKNOWN",
}

export enum ApiTokenAuthTypeEnum {
  API_TOKEN = "API_TOKEN",
  CERT = "CERT",
}

export enum AudioGatewayStatusEnum {
  SUCCESS = "SUCCESS",
  ERROR = "ERROR",
  BACKOFF = "BACKOFF",
  IGNORED = "IGNORED",
  SUBMITTED = "SUBMITTED",
  UNKNOWN = "UNKNOWN",
}

export enum DeleteAudioGatewayWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum AuthDecisionSourceEnum {
  ACCESS_GRANT = "ACCESS_GRANT",
  ACCESS_REVOCATION = "ACCESS_REVOCATION",
  LOCKDOWN = "LOCKDOWN",
  FIRST_IN_SETTINGS = "FIRST_IN_SETTINGS",
  CONFIG = "CONFIG",
  ADMIN = "ADMIN",
  PRIVACY = "PRIVACY",
  ERROR = "ERROR",
  UNKNOWN = "UNKNOWN",
}

export enum AuxiliaryEnumType {
  integrated_generic_input = "integrated_generic_input",
  integrated_generic_relay = "integrated_generic_relay",
}

export enum AuxiliaryInputPhysicalPortEnumType {
  GPIO_INPUT = "GPIO_INPUT",
  GPIO_INPUT_SUPERVISED = "GPIO_INPUT_SUPERVISED",
}

export enum AuxiliaryRelayPhysicalPortEnumType {
  GPIO_OUTPUT = "GPIO_OUTPUT",
}

export enum BadgeTemplateElementEnum {
  CUSTOM_TEXT = "CUSTOM_TEXT",
  USER_METADATA = "USER_METADATA",
  USER_CUSTOM_METADATA = "USER_CUSTOM_METADATA",
  CUSTOM_IMAGE = "CUSTOM_IMAGE",
  USER_PROFILE_PHOTO = "USER_PROFILE_PHOTO",
}

export enum DeleteBadgeReaderWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum BaseCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum BaseClaimKeyExpirationEmailStateEnum {
  NINETY_DAY_EMAIL_SUCCEEDED = "NINETY_DAY_EMAIL_SUCCEEDED",
  NINETY_DAY_EMAIL_FAILED = "NINETY_DAY_EMAIL_FAILED",
  SIXTY_DAY_EMAIL_SUCCEEDED = "SIXTY_DAY_EMAIL_SUCCEEDED",
  SIXTY_DAY_EMAIL_FAILED = "SIXTY_DAY_EMAIL_FAILED",
  FOURTY_FIVE_DAY_EMAIL_SUCCEEDED = "FOURTY_FIVE_DAY_EMAIL_SUCCEEDED",
  FOURTY_FIVE_DAY_EMAIL_FAILED = "FOURTY_FIVE_DAY_EMAIL_FAILED",
  THIRTY_DAY_EMAIL_SUCCEEDED = "THIRTY_DAY_EMAIL_SUCCEEDED",
  THIRTY_DAY_EMAIL_FAILED = "THIRTY_DAY_EMAIL_FAILED",
  TWENTY_ONE_DAY_EMAIL_SUCCEEDED = "TWENTY_ONE_DAY_EMAIL_SUCCEEDED",
  TWENTY_ONE_DAY_EMAIL_FAILED = "TWENTY_ONE_DAY_EMAIL_FAILED",
  FOURTEEN_DAY_EMAIL_SUCCEEDED = "FOURTEEN_DAY_EMAIL_SUCCEEDED",
  FOURTEEN_DAY_EMAIL_FAILED = "FOURTEEN_DAY_EMAIL_FAILED",
  TEN_DAY_EMAIL_SUCCEEDED = "TEN_DAY_EMAIL_SUCCEEDED",
  TEN_DAY_EMAIL_FAILED = "TEN_DAY_EMAIL_FAILED",
  FIVE_DAY_EMAIL_SUCCEEDED = "FIVE_DAY_EMAIL_SUCCEEDED",
  FIVE_DAY_EMAIL_FAILED = "FIVE_DAY_EMAIL_FAILED",
  FOUR_DAY_EMAIL_SUCCEEDED = "FOUR_DAY_EMAIL_SUCCEEDED",
  FOUR_DAY_EMAIL_FAILED = "FOUR_DAY_EMAIL_FAILED",
  THREE_DAY_EMAIL_SUCCEEDED = "THREE_DAY_EMAIL_SUCCEEDED",
  THREE_DAY_EMAIL_FAILED = "THREE_DAY_EMAIL_FAILED",
  TWO_DAY_EMAIL_SUCCEEDED = "TWO_DAY_EMAIL_SUCCEEDED",
  TWO_DAY_EMAIL_FAILED = "TWO_DAY_EMAIL_FAILED",
  ONE_DAY_EMAIL_SUCCEEDED = "ONE_DAY_EMAIL_SUCCEEDED",
  ONE_DAY_EMAIL_FAILED = "ONE_DAY_EMAIL_FAILED",
  ZERO_DAY_EMAIL_SUCCEEDED = "ZERO_DAY_EMAIL_SUCCEEDED",
  ZERO_DAY_EMAIL_FAILED = "ZERO_DAY_EMAIL_FAILED",
  GRACE_PERIOD_EMAILS_IN_PROGRESS = "GRACE_PERIOD_EMAILS_IN_PROGRESS",
  GRACE_PERIOD_EMAILS_COMPLETED = "GRACE_PERIOD_EMAILS_COMPLETED",
  UNKNOWN = "UNKNOWN",
}

export enum BaseClaimKeyStateEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum BaseClaimKeyTypeEnum {
  NEW = "NEW",
  RENEWAL = "RENEWAL",
}

export enum BaseLicenseLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum BaseLicenseProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum BaseLicenseStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum BasePolicyAlertTypeEnum {
  POLICY_ALERT_V2 = "POLICY_ALERT_V2",
  ACCESS_CONTROLLED_DOOR_POLICY_ALERT = "ACCESS_CONTROLLED_DOOR_POLICY_ALERT",
}

export enum BaseSavedScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum MinimalStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum ButtonEnumType {
  integrated_generic_button = "integrated_generic_button",
  integrated_doorbell_button = "integrated_doorbell_button",
}

export enum ButtonModeEnum {
  PANIC = "PANIC",
  PROGRAMMABLE = "PROGRAMMABLE",
  DOORBELL = "DOORBELL",
  NONE = "NONE",
}

export enum ButtonPhysicalPortEnumType {
  GPIO_INPUT = "GPIO_INPUT",
  BUTTON_INPUT = "BUTTON_INPUT",
}

export enum ButtonPressEnum {
  NONE = "NONE",
  SINGLE = "SINGLE",
  DOUBLE = "DOUBLE",
  LONG = "LONG",
  INITIAL_PRESS = "INITIAL_PRESS",
  LONG_RELEASE = "LONG_RELEASE",
}

export enum Button_ButtonHealthDetailsEnum {
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NO_HEARTBEAT = "NO_HEARTBEAT",
  NONE = "NONE",
}

export enum Button_ButtonHealthEnum {
  GREEN = "GREEN",
  RED = "RED",
}

export enum CameraCrossCountingSettingsDirectionsEnum {
  INGRESS = "INGRESS",
  EGRESS = "EGRESS",
}

export enum CameraCrossCountingSettingsObjectTypeEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  UNKNOWN = "UNKNOWN",
}

export enum CameraCurrentStateConnectionStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  GREEN = "GREEN",
}

export enum CameraCurrentStateHealthStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  GREEN = "GREEN",
}

export enum CameraCurrentStateHealthStatusDetailsEnum {
  DISCONNECTED = "DISCONNECTED",
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NONE = "NONE",
}

export enum DeleteCameraWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum MinimalCameraConnectionStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  GREEN = "GREEN",
}

export enum MinimalCameraHealthStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  GREEN = "GREEN",
}

export enum MinimalCameraHealthStatusDetailsEnum {
  DISCONNECTED = "DISCONNECTED",
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NONE = "NONE",
}

export enum RebootCameraWSResponseStatusEnum {
  SUCCESS_REBOOT_SENT = "SUCCESS_REBOOT_SENT",
  FAILED_CAMERA_OFFLINE = "FAILED_CAMERA_OFFLINE",
  FAILED_CAMERA_NOT_AUTHORIZED = "FAILED_CAMERA_NOT_AUTHORIZED",
}

export enum SharedCameraCurrentStateConnectionStatusEnum {
  GREEN = "GREEN",
  RED = "RED",
}

export enum UpdateCameraFirmwareWSResponseStatusEnum {
  ALREADY_ON_THE_LATEST_FIRMWARE = "ALREADY_ON_THE_LATEST_FIRMWARE",
  DEVICE_ON_A_SPECIAL_FIRMWARE_AND_CANNOT_BE_UPDATED = "DEVICE_ON_A_SPECIAL_FIRMWARE_AND_CANNOT_BE_UPDATED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UNABLE_TO_REACH_DEVICE = "UNABLE_TO_REACH_DEVICE",
  FIRMWARE_UPDATE_ALREADY_IN_PROGESS = "FIRMWARE_UPDATE_ALREADY_IN_PROGESS",
  DEVICE_NOT_AUTHROIZED = "DEVICE_NOT_AUTHROIZED",
}

export enum UpdateCameraLineCrossingThresholdsWSRequestDirectionsEnum {
  INGRESS = "INGRESS",
  EGRESS = "EGRESS",
}

export enum UpdateCameraLineCrossingThresholdsWSRequestObjectTypeEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  UNKNOWN = "UNKNOWN",
}

export enum ChangeTypeEnum {
  REFRESH = "REFRESH",
  DELETE = "DELETE",
  CREATE = "CREATE",
  UPDATE = "UPDATE",
}

export enum ClaimKeyExpirationEmailStateEnum {
  NINETY_DAY_EMAIL_SUCCEEDED = "NINETY_DAY_EMAIL_SUCCEEDED",
  NINETY_DAY_EMAIL_FAILED = "NINETY_DAY_EMAIL_FAILED",
  SIXTY_DAY_EMAIL_SUCCEEDED = "SIXTY_DAY_EMAIL_SUCCEEDED",
  SIXTY_DAY_EMAIL_FAILED = "SIXTY_DAY_EMAIL_FAILED",
  FOURTY_FIVE_DAY_EMAIL_SUCCEEDED = "FOURTY_FIVE_DAY_EMAIL_SUCCEEDED",
  FOURTY_FIVE_DAY_EMAIL_FAILED = "FOURTY_FIVE_DAY_EMAIL_FAILED",
  THIRTY_DAY_EMAIL_SUCCEEDED = "THIRTY_DAY_EMAIL_SUCCEEDED",
  THIRTY_DAY_EMAIL_FAILED = "THIRTY_DAY_EMAIL_FAILED",
  TWENTY_ONE_DAY_EMAIL_SUCCEEDED = "TWENTY_ONE_DAY_EMAIL_SUCCEEDED",
  TWENTY_ONE_DAY_EMAIL_FAILED = "TWENTY_ONE_DAY_EMAIL_FAILED",
  FOURTEEN_DAY_EMAIL_SUCCEEDED = "FOURTEEN_DAY_EMAIL_SUCCEEDED",
  FOURTEEN_DAY_EMAIL_FAILED = "FOURTEEN_DAY_EMAIL_FAILED",
  TEN_DAY_EMAIL_SUCCEEDED = "TEN_DAY_EMAIL_SUCCEEDED",
  TEN_DAY_EMAIL_FAILED = "TEN_DAY_EMAIL_FAILED",
  FIVE_DAY_EMAIL_SUCCEEDED = "FIVE_DAY_EMAIL_SUCCEEDED",
  FIVE_DAY_EMAIL_FAILED = "FIVE_DAY_EMAIL_FAILED",
  FOUR_DAY_EMAIL_SUCCEEDED = "FOUR_DAY_EMAIL_SUCCEEDED",
  FOUR_DAY_EMAIL_FAILED = "FOUR_DAY_EMAIL_FAILED",
  THREE_DAY_EMAIL_SUCCEEDED = "THREE_DAY_EMAIL_SUCCEEDED",
  THREE_DAY_EMAIL_FAILED = "THREE_DAY_EMAIL_FAILED",
  TWO_DAY_EMAIL_SUCCEEDED = "TWO_DAY_EMAIL_SUCCEEDED",
  TWO_DAY_EMAIL_FAILED = "TWO_DAY_EMAIL_FAILED",
  ONE_DAY_EMAIL_SUCCEEDED = "ONE_DAY_EMAIL_SUCCEEDED",
  ONE_DAY_EMAIL_FAILED = "ONE_DAY_EMAIL_FAILED",
  ZERO_DAY_EMAIL_SUCCEEDED = "ZERO_DAY_EMAIL_SUCCEEDED",
  ZERO_DAY_EMAIL_FAILED = "ZERO_DAY_EMAIL_FAILED",
  GRACE_PERIOD_EMAILS_IN_PROGRESS = "GRACE_PERIOD_EMAILS_IN_PROGRESS",
  GRACE_PERIOD_EMAILS_COMPLETED = "GRACE_PERIOD_EMAILS_COMPLETED",
  UNKNOWN = "UNKNOWN",
}

export enum ClaimKeyStateEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum ClaimKeyTypeEnum {
  NEW = "NEW",
  RENEWAL = "RENEWAL",
}

export enum ClaimKeySearchFilterExcludedStatesEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum ClaimKeySearchFilterIncludedStatesEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum DeleteEnvironmentalGatewayWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum MinimalClimateStateHealthEnum {
  GREEN = "GREEN",
  RED = "RED",
}

export enum MinimalClimateStateHealthDetailsEnum {
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NO_HEARTBEAT = "NO_HEARTBEAT",
  NONE = "NONE",
}

export enum ClipBoundingBoxCustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum ClipSeekPointV2CustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum ClipVisibilityEnum {
  PRIVATE = "PRIVATE",
  ORG_WIDE = "ORG_WIDE",
}

export enum CloudArchivingStrategyEnum {
  WEEKLY_SCHEDULED = "WEEKLY_SCHEDULED",
  CONTINUOUS = "CONTINUOUS",
}

export enum RebootDeviceWSResponseResultEnum {
  REBOOT_SENT = "REBOOT_SENT",
  DEVICE_OFFLINE = "DEVICE_OFFLINE",
}

export enum ComponentBaseEnumType {
  reader = "reader",
  dpi = "dpi",
  relay = "relay",
  rex = "rex",
  aux = "aux",
  aperio = "aperio",
  button = "button",
}

export enum ComponentCompositeEnumType {
  AccessControlledDoor = "AccessControlledDoor",
}

export enum ComponentCompositeEnumType_Minimal {
  AccessControlledDoor = "AccessControlledDoor",
}

export enum ComponentCompositeShadowEnum {
  AccessControlledDoorShadow = "AccessControlledDoorShadow",
}

export enum ComponentEnumType {
  RhombusOsdpDoorReader = "RhombusOsdpDoorReader",
  OsdpDoorReader = "OsdpDoorReader",
  WiegandDoorReader = "WiegandDoorReader",
  IntegratedDoorPositionIndicator = "IntegratedDoorPositionIndicator",
  IntegratedRequestToExit = "IntegratedRequestToExit",
  IntegratedDoorRelay = "IntegratedDoorRelay",
  IntegratedGenericRelay = "IntegratedGenericRelay",
  IntegratedGenericInput = "IntegratedGenericInput",
  IntegratedGenericButton = "IntegratedGenericButton",
  AperioGateway = "AperioGateway",
  AperioDoorExtension = "AperioDoorExtension",
  AperioDoorRelay = "AperioDoorRelay",
  AperioDoorPositionIndicator = "AperioDoorPositionIndicator",
  AperioDoorReader = "AperioDoorReader",
  AperioDoorRequestToExit = "AperioDoorRequestToExit",
}

export enum ComponentEventEnumType {
  DoorbellEvent = "DoorbellEvent",
  DoorReaderStateChangeEvent = "DoorReaderStateChangeEvent",
  DoorRelayStateChangeEvent = "DoorRelayStateChangeEvent",
  DoorPositionIndicatorStateChangeEvent = "DoorPositionIndicatorStateChangeEvent",
  RequestToExitStateChangeEvent = "RequestToExitStateChangeEvent",
  CredentialReceivedEvent = "CredentialReceivedEvent",
  ButtonEvent = "ButtonEvent",
  GenericInputStateChangeEvent = "GenericInputStateChangeEvent",
  GenericRelayStateChangeEvent = "GenericRelayStateChangeEvent",
  AccessControlUnitTamperEvent = "AccessControlUnitTamperEvent",
  AccessControlUnitLocationLockdownStateEvent = "AccessControlUnitLocationLockdownStateEvent",
  DoorLocationLockdownStateEvent = "DoorLocationLockdownStateEvent",
  PanicButtonEvent = "PanicButtonEvent",
  AccessControlUnitBatteryStateChangeEvent = "AccessControlUnitBatteryStateChangeEvent",
  WaveToUnlockIntentExpiredEvent = "WaveToUnlockIntentExpiredEvent",
  DoorStateChangeEvent = "DoorStateChangeEvent",
  DoorAuthFirstInStateEvent = "DoorAuthFirstInStateEvent",
  DoorScheduleFirstInStateEvent = "DoorScheduleFirstInStateEvent",
  AccessControlUnitDoorFirstInStateEvent = "AccessControlUnitDoorFirstInStateEvent",
  AperioDoorExtensionStateEvent = "AperioDoorExtensionStateEvent",
  AperioGatewayStateEvent = "AperioGatewayStateEvent",
  AperioGatewayConnectionStateChangeEvent = "AperioGatewayConnectionStateChangeEvent",
  AperioDtcEvent = "AperioDtcEvent",
  AperioTamperStateEvent = "AperioTamperStateEvent",
}

export enum ComponentRelayOutputTypeEnum {
  TRANSIENT = "TRANSIENT",
  STEADY = "STEADY",
}

export enum ComponentSeekPointCustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum ComponentShadowEnumType {
  DoorReaderShadow = "DoorReaderShadow",
  DoorRelayShadow = "DoorRelayShadow",
  DoorPositionIndicatorShadow = "DoorPositionIndicatorShadow",
  RequestToExitShadow = "RequestToExitShadow",
  GenericRelayShadow = "GenericRelayShadow",
  GenericInputShadow = "GenericInputShadow",
  GenericButtonShadow = "GenericButtonShadow",
  AperioGatewayShadow = "AperioGatewayShadow",
  AperioDoorExtensionShadow = "AperioDoorExtensionShadow",
}

export enum CredentialSourceEnumType {
  UNKNOWN = "UNKNOWN",
  NFC = "NFC",
  BLE_WAVE = "BLE_WAVE",
  BLE = "BLE",
  WIEGAND = "WIEGAND",
  REMOTE = "REMOTE",
  REMOTE_ADMIN = "REMOTE_ADMIN",
  UNK_3P_OSDP = "UNK_3P_OSDP",
  APERIO_NFC = "APERIO_NFC",
  APERIO_LF = "APERIO_LF",
  APERIO_KEYPAD = "APERIO_KEYPAD",
  KEYPAD_3P_WIEGAND = "KEYPAD_3P_WIEGAND",
  KEYPAD_OSDP = "KEYPAD_OSDP",
  BLE_PROX = "BLE_PROX",
}

export enum CustomFootageSeekPointColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum CustomerShipmentShipmentCategoryEnum {
  RMA = "RMA",
  PURCHASE_ORDER = "PURCHASE_ORDER",
  TRIAL = "TRIAL",
  UNKNOWN = "UNKNOWN",
}

export enum CustomerShipmentShipmentEmailStateEnum {
  SHIPPING_CONFIRMATION_SUCCESS = "SHIPPING_CONFIRMATION_SUCCESS",
  SHIPPING_CONFIRMATION_FAILURE = "SHIPPING_CONFIRMATION_FAILURE",
  SHIPPING_SHIPPED_SUCCESS = "SHIPPING_SHIPPED_SUCCESS",
  SHIPPING_SHIPPED_FAILURE = "SHIPPING_SHIPPED_FAILURE",
  UNKNOWN = "UNKNOWN",
}

export enum CustomerShipmentShipmentStateEnum {
  CREATED = "CREATED",
  SHIPPED = "SHIPPED",
  DELIVERED = "DELIVERED",
  RETURN_REGISTERED = "RETURN_REGISTERED",
  RETURN_SENT = "RETURN_SENT",
  RETURN_DELIVERED = "RETURN_DELIVERED",
  COMPLETE = "COMPLETE",
  UNKNOWN = "UNKNOWN",
}

export enum DashboardStatusHealthStatusIndicatorEnum {
  GREEN = "GREEN",
  YELLOW = "YELLOW",
  RED = "RED",
}

export enum DeviceCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceCatalogItemLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum DeviceFacetEnum {
  V_ = "",
  v0 = "v0",
  v1 = "v1",
  v2 = "v2",
  v3 = "v3",
  a0 = "a0",
  v4 = "v4",
  v5 = "v5",
  v6 = "v6",
  v7 = "v7",
  v8 = "v8",
  v9 = "v9",
  v10 = "v10",
  v11 = "v11",
  v12 = "v12",
  v13 = "v13",
  v14 = "v14",
  v15 = "v15",
  v16 = "v16",
  v17 = "v17",
  v18 = "v18",
  v19 = "v19",
  v20 = "v20",
  v21 = "v21",
  v22 = "v22",
  v23 = "v23",
  v24 = "v24",
  v25 = "v25",
  v26 = "v26",
  v27 = "v27",
  v28 = "v28",
  v29 = "v29",
  v30 = "v30",
  v31 = "v31",
  v32 = "v32",
  v33 = "v33",
  v34 = "v34",
  v35 = "v35",
  v36 = "v36",
  v37 = "v37",
  v38 = "v38",
  v39 = "v39",
  v40 = "v40",
  v41 = "v41",
  v42 = "v42",
  v43 = "v43",
  v44 = "v44",
  v45 = "v45",
  v46 = "v46",
  v47 = "v47",
  v48 = "v48",
  v49 = "v49",
  v50 = "v50",
  v51 = "v51",
  a1 = "a1",
  a2 = "a2",
  a3 = "a3",
  a4 = "a4",
  a5 = "a5",
  a6 = "a6",
  a7 = "a7",
  a8 = "a8",
  a9 = "a9",
  a10 = "a10",
  a11 = "a11",
  a12 = "a12",
  a13 = "a13",
  a14 = "a14",
  a15 = "a15",
  a16 = "a16",
  a17 = "a17",
  a18 = "a18",
  a19 = "a19",
  a20 = "a20",
  a21 = "a21",
  a22 = "a22",
  a23 = "a23",
  a24 = "a24",
  a25 = "a25",
  a26 = "a26",
  a27 = "a27",
  a28 = "a28",
  a29 = "a29",
  a30 = "a30",
  a31 = "a31",
  a32 = "a32",
  a33 = "a33",
  a34 = "a34",
  a35 = "a35",
  a36 = "a36",
  a37 = "a37",
  a38 = "a38",
  a39 = "a39",
  a40 = "a40",
  a41 = "a41",
  a42 = "a42",
  a43 = "a43",
  a44 = "a44",
  a45 = "a45",
  a46 = "a46",
  a47 = "a47",
  a48 = "a48",
  a49 = "a49",
  a50 = "a50",
  a51 = "a51",
}

export enum DeviceFeatureEnum {
  COLOR_SEARCH = "COLOR_SEARCH",
  FACE_RECOGNITION = "FACE_RECOGNITION",
  LICENSE_PLATE_RECOGNITION = "LICENSE_PLATE_RECOGNITION",
  PEOPLE_COUNTING = "PEOPLE_COUNTING",
  PPE_DETECTION = "PPE_DETECTION",
  UNUSUAL_BEHAVIOR_DETECTION = "UNUSUAL_BEHAVIOR_DETECTION",
  VEHICLE_COUNTING = "VEHICLE_COUNTING",
  CAMERA_ENTERPRISE_CLOUD_ARCHIVING = "CAMERA_ENTERPRISE_CLOUD_ARCHIVING",
  TIMELAPSE = "TIMELAPSE",
  VISUAL_TAMPER = "VISUAL_TAMPER",
  AUDIO_AI_ANALYTICS = "AUDIO_AI_ANALYTICS",
  AUDIO_ENTERPRISE_CLOUD_ARCHIVING = "AUDIO_ENTERPRISE_CLOUD_ARCHIVING",
  AUDIO_SPEAKER_ENABLED = "AUDIO_SPEAKER_ENABLED",
  BADGE_READER_ENTERPRISE_CLOUD_ARCHIVING = "BADGE_READER_ENTERPRISE_CLOUD_ARCHIVING",
  OBJECT_SEARCH = "OBJECT_SEARCH",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceHealthStatusDetailsEnum {
  DISCONNECTED = "DISCONNECTED",
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NOT_RECORDING = "NOT_RECORDING",
  MALFUNCTIONING_MODULES = "MALFUNCTIONING_MODULES",
  CALIBRATING = "CALIBRATING",
  DELAYED = "DELAYED",
  NONE = "NONE",
}

export enum DeviceLicenseFamilyStatsDeviceLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum DeviceLicenseLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum DeviceLicenseLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceLicenseProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceLicenseStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum DeviceOrientationEnum {
  CEILING = "CEILING",
  FLOOR = "FLOOR",
  WALL = "WALL",
  WALL_CROOKED = "WALL_CROOKED",
  INDETERMINATE = "INDETERMINATE",
}

export enum DeviceStatusEnum {
  RED = "RED",
  ORANGE = "ORANGE",
  YELLOW = "YELLOW",
  GREEN = "GREEN",
}

export enum DeviceTargetScopeEnum {
  ORG = "ORG",
  LOCATION = "LOCATION",
  DEVICE = "DEVICE",
}

export enum DeviceTypeEnum {
  BLE_TRACKER = "BLE_TRACKER",
  CAMERA = "CAMERA",
  DOOR_SENSOR = "DOOR_SENSOR",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  OCCUPANCY_SENSOR = "OCCUPANCY_SENSOR",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  EXECUTABLE = "EXECUTABLE",
  BADGE_READER = "BADGE_READER",
  DOOR_CONTROLLER = "DOOR_CONTROLLER",
  BLE_BUTTON = "BLE_BUTTON",
  IO_BOARD = "IO_BOARD",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
  NVR = "NVR",
  UNKNOWN = "UNKNOWN",
}

export enum DeviceVideoSettingsSelectiveUpdateIrFilterModeEnum {
  ON = "ON",
  OFF = "OFF",
  AUTO = "AUTO",
}

export enum DeviceVideoSettingsSelectiveUpdateIrLedsModeEnum {
  ON = "ON",
  OFF = "OFF",
  AUTO = "AUTO",
}

export enum ExternalAudioSettingsSelectiveUpdateLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum ExternalAudioSettingsSelectiveUpdateLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum ExternalDeviceSettingsSelectiveUpdateSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum ExternalDeviceSettingsSelectiveUpdateThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum ExternalReadableAudioSettingsLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum ExternalReadableAudioSettingsLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum ExternalReadableDeviceSettingsSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum ExternalReadableDeviceSettingsThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum ExternalReadableDeviceVideoSettingsIrFilterModeEnum {
  ON = "ON",
  OFF = "OFF",
  AUTO = "AUTO",
}

export enum ExternalReadableDeviceVideoSettingsIrLedsModeEnum {
  ON = "ON",
  OFF = "OFF",
  AUTO = "AUTO",
}

export enum ExternalReadableVideoSettingsDewarpModeEnum {
  NO_TRANSFORM = "NO_TRANSFORM",
  NORMAL = "NORMAL",
  PANORAMA = "PANORAMA",
  SUB_REGION = "SUB_REGION",
  VERTICAL_PANORAMA = "VERTICAL_PANORAMA",
  TRANSVERSE_MERCATOR = "TRANSVERSE_MERCATOR",
  MERCATOR = "MERCATOR",
  EQUIRECTANGULAR = "EQUIRECTANGULAR",
}

export enum ExternalReadableVideoSettingsMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum ExternalVideoSettingsSelectiveUpdateDewarpModeEnum {
  NO_TRANSFORM = "NO_TRANSFORM",
  NORMAL = "NORMAL",
  PANORAMA = "PANORAMA",
  SUB_REGION = "SUB_REGION",
  VERTICAL_PANORAMA = "VERTICAL_PANORAMA",
  TRANSVERSE_MERCATOR = "TRANSVERSE_MERCATOR",
  MERCATOR = "MERCATOR",
  EQUIRECTANGULAR = "EQUIRECTANGULAR",
}

export enum ExternalVideoSettingsSelectiveUpdateMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum IExternalReadableAudioVideoUserConfigDewarpModeEnum {
  NO_TRANSFORM = "NO_TRANSFORM",
  NORMAL = "NORMAL",
  PANORAMA = "PANORAMA",
  SUB_REGION = "SUB_REGION",
  VERTICAL_PANORAMA = "VERTICAL_PANORAMA",
  TRANSVERSE_MERCATOR = "TRANSVERSE_MERCATOR",
  MERCATOR = "MERCATOR",
  EQUIRECTANGULAR = "EQUIRECTANGULAR",
}

export enum IExternalReadableAudioVideoUserConfigLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalReadableAudioVideoUserConfigLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalReadableAudioVideoUserConfigMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum IExternalReadableAudioVideoUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalReadableAudioVideoUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalReadableDoorControllerUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalReadableDoorControllerUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalUpdateableAudioVideoUserConfigDewarpModeEnum {
  NO_TRANSFORM = "NO_TRANSFORM",
  NORMAL = "NORMAL",
  PANORAMA = "PANORAMA",
  SUB_REGION = "SUB_REGION",
  VERTICAL_PANORAMA = "VERTICAL_PANORAMA",
  TRANSVERSE_MERCATOR = "TRANSVERSE_MERCATOR",
  MERCATOR = "MERCATOR",
  EQUIRECTANGULAR = "EQUIRECTANGULAR",
}

export enum IExternalUpdateableAudioVideoUserConfigLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalUpdateableAudioVideoUserConfigLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IExternalUpdateableAudioVideoUserConfigMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum IExternalUpdateableAudioVideoUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalUpdateableAudioVideoUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalUpdateableDoorControllerUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IExternalUpdateableDoorControllerUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum DiagnosticEventActivityEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum DoorEventStateEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}

export enum DoorLockdownStateEnumType {
  LOCKED_DOWN = "LOCKED_DOWN",
  ACCESS_CONTROLLED = "ACCESS_CONTROLLED",
  UNLOCKED = "UNLOCKED",
  UNKNOWN = "UNKNOWN",
}

export enum DoorPositionIndicatorEnumType {
  integrated = "integrated",
  remote = "remote",
}

export enum DoorPositionIndicatorPhysicalPortEnumType {
  GPIO_INPUT = "GPIO_INPUT",
  GPIO_INPUT_SUPERVISED = "GPIO_INPUT_SUPERVISED",
}

export enum DoorPositionIndicatorStateEnumType {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
  FORCED_OPEN = "FORCED_OPEN",
  ERROR = "ERROR",
  UNKNOWN = "UNKNOWN",
}

export enum DoorReaderEnumType {
  wiegand = "wiegand",
  osdp = "osdp",
  rhombus_osdp = "rhombus_osdp",
  aperio_wireless = "aperio_wireless",
}

export enum DoorReaderStateChangeReasonEnumType {
  FIRMWARE_UPGRADE = "FIRMWARE_UPGRADE",
  FORCED_REBOOT = "FORCED_REBOOT",
  UNKNOWN = "UNKNOWN",
}

export enum DoorReaderStateEnumType {
  CONNECTED = "CONNECTED",
  DISCONNECTED = "DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum DoorRelayEnumType {
  integrated = "integrated",
  remote = "remote",
}

export enum DoorRelayPhysicalPortEnumType {
  GPIO_OUTPUT = "GPIO_OUTPUT",
}

export enum DoorRelayStateEnumType {
  UNLOCKED = "UNLOCKED",
  LOCKED = "LOCKED",
  UNKNOWN = "UNKNOWN",
}

export enum DoorStateSourceEnum {
  DEFAULT_STATE = "DEFAULT_STATE",
  SCHEDULE = "SCHEDULE",
  SCHEDULE_EXCEPTION = "SCHEDULE_EXCEPTION",
  FIRST_IN = "FIRST_IN",
  DOOR_STATE_OVERRIDE = "DOOR_STATE_OVERRIDE",
  LOCKDOWN = "LOCKDOWN",
  PRIVACY = "PRIVACY",
  UNKNOWN = "UNKNOWN",
}

export enum GetDoorEventsForSensorWSRequestStateFilterEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}

export enum MinimalDoorStateHealthEnum {
  GREEN = "GREEN",
  RED = "RED",
}

export enum MinimalDoorStateHealthDetailsEnum {
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NO_HEARTBEAT = "NO_HEARTBEAT",
  NONE = "NONE",
}

export enum MinimalDoorStateStatusEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}

export enum DeleteDoorbellCameraWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum DeleteDoorControllerWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum DoorControllerDiscoveredReaderTypeEnum {
  RHOMBUS = "RHOMBUS",
  THIRD_PARTY = "THIRD_PARTY",
}

export enum DoorControllerDiscoveredRhombusReaderTypeEnum {
  RHOMBUS = "RHOMBUS",
  THIRD_PARTY = "THIRD_PARTY",
}

export enum DoorControllerDiscoveredThirdPartyReaderTypeEnum {
  RHOMBUS = "RHOMBUS",
  THIRD_PARTY = "THIRD_PARTY",
}

export enum EarlyExpireModeEnum {
  SCHEDULED_CHANGE = "SCHEDULED_CHANGE",
  STEADY_STATE_CHANGE = "STEADY_STATE_CHANGE",
  OFF = "OFF",
}

export enum EmbeddingEncodingTypeEnum {
  Q_8_24 = "Q_8_24",
  IEEE_754 = "IEEE_754",
}

export enum EntityEnum {
  ALARM_MONITORING_LOCATION_SETTINGS = "ALARM_MONITORING_LOCATION_SETTINGS",
  ALARM_MONITORING_LICENSE = "ALARM_MONITORING_LICENSE",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  POLICY = "POLICY",
  POLICY_ALERT = "POLICY_ALERT",
  POLICY_ADDENDUM = "POLICY_ADDENDUM",
  POLICY_PAUSE = "POLICY_PAUSE",
  USER = "USER",
  CAMERA_USER_CONFIG = "CAMERA_USER_CONFIG",
  ORG = "ORG",
  USER_PERMISSION_GROUP = "USER_PERMISSION_GROUP",
  PARTNER_PERMISSION_GROUP = "PARTNER_PERMISSION_GROUP",
  VIDEO_WALL = "VIDEO_WALL",
  SHARED_CLIPS = "SHARED_CLIPS",
  SAVED_CLIPS = "SAVED_CLIPS",
  SHARED_STREAMS = "SHARED_STREAMS",
  SPLICED_CLIPS = "SPLICED_CLIPS",
  TIMELAPSE = "TIMELAPSE",
  AUDIT_EVENTS = "AUDIT_EVENTS",
  DIAGNOSTIC_EVENTS = "DIAGNOSTIC_EVENTS",
  CAMERA_STATE = "CAMERA_STATE",
  CLIMATE_STATE = "CLIMATE_STATE",
  DOOR_STATE = "DOOR_STATE",
  NVR_STATE = "NVR_STATE",
  OCCUPANCY_STATE = "OCCUPANCY_STATE",
  PROXIMITY_STATE = "PROXIMITY_STATE",
  AUDIO_STATE = "AUDIO_STATE",
  CAMERA = "CAMERA",
  NVR = "NVR",
  DOOR_SENSOR = "DOOR_SENSOR",
  CLIMATE_SENSOR = "CLIMATE_SENSOR",
  PROXIMITY_SENSOR = "PROXIMITY_SENSOR",
  BOUNDING_BOX = "BOUNDING_BOX",
  SEEK_POINT = "SEEK_POINT",
  SENSOR_SEEK_POINT = "SENSOR_SEEK_POINT",
  SCHEDULE = "SCHEDULE",
  FACE_EVENT = "FACE_EVENT",
  DEVICE_SHADOW = "DEVICE_SHADOW",
  THREAT_CASE = "THREAT_CASE",
  KEYPAD = "KEYPAD",
  COMPONENT_DOOR_READER_SHADOW = "COMPONENT_DOOR_READER_SHADOW",
  COMPONENT_DOOR_RELAY_SHADOW = "COMPONENT_DOOR_RELAY_SHADOW",
  COMPONENT_DOOR_POSITION_INDICATOR_SHADOW = "COMPONENT_DOOR_POSITION_INDICATOR_SHADOW",
  COMPONENT_APERIO_GATEWAY_SHADOW = "COMPONENT_APERIO_GATEWAY_SHADOW",
  COMPONENT_APERIO_DOOR_SHADOW = "COMPONENT_APERIO_DOOR_SHADOW",
  COMPONENT_REQUEST_TO_EXIT_SHADOW = "COMPONENT_REQUEST_TO_EXIT_SHADOW",
  COMPONENT_GENERIC_RELAY_SHADOW = "COMPONENT_GENERIC_RELAY_SHADOW",
  COMPONENT_GENERIC_INPUT_SHADOW = "COMPONENT_GENERIC_INPUT_SHADOW",
  COMPONENT_GENERIC_BUTTON_SHADOW = "COMPONENT_GENERIC_BUTTON_SHADOW",
  ACCESS_CONTROLLED_DOOR_SHADOW = "ACCESS_CONTROLLED_DOOR_SHADOW",
  ACCESS_CONTROLLED_DOOR = "ACCESS_CONTROLLED_DOOR",
  COMPONENT_SEEKPOINT = "COMPONENT_SEEKPOINT",
  VEHICLE_EVENT = "VEHICLE_EVENT",
  DEVICE_INTEGRATION = "DEVICE_INTEGRATION",
  SHELLY_INTEGRATION = "SHELLY_INTEGRATION",
  THIRD_PARTY_CAMERA_DISCOVERY = "THIRD_PARTY_CAMERA_DISCOVERY",
  THIRD_PARTY_CAMERA_ASSIGNMENT = "THIRD_PARTY_CAMERA_ASSIGNMENT",
  THIRD_PARTY_CAMERA_CREDENTIAL = "THIRD_PARTY_CAMERA_CREDENTIAL",
  CHATBOT_QUERY = "CHATBOT_QUERY",
  UNKNOWN = "UNKNOWN",
}

export enum EventOriginatorEnum {
  USER = "USER",
  SUPPORT_AUTHORITY = "SUPPORT_AUTHORITY",
  API_TOKEN = "API_TOKEN",
  RULE = "RULE",
  COMPONENT_COMPOSITE_EVENT = "COMPONENT_COMPOSITE_EVENT",
  UNKNOWN = "UNKNOWN",
}

export enum EventOriginatorEnum_Minimal {
  USER = "USER",
  SUPPORT_AUTHORITY = "SUPPORT_AUTHORITY",
  API_TOKEN = "API_TOKEN",
  RULE = "RULE",
  COMPONENT_COMPOSITE_EVENT = "COMPONENT_COMPOSITE_EVENT",
  UNKNOWN = "UNKNOWN",
}

export enum SavedClipWithProgressStatusEnum {
  INITIATING = "INITIATING",
  UPLOADING = "UPLOADING",
  RENDERING = "RENDERING",
  FAILED = "FAILED",
  COMPLETE = "COMPLETE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum CombinedSeekPointCustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum GetEventSeekpointsV2WSRequestClothingColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum GetEventSeekpointsV2WSRequestVehicleColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum SearchClothingAndVehicleByColorWSRequestClothingColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum SearchClothingAndVehicleByColorWSRequestVehicleColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum ExportAuditEventsWSRequestExcludeActionsEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum ExportAuditEventsWSRequestIncludeActionsEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum ExportCountReportsWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum ExportCountReportsWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum ExportCountReportsWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum ExportUptimeWSRequestGranularityEnum {
  NANOSECONDS = "NANOSECONDS",
  MICROSECONDS = "MICROSECONDS",
  MILLISECONDS = "MILLISECONDS",
  SECONDS = "SECONDS",
  MINUTES = "MINUTES",
  HOURS = "HOURS",
  DAYS = "DAYS",
}

export enum ReportTimestampFilterReportIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum FirmwareUpdateSettingsModeEnum {
  MANUAL = "MANUAL",
  SCHEDULED = "SCHEDULED",
}

export enum FirstInFirmwareStatusEnum {
  DISABLED = "DISABLED",
  NOT_CONFIGURED = "NOT_CONFIGURED",
  REQUIRED = "REQUIRED",
  SATISFIED = "SATISFIED",
  UNKNOWN = "UNKNOWN",
}

export enum FirstInResetEnum {
  DAILY = "DAILY",
}

export enum FirstInSourceEnum {
  CONFIG_MANUAL_OVERRIDE = "CONFIG_MANUAL_OVERRIDE",
  CONFIG_REQUIREMENT_CHANGE = "CONFIG_REQUIREMENT_CHANGE",
  CONFIG_MEMBERSHIP = "CONFIG_MEMBERSHIP",
  SCHEDULED_RESET = "SCHEDULED_RESET",
  LOCAL_BADGE_EVENT = "LOCAL_BADGE_EVENT",
  LOCKDOWN = "LOCKDOWN",
  UNKNOWN = "UNKNOWN",
}

export enum FirstInStatusEnum {
  REQUIRED = "REQUIRED",
  SATISFIED = "SATISFIED",
}

export enum FirstInStatus_MinimalEnum {
  REQUIRED = "REQUIRED",
  SATISFIED = "SATISFIED",
}

export enum FisheyeDisplayModeEnum {
  RAW = "RAW",
  IMMERSIVE = "IMMERSIVE",
  TILES = "TILES",
  RAW_PANO = "RAW_PANO",
}

export enum FootageBoundingBoxCustomActivityColorEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum FootageSeekPointV2CcEnum {
  BLUE = "BLUE",
  RED = "RED",
  PURPLE = "PURPLE",
  TAN = "TAN",
  ORANGE = "ORANGE",
  TEAL = "TEAL",
  GRAY = "GRAY",
  BLACK = "BLACK",
}

export enum FreightWarehouseEnum {
  AIT = "AIT",
  INVENTORY_RESERVATIONS = "INVENTORY_RESERVATIONS",
}

export enum FunctionalityEnum {
  DEVICE_ADMINISTRATION = "DEVICE_ADMINISTRATION",
  ORG_ADMINISTRATION = "ORG_ADMINISTRATION",
  AUTH_ADMINISTRATION = "AUTH_ADMINISTRATION",
  FIRMWARE_ADMINISTRATION = "FIRMWARE_ADMINISTRATION",
  DOOR_ACCESS_ADMINISTRATION = "DOOR_ACCESS_ADMINISTRATION",
  CAMERA_ADMINISTRATION = "CAMERA_ADMINISTRATION",
  REGISTER_DEVICES = "REGISTER_DEVICES",
  DELETE_DEVICES = "DELETE_DEVICES",
  LOCATION_ADMINISTRATION = "LOCATION_ADMINISTRATION",
  POLICY_ADMINISTRATION = "POLICY_ADMINISTRATION",
  USER_ADMINISTRATION = "USER_ADMINISTRATION",
  REPORT_ADMINISTRATION = "REPORT_ADMINISTRATION",
  NOTIFICATION_ADMINISTRATION = "NOTIFICATION_ADMINISTRATION",
  LICENSE_ADMINISTRATION = "LICENSE_ADMINISTRATION",
  RECEIVE_EMAILS = "RECEIVE_EMAILS",
  MANAGE_FACES = "MANAGE_FACES",
  MANAGE_LICENSEPLATES = "MANAGE_LICENSEPLATES",
  API_ADMINISTRATION = "API_ADMINISTRATION",
  INTEGRATION_ADMINISTRATION = "INTEGRATION_ADMINISTRATION",
  DATA_EXFILTRATION = "DATA_EXFILTRATION",
  ALERT_MONITORING_ADMINISTRATION = "ALERT_MONITORING_ADMINISTRATION",
  ALERT_MONITORING_VIEWONLY = "ALERT_MONITORING_VIEWONLY",
  GUEST_MANAGEMENT_ADMINISTRATION = "GUEST_MANAGEMENT_ADMINISTRATION",
  GUEST_MANAGEMENT_VIEWONLY = "GUEST_MANAGEMENT_VIEWONLY",
  UNKNOWN = "UNKNOWN",
}

export enum GenericButtonStateEnumType {
  BUTTON_DOWN = "BUTTON_DOWN",
  BUTTON_UP = "BUTTON_UP",
  UNKNOWN = "UNKNOWN",
}

export enum GenericInputStateEnumType {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum GenericRelayStateEnumType {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum GoogleCaptchaSourceEnum {
  LEGACY = "LEGACY",
  RHOMBUS_CONSOLE_WEB = "RHOMBUS_CONSOLE_WEB",
  RHOMBUS_CONSOLE_ANDROID_APP = "RHOMBUS_CONSOLE_ANDROID_APP",
  RHOMBUS_CONSOLE_IOS_APP = "RHOMBUS_CONSOLE_IOS_APP",
  RHOMBUS_KEY_ANDROID_APP = "RHOMBUS_KEY_ANDROID_APP",
  RHOMBUS_KEY_IOS_APP = "RHOMBUS_KEY_IOS_APP",
}

export enum GuestBackgroundCheckStatusEnum {
  CLEARED = "CLEARED",
  NEEDS_ATTENTION = "NEEDS_ATTENTION",
}

export enum GuestActivityEnum {
  CHECKED_IN = "CHECKED_IN",
  CHECKED_OUT = "CHECKED_OUT",
  AUTO_CHECKED_OUT = "AUTO_CHECKED_OUT",
  UPDATED_INFO = "UPDATED_INFO",
  INVITED = "INVITED",
}

export enum GuestInviteBackgroundCheckStatusEnum {
  CLEARED = "CLEARED",
  NEEDS_ATTENTION = "NEEDS_ATTENTION",
}

export enum GuestInviteSelectiveUpdateByInvocationBackgroundCheckStatusEnum {
  CLEARED = "CLEARED",
  NEEDS_ATTENTION = "NEEDS_ATTENTION",
}

export enum GuestSelectiveUpdateByInvocationBackgroundCheckStatusEnum {
  CLEARED = "CLEARED",
  NEEDS_ATTENTION = "NEEDS_ATTENTION",
}

export enum GuestStatusEnum {
  INVITED = "INVITED",
  PENDING = "PENDING",
  APPROVED = "APPROVED",
  DENIED = "DENIED",
}

export enum GuestTypeEnum {
  CONTRACTOR = "CONTRACTOR",
  INTERVIEWER = "INTERVIEWER",
  GENERAL_VISITOR = "GENERAL_VISITOR",
  UNPLANNED_VISITOR = "UNPLANNED_VISITOR",
  PARTNER = "PARTNER",
  MEETINGS = "MEETINGS",
}

export enum HardwareVariationEnum {
  RASPBERRY_PI_3 = "RASPBERRY_PI_3",
  CAMERA_R1 = "CAMERA_R1",
  CAMERA_R2 = "CAMERA_R2",
  CAMERA_R2_LONG_RANGE = "CAMERA_R2_LONG_RANGE",
  CAMERA_R2_180 = "CAMERA_R2_180",
  CAMERA_R3 = "CAMERA_R3",
  CAMERA_R4 = "CAMERA_R4",
  CAMERA_R100 = "CAMERA_R100",
  CAMERA_R120 = "CAMERA_R120",
  CAMERA_R170 = "CAMERA_R170",
  CAMERA_R200 = "CAMERA_R200",
  CAMERA_R500 = "CAMERA_R500",
  CAMERA_R510 = "CAMERA_R510",
  CAMERA_R520 = "CAMERA_R520",
  CAMERA_R600 = "CAMERA_R600",
  SENSOR_ASSET_TAG_T1 = "SENSOR_ASSET_TAG_T1",
  SENSOR_DOOR_D1 = "SENSOR_DOOR_D1",
  SENSOR_DOOR_D20 = "SENSOR_DOOR_D20",
  SENSOR_ENVIRONMENTAL_E1 = "SENSOR_ENVIRONMENTAL_E1",
  SENSOR_ENVIRONMENTAL_E15 = "SENSOR_ENVIRONMENTAL_E15",
  SENSOR_ENVIRONMENTAL_E2 = "SENSOR_ENVIRONMENTAL_E2",
  SENSOR_MOTION_M1 = "SENSOR_MOTION_M1",
  SENSOR_MOTION_M15 = "SENSOR_MOTION_M15",
  GATEWAY_A1 = "GATEWAY_A1",
  GATEWAY_A100 = "GATEWAY_A100",
  GATEWAY_ENVIRONMENTAL_E50 = "GATEWAY_ENVIRONMENTAL_E50",
  CAMERA_R220 = "CAMERA_R220",
  CAMERA_R230 = "CAMERA_R230",
  CAMERA_R36S = "CAMERA_R36S",
  CAMERA_R410 = "CAMERA_R410",
  CAMERA_R540 = "CAMERA_R540",
  CAMERA_R545 = "CAMERA_R545",
  BADGE_READER_DR1 = "BADGE_READER_DR1",
  BADGE_READER_DR40 = "BADGE_READER_DR40",
  BADGE_READER_DR20 = "BADGE_READER_DR20",
  DOOR_CONTROLLER_DC1 = "DOOR_CONTROLLER_DC1",
  DOOR_CONTROLLER_DC20 = "DOOR_CONTROLLER_DC20",
  DOOR_CONTROLLER_DC10 = "DOOR_CONTROLLER_DC10",
  ETHERNET_TESTER_ET1 = "ETHERNET_TESTER_ET1",
  IO_BOARD_TB1 = "IO_BOARD_TB1",
  BLE_BUTTON_B10 = "BLE_BUTTON_B10",
  BLE_BUTTON_B15 = "BLE_BUTTON_B15",
  CAMERA_THIRD_PARTY_RELAY = "CAMERA_THIRD_PARTY_RELAY",
  CAMERA_THIRD_PARTY_NVR = "CAMERA_THIRD_PARTY_NVR",
  NVR_N100 = "NVR_N100",
  CAMERA_R130 = "CAMERA_R130",
  NVR_N500 = "NVR_N500",
  CAMERA_R150 = "CAMERA_R150",
  UNSPECIFIED = "UNSPECIFIED",
}

export enum HeatIndexRangeWarningEnum {
  HEAT_INDEX_OK = "HEAT_INDEX_OK",
  HEAT_INDEX_WARNING = "HEAT_INDEX_WARNING",
  HEAT_INDEX_UNSUPPORTED = "HEAT_INDEX_UNSUPPORTED",
}

export enum IAudioUserConfigCloudArchiveTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IAudioUserConfigEventClipUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IAudioUserConfigLedModeWhenActiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IAudioUserConfigLedModeWhenInactiveEnum {
  LED_OFF = "LED_OFF",
  LED_RED_SOLID = "LED_RED_SOLID",
  LED_GREEN_SOLID = "LED_GREEN_SOLID",
  LED_ORANGE_SOLID = "LED_ORANGE_SOLID",
  LED_RED_BLINK = "LED_RED_BLINK",
  LED_GREEN_BLINK = "LED_GREEN_BLINK",
  LED_ORANGE_BLINK = "LED_ORANGE_BLINK",
  LED_NORMAL = "LED_NORMAL",
}

export enum IAudioUserConfigSnapshotUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IAudioUserConfigSpliceClipUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IAudioUserConfigThumbstripUploadTargetEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum IPimlocBaseAPIUrlEnum {
  US = "US",
  EU = "EU",
}

export enum IntegrationActionStatusEnum {
  SUCCESS = "SUCCESS",
  ERROR = "ERROR",
  BACKOFF = "BACKOFF",
  IGNORED = "IGNORED",
  UNKNOWN = "UNKNOWN",
}

export enum IntegrationAuditEventEnum {
  UPDATE = "UPDATE",
  DELETE = "DELETE",
}

export enum IntegrationDiagnosticEventActivityEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum IntegrationEnum {
  AVIGILON_ALTA = "AVIGILON_ALTA",
  BRIVO = "BRIVO",
  BUTTERFLY_MX = "BUTTERFLY_MX",
  DEVICE_INTEGRATION = "DEVICE_INTEGRATION",
  DICE = "DICE",
  ENVOY = "ENVOY",
  FLIC = "FLIC",
  GENEA = "GENEA",
  GOOGLE = "GOOGLE",
  GUEST_MANAGEMENT = "GUEST_MANAGEMENT",
  INFORMACAST = "INFORMACAST",
  INNER_RANGE = "INNER_RANGE",
  KISI = "KISI",
  LUMEO = "LUMEO",
  MICROSOFT_TEAMS = "MICROSOFT_TEAMS",
  OMNIALERT = "OMNIALERT",
  OPENAI = "OPENAI",
  OPENTECH_ALLIANCE = "OPENTECH_ALLIANCE",
  PIMLOC = "PIMLOC",
  PLACE_OS = "PLACE_OS",
  PRODATAKEY = "PRODATAKEY",
  SHELLY = "SHELLY",
  TOAST = "TOAST",
  WEBHOOKS = "WEBHOOKS",
  ZAPIER = "ZAPIER",
  RAPTOR = "RAPTOR",
  NINEONEONE_CELLULAR = "NINEONEONE_CELLULAR",
  SLACK = "SLACK",
  APERIO = "APERIO",
  UNKNOWN = "UNKNOWN",
}

export enum SubscribeZapierWebhookWSRequestDoorStateEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}

export enum AperioDoorViewStatusEnum {
  DISCOVERED = "DISCOVERED",
  PAIRING = "PAIRING",
  CONFIGURED = "CONFIGURED",
  ERROR_OEM = "ERROR_OEM",
  ERROR_OWNER = "ERROR_OWNER",
}

export enum AperioGatewayViewStatusEnum {
  DISCOVERED = "DISCOVERED",
  PAIRING = "PAIRING",
  CONFIGURED = "CONFIGURED",
  ERROR_OEM = "ERROR_OEM",
  ERROR_OWNER = "ERROR_OWNER",
}

export enum CreateReturnedInventoryAuditReservationWSRequestReturnTypeEnum {
  TRIAL = "TRIAL",
  SALES = "SALES",
  RMA = "RMA",
  OTHER = "OTHER",
  UNKNOWN = "UNKNOWN",
}

export enum InitiateShipmentWSRequestShipmentCategoryEnum {
  RMA = "RMA",
  PURCHASE_ORDER = "PURCHASE_ORDER",
  TRIAL = "TRIAL",
  UNKNOWN = "UNKNOWN",
}

export enum ShipmentEmailWSResponseCustomerShipmentEmailStateEnum {
  SHIPPING_CONFIRMATION_SUCCESS = "SHIPPING_CONFIRMATION_SUCCESS",
  SHIPPING_CONFIRMATION_FAILURE = "SHIPPING_CONFIRMATION_FAILURE",
  SHIPPING_SHIPPED_SUCCESS = "SHIPPING_SHIPPED_SUCCESS",
  SHIPPING_SHIPPED_FAILURE = "SHIPPING_SHIPPED_FAILURE",
  UNKNOWN = "UNKNOWN",
}

export enum InvalidPhysicalPortReasonEnumType {
  NON_EXISTANT_COMPONENT_BOARD_NUM = "NON_EXISTANT_COMPONENT_BOARD_NUM",
  NON_EXISTANT_COMPONENT_PORT_NUM = "NON_EXISTANT_COMPONENT_PORT_NUM",
  CONFLICTING_COMPONENT_PORT_TYPES = "CONFLICTING_COMPONENT_PORT_TYPES",
  COMPONENT_PORT_TYPE_NOT_SUPPORTED_BY_PORT = "COMPONENT_PORT_TYPE_NOT_SUPPORTED_BY_PORT",
  MAX_COMPONENTS_PER_PORT_TYPE_EXCEEDED = "MAX_COMPONENTS_PER_PORT_TYPE_EXCEEDED",
}

export enum InvoiceStatusEnum {
  PAID = "PAID",
  UNPAID_PENDING = "UNPAID_PENDING",
  UNPAID_OVERDUE = "UNPAID_OVERDUE",
  CANCELLED = "CANCELLED",
}

export enum KeypadConfigConnectionStateEnum {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
}

export enum KioskConnectionStatusEnum {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum KioskSelectiveUpdateConnectionStatusEnum {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum KioskWithInfoConnectionStatusEnum {
  ONLINE = "ONLINE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum LicenseEnum {
  STARTER = "STARTER",
  STANDARD = "STANDARD",
  ENTERPRISE = "ENTERPRISE",
  LEGACY = "LEGACY",
}

export enum LicenseUsageCatalogItemProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum LicenseUsageCatalogItemLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum LicenseUsageLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum LicenseUsageLicenseToUnassignEmailStateEnum {
  INITIAL_EMAIL_SUCCEEDED = "INITIAL_EMAIL_SUCCEEDED",
  INITIAL_EMAIL_FAILED = "INITIAL_EMAIL_FAILED",
  FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED = "FIFTEEN_DAY_WARNING_EMAIL_SUCCEEDED",
  FIFTEEN_DAY_WARNING_EMAIL_FAILED = "FIFTEEN_DAY_WARNING_EMAIL_FAILED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_SUCCEEDED",
  FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED = "FOURTY_EIGHT_HOUR_WARNING_EMAIL_FAILED",
  UNKNOWN = "UNKNOWN",
}

export enum LicenseUsageProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum LicenseUsageStateEnum {
  CLAIMED = "CLAIMED",
  RENEWED = "RENEWED",
  PENDING_RETURN = "PENDING_RETURN",
  NOT_RENEWED = "NOT_RENEWED",
  EXPIRED = "EXPIRED",
  PERMANENTLY_EXPIRED = "PERMANENTLY_EXPIRED",
}

export enum CreateDeviceLicenseWSRequestLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum CreateLicenseWSRequestLicenseFamilyEnum {
  CAMERA = "CAMERA",
  CAMERA_MS = "CAMERA_MS",
  VIDEO_INTERCOM = "VIDEO_INTERCOM",
  AUDIO_GATEWAY = "AUDIO_GATEWAY",
  ENVIRONMENTAL_SENSOR = "ENVIRONMENTAL_SENSOR",
  ENVIRONMENTAL_GATEWAY = "ENVIRONMENTAL_GATEWAY",
}

export enum FindCatalogItemsWSRequestProductTypeEnum {
  DEVICE = "DEVICE",
  ALERT_MONITORING = "ALERT_MONITORING",
  ACCESS_CONTROL = "ACCESS_CONTROL",
  LICENSE_USAGE = "LICENSE_USAGE",
  UNKNOWN = "UNKNOWN",
}

export enum LiveNotificationActionStatusEnum {
  SUCCESS = "SUCCESS",
  ERROR = "ERROR",
  IGNORED = "IGNORED",
  MUTED = "MUTED",
  BACKOFF = "BACKOFF",
  UNKNOWN = "UNKNOWN",
}

export enum LocationFunctionalityEnum {
  ACCESS_CONDITIONS = "ACCESS_CONDITIONS",
  ACCESS_SCHEDULES = "ACCESS_SCHEDULES",
  DOOR_SETTINGS = "DOOR_SETTINGS",
  FIRST_IN_SETTINGS = "FIRST_IN_SETTINGS",
  HARDWARE_CONFIG = "HARDWARE_CONFIG",
  LOCKDOWN_MANAGEMENT = "LOCKDOWN_MANAGEMENT",
  UNKNOWN = "UNKNOWN",
}

export enum LocationLockdownStateEnumType {
  STANDARD_SECURITY = "STANDARD_SECURITY",
  LOCKED_DOWN = "LOCKED_DOWN",
}

export enum LockdownActivationResultEnumType {
  SUCCESS = "SUCCESS",
  INVALID_LOCKDOWN_PLANS = "INVALID_LOCKDOWN_PLANS",
  OPTIMISTIC_CONCURRENCY = "OPTIMISTIC_CONCURRENCY",
}

export enum LockdownDeactivationResultEnumType {
  SUCCESS = "SUCCESS",
  OPTIMISTIC_CONCURRENCY = "OPTIMISTIC_CONCURRENCY",
}

export enum LockdownEventOriginatorEnumType {
  USER = "USER",
  SUPPORT_AUTHORITY = "SUPPORT_AUTHORITY",
  API_TOKEN = "API_TOKEN",
  RULE = "RULE",
  UNKNOWN = "UNKNOWN",
}

export enum LockdownPlanScopeEnumType {
  ORG_LOCKDOWN = "ORG_LOCKDOWN",
  LOCATION_LOCKDOWN = "LOCATION_LOCKDOWN",
}

export enum LockdownStateEventEnumType {
  LOCKDOWN_ACTIVATED = "LOCKDOWN_ACTIVATED",
  LOCKDOWN_DEACTIVATED = "LOCKDOWN_DEACTIVATED",
}

export enum ManualDoorStateChangeEnum {
  DOOR_STATE_OVERRIDE = "DOOR_STATE_OVERRIDE",
  CANCELLED_DOOR_STATE_OVERRIDE = "CANCELLED_DOOR_STATE_OVERRIDE",
}

export enum ManualDoorStateChangeEnum_Minimal {
  DOOR_STATE_OVERRIDE = "DOOR_STATE_OVERRIDE",
  CANCELLED_DOOR_STATE_OVERRIDE = "CANCELLED_DOOR_STATE_OVERRIDE",
}

export enum MinimalThresholdEventCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  UNKNOWN = "UNKNOWN",
}

export enum MinimalThresholdEventDirectionEnum {
  INGRESS = "INGRESS",
  EGRESS = "EGRESS",
}

export enum MobileTokenOSEnum {
  IOS = "IOS",
  ANDROID = "ANDROID",
}

export enum LoginToOrg2FARequiredResponseGet2FATypeEnum {
  EMAIL = "EMAIL",
  SMS = "SMS",
  VIRTUAL_MFA = "VIRTUAL_MFA",
}

export enum LoginVerifiedSupportAuthorityMobileRequestClientTypeEnum {
  MOBILE = "MOBILE",
  IOS = "IOS",
  ANDROID = "ANDROID",
  BROWSER = "BROWSER",
}

export enum ModularAIConfigModelStatusEnum {
  READY = "READY",
  QUANTIZE_IN_PROGRESS = "QUANTIZE_IN_PROGRESS",
  QUANTIZE_FAILURE = "QUANTIZE_FAILURE",
}

export enum ModularAIConfigSelectiveUpdateModelStatusEnum {
  READY = "READY",
  QUANTIZE_IN_PROGRESS = "QUANTIZE_IN_PROGRESS",
  QUANTIZE_FAILURE = "QUANTIZE_FAILURE",
}

export enum NetworkConfigurationWSRequestModeEnum {
  DHCP = "DHCP",
  STATIC = "STATIC",
}

export enum NetworkConfigurationWSResponseModeEnum {
  DHCP = "DHCP",
  STATIC = "STATIC",
}

export enum NoonlightPromptThemeEnum {
  THREAT = "THREAT",
  HUMAN = "HUMAN",
}

export enum NoonlightVersionedSettingsMonitoringModeEnum {
  MANUAL = "MANUAL",
  SCHEDULED = "SCHEDULED",
  UNKNOWN = "UNKNOWN",
}

export enum NormalStateEnumType {
  NO = "NO",
  NC = "NC",
}

export enum NotificationEnumType {
  SMS = "SMS",
  EMAIL = "EMAIL",
  APP = "APP",
  SLACK = "SLACK",
  MICROSOFT_TEAMS = "MICROSOFT_TEAMS",
  BROWSER = "BROWSER",
  UNKNOWN = "UNKNOWN",
}

export enum NotificationTimeFrameDaysEnum {
  MONDAY = "MONDAY",
  TUESDAY = "TUESDAY",
  WEDNESDAY = "WEDNESDAY",
  THURSDAY = "THURSDAY",
  FRIDAY = "FRIDAY",
  SATURDAY = "SATURDAY",
  SUNDAY = "SUNDAY",
}

export enum NotificationTimeFrameRowDiagnosticsEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum NotificationTimeFrameRowLocationOnlyDiagnosticsEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum ObjectSearchModelEnum {
  CLIP_512 = "CLIP_512",
  UNKNOWN = "UNKNOWN",
}

export enum OccupancyEventStateEnum {
  VACANT = "VACANT",
  MOVEMENT = "MOVEMENT",
  OCCUPIED = "OCCUPIED",
}

export enum MinimalOccupancySensorStateHealthEnum {
  RED = "RED",
  GREEN = "GREEN",
}

export enum MinimalOccupancySensorStateHealthDetailsEnum {
  NO_HEARTBEAT = "NO_HEARTBEAT",
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NONE = "NONE",
}

export enum MinimalOccupancySensorStateStatusEnum {
  VACANT = "VACANT",
  MOVEMENT = "MOVEMENT",
  OCCUPIED = "OCCUPIED",
}

export enum OperationStatusStatusEnum {
  SUCCESS = "SUCCESS",
  FAILURE = "FAILURE",
}

export enum OrgGroupMemberTypeEnum {
  RHOMBUS_ACCESS_CONTROL = "RHOMBUS_ACCESS_CONTROL",
  GUEST_MANAGEMENT_HOST = "GUEST_MANAGEMENT_HOST",
}

export enum OrgGroupTypeEnum {
  RHOMBUS_ACCESS_CONTROL = "RHOMBUS_ACCESS_CONTROL",
  GUEST_MANAGEMENT_HOST = "GUEST_MANAGEMENT_HOST",
}

export enum OrgPlanTypeEnum {
  TRIAL = "TRIAL",
  STARTER = "STARTER",
  CUSTOM = "CUSTOM",
}

export enum OrgSubscriptionStatusEnum {
  TRIAL = "TRIAL",
  PAID = "PAID",
  RESELLER = "RESELLER",
  LOST = "LOST",
  UNKNOWN = "UNKNOWN",
}

export enum OrgSubscriptionTypeEnum {
  STARTER = "STARTER",
  PROFESSIONAL = "PROFESSIONAL",
  ENTERPRISE = "ENTERPRISE",
  UNKNOWN = "UNKNOWN",
}

export enum OrgTypeEnum {
  PARTNER = "PARTNER",
  CUSTOMER = "CUSTOMER",
  UNKNOWN = "UNKNOWN",
}

export enum OrgV2SubscriptionStatusEnum {
  TRIAL = "TRIAL",
  PAID = "PAID",
  RESELLER = "RESELLER",
  LOST = "LOST",
  UNKNOWN = "UNKNOWN",
}

export enum OrgV2SubscriptionTypeEnum {
  STARTER = "STARTER",
  PROFESSIONAL = "PROFESSIONAL",
  ENTERPRISE = "ENTERPRISE",
  UNKNOWN = "UNKNOWN",
}

export enum OrgV2TypeEnum {
  PARTNER = "PARTNER",
  CUSTOMER = "CUSTOMER",
  UNKNOWN = "UNKNOWN",
}

export enum OsdpPhysicalPortEnumType {
  RS485 = "RS485",
}

export enum PartnerFunctionalityEnum {
  CREATE_CLIENT = "CREATE_CLIENT",
  DELETE_CLIENT = "DELETE_CLIENT",
  DEAL_ADMINISTRATION = "DEAL_ADMINISTRATION",
  REMOTE_REGISTER_DEVICE = "REMOTE_REGISTER_DEVICE",
  ORG_ADMINISTRATION = "ORG_ADMINISTRATION",
  AUTH_ADMINISTRATION = "AUTH_ADMINISTRATION",
  DOOR_ACCESS_ADMINISTRATION = "DOOR_ACCESS_ADMINISTRATION",
  USER_ADMINISTRATION = "USER_ADMINISTRATION",
  REPORT_ADMINISTRATION = "REPORT_ADMINISTRATION",
  NOTIFICATION_ADMINISTRATION = "NOTIFICATION_ADMINISTRATION",
  LICENSE_ADMINISTRATION = "LICENSE_ADMINISTRATION",
  RECEIVE_EMAILS = "RECEIVE_EMAILS",
  API_ADMINISTRATION = "API_ADMINISTRATION",
  INTEGRATION_ADMINISTRATION = "INTEGRATION_ADMINISTRATION",
  DATA_EXFILTRATION = "DATA_EXFILTRATION",
  UNKNOWN = "UNKNOWN",
}

export enum PartnerNotificationClientSectionRowDaysEnum {
  MONDAY = "MONDAY",
  TUESDAY = "TUESDAY",
  WEDNESDAY = "WEDNESDAY",
  THURSDAY = "THURSDAY",
  FRIDAY = "FRIDAY",
  SATURDAY = "SATURDAY",
  SUNDAY = "SUNDAY",
}

export enum PartnerNotificationClientSectionRowDiagnosticsEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum PartnerPermissionEnum {
  DEFAULT = "DEFAULT",
  CUSTOM = "CUSTOM",
}

export enum CreatePartnerClientWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  USER_EXISTS = "USER_EXISTS",
  CLIENT_EXISTS = "CLIENT_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum ResetPasswordWSResponseFailureReasonTypeEnum {
  RHOMBUS_USER_NOT_FOUND = "RHOMBUS_USER_NOT_FOUND",
  RHOMBUS_ORG_USER_NOT_FOUND = "RHOMBUS_ORG_USER_NOT_FOUND",
  PASSWORD_RESET_TOKEN_EXPIRED = "PASSWORD_RESET_TOKEN_EXPIRED",
  INVALID_CURRENT_PASSWORD = "INVALID_CURRENT_PASSWORD",
}

export enum PerceptionTypeEnum {
  PEOPLE_COUNTING = "PEOPLE_COUNTING",
  FACE_COUNTING_UNIQUE = "FACE_COUNTING_UNIQUE",
  FACE_COUNTING_NONUNIQUE = "FACE_COUNTING_NONUNIQUE",
  ENGAGMENT_COUNTING = "ENGAGMENT_COUNTING",
  FACE_RECOGNITION = "FACE_RECOGNITION",
  LICENSEPLATE_RECOGNITION = "LICENSEPLATE_RECOGNITION",
  VEHICLE_COUNTING = "VEHICLE_COUNTING",
  OCCUPANCY_COUNTING = "OCCUPANCY_COUNTING",
  UNKNOWN = "UNKNOWN",
}

export enum PermissionEnum {
  READONLY = "READONLY",
  ADMIN = "ADMIN",
  LIVEONLY = "LIVEONLY",
}

export enum PhysicalPortEnumType {
  GPIO_OUTPUT = "GPIO_OUTPUT",
  GPIO_INPUT = "GPIO_INPUT",
  GPIO_INPUT_SUPERVISED = "GPIO_INPUT_SUPERVISED",
  RS485 = "RS485",
  WIEGAND_INPUT = "WIEGAND_INPUT",
  WIEGAND_OUTPUT = "WIEGAND_OUTPUT",
  BUTTON_INPUT = "BUTTON_INPUT",
}

export enum PimlocBaseAPIUrlEnum {
  US = "US",
  EU = "EU",
}

export enum PinStatusEnum {
  ACTIVE = "ACTIVE",
  SCHEDULED = "SCHEDULED",
  EXPIRED = "EXPIRED",
}

export enum PlayerViewLiveTypeEnum {
  REALTIME = "REALTIME",
  BUFFERED = "BUFFERED",
}

export enum PolicyAlertV2TypeEnum {
  POLICY_ALERT_V2 = "POLICY_ALERT_V2",
  ACCESS_CONTROLLED_DOOR_POLICY_ALERT = "ACCESS_CONTROLLED_DOOR_POLICY_ALERT",
}

export enum PolicyAlertWithDetailsTypeEnum {
  POLICY_ALERT_V2 = "POLICY_ALERT_V2",
  ACCESS_CONTROLLED_DOOR_POLICY_ALERT = "ACCESS_CONTROLLED_DOOR_POLICY_ALERT",
}

export enum PromptConfigurationPromptTypeEnum {
  COUNT = "COUNT",
  PERCENT = "PERCENT",
  BOOLEAN = "BOOLEAN",
}

export enum ProximityEventStatusEnum {
  ACTIVE = "ACTIVE",
  STATIONARY = "STATIONARY",
  OFFLINE = "OFFLINE",
}

export enum ProximityTagLocomotionEventMovementEnum {
  ARRIVAL = "ARRIVAL",
  DEPARTURE = "DEPARTURE",
  MOVED_SIGNIFICANTLY = "MOVED_SIGNIFICANTLY",
  UNKNOWN = "UNKNOWN",
}

export enum GetLocomotionEventsForTagWSRequestMovementFilterEnum {
  ARRIVAL = "ARRIVAL",
  DEPARTURE = "DEPARTURE",
  MOVED_SIGNIFICANTLY = "MOVED_SIGNIFICANTLY",
  UNKNOWN = "UNKNOWN",
}

export enum GetProximityEventsForTagWSRequestStatusFilterEnum {
  ACTIVE = "ACTIVE",
  STATIONARY = "STATIONARY",
  OFFLINE = "OFFLINE",
}

export enum MinimalProximityStateHealthEnum {
  GREEN = "GREEN",
}

export enum MinimalProximityStateHealthDetailsEnum {
  FIRMWARE_BEHIND = "FIRMWARE_BEHIND",
  NONE = "NONE",
}

export enum MinimalProximityStateStatusEnum {
  ACTIVE = "ACTIVE",
  STATIONARY = "STATIONARY",
  OFFLINE = "OFFLINE",
}

export enum QueryStatusEnum {
  ANSWERED = "ANSWERED",
  PARTIALLY_ANSWERED = "PARTIALLY_ANSWERED",
  CLARIFICATION_REQUESTED = "CLARIFICATION_REQUESTED",
  REDIRECTED = "REDIRECTED",
  INITIATED = "INITIATED",
  QUEUED = "QUEUED",
  IN_PROGRESS = "IN_PROGRESS",
  NOT_UNDERSTOOD = "NOT_UNDERSTOOD",
  INVALID_REQUEST = "INVALID_REQUEST",
  UNAUTHORIZED = "UNAUTHORIZED",
  UNSUPPORTED = "UNSUPPORTED",
  DENIED = "DENIED",
  INTERRUPTED = "INTERRUPTED",
  NO_RESPONSE = "NO_RESPONSE",
  INVALID_AUTH_DATA = "INVALID_AUTH_DATA",
  UNKNOWN = "UNKNOWN",
}

export enum RMAErrorCodeEnum {
  BADGE_READER_UNKNOWN = "BADGE_READER_UNKNOWN",
  DEAD_OR_MISSING_BATTERY = "DEAD_OR_MISSING_BATTERY",
  ERROR_2 = "ERROR_2",
  ERROR_4 = "ERROR_4",
  ERROR_5 = "ERROR_5",
  ERROR_24 = "ERROR_24",
  ERROR_28 = "ERROR_28",
  ERROR_30 = "ERROR_30",
  ERROR_84 = "ERROR_84",
  FOREIGN_HARDWARE = "FOREIGN_HARDWARE",
  BAD_SD_BLOCKS = "BAD_SD_BLOCKS",
  NEVER_LEFT_BUSY_STATE = "NEVER_LEFT_BUSY_STATE",
  HARDWARE_DAMAGE = "HARDWARE_DAMAGE",
  HEAVY_HARDWARE_DAMAGE = "HEAVY_HARDWARE_DAMAGE",
  WATER_DAMAGE = "WATER_DAMAGE",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  LIGHT_SENSOR = "LIGHT_SENSOR",
  SD_CARD_UNKOWN = "SD_CARD_UNKOWN",
  SD_CARD_READER_BROKEN = "SD_CARD_READER_BROKEN",
  POWER_ISSUES = "POWER_ISSUES",
  RS485_ISSUE = "RS485_ISSUE",
  CUT_FILTER = "CUT_FILTER",
  QUALITY_OR_PERFORMANCE = "QUALITY_OR_PERFORMANCE",
  NETWORK_ISSUES = "NETWORK_ISSUES",
  UNKNOWN = "UNKNOWN",
  ILLEGIBLE_SERIAL_COMM = "ILLEGIBLE_SERIAL_COMM",
  NO_SERIAL_COMM = "NO_SERIAL_COMM",
  COSMETIC_DAMAGE = "COSMETIC_DAMAGE",
  FIRMWARE_REFLASH_REQUIRED = "FIRMWARE_REFLASH_REQUIRED",
  IR_RING_OVERHEATED = "IR_RING_OVERHEATED",
  REGISTERED_SENSOR = "REGISTERED_SENSOR",
}

export enum RMAStatusEnum {
  INITIATED = "INITIATED",
  PENDING = "PENDING",
  APPROVED = "APPROVED",
  INPROGRESS = "INPROGRESS",
  COMPLETE = "COMPLETE",
  RETURN = "RETURN",
  STOLEN = "STOLEN",
  OPERATIONAL = "OPERATIONAL",
  FULFILLMENT_ERROR = "FULFILLMENT_ERROR",
}

export enum RealtimeRelativeSecondsScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum RecurringTimeUnitEnum {
  SECONDS = "SECONDS",
  MINUTES = "MINUTES",
  HOURS = "HOURS",
}

export enum RegionOfInterestGroupTypeEnum {
  ACTIVITY = "ACTIVITY",
  REPORTING = "REPORTING",
  CROSSING = "CROSSING",
}

export enum RelativeDateTimeIntervalsScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum AuthenticateThirdPartyCameraWSResponseRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum ExternalRtspEndpointLastRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum ManualDiscoverThirdPartyCameraWSResponseRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum MinimalThirdPartyCameraStateLastRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum RebootNVRVWSResponseResultEnum {
  REBOOT_SENT = "REBOOT_SENT",
  DEVICE_OFFLINE = "DEVICE_OFFLINE",
}

export enum ThirdPartyCameraImportResultUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum UnregisterNVRWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum UpdateNVRFirmwareWSResponseStatusEnum {
  ALREADY_ON_THE_LATEST_FIRMWARE = "ALREADY_ON_THE_LATEST_FIRMWARE",
  DEVICE_ON_A_SPECIAL_FIRMWARE_AND_CANNOT_BE_UPDATED = "DEVICE_ON_A_SPECIAL_FIRMWARE_AND_CANNOT_BE_UPDATED",
  UPDATE_STARTED = "UPDATE_STARTED",
  UNABLE_TO_REACH_DEVICE = "UNABLE_TO_REACH_DEVICE",
  FIRMWARE_UPDATE_ALREADY_IN_PROGESS = "FIRMWARE_UPDATE_ALREADY_IN_PROGESS",
  DEVICE_NOT_AUTHROIZED = "DEVICE_NOT_AUTHROIZED",
}

export enum RemoteDoorUnlockSystemEnum {
  BRIVO = "BRIVO",
  OPENPATH = "OPENPATH",
  KISI = "KISI",
  PLACEOS = "PLACEOS",
  GENEA = "GENEA",
  PDK = "PDK",
  INNER_RANGE = "INNER_RANGE",
  RHOMBUS = "RHOMBUS",
  UNKNOWN = "UNKNOWN",
}

export enum RenewalClaimKeyExpirationEmailStateEnum {
  NINETY_DAY_EMAIL_SUCCEEDED = "NINETY_DAY_EMAIL_SUCCEEDED",
  NINETY_DAY_EMAIL_FAILED = "NINETY_DAY_EMAIL_FAILED",
  SIXTY_DAY_EMAIL_SUCCEEDED = "SIXTY_DAY_EMAIL_SUCCEEDED",
  SIXTY_DAY_EMAIL_FAILED = "SIXTY_DAY_EMAIL_FAILED",
  FOURTY_FIVE_DAY_EMAIL_SUCCEEDED = "FOURTY_FIVE_DAY_EMAIL_SUCCEEDED",
  FOURTY_FIVE_DAY_EMAIL_FAILED = "FOURTY_FIVE_DAY_EMAIL_FAILED",
  THIRTY_DAY_EMAIL_SUCCEEDED = "THIRTY_DAY_EMAIL_SUCCEEDED",
  THIRTY_DAY_EMAIL_FAILED = "THIRTY_DAY_EMAIL_FAILED",
  TWENTY_ONE_DAY_EMAIL_SUCCEEDED = "TWENTY_ONE_DAY_EMAIL_SUCCEEDED",
  TWENTY_ONE_DAY_EMAIL_FAILED = "TWENTY_ONE_DAY_EMAIL_FAILED",
  FOURTEEN_DAY_EMAIL_SUCCEEDED = "FOURTEEN_DAY_EMAIL_SUCCEEDED",
  FOURTEEN_DAY_EMAIL_FAILED = "FOURTEEN_DAY_EMAIL_FAILED",
  TEN_DAY_EMAIL_SUCCEEDED = "TEN_DAY_EMAIL_SUCCEEDED",
  TEN_DAY_EMAIL_FAILED = "TEN_DAY_EMAIL_FAILED",
  FIVE_DAY_EMAIL_SUCCEEDED = "FIVE_DAY_EMAIL_SUCCEEDED",
  FIVE_DAY_EMAIL_FAILED = "FIVE_DAY_EMAIL_FAILED",
  FOUR_DAY_EMAIL_SUCCEEDED = "FOUR_DAY_EMAIL_SUCCEEDED",
  FOUR_DAY_EMAIL_FAILED = "FOUR_DAY_EMAIL_FAILED",
  THREE_DAY_EMAIL_SUCCEEDED = "THREE_DAY_EMAIL_SUCCEEDED",
  THREE_DAY_EMAIL_FAILED = "THREE_DAY_EMAIL_FAILED",
  TWO_DAY_EMAIL_SUCCEEDED = "TWO_DAY_EMAIL_SUCCEEDED",
  TWO_DAY_EMAIL_FAILED = "TWO_DAY_EMAIL_FAILED",
  ONE_DAY_EMAIL_SUCCEEDED = "ONE_DAY_EMAIL_SUCCEEDED",
  ONE_DAY_EMAIL_FAILED = "ONE_DAY_EMAIL_FAILED",
  ZERO_DAY_EMAIL_SUCCEEDED = "ZERO_DAY_EMAIL_SUCCEEDED",
  ZERO_DAY_EMAIL_FAILED = "ZERO_DAY_EMAIL_FAILED",
  GRACE_PERIOD_EMAILS_IN_PROGRESS = "GRACE_PERIOD_EMAILS_IN_PROGRESS",
  GRACE_PERIOD_EMAILS_COMPLETED = "GRACE_PERIOD_EMAILS_COMPLETED",
  UNKNOWN = "UNKNOWN",
}

export enum RenewalClaimKeyStateEnum {
  CREATED = "CREATED",
  CLAIMING_PENDING = "CLAIMING_PENDING",
  CLAIMING_IN_PROGRESS = "CLAIMING_IN_PROGRESS",
  CLAIMING_FAILED = "CLAIMING_FAILED",
  CLAIMED = "CLAIMED",
  EXPIRED_UNCLAIMED = "EXPIRED_UNCLAIMED",
  EXPIRED = "EXPIRED",
  RETURNED = "RETURNED",
  RENEWED = "RENEWED",
}

export enum RenewalClaimKeyTypeEnum {
  NEW = "NEW",
  RENEWAL = "RENEWAL",
}

export enum AuditEventWebActionEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum AuditEventWebClientTypeEnum {
  DEVICE = "DEVICE",
  MOBILE = "MOBILE",
  BROWSER = "BROWSER",
  BROWSER_V2 = "BROWSER_V2",
  BROWSER_PARTNER = "BROWSER_PARTNER",
  MOBILE_PARTNER = "MOBILE_PARTNER",
  ANONYMOUS = "ANONYMOUS",
  SHARE_ANONYMOUS = "SHARE_ANONYMOUS",
  SHARE_ANONYMOUS_V2 = "SHARE_ANONYMOUS_V2",
  SHARE_RAW = "SHARE_RAW",
  SHARE_SSO = "SHARE_SSO",
  TV_API = "TV_API",
  API = "API",
  API_TOKEN = "API_TOKEN",
  API_OAUTH_TOKEN = "API_OAUTH_TOKEN",
  PARTNER_API = "PARTNER_API",
  PARTNER_API_TOKEN = "PARTNER_API_TOKEN",
  KEYPAD_API = "KEYPAD_API",
  INTERNAL_SALESFORCE = "INTERNAL_SALESFORCE",
  RHOMBUS_KEY_MOBILE = "RHOMBUS_KEY_MOBILE",
  KIOSK_CONSOLE = "KIOSK_CONSOLE",
  KIOSK_IOS_API = "KIOSK_IOS_API",
  CHATBOT = "CHATBOT",
}

export enum AuditEventWebPrincipalTypeEnum {
  USER = "USER",
  DEVICE = "DEVICE",
  PARTNER = "PARTNER",
  RHOMBUS_SUPPORT = "RHOMBUS_SUPPORT",
  API_TOKEN = "API_TOKEN",
  API_OAUTH_TOKEN = "API_OAUTH_TOKEN",
  SHARED_CLIP = "SHARED_CLIP",
  SHARED_STREAM = "SHARED_STREAM",
  SHARED_TIMELAPSE = "SHARED_TIMELAPSE",
  SHARED_VIDEOWALL = "SHARED_VIDEOWALL",
  KIOSK_CONSOLE = "KIOSK_CONSOLE",
  UNKNOWN = "UNKNOWN",
}

export enum GetAuditFeedWSRequestExcludeActionsEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum GetAuditFeedWSRequestIncludeActionsEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum GetAverageReportWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetAverageReportWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetAverageReportWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetAverageReportsWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetAverageReportsWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetAverageReportsWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetCountReportV2WSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetCountReportV2WSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetCountReportV2WSRequestTypesEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetCountReportWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetCountReportWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetCountReportWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetCountReportsForDevicesAtLocationWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetCountReportsForDevicesAtLocationWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetCountReportsWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetCountReportsWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetCountReportsWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetLicensePlatesByDeviceWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetOccupancyCountsWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetRunningAverageWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetRunningAverageWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetSummaryCountReportWSRequestIntervalEnum {
  MINUTELY = "MINUTELY",
  QUARTERHOURLY = "QUARTERHOURLY",
  HOURLY = "HOURLY",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}

export enum GetSummaryCountReportWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum GetSummaryCountReportWSRequestTypeEnum {
  CROWD = "CROWD",
  PEOPLE = "PEOPLE",
  FACES = "FACES",
  MOTION = "MOTION",
  BANDWIDTH = "BANDWIDTH",
  VEHICLES = "VEHICLES",
  LICENSEPLATES = "LICENSEPLATES",
  ALERTS = "ALERTS",
  AM_VERIFICATION = "AM_VERIFICATION",
  DWELL = "DWELL",
}

export enum GetThresholdCrossingCountReportWSRequestBucketSizeEnum {
  QUARTER_HOUR = "QUARTER_HOUR",
  HOUR = "HOUR",
  DAY = "DAY",
  WEEK = "WEEK",
  MONTH = "MONTH",
}

export enum GetThresholdCrossingCountReportWSRequestCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  UNKNOWN = "UNKNOWN",
}

export enum GetThresholdCrossingCountsWSRequestCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  UNKNOWN = "UNKNOWN",
}

export enum GetThresholdCrossingEventsForDeviceWSRequestCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  UNKNOWN = "UNKNOWN",
}

export enum GetThresholdCrossingEventsWSRequestCrossingObjectEnum {
  HUMAN = "HUMAN",
  VEHICLE = "VEHICLE",
  UNKNOWN = "UNKNOWN",
}

export enum ResetRunningAverageWSRequestScopeEnum {
  REGION = "REGION",
  DEVICE = "DEVICE",
  LOCATION = "LOCATION",
  ORG = "ORG",
}

export enum RequestToExitEnumType {
  integrated = "integrated",
  remote = "remote",
}

export enum RequestToExitPhysicalPortEnumType {
  GPIO_INPUT = "GPIO_INPUT",
  GPIO_INPUT_SUPERVISED = "GPIO_INPUT_SUPERVISED",
}

export enum RequestToExitStateEnumType {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum RhombusOrgUserAccessibleRhombusAppsEnum {
  PARTNER = "PARTNER",
  CONSOLE = "CONSOLE",
  RHOMBUS_KEY = "RHOMBUS_KEY",
  UNKNOWN = "UNKNOWN",
}

export enum RhombusOrgUserStatusEnum {
  JOINED = "JOINED",
  PENDING = "PENDING",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum RhombusSecureMobileFeatureSettingStatusEnum {
  OPTIMAL = "OPTIMAL",
  INHIBITED = "INHIBITED",
}

export enum RhombusSecureMobileFeatureStatusEnum {
  OPT_OUT = "OPT_OUT",
  UNAVAILABLE = "UNAVAILABLE",
  OPTIMAL = "OPTIMAL",
  INHIBITED = "INHIBITED",
  UNKNOWN = "UNKNOWN",
}

export enum RtspEndpointLastRtspUrlStatusEnum {
  UNKNOWN = "UNKNOWN",
  NOT_REACHABLE = "NOT_REACHABLE",
  NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
  NOT_SUPPORTED = "NOT_SUPPORTED",
  GOOD = "GOOD",
}

export enum RtspEndpointSourceEnum {
  USER = "USER",
  ONVIF = "ONVIF",
}

export enum RuleTriggerConjunctionEnum {
  AND = "AND",
  OR = "OR",
  UNKNOWN = "UNKNOWN",
}

export enum RuleTriggerTypeEnum {
  DEVICE_ACTIVITY_EVENT = "DEVICE_ACTIVITY_EVENT",
  AUDIT_EVENT = "AUDIT_EVENT",
  DIAGNOSTIC_EVENT = "DIAGNOSTIC_EVENT",
  ALERT_MONITORING_EVENT = "ALERT_MONITORING_EVENT",
  BADGE_INTEGRATION_EVENT = "BADGE_INTEGRATION_EVENT",
  SCHEDULED_EVENT = "SCHEDULED_EVENT",
  VISION_LLM_EVENT = "VISION_LLM_EVENT",
  RECURRING_EVENT = "RECURRING_EVENT",
  LOCATION_LOCKDOWN_ACTIVATED_EVENT = "LOCATION_LOCKDOWN_ACTIVATED_EVENT",
  LOCATION_LOCKDOWN_DEACTIVATED_EVENT = "LOCATION_LOCKDOWN_DEACTIVATED_EVENT",
  BUTTON_INTEGRATION_EVENT = "BUTTON_INTEGRATION_EVENT",
  UNKNOWN = "UNKNOWN",
}

export enum RuleTypeEnum {
  BUTTON_DEFINED = "BUTTON_DEFINED",
  USER_DEFINED = "USER_DEFINED",
  DOORBELL_CAMERA_DEFINED = "DOORBELL_CAMERA_DEFINED",
  DOOR_CONTROLLER_DEFINED = "DOOR_CONTROLLER_DEFINED",
  LOCKDOWN_PLAN_DEFINED = "LOCKDOWN_PLAN_DEFINED",
}

export enum SavedClipV2StatusEnum {
  INITIATING = "INITIATING",
  UPLOADING = "UPLOADING",
  RENDERING = "RENDERING",
  FAILED = "FAILED",
  COMPLETE = "COMPLETE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum SavedClipWithDetailsStatusEnum {
  INITIATING = "INITIATING",
  UPLOADING = "UPLOADING",
  RENDERING = "RENDERING",
  FAILED = "FAILED",
  COMPLETE = "COMPLETE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum SceneQueryWSReportPromptTypeEnum {
  COUNT = "COUNT",
  PERCENT = "PERCENT",
  BOOLEAN = "BOOLEAN",
}

export enum SelectiveUpdatePromptConfigurationWSRequestPromptTypeEnum {
  COUNT = "COUNT",
  PERCENT = "PERCENT",
  BOOLEAN = "BOOLEAN",
}

export enum TriggerPromptWSRequestPromptTypeEnum {
  COUNT = "COUNT",
  PERCENT = "PERCENT",
  BOOLEAN = "BOOLEAN",
}

export enum Schedule_AccessControlledDoorStateSourceEnum {
  DEFAULT_STATE = "DEFAULT_STATE",
  DOOR_SCHEDULE = "DOOR_SCHEDULE",
  DSE_DEFAULT_STATE = "DSE_DEFAULT_STATE",
  DSE_SCHEDULE = "DSE_SCHEDULE",
  DOOR_STATE_OVERRIDE = "DOOR_STATE_OVERRIDE",
}

export enum WeeklyRepeatingScheduleDataStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum SearchObjectsByColorWSRequestColorFilterEnum {
  BLACK = "BLACK",
  BLUE = "BLUE",
  BROWN = "BROWN",
  GRAYWHITE = "GRAYWHITE",
  GREEN = "GREEN",
  ORANGE = "ORANGE",
  PINK = "PINK",
  PURPLE = "PURPLE",
  RED = "RED",
  YELLOW = "YELLOW",
  UNKNOWN = "UNKNOWN",
}

export enum SearchSimilarObjectEmbeddingsByTextWSRequestObjectTypeFilterEnum {
  MOTION_HUMAN = "MOTION_HUMAN",
  MOTION_CAR = "MOTION_CAR",
}

export enum SearchSimilarObjectEmbeddingsWSRequestObjectTypeFilterEnum {
  MOTION_HUMAN = "MOTION_HUMAN",
  MOTION_CAR = "MOTION_CAR",
}

export enum SecureTokenAlgorithmEnum {
  AN10922_AES128 = "AN10922_AES128",
}

export enum SeekpointTypeEnum {
  V_0 = "0",
  V_1 = "1",
  V_2 = "2",
}

export enum SessionInfoWSClientTypeEnum {
  MOBILE = "MOBILE",
  IOS = "IOS",
  ANDROID = "ANDROID",
  BROWSER = "BROWSER",
}

export enum GetSharedLiveStreamInfoWSResponseMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum SharedVideoWallDeviceMountingDirectionEnum {
  DOWN = "DOWN",
  UP = "UP",
  SIDEWAYS = "SIDEWAYS",
  UNKNOWN = "UNKNOWN",
}

export enum SharedTimelapseClipClipFormatEnum {
  MPEG = "MPEG",
  GIF = "GIF",
}

export enum ShellyDeviceCanSendCommandsEnum {
  AUTHORIZED = "AUTHORIZED",
  UNAUTHORIZED = "UNAUTHORIZED",
  UNKNOWN = "UNKNOWN",
}

export enum ShellyDeviceDeviceTypeEnum {
  RELAY = "RELAY",
  LIGHT = "LIGHT",
  ROLLER = "ROLLER",
}

export enum ShipmentServiceLevelEnum {
  NEXT_DAY = "NEXT_DAY",
  SECOND_DAY = "SECOND_DAY",
  THREE_DAY = "THREE_DAY",
  FOUR_DAY = "FOUR_DAY",
  GROUND = "GROUND",
  LOCAL = "LOCAL",
  NEXT_DAY_MORNING = "NEXT_DAY_MORNING",
  WAREHOUSE = "WAREHOUSE",
}

export enum SimpleAuditEventAuditEventEnum {
  THREAT_CASE_ESCALATED = "THREAT_CASE_ESCALATED",
  THREAT_CASE_CANCELLED = "THREAT_CASE_CANCELLED",
  THREAT_CASE_DISMISSED = "THREAT_CASE_DISMISSED",
  THREAT_CASE_DELETED = "THREAT_CASE_DELETED",
  THREAT_CASE_DELETE_BY_STATUS = "THREAT_CASE_DELETE_BY_STATUS",
  PIN_CREATED = "PIN_CREATED",
  PIN_DELETED = "PIN_DELETED",
  ALM_PIN_CREATE = "ALM_PIN_CREATE",
  ALM_PIN_BULK_CREATE = "ALM_PIN_BULK_CREATE",
  ALM_PIN_UPDATE = "ALM_PIN_UPDATE",
  ALM_PIN_ROTATE = "ALM_PIN_ROTATE",
  ALM_PIN_BULK_ROTATE = "ALM_PIN_BULK_ROTATE",
  ALM_PIN_DELETE = "ALM_PIN_DELETE",
  BASIC_AUTH_SUCCESS = "BASIC_AUTH_SUCCESS",
  BASIC_AUTH_FAILURE = "BASIC_AUTH_FAILURE",
  SAML_LOGIN_WEB = "SAML_LOGIN_WEB",
  LOGIN_WEB = "LOGIN_WEB",
  PASSWORDLESS_LOGIN_WEB = "PASSWORDLESS_LOGIN_WEB",
  PARTNER_LOGIN_WEB = "PARTNER_LOGIN_WEB",
  PARTNER_PASSWORDLESS_LOGIN_WEB = "PARTNER_PASSWORDLESS_LOGIN_WEB",
  SAML_LOGIN_FAILURE_WEB = "SAML_LOGIN_FAILURE_WEB",
  LOGIN_FAILURE_WEB = "LOGIN_FAILURE_WEB",
  RHOMBUS_KEY_LOGIN = "RHOMBUS_KEY_LOGIN",
  RHOMBUS_KEY_PASSWORDLESS_LOGIN = "RHOMBUS_KEY_PASSWORDLESS_LOGIN",
  RHOMBUS_KEY_SAML_LOGIN = "RHOMBUS_KEY_SAML_LOGIN",
  LOGOUT_WEB = "LOGOUT_WEB",
  PARTNER_LOGOUT_WEB = "PARTNER_LOGOUT_WEB",
  WEB_CONSOLE_ACCESS = "WEB_CONSOLE_ACCESS",
  MOBILE_CONSOLE_ACCESS = "MOBILE_CONSOLE_ACCESS",
  SAML_LOGIN_MOBILE = "SAML_LOGIN_MOBILE",
  PARTNER_LOGIN_MOBILE = "PARTNER_LOGIN_MOBILE",
  PARTNER_PASSWORDLESS_LOGIN_MOBILE = "PARTNER_PASSWORDLESS_LOGIN_MOBILE",
  LOGIN_MOBILE = "LOGIN_MOBILE",
  PASSWORDLESS_LOGIN_MOBILE = "PASSWORDLESS_LOGIN_MOBILE",
  SAML_LOGIN_FAILURE_MOBILE = "SAML_LOGIN_FAILURE_MOBILE",
  LOGIN_FAILURE_MOBILE = "LOGIN_FAILURE_MOBILE",
  LOGOUT_MOBILE = "LOGOUT_MOBILE",
  PARTNER_LOGOUT_MOBILE = "PARTNER_LOGOUT_MOBILE",
  MOBILE_ACCESS = "MOBILE_ACCESS",
  PARTNER_LOGIN_MOBIlE_REFRESH = "PARTNER_LOGIN_MOBIlE_REFRESH",
  LOGIN_MOBIlE_REFRESH = "LOGIN_MOBIlE_REFRESH",
  RHOMBUS_KEY_LOGIN_REFRESH = "RHOMBUS_KEY_LOGIN_REFRESH",
  CAMERA_WIFI_NETWORK_CHANGED = "CAMERA_WIFI_NETWORK_CHANGED",
  CAMERA_FORCED_REBOOT = "CAMERA_FORCED_REBOOT",
  AUDIO_GATEWAY_FORCED_REBOOT = "AUDIO_GATEWAY_FORCED_REBOOT",
  ENVIRONMENTAL_GATEWAY_FORCED_REBOOT = "ENVIRONMENTAL_GATEWAY_FORCED_REBOOT",
  DOORBELL_CAMERA_FORCED_REBOOT = "DOORBELL_CAMERA_FORCED_REBOOT",
  BADGE_READER_FORCED_REBOOT = "BADGE_READER_FORCED_REBOOT",
  FIRMWARE_UPDATE_CAMERA = "FIRMWARE_UPDATE_CAMERA",
  DELETE_CAMERA = "DELETE_CAMERA",
  DELETE_USER = "DELETE_USER",
  DELETE_LOCATION = "DELETE_LOCATION",
  LOCATION_UPDATED = "LOCATION_UPDATED",
  DELETE_ROLE = "DELETE_ROLE",
  ERASE_CAMERA = "ERASE_CAMERA",
  POLICY_UPDATE = "POLICY_UPDATE",
  POLICY_DELETE = "POLICY_DELETE",
  POLICY_PAUSED_LOCATION = "POLICY_PAUSED_LOCATION",
  POLICY_PAUSED_DEVICE = "POLICY_PAUSED_DEVICE",
  POLICY_PAUSED_COMPONENT_COMPOSITE = "POLICY_PAUSED_COMPONENT_COMPOSITE",
  CREATE_POLICY_ADDENDUM = "CREATE_POLICY_ADDENDUM",
  DEVICE_REGISTERED = "DEVICE_REGISTERED",
  DEVICE_UPDATE = "DEVICE_UPDATE",
  DEVICE_SETTINGS_UPDATE = "DEVICE_SETTINGS_UPDATE",
  DEVICE_FEATURE_UPDATE = "DEVICE_FEATURE_UPDATE",
  DEVICE_ORG_REASSIGN = "DEVICE_ORG_REASSIGN",
  CLAIMKEY_RENEWAL_CREATED = "CLAIMKEY_RENEWAL_CREATED",
  LICENSES_CLAIMED = "LICENSES_CLAIMED",
  LICENSES_RETURNED = "LICENSES_RETURNED",
  LICENSE_ASSIGNED = "LICENSE_ASSIGNED",
  LICENSE_CREATED = "LICENSE_CREATED",
  LICENSE_UPDATED = "LICENSE_UPDATED",
  USER_UPDATE = "USER_UPDATE",
  USER_CREATE = "USER_CREATE",
  USER_IMPORT = "USER_IMPORT",
  ROLE_CREATE = "ROLE_CREATE",
  POLICY_CREATE = "POLICY_CREATE",
  PARTNER_CLIENT_CREATE = "PARTNER_CLIENT_CREATE",
  PARTNER_CUSTOMIZE_CLIENT = "PARTNER_CUSTOMIZE_CLIENT",
  PARTNER_CUSTOMIZE_CLIENT_DEVICE = "PARTNER_CUSTOMIZE_CLIENT_DEVICE",
  ORG_UPDATE = "ORG_UPDATE",
  DELETE_ORG = "DELETE_ORG",
  DISABLE_ORG = "DISABLE_ORG",
  CREATE_ORG = "CREATE_ORG",
  ROLE_UPDATE = "ROLE_UPDATE",
  USER_ROLE_UPDATE = "USER_ROLE_UPDATE",
  USER_EMAIL_UPDATE = "USER_EMAIL_UPDATE",
  TIMELAPSE_CREATE = "TIMELAPSE_CREATE",
  TIMELAPSE_DELETE = "TIMELAPSE_DELETE",
  ALERT_DISMISS = "ALERT_DISMISS",
  ALL_ALERT_DISMISS = "ALL_ALERT_DISMISS",
  SAVED_CLIP_CREATE = "SAVED_CLIP_CREATE",
  SAVED_CLIP_DELETE = "SAVED_CLIP_DELETE",
  CLIP_GROUP_CREATED = "CLIP_GROUP_CREATED",
  CLIP_GROUP_DELETE = "CLIP_GROUP_DELETE",
  SHARED_CLIP_DELETE = "SHARED_CLIP_DELETE",
  SHARED_CLIP_CREATE = "SHARED_CLIP_CREATE",
  SHARED_LINK_SENT = "SHARED_LINK_SENT",
  SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITH_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE = "SHARED_LIVE_VIDEO_STREAM_WITHOUT_PASSWORD_CREATE",
  SHARED_LIVE_VIDEO_STREAM_DELETE = "SHARED_LIVE_VIDEO_STREAM_DELETE",
  SHARED_VIDEOWALL_WITH_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITH_PASSWORD_CREATE",
  SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE = "SHARED_VIDEOWALL_WITHOUT_PASSWORD_CREATE",
  SHARED_VIDEOWALL_DELETE = "SHARED_VIDEOWALL_DELETE",
  RAW_HTTP_STREAM_CREATED = "RAW_HTTP_STREAM_CREATED",
  RAW_HTTP_STREAM_DELETED = "RAW_HTTP_STREAM_DELETED",
  SETUP_VIRTUAL_MFA_DEVICE = "SETUP_VIRTUAL_MFA_DEVICE",
  DELETE_VIRTUAL_MFA_DEVICE = "DELETE_VIRTUAL_MFA_DEVICE",
  SETUP_SCIM_API_ACCESS = "SETUP_SCIM_API_ACCESS",
  REVOKE_SCIM_API_ACCESS = "REVOKE_SCIM_API_ACCESS",
  AUDIT_EXPORT = "AUDIT_EXPORT",
  COUNT_EXPORT = "COUNT_EXPORT",
  DIAGNOSTIC_EXPORT = "DIAGNOSTIC_EXPORT",
  INVENTORY_EXPORT = "INVENTORY_EXPORT",
  USERS_EXPORT = "USERS_EXPORT",
  UPTIME_EXPORT = "UPTIME_EXPORT",
  SUPPORT_TICKET_OPEN = "SUPPORT_TICKET_OPEN",
  RMA_OPEN = "RMA_OPEN",
  FEEDBACK_CREATE = "FEEDBACK_CREATE",
  SUPPORT_ACCESS_GRANT = "SUPPORT_ACCESS_GRANT",
  SUPPORT_ACCESS_REVOKE = "SUPPORT_ACCESS_REVOKE",
  SUPPORT_PARTNER_ADD = "SUPPORT_PARTNER_ADD",
  SUPPORT_PARTNER_REMOVE = "SUPPORT_PARTNER_REMOVE",
  SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED = "SUPPORT_PARTNER_LOGIN_ACCESS_EXPIRED",
  SUPPORT_SEARCH_TICKETS = "SUPPORT_SEARCH_TICKETS",
  ACCEPT_UAP = "ACCEPT_UAP",
  ACCEPT_RHOMBUS_UAP = "ACCEPT_RHOMBUS_UAP",
  ACCEPT_ALERTMONITORING_UAP = "ACCEPT_ALERTMONITORING_UAP",
  CREATE_SEEKPOINT = "CREATE_SEEKPOINT",
  DELETE_CUSTOM_SEEKPOINT = "DELETE_CUSTOM_SEEKPOINT",
  UPDATE_INTEGRATION_SAML = "UPDATE_INTEGRATION_SAML",
  UPDATE_INTEGRATION_SLACK = "UPDATE_INTEGRATION_SLACK",
  UPDATE_INTEGRATION_SLACK_V2 = "UPDATE_INTEGRATION_SLACK_V2",
  DELETE_INTEGRATION_SLACK_V2 = "DELETE_INTEGRATION_SLACK_V2",
  UPDATE_INTEGRATION_BOX = "UPDATE_INTEGRATION_BOX",
  DELETE_INTEGRATION_BOX = "DELETE_INTEGRATION_BOX",
  UPDATE_INTEGRATION_GOOGLE = "UPDATE_INTEGRATION_GOOGLE",
  DELETE_INTEGRATION_GOOGLE = "DELETE_INTEGRATION_GOOGLE",
  UPDATE_INTEGRATION_GOOGLE_V2 = "UPDATE_INTEGRATION_GOOGLE_V2",
  DELETE_INTEGRATION_GOOGLE_V2 = "DELETE_INTEGRATION_GOOGLE_V2",
  UPDATE_INTEGRATION_PAGERDUTY = "UPDATE_INTEGRATION_PAGERDUTY",
  DELETE_INTEGRATION_PAGERDUTY = "DELETE_INTEGRATION_PAGERDUTY",
  UPDATE_INTEGRATION_SERVICENOW = "UPDATE_INTEGRATION_SERVICENOW",
  DELETE_INTEGRATION_SERVICENOW = "DELETE_INTEGRATION_SERVICENOW",
  UPDATE_INTEGRATION_OFFICE365 = "UPDATE_INTEGRATION_OFFICE365",
  DELETE_INTEGRATION_OFFICE365 = "DELETE_INTEGRATION_OFFICE365",
  UPDATE_INTEGRATION_DROPBOX = "UPDATE_INTEGRATION_DROPBOX",
  DELETE_INTEGRATION_DROPBOX = "DELETE_INTEGRATION_DROPBOX",
  UPDATE_INTEGRATION_SQUARE = "UPDATE_INTEGRATION_SQUARE",
  DELETE_INTEGRATION_SQUARE = "DELETE_INTEGRATION_SQUARE",
  UPDATE_INTEGRATION_AWS = "UPDATE_INTEGRATION_AWS",
  DELETE_INTEGRATION_AWS = "DELETE_INTEGRATION_AWS",
  UPDATE_INTEGRATION_HALO = "UPDATE_INTEGRATION_HALO",
  DELETE_INTEGRATION_HALO = "DELETE_INTEGRATION_HALO",
  UPDATE_INTEGRATION_WEBHOOK = "UPDATE_INTEGRATION_WEBHOOK",
  DELETE_INTEGRATION_WEBHOOK = "DELETE_INTEGRATION_WEBHOOK",
  UPDATE_INTEGRATION_EMAIL = "UPDATE_INTEGRATION_EMAIL",
  DELETE_INTEGRATION_EMAIL = "DELETE_INTEGRATION_EMAIL",
  UPDATE_INTEGRATION_MATTERMOST = "UPDATE_INTEGRATION_MATTERMOST",
  DELETE_INTEGRATION_MATTERMOST = "DELETE_INTEGRATION_MATTERMOST",
  UPDATE_INTEGRATION_OPENPATH = "UPDATE_INTEGRATION_OPENPATH",
  DELETE_INTEGRATION_OPENPATH = "DELETE_INTEGRATION_OPENPATH",
  UPDATE_INTEGRATION_AVIGILON_ALTA = "UPDATE_INTEGRATION_AVIGILON_ALTA",
  DELETE_INTEGRATION_AVIGILON_ALTA = "DELETE_INTEGRATION_AVIGILON_ALTA",
  UPDATE_INTEGRATION_DICE = "UPDATE_INTEGRATION_DICE",
  DELETE_INTEGRATION_DICE = "DELETE_INTEGRATION_DICE",
  UPDATE_INTEGRATION_LUMEO = "UPDATE_INTEGRATION_LUMEO",
  DELETE_INTEGRATION_LUMEO = "DELETE_INTEGRATION_LUMEO",
  UPDATE_INTEGRATION_DEVICE = "UPDATE_INTEGRATION_DEVICE",
  DELETE_INTEGRATION_DEVICE = "DELETE_INTEGRATION_DEVICE",
  UPDATE_INTEGRATION_GUESTMANAGEMENT = "UPDATE_INTEGRATION_GUESTMANAGEMENT",
  DELETE_INTEGRATION_GUESTMANAGEMENT = "DELETE_INTEGRATION_GUESTMANAGEMENT",
  UPDATE_GUESTMANAGEMENT_SETTINGS = "UPDATE_GUESTMANAGEMENT_SETTINGS",
  DELETE_GUESTMANAGEMENT_SETTINGS = "DELETE_GUESTMANAGEMENT_SETTINGS",
  INVITE_GUEST = "INVITE_GUEST",
  CREATE_GUEST = "CREATE_GUEST",
  CHECKIN_GUEST = "CHECKIN_GUEST",
  CHECKOUT_GUEST = "CHECKOUT_GUEST",
  UPDATE_GUEST = "UPDATE_GUEST",
  DELETE_GUEST = "DELETE_GUEST",
  ACTIVATE_KIOSK = "ACTIVATE_KIOSK",
  UPDATE_INTEGRATION_OMNIALERT = "UPDATE_INTEGRATION_OMNIALERT",
  DELETE_INTEGRATION_OMNIALERT = "DELETE_INTEGRATION_OMNIALERT",
  UPDATE_INTEGRATION_OPENTECHALLIANCE = "UPDATE_INTEGRATION_OPENTECHALLIANCE",
  DELETE_INTEGRATION_OPENTECHALLIANCE = "DELETE_INTEGRATION_OPENTECHALLIANCE",
  UPDATE_INTEGRATION_TOAST = "UPDATE_INTEGRATION_TOAST",
  DELETE_INTEGRATION_TOAST = "DELETE_INTEGRATION_TOAST",
  UPDATE_INTEGRATION_KISI = "UPDATE_INTEGRATION_KISI",
  DELETE_INTEGRATION_KISI = "DELETE_INTEGRATION_KISI",
  UPDATE_INTEGRATION_BRIVO = "UPDATE_INTEGRATION_BRIVO",
  DELETE_INTEGRATION_BRIVO = "DELETE_INTEGRATION_BRIVO",
  UPDATE_INTEGRATION_BUTTERFLYMX = "UPDATE_INTEGRATION_BUTTERFLYMX",
  DELETE_INTEGRATION_BUTTERFLYMX = "DELETE_INTEGRATION_BUTTERFLYMX",
  UPDATE_INTEGRATION_ENVOY = "UPDATE_INTEGRATION_ENVOY",
  DELETE_INTEGRATION_ENVOY = "DELETE_INTEGRATION_ENVOY",
  CREATE_ENVOY_INVITE = "CREATE_ENVOY_INVITE",
  UPDATE_INTEGRATION_SALTO = "UPDATE_INTEGRATION_SALTO",
  UPDATE_INTEGRATION_PDK = "UPDATE_INTEGRATION_PDK",
  DELETE_INTEGRATION_PDK = "DELETE_INTEGRATION_PDK",
  UPDATE_INTEGRATION_GENEA = "UPDATE_INTEGRATION_GENEA",
  DELETE_INTEGRATION_GENEA = "DELETE_INTEGRATION_GENEA",
  UPDATE_INTEGRATION_MICROSOFTTEAMS = "UPDATE_INTEGRATION_MICROSOFTTEAMS",
  DELETE_INTEGRATION_MICROSOFTTEAMS = "DELETE_INTEGRATION_MICROSOFTTEAMS",
  UPDATE_INTEGRATION_AMT = "UPDATE_INTEGRATION_AMT",
  DELETE_INTEGRATION_AMT = "DELETE_INTEGRATION_AMT",
  UPDATE_INTEGRATION_PLACEOS = "UPDATE_INTEGRATION_PLACEOS",
  DELETE_INTEGRATION_PLACEOS = "DELETE_INTEGRATION_PLACEOS",
  UPDATE_INTEGRATION_INTUIFACE = "UPDATE_INTEGRATION_INTUIFACE",
  DELETE_INTEGRATION_INTUIFACE = "DELETE_INTEGRATION_INTUIFACE",
  UPDATE_INTEGRATION_INFORMACAST = "UPDATE_INTEGRATION_INFORMACAST",
  DELETE_INTEGRATION_INFORMACAST = "DELETE_INTEGRATION_INFORMACAST",
  UPDATE_INTEGRATION_INNERRANGE = "UPDATE_INTEGRATION_INNERRANGE",
  DELETE_INTEGRATION_INNERRANGE = "DELETE_INTEGRATION_INNERRANGE",
  UPDATE_INTEGRATION_SHELLY = "UPDATE_INTEGRATION_SHELLY",
  DELETE_INTEGRATION_SHELLY = "DELETE_INTEGRATION_SHELLY",
  UPDATE_INTEGRATION_FLIC = "UPDATE_INTEGRATION_FLIC",
  DELETE_INTEGRATION_FLIC = "DELETE_INTEGRATION_FLIC",
  UPDATE_INTEGRATION_NINEONEONECELLULAR = "UPDATE_INTEGRATION_NINEONEONECELLULAR",
  DELETE_INTEGRATION_NINEONEONECELLULAR = "DELETE_INTEGRATION_NINEONEONECELLULAR",
  UPDATE_INTEGRATION_PIMLOC = "UPDATE_INTEGRATION_PIMLOC",
  DELETE_INTEGRATION_PIMLOC = "DELETE_INTEGRATION_PIMLOC",
  UPDATE_INTEGRATION_RAPTOR = "UPDATE_INTEGRATION_RAPTOR",
  DELETE_INTEGRATION_RAPTOR = "DELETE_INTEGRATION_RAPTOR",
  UPDATE_INTEGRATION_NOONLIGHT = "UPDATE_INTEGRATION_NOONLIGHT",
  UPDATE_INTEGRATION_ALARM_MONITORING = "UPDATE_INTEGRATION_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING = "ENABLE_LIVE_ALARM_MONITORING",
  ENABLE_LIVE_ALARM_MONITORING_LOCATION = "ENABLE_LIVE_ALARM_MONITORING_LOCATION",
  CREATE_ALARM_MONITORING_SETTINGS = "CREATE_ALARM_MONITORING_SETTINGS",
  UPDATE_ALARM_MONITORING_SETTINGS = "UPDATE_ALARM_MONITORING_SETTINGS",
  DELETE_ALARM_MONITORING_SETTINGS = "DELETE_ALARM_MONITORING_SETTINGS",
  ENABLE_ALARM_MONITORING_SETTINGS = "ENABLE_ALARM_MONITORING_SETTINGS",
  DISABLE_ALARM_MONITORING_SETTINGS = "DISABLE_ALARM_MONITORING_SETTINGS",
  REPORT_VEHICLE_EVENT = "REPORT_VEHICLE_EVENT",
  API_TOKEN_REQUEST = "API_TOKEN_REQUEST",
  API_TOKEN_REVOKE = "API_TOKEN_REVOKE",
  API_INVOCATION = "API_INVOCATION",
  API_OAUTH_TOKEN_REQUEST = "API_OAUTH_TOKEN_REQUEST",
  API_OAUTH_TOKEN_REFRESH = "API_OAUTH_TOKEN_REFRESH",
  API_OAUTH_TOKEN_REVOKE = "API_OAUTH_TOKEN_REVOKE",
  API_OAUTH_INVOCATION = "API_OAUTH_INVOCATION",
  API_OAUTH_SUBMIT_APPLICATION = "API_OAUTH_SUBMIT_APPLICATION",
  API_OAUTH_UPDATE_APPLICATION = "API_OAUTH_UPDATE_APPLICATION",
  API_OAUTH_DELETE_APPLICATION = "API_OAUTH_DELETE_APPLICATION",
  API_OAUTH_AUTHORIZE = "API_OAUTH_AUTHORIZE",
  VIDEO_WALL_CREATE = "VIDEO_WALL_CREATE",
  VIDEO_WALL_UPDATE = "VIDEO_WALL_UPDATE",
  VIDEO_WALL_DELETE = "VIDEO_WALL_DELETE",
  VIEW_SHARE_TIMELAPSE = "VIEW_SHARE_TIMELAPSE",
  VIEW_SHARE_CLIP = "VIEW_SHARE_CLIP",
  VIEW_SHARE_STREAM = "VIEW_SHARE_STREAM",
  VIEW_SHARE_VIDEOWALL = "VIEW_SHARE_VIDEOWALL",
  VIEW_CAMERA_VOD = "VIEW_CAMERA_VOD",
  CAMERA_POLICY_UPDATE = "CAMERA_POLICY_UPDATE",
  CAMERA_POLICY_CREATE = "CAMERA_POLICY_CREATE",
  CAMERA_POLICY_DELETE = "CAMERA_POLICY_DELETE",
  TAG_POLICY_UPDATE = "TAG_POLICY_UPDATE",
  TAG_POLICY_CREATE = "TAG_POLICY_CREATE",
  TAG_POLICY_DELETE = "TAG_POLICY_DELETE",
  CLIMATE_POLICY_UPDATE = "CLIMATE_POLICY_UPDATE",
  CLIMATE_POLICY_CREATE = "CLIMATE_POLICY_CREATE",
  CLIMATE_POLICY_DELETE = "CLIMATE_POLICY_DELETE",
  DOOR_POLICY_UPDATE = "DOOR_POLICY_UPDATE",
  DOOR_POLICY_CREATE = "DOOR_POLICY_CREATE",
  DOOR_POLICY_DELETE = "DOOR_POLICY_DELETE",
  DOOR_SCHEDULE_EXCEPTION_UPDATE = "DOOR_SCHEDULE_EXCEPTION_UPDATE",
  DOOR_SCHEDULE_EXCEPTION_CREATE = "DOOR_SCHEDULE_EXCEPTION_CREATE",
  DOOR_SCHEDULE_EXCEPTION_DELETE = "DOOR_SCHEDULE_EXCEPTION_DELETE",
  ACCESS_CONTROLLED_DOOR_POLICY_UPDATE = "ACCESS_CONTROLLED_DOOR_POLICY_UPDATE",
  ACCESS_CONTROLLED_DOOR_POLICY_CREATE = "ACCESS_CONTROLLED_DOOR_POLICY_CREATE",
  ACCESS_CONTROLLED_DOOR_POLICY_DELETE = "ACCESS_CONTROLLED_DOOR_POLICY_DELETE",
  VIDEO_INTERCOM_POLICY_UPDATE = "VIDEO_INTERCOM_POLICY_UPDATE",
  VIDEO_INTERCOM_POLICY_CREATE = "VIDEO_INTERCOM_POLICY_CREATE",
  VIDEO_INTERCOM_POLICY_DELETE = "VIDEO_INTERCOM_POLICY_DELETE",
  OCCUPANCY_POLICY_UPDATE = "OCCUPANCY_POLICY_UPDATE",
  OCCUPANCY_POLICY_CREATE = "OCCUPANCY_POLICY_CREATE",
  OCCUPANCY_POLICY_DELETE = "OCCUPANCY_POLICY_DELETE",
  AUDIO_POLICY_UPDATE = "AUDIO_POLICY_UPDATE",
  AUDIO_POLICY_CREATE = "AUDIO_POLICY_CREATE",
  AUDIO_POLICY_DELETE = "AUDIO_POLICY_DELETE",
  SCHEDULE_CREATE = "SCHEDULE_CREATE",
  SCHEDULE_DELETE = "SCHEDULE_DELETE",
  SCHEDULE_UPDATE = "SCHEDULE_UPDATE",
  UPLOAD_FLOORPLAN = "UPLOAD_FLOORPLAN",
  ORG_AUDIO_RECORD_UPDATE = "ORG_AUDIO_RECORD_UPDATE",
  ORG_AUDIO_ANALYSIS_UPDATE = "ORG_AUDIO_ANALYSIS_UPDATE",
  DOOR_ACCESS_UNLOCK = "DOOR_ACCESS_UNLOCK",
  RHOMBUS_KEY_DOOR_UNLOCK = "RHOMBUS_KEY_DOOR_UNLOCK",
  UPLOAD_ACCESS_CONTROLLED_DOOR = "UPLOAD_ACCESS_CONTROLLED_DOOR",
  UPLOAD_USER_PROFILE_PICTURE = "UPLOAD_USER_PROFILE_PICTURE",
  ACCESS_GRANT_CREATE = "ACCESS_GRANT_CREATE",
  ACCESS_GRANT_UPDATE = "ACCESS_GRANT_UPDATE",
  ACCESS_GRANT_DELETE = "ACCESS_GRANT_DELETE",
  ACCESS_REVOCATION_CREATE = "ACCESS_REVOCATION_CREATE",
  ACCESS_REVOCATION_UPDATE = "ACCESS_REVOCATION_UPDATE",
  ACCESS_REVOCATION_DELETE = "ACCESS_REVOCATION_DELETE",
  ACCESS_CONTROLLED_DOOR_CREATE = "ACCESS_CONTROLLED_DOOR_CREATE",
  ACCESS_CONTROLLED_DOOR_UPDATE = "ACCESS_CONTROLLED_DOOR_UPDATE",
  ACCESS_CONTROLLED_DOOR_DELETE = "ACCESS_CONTROLLED_DOOR_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_CREATE = "AC_CRED_RHOMBUS_SECURE_CSN_CREATE",
  AC_CRED_RHOMBUS_SECURE_CSN_UPDATE = "AC_CRED_RHOMBUS_SECURE_CSN_UPDATE",
  AC_CRED_RHOMBUS_SECURE_CSN_DELETE = "AC_CRED_RHOMBUS_SECURE_CSN_DELETE",
  AC_CRED_RHOMBUS_SECURE_CSN_REVOKED = "AC_CRED_RHOMBUS_SECURE_CSN_REVOKED",
  AC_CRED_STANDARD_CSN_CREATE = "AC_CRED_STANDARD_CSN_CREATE",
  AC_CRED_STANDARD_CSN_UPDATE = "AC_CRED_STANDARD_CSN_UPDATE",
  AC_CRED_STANDARD_CSN_DELETE = "AC_CRED_STANDARD_CSN_DELETE",
  AC_CRED_STANDARD_CSN_REVOKED = "AC_CRED_STANDARD_CSN_REVOKED",
  AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_CREATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE = "AC_CRED_RHOMBUS_SECURE_MOBILE_UPDATE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE = "AC_CRED_RHOMBUS_SECURE_MOBILE_DELETE",
  AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED = "AC_CRED_RHOMBUS_SECURE_MOBILE_REVOKED",
  AC_CRED_PIN_CREATE = "AC_CRED_PIN_CREATE",
  AC_CRED_PIN_BULK_CREATE = "AC_CRED_PIN_BULK_CREATE",
  AC_CRED_PIN_UPDATE = "AC_CRED_PIN_UPDATE",
  AC_CRED_PIN_ROTATE = "AC_CRED_PIN_ROTATE",
  AC_CRED_PIN_BULK_ROTATE = "AC_CRED_PIN_BULK_ROTATE",
  AC_CRED_PIN_DELETE = "AC_CRED_PIN_DELETE",
  AC_CRED_PIN_REVOKED = "AC_CRED_PIN_REVOKED",
  AC_CRED_WIEGAND_CREATE = "AC_CRED_WIEGAND_CREATE",
  AC_CRED_WIEGAND_UPDATE = "AC_CRED_WIEGAND_UPDATE",
  AC_CRED_WIEGAND_DELETE = "AC_CRED_WIEGAND_DELETE",
  AC_CRED_WIEGAND_REVOKED = "AC_CRED_WIEGAND_REVOKED",
  AC_CRED_NOTE_UPDATE = "AC_CRED_NOTE_UPDATE",
  AC_LOCKDOWN_PLAN_CREATED = "AC_LOCKDOWN_PLAN_CREATED",
  AC_LOCKDOWN_PLAN_UPDATED = "AC_LOCKDOWN_PLAN_UPDATED",
  AC_LOCKDOWN_PLAN_DELETED = "AC_LOCKDOWN_PLAN_DELETED",
  AC_LOCKDOWN_ACTIVATED = "AC_LOCKDOWN_ACTIVATED",
  AC_LOCKDOWN_DEACTIVATED = "AC_LOCKDOWN_DEACTIVATED",
  AC_COMPONENT_POWER_CYCLE = "AC_COMPONENT_POWER_CYCLE",
  AC_DOOR_STATE_OVERRIDE_APPLIED = "AC_DOOR_STATE_OVERRIDE_APPLIED",
  AC_DOOR_STATE_OVERRIDE_CANCELLED = "AC_DOOR_STATE_OVERRIDE_CANCELLED",
  SCIM_GET_ALL_USERS = "SCIM_GET_ALL_USERS",
  SCIM_POST_CREATE_USER = "SCIM_POST_CREATE_USER",
  SCIM_PUT_UPDATE_USER = "SCIM_PUT_UPDATE_USER",
  SCIM_PATCH_UPDATE_USER = "SCIM_PATCH_UPDATE_USER",
  SCIM_GET_USER_BY_ID = "SCIM_GET_USER_BY_ID",
  SCIM_DELETE_USER_BY_ID = "SCIM_DELETE_USER_BY_ID",
  SCIM_GET_ALL_GROUPS = "SCIM_GET_ALL_GROUPS",
  SCIM_POST_CREATE_GROUP = "SCIM_POST_CREATE_GROUP",
  SCIM_PUT_UPDATE_GROUP = "SCIM_PUT_UPDATE_GROUP",
  SCIM_PATCH_UPDATE_GROUP = "SCIM_PATCH_UPDATE_GROUP",
  SCIM_GET_GROUP_BY_ID = "SCIM_GET_GROUP_BY_ID",
  SCIM_DELETE_GROUP_BY_ID = "SCIM_DELETE_GROUP_BY_ID",
  CREATE_ACCESS_CONTROL_GROUP = "CREATE_ACCESS_CONTROL_GROUP",
  UPDATE_ACCESS_CONTROL_GROUP = "UPDATE_ACCESS_CONTROL_GROUP",
  DELETE_ACCESS_CONTROL_GROUP = "DELETE_ACCESS_CONTROL_GROUP",
  RULE_CREATE = "RULE_CREATE",
  RULE_DELETE = "RULE_DELETE",
  RULE_UPDATE = "RULE_UPDATE",
  RULE_PAUSE = "RULE_PAUSE",
  UPLOAD_FACES = "UPLOAD_FACES",
  UPDATE_FACE = "UPDATE_FACE",
  REPORT_FACE_EVENT = "REPORT_FACE_EVENT",
  FACE_EVENT_UPDATED = "FACE_EVENT_UPDATED",
  FACE_EVENT_DELETED = "FACE_EVENT_DELETED",
  FACE_PERSON_CREATED = "FACE_PERSON_CREATED",
  FACE_PERSON_UPDATED = "FACE_PERSON_UPDATED",
  FACE_PERSON_DELETED = "FACE_PERSON_DELETED",
  FACE_MATCHMAKER_CREATED = "FACE_MATCHMAKER_CREATED",
  FACE_MATCHMAKER_DELETED = "FACE_MATCHMAKER_DELETED",
  FACE_MATCHMAKER_UPLOADED = "FACE_MATCHMAKER_UPLOADED",
  FACE_MATCHING_CONFIG_UPDATED = "FACE_MATCHING_CONFIG_UPDATED",
  EXPUNGE_FACES_ORG = "EXPUNGE_FACES_ORG",
  EXPUNGE_VEHICLES_ORG = "EXPUNGE_VEHICLES_ORG",
  DEVICE_NETWORK_CONFIGURATION_CHANGE = "DEVICE_NETWORK_CONFIGURATION_CHANGE",
  KIOSK_UPDATED = "KIOSK_UPDATED",
  KIOSK_DELETED = "KIOSK_DELETED",
  KIOSK_CREATED = "KIOSK_CREATED",
  UPDATE_APERIO_FIRMWARE = "UPDATE_APERIO_FIRMWARE",
  UPDATE_INTEGRATION_APERIO = "UPDATE_INTEGRATION_APERIO",
  DELETE_INTEGRATION_APERIO = "DELETE_INTEGRATION_APERIO",
  THIRD_PARTY_CAMERA_CREATE = "THIRD_PARTY_CAMERA_CREATE",
  THIRD_PARTY_CAMERA_DELETE = "THIRD_PARTY_CAMERA_DELETE",
  THIRD_PARTY_CAMERA_UPDATED = "THIRD_PARTY_CAMERA_UPDATED",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_CORE",
  THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE = "THIRD_PARTY_CAMERA_ASSIGNED_TO_LITE",
  THIRD_PARTY_CAMERA_UNASSIGNED = "THIRD_PARTY_CAMERA_UNASSIGNED",
  THIRD_PARTY_CAMERA_PASSWORD_CREATE = "THIRD_PARTY_CAMERA_PASSWORD_CREATE",
  THIRD_PARTY_CAMERA_PASSWORD_DELTE = "THIRD_PARTY_CAMERA_PASSWORD_DELTE",
  UNKNOWN = "UNKNOWN",
}

export enum SimpleDiagnosticEventDiagnosticEventEnum {
  CAMERA_CONNECTED = "CAMERA_CONNECTED",
  CAMERA_DISCONNECTED = "CAMERA_DISCONNECTED",
  STARTUP = "STARTUP",
  UPDATE_STARTED = "UPDATE_STARTED",
  UPDATE_FIRMWARE_DOWNLOADED = "UPDATE_FIRMWARE_DOWNLOADED",
  UPDATE_FIRMWARE_APPLIED = "UPDATE_FIRMWARE_APPLIED",
  UPDATE_STARTING_REBOOT = "UPDATE_STARTING_REBOOT",
  UPDATE_FAILED_MD5_MISMATCH = "UPDATE_FAILED_MD5_MISMATCH",
  UPDATE_FAILED_ACCESS_DENIED = "UPDATE_FAILED_ACCESS_DENIED",
  UPDATE_FAILED_MITM = "UPDATE_FAILED_MITM",
  UPDATE_FAILED_CONNNECTION_REFUSED = "UPDATE_FAILED_CONNNECTION_REFUSED",
  UPDATE_FAILED_CONNNECTION_TIMEOUT = "UPDATE_FAILED_CONNNECTION_TIMEOUT",
  UPDATE_FAILED_CONNECTION_REFUSED = "UPDATE_FAILED_CONNECTION_REFUSED",
  UPDATE_FAILED_CONNECTION_TIMEOUT = "UPDATE_FAILED_CONNECTION_TIMEOUT",
  UPDATE_FAILED_DNS_FAILURE = "UPDATE_FAILED_DNS_FAILURE",
  UPDATE_RUNNING = "UPDATE_RUNNING",
  BLE_CONNECTED = "BLE_CONNECTED",
  BLE_CONNECTION_FAILED = "BLE_CONNECTION_FAILED",
  BLE_DISCONNECTED = "BLE_DISCONNECTED",
  BLE_OP_SUCCESS = "BLE_OP_SUCCESS",
  BLE_OP_FAILURE = "BLE_OP_FAILURE",
  UPLOAD_CLIP_SUCCESS = "UPLOAD_CLIP_SUCCESS",
  UPLOAD_CLIP_FAILURE = "UPLOAD_CLIP_FAILURE",
  NOTIFICATION_FAILURE = "NOTIFICATION_FAILURE",
  USB_FAILURE_REBOOT = "USB_FAILURE_REBOOT",
  PERSISTENT_STORAGE_FAILURE = "PERSISTENT_STORAGE_FAILURE",
  PING = "PING",
  FORCED_REBOOT = "FORCED_REBOOT",
  AUTO_REBOOT = "AUTO_REBOOT",
  AUDIO_HARDWARE_NOT_DETECTED = "AUDIO_HARDWARE_NOT_DETECTED",
  ENCRYPTED_CONTAINER_FAILURE_CREATE = "ENCRYPTED_CONTAINER_FAILURE_CREATE",
  ENCRYPTED_CONTAINER_FAILURE_OPEN = "ENCRYPTED_CONTAINER_FAILURE_OPEN",
  ENCRYPTED_CONTAINER_FAILURE_MOUNT = "ENCRYPTED_CONTAINER_FAILURE_MOUNT",
  VIDEO_HARDWARE_FAILURE = "VIDEO_HARDWARE_FAILURE",
  WIFI_NETWORK_CHANGED = "WIFI_NETWORK_CHANGED",
  AI_ENGINE_DOWNLOADED = "AI_ENGINE_DOWNLOADED",
  AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH = "AI_ENGINE_DOWNLOAD_FAILED_MD5_MISMATCH",
  AI_ENGINE_CONFIGURED = "AI_ENGINE_CONFIGURED",
  AI_ENGINE_CONFIGURATION_FAILED = "AI_ENGINE_CONFIGURATION_FAILED",
  MITM_FAILURE = "MITM_FAILURE",
  SERVER_RECONNECT = "SERVER_RECONNECT",
  AP_CHANGED = "AP_CHANGED",
  WATCHDOG_KILLED_AGENT = "WATCHDOG_KILLED_AGENT",
  WATCHDOG_DID_RESET = "WATCHDOG_DID_RESET",
  CLIMATE_OFFLINE = "CLIMATE_OFFLINE",
  CLIMATE_ONLINE = "CLIMATE_ONLINE",
  CLIMATE_LOW_BATTERY = "CLIMATE_LOW_BATTERY",
  CLIMATE_PROBE_CONNECTED = "CLIMATE_PROBE_CONNECTED",
  CLIMATE_PROBE_DISCONNECTED = "CLIMATE_PROBE_DISCONNECTED",
  DOOR_OFFLINE = "DOOR_OFFLINE",
  DOOR_ONLINE = "DOOR_ONLINE",
  DOOR_LOW_BATTERY = "DOOR_LOW_BATTERY",
  OCCUPANCY_SENSOR_ONLINE = "OCCUPANCY_SENSOR_ONLINE",
  OCCUPANCY_SENSOR_OFFLINE = "OCCUPANCY_SENSOR_OFFLINE",
  OCCUPANCY_SENSOR_LOW_BATTERY = "OCCUPANCY_SENSOR_LOW_BATTERY",
  BUTTON_OFFLINE = "BUTTON_OFFLINE",
  BUTTON_ONLINE = "BUTTON_ONLINE",
  BUTTON_LOW_BATTERY = "BUTTON_LOW_BATTERY",
  PROXIMITY_LOW_BATTERY = "PROXIMITY_LOW_BATTERY",
  DOOR_CONTROLLER_CONNECTED = "DOOR_CONTROLLER_CONNECTED",
  DOOR_CONTROLLER_DISCONNECTED = "DOOR_CONTROLLER_DISCONNECTED",
  APERIO_LOW_BATTERY = "APERIO_LOW_BATTERY",
  APERIO_FLAT_BATTERY = "APERIO_FLAT_BATTERY",
  APERIO_OK_BATTERY = "APERIO_OK_BATTERY",
  APERIO_GW_CONNECTED = "APERIO_GW_CONNECTED",
  APERIO_GW_DISCONNECTED = "APERIO_GW_DISCONNECTED",
  BADGE_READER_CONNECTED = "BADGE_READER_CONNECTED",
  BADGE_READER_DISCONNECTED = "BADGE_READER_DISCONNECTED",
  REBOOT = "REBOOT",
  NETWORK_INTERRUPTION = "NETWORK_INTERRUPTION",
  OPENPATH_WEBHOOK_FAILURE = "OPENPATH_WEBHOOK_FAILURE",
  TOAST_WEBHOOK_FAILURE = "TOAST_WEBHOOK_FAILURE",
  KISI_WEBHOOK_FAILURE = "KISI_WEBHOOK_FAILURE",
  BRIVO_WEBHOOK_FAILURE = "BRIVO_WEBHOOK_FAILURE",
  HALO_WEBHOOK_FAILURE = "HALO_WEBHOOK_FAILURE",
  SALTO_WEBHOOK_FAILURE = "SALTO_WEBHOOK_FAILURE",
  SQUARE_WEBHOOK_FAILURE = "SQUARE_WEBHOOK_FAILURE",
  BUTTERFLYMX_WEBHOOK_FAILURE = "BUTTERFLYMX_WEBHOOK_FAILURE",
  ENVOY_WEBHOOK_FAILURE = "ENVOY_WEBHOOK_FAILURE",
  GENEA_WEBHOOK_FAILURE = "GENEA_WEBHOOK_FAILURE",
  PRODATAKEY_WEBHOOK_FAILURE = "PRODATAKEY_WEBHOOK_FAILURE",
  AMT_WEBHOOK_FAILURE = "AMT_WEBHOOK_FAILURE",
  PLACEOS_WEBHOOK_FAILURE = "PLACEOS_WEBHOOK_FAILURE",
  OMNIALERT_WEBHOOK_FAILURE = "OMNIALERT_WEBHOOK_FAILURE",
  FLIC_WEBHOOK_FAILURE = "FLIC_WEBHOOK_FAILURE",
  PIMLOC_WEBHOOK_FAILURE = "PIMLOC_WEBHOOK_FAILURE",
  NINEONEONECELLULAR_WEBHOOK_FAILURE = "NINEONEONECELLULAR_WEBHOOK_FAILURE",
  CV_FAILURE = "CV_FAILURE",
  NFC_HW_FAILURE = "NFC_HW_FAILURE",
  CONFIG_ERROR = "CONFIG_ERROR",
  HW_FAILURE = "HW_FAILURE",
  KEYPAD_ONLINE = "KEYPAD_ONLINE",
  KEYPAD_OFFLINE = "KEYPAD_OFFLINE",
  ALM_OVERAGE_APPROACHING = "ALM_OVERAGE_APPROACHING",
  ALM_OVERAGE_REACHED = "ALM_OVERAGE_REACHED",
  ALM_OVERAGE_EXCEEDED = "ALM_OVERAGE_EXCEEDED",
  ALM_EXCESSIVE_VERIFICATIONS = "ALM_EXCESSIVE_VERIFICATIONS",
  KIOSK_OFFLINE = "KIOSK_OFFLINE",
  KIOSK_ONLINE = "KIOSK_ONLINE",
  TUNNELED_DEVICE_CONNECTED = "TUNNELED_DEVICE_CONNECTED",
  TUNNELED_DEVICE_DISCONNECTED = "TUNNELED_DEVICE_DISCONNECTED",
  SD_CARD_CHANGED = "SD_CARD_CHANGED",
  SUPERVISION_CUT_DETECTED = "SUPERVISION_CUT_DETECTED",
  SUPERVISION_SHORT_DETECTED = "SUPERVISION_SHORT_DETECTED",
  SUPERVISION_INVALID_SETUP = "SUPERVISION_INVALID_SETUP",
  THIRD_PARTY_DEVICE_CONNECTED = "THIRD_PARTY_DEVICE_CONNECTED",
  THIRD_PARTY_DEVICE_DISCONNECTED = "THIRD_PARTY_DEVICE_DISCONNECTED",
  UNKNOWN = "UNKNOWN",
}

export enum SplicedClipStatusEnum {
  INITIATING = "INITIATING",
  UPLOADING = "UPLOADING",
  RENDERING = "RENDERING",
  FAILED = "FAILED",
  COMPLETE = "COMPLETE",
  OFFLINE = "OFFLINE",
  UNKNOWN = "UNKNOWN",
}

export enum StreamTypeEnum {
  USER = "USER",
  ALARM_MONITORING = "ALARM_MONITORING",
  DICE = "DICE",
  LUMEO = "LUMEO",
  INFORMACAST = "INFORMACAST",
  RAPIDSOS = "RAPIDSOS",
  UNKNOWN = "UNKNOWN",
}

export enum SupervisionModeEnumType {
  CUT_DETECT = "CUT_DETECT",
  SHORT_DETECT = "SHORT_DETECT",
  CUT_AND_SHORT_DETECT = "CUT_AND_SHORT_DETECT",
}

export enum SupervisionStateEnumType {
  CUT_DETECTED = "CUT_DETECTED",
  SHORT_DETECTED = "SHORT_DETECTED",
  NORMAL = "NORMAL",
  INVALID = "INVALID",
  UNKNOWN = "UNKNOWN",
}

export enum SupportAuthorityAuthorityTypeEnum {
  PARTNER_SUPPORT = "PARTNER_SUPPORT",
  RHOMBUS_SUPPORT = "RHOMBUS_SUPPORT",
}

export enum SupportAuthorityWSAuthorityTypeEnum {
  PARTNER_SUPPORT = "PARTNER_SUPPORT",
  RHOMBUS_SUPPORT = "RHOMBUS_SUPPORT",
}

export enum ThirdPartyCameraSettingsPtzEngineEnum {
  DIGITAL = "DIGITAL",
  MECHANICAL = "MECHANICAL",
  NONE = "NONE",
  UNKNOWN = "UNKNOWN",
}

export enum ThirdPartyCameraSettingsPtzMovementEnum {
  RELATIVE = "RELATIVE",
  ABSOLUTE = "ABSOLUTE",
}

export enum ThirdPartyCameraSettingsPtzTranslationSpaceEnum {
  FOV = "FOV",
  DIGITAL = "DIGITAL",
  NONE = "NONE",
  UNKNOWN = "UNKNOWN",
}

export enum ThreatCaseStatusEnum {
  INITIATED = "INITIATED",
  REQUESTED = "REQUESTED",
  FOLLOW_ON = "FOLLOW_ON",
  ESCALATED = "ESCALATED",
  PSAP_CONTACTED = "PSAP_CONTACTED",
  VERIFIED = "VERIFIED",
  DISMISSED = "DISMISSED",
  CANCELLED = "CANCELLED",
  UNVERIFIABLE = "UNVERIFIABLE",
  TIMEOUT = "TIMEOUT",
  ERROR = "ERROR",
  CLOSED = "CLOSED",
}

export enum ThreatCaseTimelineEventTypeEnum {
  ALERT = "ALERT",
  DELAYED_ALERT = "DELAYED_ALERT",
  USER = "USER",
  SERVICE_PROVIDER = "SERVICE_PROVIDER",
  ERROR = "ERROR",
  PANIC_BUTTON = "PANIC_BUTTON",
  ACCESS_CONTROL_INTEGRATION = "ACCESS_CONTROL_INTEGRATION",
  UNKNOWN = "UNKNOWN",
}

export enum TimelapseClipClipFormatEnum {
  MPEG = "MPEG",
  GIF = "GIF",
}

export enum TimelapseStatusStateEnum {
  INITIATED = "INITIATED",
  INPROGRESS = "INPROGRESS",
  COMPLETE = "COMPLETE",
  FAILED = "FAILED",
}

export enum UnHealthyDeviceAlertSymptomEnum {
  POLICY_NOT_ASSIGNED = "POLICY_NOT_ASSIGNED",
  DOWN = "DOWN",
  SLOW_INTERNET = "SLOW_INTERNET",
}

export enum UserMetadataEnum {
  NAME = "NAME",
  FIRST_NAME = "FIRST_NAME",
  LAST_NAME = "LAST_NAME",
  EMAIL = "EMAIL",
}

export enum ChangeUserPasswordWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum CreateUserWSRequestAccessibleRhombusAppsEnum {
  PARTNER = "PARTNER",
  CONSOLE = "CONSOLE",
  RHOMBUS_KEY = "RHOMBUS_KEY",
  UNKNOWN = "UNKNOWN",
}

export enum CreateUserWSResponseResponseStatusEnum {
  BASIC_AUTH_FAILED = "BASIC_AUTH_FAILED",
  PASSWORD_MISMATCH = "PASSWORD_MISMATCH",
  SAME_PASSWORD = "SAME_PASSWORD",
  USER_EXISTS = "USER_EXISTS",
  USER_NOT_FOUND = "USER_NOT_FOUND",
  DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND",
  POLICY_NOT_FOUND = "POLICY_NOT_FOUND",
  LOCATION_NOT_FOUND = "LOCATION_NOT_FOUND",
  ORG_NOT_FOUND = "ORG_NOT_FOUND",
  BAD_INPUT = "BAD_INPUT",
  SUCCESS = "SUCCESS",
  PASSWORD_TOO_SHORT = "PASSWORD_TOO_SHORT",
}

export enum VideoSimilarityModelEnum {
  CHRIS_POSE_512 = "CHRIS_POSE_512",
  CHRIS_BOX_512 = "CHRIS_BOX_512",
  UNKNOWN = "UNKNOWN",
}

export enum WeeklyRepeatingScheduleStrategyEnum {
  WEEKLY_REPEATING_MINUTES = "WEEKLY_REPEATING_MINUTES",
  ABSOLUTE_SECONDS = "ABSOLUTE_SECONDS",
  REALTIME_RELATIVE_SECONDS = "REALTIME_RELATIVE_SECONDS",
  RELATIVE_DATETIME_INTERVALS = "RELATIVE_DATETIME_INTERVALS",
}

export enum WiegandDataPhysicalPortEnumType {
  WIEGAND_INPUT = "WIEGAND_INPUT",
}

export enum WiegandFormatEnumType {
  H10301 = "H10301",
  D10202 = "D10202",
  H10304 = "H10304",
  H10302 = "H10302",
  WIEGAND_64BIT_RAW = "WIEGAND_64BIT_RAW",
  HID_CORP1000 = "HID_CORP1000",
}

export enum WiegandInputPhysicalPortEnumType {
  WIEGAND_INPUT = "WIEGAND_INPUT",
  GPIO_INPUT = "GPIO_INPUT",
}

export enum WiegandOutputPhysicalPortEnumType {
  WIEGAND_OUTPUT = "WIEGAND_OUTPUT",
}

export enum WrappedRhombusOrgUserAccessibleRhombusAppsEnum {
  PARTNER = "PARTNER",
  CONSOLE = "CONSOLE",
  RHOMBUS_KEY = "RHOMBUS_KEY",
  UNKNOWN = "UNKNOWN",
}

export enum WrappedRhombusOrgUserMfaTokenTypeEnum {
  EMAIL = "EMAIL",
  SMS = "SMS",
  VIRTUAL_MFA = "VIRTUAL_MFA",
}

export enum WrappedRhombusOrgUserStatusEnum {
  JOINED = "JOINED",
  PENDING = "PENDING",
  INACTIVE = "INACTIVE",
  UNKNOWN = "UNKNOWN",
}

export enum ZapierEnum {
  BUTTON_EVENTS = "BUTTON_EVENTS",
  DOOR_SENSOR_EVENTS = "DOOR_SENSOR_EVENTS",
  ENVIRONMENTAL_SENSOR_EVENTS = "ENVIRONMENTAL_SENSOR_EVENTS",
  RULE_EVENTS = "RULE_EVENTS",
}

export enum ZapierWebhookSettingsDoorStateEnum {
  OPEN = "OPEN",
  CLOSED = "CLOSED",
  AJAR = "AJAR",
}

